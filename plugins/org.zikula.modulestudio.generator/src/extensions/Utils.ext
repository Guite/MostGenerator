import modulestudio;


/* app related functions */
cached String msVersion() :
    "0.5 beta";
cached String msUrl() :
    "http://modulestudio.de";



/* not used yet, just for testing */
cached String constantName(Action this) :
	"ACTION_" + name.toUpperCase();
 
cached String constantName(ActionEvent this) :
	"EVENT_" + name.toUpperCase();


/*
 * naming extensions
 */
cached String appName(Application this) :
	applicationName(name).toFirstUpper();

cached String applicationName(String s)
	: JAVA extensions.Utils.applicationName(java.lang.String);
cached String capitalName(String s)
	: applicationName(s).toFirstUpper();
cached String dbName(String s)
	: JAVA extensions.Utils.dbName(java.lang.String);
cached String formattedName(String s)
	: JAVA extensions.Utils.formattedName(java.lang.String);
cached String formattedNameCapitalized(String s)
	: JAVA extensions.Utils.formattedNameCapitalized(java.lang.String);


cached boolean needsConfig(Application this) :
	models.variables.vars.size > 0;


cached String fullEntityName(Entity this) :
	dbName(container.application.prefix + '_' + name);

cached String getLeadObj(Application application)
	: applicationName(application.models.entities.select(e|e.leading == true).get(0).name);

cached String idField(Entity entity)
	: dbName(entity.fields.typeSelect(IntegerField).select(e|e.primaryKey == true).get(0).name);

cached boolean hasActions(Controller controller, String type) :
	switch (type) {
	   case 'main'     : controller.actions.typeSelect(MainAction).size > 0 
	   case 'view'     : controller.actions.typeSelect(ViewAction).size > 0 
	   case 'display'  : controller.actions.typeSelect(DisplayAction).size > 0 
	   case 'edit'     : controller.actions.typeSelect(EditAction).size > 0
	   case 'delete'   : controller.actions.typeSelect(DeleteAction).size > 0
	   case 'custom'   : controller.actions.typeSelect(CustomAction).size > 0 
	   default : false 
	};


/*
 * extensions that are independent of a specific model element,
 */

cached String timestamp()
	: JAVA extensions.Utils.timestamp();

cached String subTask(Object monitor, String title)
	: JAVA extensions.Utils.subTask(org.eclipse.core.runtime.IProgressMonitor, java.lang.String);
