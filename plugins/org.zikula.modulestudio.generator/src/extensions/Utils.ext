
import modulestudio;
extension org::eclipse::xtend::util::stdlib::io;


/* app related functions */
cached String msVersion() :
    "0.5 beta";
cached String msUrl() :
    "http://modulestudio.de";



/* not used yet, just for testing */
cached String constantName(Action this) :
	"ACTION_" + name.toUpperCase();
 
cached String constantName(ActionEvent this) :
	"EVENT_" + name.toUpperCase();

// ugly (and temporary) way to bypass that EfficientLazyString can not be compared
cached String msconcat(String a, String b) :
    a.replaceAll(a, a + b);

/*
 * naming extensions
 */
cached String appName(Application this) :
	applicationName(name).toFirstUpper();

cached String applicationName(String s)
	: JAVA extensions.Utils.applicationName(java.lang.String);
cached String capitalName(String s)
	: applicationName(s).toFirstUpper();
cached String dbName(String s)
	: JAVA extensions.Utils.dbName(java.lang.String);
cached String formattedName(String s)
	: JAVA extensions.Utils.formattedName(java.lang.String);
cached String formattedNameCapitalized(String s)
	: JAVA extensions.Utils.formattedNameCapitalized(java.lang.String);


cached boolean needsConfig(Application this) :
	models.variables.vars.size > 0;


// we have to go the ugly way here to bypass that EfficientLazyString can not be compared
cached String fullEntityName(Entity this)
    : dbName(name).msconcat("_").msconcat(dbName(container.application.prefix));



// return model container which are default data sources
cached getDefaultDataSource(Application this)
    : models.select(e | e.isDefaultDataSource == true).get(0);

// return all entities with leading = true
cached getLeadingEntity(Application this)
    : models.entities.select(e | e.leading == true).get(0);
// return all derived fields (excluding calculated fields)
cached getDerivedFields(Entity this)
    : fields.typeSelect(DerivedField);
cached getDerivedFieldsWithAlias(Entity this)
    : getDerivedFields().select(e | e.alias != null && e.alias != "");
// return all fields with leading = true
cached getLeadingField(Entity this)
    : getDerivedFields().select(e | e.leading == true).get(0);
// return all fields with primaryKey = true
cached getPrimaryKeyField(Entity this)
    : getDerivedFields(this).select(e | e.primaryKey == true).get(0);



cached String getLeadObj(Application application)
    : applicationName(application.models.entities.select(e|e.leading == true).get(0).name);

cached String idField(Entity entity)
    : entity.getPrimaryKeyField().name.dbName();

cached String idFieldName(Entity this)
    : name.toString().msconcat('id');



// return all join relations (excluding inheritance)
cached getJoinRelations(Models this)
    : relations.typeSelect(JoinRelationship);
cached getJoinRelationsWithAlias(Models this)
    : getJoinRelations(this).select(e|e.alias != null && e.alias != "");





cached boolean hasActions(Controller controller, String type) :
	switch (type) {
	   case 'main'     : controller.actions.typeSelect(MainAction).size > 0 
	   case 'view'     : controller.actions.typeSelect(ViewAction).size > 0 
	   case 'display'  : controller.actions.typeSelect(DisplayAction).size > 0 
	   case 'edit'     : controller.actions.typeSelect(EditAction).size > 0
	   case 'delete'   : controller.actions.typeSelect(DeleteAction).size > 0
	   case 'custom'   : controller.actions.typeSelect(CustomAction).size > 0 
	   default : false 
	};


/*
 * extensions that are independent of a specific model element,
 */

cached String timestamp()
	: JAVA extensions.Utils.timestamp();

cached String subTask(Object monitor, String title)
    : (monitor != null) ? subTaskJava(monitor, title) : "";

cached String subTaskJava(Object monitor, String title)
	: JAVA extensions.Utils.subTask(org.eclipse.core.runtime.IProgressMonitor, java.lang.String);
