«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH controllers.controllers.actions.typeSelect(EditAction)-»
«ENDDEFINE»

«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Application app) FOR Action-»
    «EXPAND Root(app, controller, 'edit') FOREACH app.models.entities-»
«ENDDEFINE»


«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Application app, Controller controller, String actionName) FOR Entity-»
«info("Generating edit form templates for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«FILE editTemplateFile(controller, name, actionName)-»
«EXPAND FormTemplate(app, controller, actionName)-»
«ENDFILE»
«EXPAND FormComponents::Relations::Root(app, controller, false, true) FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND FormComponents::Relations::Root(app, controller, false, false) FOREACH outgoing.typeSelect(JoinRelationship)-»
«ENDDEFINE»

«DEFINE FormTemplate(Application app, Controller controller, String actionName) FOR Entity-»
«LET name.formatForDB() AS entityName-»
{* purpose of this template: build the Form to «actionName.formatForDisplay()» an instance of «name.formatForDisplay()» *}

{include file="«controller.name()»/header.tpl"}
{pageaddvar name="javascript" value="modules/«app.appName()»/javascript/«app.appName()»_editFunctions.js"}

{if $mode eq "edit"}
    {gt text='Edit «name.formatForDisplay()»' assign="templateTitle"}
«IF controller.metaType == AdminController-»
    {assign var="adminpageicon" value="edit.gif"}
«ENDIF-»
{elseif $mode eq "create"}
    {gt text='Create «name.formatForDisplay()»' assign="templateTitle"}
«IF controller.metaType == AdminController-»
    {assign var="adminpageicon" value="filenew.gif"}
«ENDIF-»
{else}
    {gt text='Edit «name.formatForDisplay()»' assign="templateTitle"}
«IF controller.metaType == AdminController-»
    {assign var="adminpageicon" value="edit.gif"}«REM»TODO«ENDREM»
«ENDIF-»
{/if}

«IF controller.metaType == AdminController-»
<div class="z-admincontainer">
<div class="z-adminpageicon">{img modname="core" src=$adminpageicon set="icons/large" alt=$templateTitle}</div>
«ELSE-»
<div class="z-frontendcontainer">
«ENDIF-»

{pagesetvar name="title" value=$templateTitle}
<h2>{$templateTitle}</h2>
<br />
{form «IF hasUploadFields()»enctype="multipart/form-data" «ENDIF»cssClass="z-form"}

    {* add validation summary and a <div> element for styling the form *}
    {«app.appName().formatForDB()»FormFrame}
    {*formvalidationsummary*}
    {*formerrormessage id=error*}

    {formsetinitialfocus inputId="«getDerivedFields().reject(e|e.primaryKey).get(0).actualFieldName().formatForCode()»"}
«REM»{formsetinitialfocus inputId=PluginId doSelect=true} <-- for dropdown lists (performs input.select())«ENDREM»«""-»

    <fieldset>
        <legend>{gt text='Content'}</legend>
«REM»No input fields for primary key, array fields and object fields«ENDREM»«""-»
«FOREACH getDerivedFields().reject(e|e.primaryKey || e.metaType == ArrayField || e.metaType == ObjectField) AS field-»
«REM»No input fields for foreign keys, relations are processed further down«ENDREM»«""-»
«IF incoming.typeSelect(JoinRelationship).select(e|e.source.idField() == field.name.formatForDB()).isEmpty-»
        <div class="z-formrow">
            «EXPAND FormComponents::SimpleFields::FormRow FOR field»«""-»
        </div>
«ENDIF-»
«ENDFOREACH-»
    </fieldset>
«IF standardFields-»
    {if $mode ne "create"}
        {include file="«controller.name()»/include_metadata_edit.tpl"}
    {/if}
«ENDIF-»
«EXPAND FormComponents::Relations::Root(controller, true, true) FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND FormComponents::Relations::Root(controller, true, false) FOREACH outgoing.typeSelect(JoinRelationship)-»

    {if $mode eq "edit"}
        {modcallhooks hookobject="item" hookaction="modify" module="«app.appName()»" hookid="«name.formatForDB()»`$«idField()»`" implode=false}
    {elseif $mode eq "create"}
        {modcallhooks hookobject="item" hookaction="new" module="«app.appName()»" implode=false}
    {else}
        {modcallhooks hookobject="item" hookaction="modify" module="«app.appName()»" hookid="«name.formatForDB()»`$«idField()»`" implode=false}
    {/if}
    {if is_array($hooks) && isset($hooks[0])}
        <fieldset>
            <legend>{gt text='Hooks'}</legend>
            {foreach key="hookName" item="hook" from=$hooks}
            <div class="z-formrow">
                {$hook}
            </div>
            {/foreach}
        </fieldset>
    {/if}

    {gt text='Really delete this «name.formatForDisplay()»?' assign="deleteConfirmMsg"}

    <div class="z-buttons z-formbuttons">
    {if $mode eq "edit"}
        {formbutton id="btnUpdate" commandName="update" __text='Update «name.formatForDisplay()»' class='z-bt-save'}
        {formbutton id="btnDelete" commandName="delete" __text='Delete «name.formatForDisplay()»' class='z-bt-delete' confirmMessage=$deleteConfirmMsg}
    {elseif $mode eq "create"}
        {formbutton id="btnCreate" commandName="create" __text='Create «name.formatForDisplay()»' class='z-bt-ok'}
    {else}
        {formbutton id="btnUpdate" commandName="update«REM»TODO«ENDREM»" __text='OK' class='z-bt-ok'}
    {/if}
        {formbutton id="btnCancel" commandName="cancel" __text='Cancel' class='z-bt-cancel'}
    </div>
  {/«app.appName().formatForDB()»FormFrame}
{/form}

«IF controller.metaType == AdminController-»
</div>
«ELSE-»
</div>
«ENDIF-»

<script type="text/javascript">
//<![CDATA[
{{img modname="core" set="icons/extrasmall" src="editdelete.gif" assign="removeImageArray"}}
    var removeImage = '<img src="{{$removeImageArray.src}}" width="16" height="16" alt="" />';

    document.observe('dom:loaded', function() {
«LET getUserFields() AS userFields-»
«IF userFields.size > 0-»
        // initialise auto completion for user fields
«FOREACH userFields AS userField-»
«LET userField.actualFieldName().formatForCode() AS realName»
        {{if $mode ne "create" && $«realName» gt 0}}
            $('«realName»desc').value = '{{usergetvar name=uname uid=$«realName»}}';
        {{/if}}
        «app.prefix()»InitUserField('«realName»', 'get«name.formatForCodeCapital()»«realName.formatForCodeCapital()»Users');
«ENDLET-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»

«REM»not ready yet
        «container.application.prefix()»InitCollectionItemsForm();
«ENDREM»

        var valid = new Validation('FormForm', {onSubmit: false, immediate : true});
        {{if $mode ne "create"}}
            var result = valid.validate();
        {{/if}}

        $('{{if $mode eq "create"}}btnCreate{{else}}btnUpdate{{/if}}').observe('click', function(event) {
            var result = valid.validate();
            if (!result) {
                Event.stop(event);
            }
            else {
                $$('div.z-formbuttons input').each(function(btn) {
                    btn.hide();
                });
            }
            return result;
        });

        Zikula.UI.Tooltips($$('.«app.appName().formatForDB()»FormTooltips'));
    });

//]]>
</script>

{include file="«controller.name()»/footer.tpl"}
«ENDLET-»
«ENDDEFINE»



