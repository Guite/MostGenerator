«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE Root FOR Application-»
«LET controllers.controllers.actions.typeSelect(EditAction) AS editActions-»
«IF !editActions.isEmpty-»
    «EXPAND Root(this) FOREACH editActions-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Application app) FOR Action-»
    «EXPAND Root(app, controller, 'edit') FOREACH app.models.entities-»
    «EXPAND InlineRedirectHandler(app) FOR controller-»
«ENDDEFINE»

«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Application app, Controller controller, String actionName) FOR Entity-»
«info("Generating edit form templates for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«FILE editTemplateFile(controller, name, actionName)-»
«EXPAND FormTemplate(app, controller, actionName)-»
«ENDFILE»
«EXPAND templates::zclassic::view::FormComponents::Relations::Root(app, controller, false, true) FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND templates::zclassic::view::FormComponents::Relations::Root(app, controller, false, false) FOREACH outgoing.typeSelect(JoinRelationship)-»
«ENDDEFINE»

«DEFINE FormTemplate(Application app, Controller controller, String actionName) FOR Entity-»
{* purpose of this template: build the Form to «actionName.formatForDisplay()» an instance of «name.formatForDisplay()» *}

{include file='«controller.name()»/header.tpl'}
{pageaddvar name='javascript' value='modules/«app.appName()»/javascript/«app.appName()»_editFunctions.js'}

{if $mode eq 'edit'}
    {gt text='Edit «name.formatForDisplay()»' assign='templateTitle'}
«IF controller.metaType == AdminController-»
    {assign var='adminpageicon' value='edit.gif'}
«ENDIF-»
{elseif $mode eq "create"}
    {gt text='Create «name.formatForDisplay()»' assign='templateTitle'}
«IF controller.metaType == AdminController-»
    {assign var='adminpageicon' value='filenew.gif'}
«ENDIF-»
{else}
    {gt text='Edit «name.formatForDisplay()»' assign='templateTitle'}
«IF controller.metaType == AdminController-»
    {assign var='adminpageicon' value='edit.gif'}«REM»TODO«ENDREM»
«ENDIF-»
{/if}

«IF controller.metaType == AdminController-»
<div class="z-admincontainer">
<div class="z-adminpageicon">{img modname='core' src=$adminpageicon set='icons/large' alt=$templateTitle}</div>
«ELSE-»
<div class="z-frontendcontainer">
«ENDIF-»

{pagesetvar name='title' value=$templateTitle}
<h2>{$templateTitle}</h2>
<br />
{form «IF hasUploadFields()»enctype='multipart/form-data' «ENDIF»cssClass='z-form'}

    {* add validation summary and a <div> element for styling the form *}
    {«app.appName().formatForDB()»FormFrame}
    {*formvalidationsummary*}
    {*formerrormessage id='error'*}

    {formsetinitialfocus inputId='«getDerivedFields().reject(e|e.primaryKey).get(0).actualFieldName().formatForCode()»'}
«REM»{formsetinitialfocus inputId='PluginId' doSelect=true} <-- for dropdown lists (performs input.select())«ENDREM»«""-»

    <fieldset>
        <legend>{gt text='Content'}</legend>
«REM»No input fields for primary key, array fields and object fields«ENDREM»«""-»
«FOREACH getDerivedFields().reject(e|e.primaryKey || e.metaType == ArrayField || e.metaType == ObjectField) AS field-»
«REM»No input fields for foreign keys, relations are processed further down«ENDREM»«""-»
«IF incoming.typeSelect(JoinRelationship).select(e|e.source.idField() == field.name.formatForDB()).isEmpty-»
        <div class="z-formrow">
            «EXPAND FormComponents::SimpleFields::FormRow FOR field»«""-»
        </div>
«ENDIF-»
«ENDFOREACH-»
    </fieldset>
«IF standardFields-»
    {if $mode ne 'create'}
        {include file='«controller.name()»/include_metadata_edit.tpl'}
    {/if}
«ENDIF-»
«EXPAND templates::zclassic::view::FormComponents::Relations::Root(app, controller, true, true) FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND templates::zclassic::view::FormComponents::Relations::Root(app, controller, true, false) FOREACH outgoing.typeSelect(JoinRelationship)-»

    {if $mode eq 'edit'}
        {modcallhooks hookobject='item' hookaction='modify' module='«app.appName()»' hookid='«name.formatForDB()»`$«idField()»`' implode=false}
    {elseif $mode eq 'create'}
        {modcallhooks hookobject='item' hookaction='new' module='«app.appName()»' implode=false}
    {else}
        {modcallhooks hookobject='item' hookaction='modify' module='«app.appName()»' hookid='«name.formatForDB()»`$«idField()»`' implode=false}
    {/if}
    {if is_array($hooks) && isset($hooks[0])}
        <fieldset>
            <legend>{gt text='Hooks'}</legend>
            {foreach key='hookName' item='hook' from=$hooks}
            <div class="z-formrow">
                {$hook}
            </div>
            {/foreach}
        </fieldset>
    {/if}

    {if $mode eq 'create'}
        <fieldset>
            <legend>{gt text='Return control'}</legend>
            <div class="z-formrow">
                {formlabel for='repeatcreation' __text='Create another item after save'}
                {formcheckbox id='repeatcreation' readOnly=false}
            </div>
        </fieldset>
    {/if}

    {gt text='Really delete this «name.formatForDisplay()»?' assign="deleteConfirmMsg"}

    <div class="z-buttons z-formbuttons">
    {if $mode eq 'edit'}
        {formbutton id='btnUpdate' commandName='update' __text='Update «name.formatForDisplay()»' class='z-bt-save'}
      {if !$inlineUsage}
        {formbutton id='btnDelete' commandName='delete' __text='Delete «name.formatForDisplay()»' class='z-bt-delete' confirmMessage=$deleteConfirmMsg}
      {/if}
    {elseif $mode eq 'create'}
        {formbutton id='btnCreate' commandName='create' __text='Create «name.formatForDisplay()»' class='z-bt-ok'}
    {else}
        {formbutton id='btnUpdate' commandName='update«REM»TODO«ENDREM»' __text='OK' class='z-bt-ok'}
    {/if}
        {formbutton id='btnCancel' commandName='cancel' __text='Cancel' class='z-bt-cancel'}
    </div>
  {/«app.appName().formatForDB()»FormFrame}
{/form}

«IF controller.metaType == AdminController-»
</div>
«ELSE-»
</div>
«ENDIF-»

{img src='xedit.gif' modname='core' set='icons/extrasmall' assign='editImageArray'}
{img src='editdelete.gif' modname='core' set='icons/extrasmall' assign='removeImageArray'}

<script type="text/javascript">
/* <![CDATA[ */
    var editImage = '<img src="{{$editImageArray.src}}" width="16" height="16" alt="" />';
    var removeImage = '<img src="{{$removeImageArray.src}}" width="16" height="16" alt="" />';
«LET incoming.typeSelect(JoinRelationship) AS incomingJoins-»
«LET outgoing.typeSelect(JoinRelationship) AS outgoingJoins-»
«IF !incomingJoins.isEmpty || !outgoingJoins.isEmpty-»
    var relationHandler = new Array();
«EXPAND FormComponents::Relations::InitJs(app, this, true, false) FOREACH incomingJoins-»
«EXPAND FormComponents::Relations::InitJs(app, this, false, false) FOREACH outgoingJoins-»
«ENDIF-»

    document.observe('dom:loaded', function() {
«LET getUserFields() AS userFields-»
«IF !userFields.isEmpty-»
        // initialise auto completion for user fields
«FOREACH userFields AS userField-»
«LET userField.actualFieldName().formatForCode() AS realName»
        {{if isset($«realName») && $«realName» gt 0}}
            $('«realName»Selector').value = '{{usergetvar name='uname' uid=$«realName»}}';
        {{/if}}
        «app.prefix()»InitUserField('«realName»', 'get«name.formatForCodeCapital()»«realName.formatForCodeCapital()»Users');
«ENDLET-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«EXPAND FormComponents::Relations::InitJs(app, this, true, true) FOREACH incomingJoins-»
«EXPAND FormComponents::Relations::InitJs(app, this, false, true) FOREACH outgoingJoins-»
«ENDLET-»
«ENDLET-»

«IF !getUniqueDerivedFields().reject(e|e.primaryKey).isEmpty-»
        Validation.add('validate-unique', 'Unique Check', function(val, elem) { «container.application.prefix()»UniqueCheck('«name.formatForCode()»', val, elem, {{if $mode eq 'create'}}0{{else}}{{$«idField()»}}{{/if}}); });//, options);
«ENDIF-»
        var valid = new Validation('FormForm', {onSubmit: false, immediate: true, focusOnError: false});
        {{if $mode ne 'create'}}
            var result = valid.validate();
        {{/if}}

        $('{{if $mode eq 'create'}}btnCreate{{else}}btnUpdate{{/if}}').observe('click', function(event) {
            var result = valid.validate();
            if (!result) {
                Event.stop(event);
            }
            else {
                $$('div.z-formbuttons input').each(function(btn) {
                    btn.hide();
                });
            }
            return result;
        });

        Zikula.UI.Tooltips($$('.«app.appName().formatForDB()»FormTooltips'));
    });

/* ]]> */
</script>

{include file='«controller.name()»/footer.tpl'}
«ENDDEFINE»

«DEFINE InlineRedirectHandler(Application app) FOR Controller-»
«FILE "templates/".msconcat(name()).msconcat("/inlineRedirectHandler.tpl")-»
{* purpose of this template: close an iframe from within this iframe *}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        {$jcssConfig}
        <script type="text/javascript" src="{getbaseurl}javascript/ajax/proto_scriptaculous.combined.min.js"></script>
        <script type="text/javascript" src="{getbaseurl}javascript/helpers/Zikula.js"></script>
        <script type="text/javascript" src="{getbaseurl}javascript/livepipe/livepipe.combined.min.js"></script>
        <script type="text/javascript" src="{getbaseurl}javascript/helpers/Zikula.UI.js"></script>
        <script type="text/javascript" src="{getbaseurl}modules/«app.appName()»/javascript/«app.appName()»_editFunctions.js"></script>
    </head>
    <body>
        <script type="text/javascript">
        /* <![CDATA[ */
            // close window from parent document
            document.observe('dom:loaded', function() {
                «app.prefix()»CloseWindowFromInside('{{$idPrefix}}', {{if $commandName eq 'create'}}{{$itemId}}{{else}}0{{/if}});«REM»value > 0 causes the auto completion being activated«ENDREM»
            });
        /* ]]> */
        </script>
    </body>
</html>

«ENDFILE»
«ENDDEFINE»

«REM»
A 'zparameters' parameter was added as a direct way to assign the values of
the form plugins attributes. For instance:
$attributes = {class:z-bt-ok; confirmMessage:Are you sure?}
{formbutton commandName='delete' __text='Delete' zparameters=$attributes}

The {linkbutton} now supports an image (through the {img} plugin), using the
new parameters 'imgset' and 'imgsrc'. imgset is default to 'icons/extrasmall'.
Examples:
{linkbutton commandName='edit' __text='Edit' imgsrc='edit.gif'}
or through the core CSS:
{linkbutton commandName='edit' __text='Edit' class='z-icon-es-edit'}
{button commandName='cancel' __text='Cancel' class='z-bt-cancel'}
«ENDREM»
