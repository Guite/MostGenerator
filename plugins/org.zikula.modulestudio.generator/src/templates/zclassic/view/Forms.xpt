«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH controllers.controllers.actions.typeSelect(EditAction)-»
«ENDDEFINE»

«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Application app) FOR Action-»
    «EXPAND Root(app.appName(), controller, 'edit') FOREACH app.models.entities-»
«ENDDEFINE»


«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(String appName, Controller controller, String actionName) FOR Entity-»
«info("Generating edit form templates for entity \"" + name + "\"") -> ""-»
«LET controller.name.formatForDB() AS controllerName-»
«FILE editTemplateFile(controller, name, actionName)-»
«EXPAND FormTemplate(appName, controller, actionName)-»
«ENDFILE»
«ENDLET-»
«ENDDEFINE»

«DEFINE FormTemplate(String appName, Controller controller, String actionName) FOR Entity-»
«LET controller.name.formatForDB() AS controllerName-»
«LET name.formatForDB() AS entityName-»
{* purpose of this template: build the Form to «actionName.formatForDisplay()» an instance of «name.formatForDisplay()» *}

{pageaddvar name="javascript" value="javascript/ajax/proto_scriptaculous.combined.min.js"}
{pageaddvar name="javascript" value="javascript/ajax/validation.min.js"}
«IF fields.typeSelect(UserField).size > 0-»
{pageaddvar name="javascript" value="javascript/helpers/Zikula.js"}
«ENDIF-»

{include file="«controllerName»/header.tpl"}

{if $mode eq "edit"}
    {gt text='Edit «name.formatForDisplay()»' assign="templateTitle"}
«IF controller.metaType == AdminController-»
    {assign var="adminpageicon" value="edit.gif"}
«ENDIF-»
{elseif $mode eq "create"}
    {gt text='Create «name.formatForDisplay()»' assign="templateTitle"}
«IF controller.metaType == AdminController-»
    {assign var="adminpageicon" value="filenew.gif"}
«ENDIF-»
{else}
    {gt text='Edit «name.formatForDisplay()»' assign="templateTitle"}
«IF controller.metaType == AdminController-»
    {assign var="adminpageicon" value="edit.gif"}«REM»TODO«ENDREM»
«ENDIF-»
{/if}

«IF controller.metaType == AdminController-»
<div class="z-admincontainer">
<div class="z-adminpageicon">{img modname="core" src=$adminpageicon set="icons/large" alt=$templateTitle}</div>
«ELSE-»
<div class="z-frontendcontainer">
«ENDIF-»

{pagesetvar name="title" value=$templateTitle}
<h2>{$templateTitle}</h2>
<br />
{form «IF fields.typeSelect(UploadField).size > 0»enctype="multipart/form-data" «ENDIF»cssClass="z-form"}

    {* add validation summary and a <div> element for styling the form *}
    {«appName.formatForDB()»FormFrame}
    {*formvalidationsummary*}«REM»CSS class summary: 'validationSummary z-errormsg'«ENDREM»
«REM»{formerrormessage id=error}«ENDREM»«""-»

    {formsetinitialfocus inputId="«fields.typeSelect(DerivedField).reject(e|e.primaryKey).get(0).actualFieldName().formatForCode()»"}
«REM»{formsetinitialfocus inputId=PluginId doSelect=true} <-- for dropdown lists (performs input.select())«ENDREM»«""-»

    <fieldset>
        <legend>{gt text='Content'}</legend>
«FOREACH fields.typeSelect(DerivedField).reject(e|e.primaryKey) AS field-»
«IF field.metaType != ArrayField && field.metaType != ObjectField-»
        <div class="z-formrow">
            «EXPAND FormRow FOR field»«""-»
        </div>
«ENDIF-»
«ENDFOREACH-»
    </fieldset>
«IF standardFields-»
    {if $mode ne "create"}
        {include file="«controllerName»/include_metadata_edit.tpl"}
    {/if}
«ENDIF-»

    {if $mode eq "edit"}
        {modcallhooks hookobject="item" hookaction="modify" module="«appName»" hookid="«name.formatForDB()»`$«idField()»`" implode=false}
    {elseif $mode eq "create"}
        {modcallhooks hookobject="item" hookaction="new" module="«appName»" implode=false}
    {else}
        {modcallhooks hookobject="item" hookaction="modify" module="«appName»" hookid="«name.formatForDB()»`$«idField()»`" implode=false}
    {/if}
    {if is_array($hooks) && isset($hooks[0])}
        <fieldset>
            <legend>{gt text='Hooks'}</legend>
            {foreach key="hookName" item="hook" from=$hooks}
            <div class="z-formrow">
                {$hook}
            </div>
            {/foreach}
        </fieldset>
    {/if}

    {gt text='Really delete this «name.formatForDisplay()»?' assign="deleteConfirmMsg"}

    <div class="z-buttons z-formbuttons">
    {if $mode eq "edit"}
        {formbutton id="btnUpdate" commandName="update" __text='Update «name.formatForDisplay()»' class='z-bt-save'}
        {formbutton id="btnDelete" commandName="delete" __text='Delete «name.formatForDisplay()»' class='z-bt-delete' confirmMessage=$deleteConfirmMsg}
    {elseif $mode eq "create"}
        {formbutton id="btnCreate" commandName="create" __text='Create «name.formatForDisplay()»' class='z-bt-ok'}
    {else}
        {formbutton id="btnUpdate" commandName="update«REM»TODO«ENDREM»" __text='OK' class='z-bt-ok'}
    {/if}
        {formbutton id="btnCancel" commandName="cancel" __text='Cancel' class='z-bt-cancel'}
    </div>
  {/«appName.formatForDB()»FormFrame}
{/form}

«IF controller.metaType == AdminController-»
</div>
«ELSE-»
</div>
«ENDIF-»

<script type="text/javascript">
//<![CDATA[

    document.observe('dom:loaded', function() {
        var valid = new Validation('FormForm', {onSubmit: false, immediate : true});
        {{if $mode ne "create"}}
            var result = valid.validate();
        {{/if}}

        $('{{if $mode eq "create"}}btnCreate{{else}}btnUpdate{{/if}}').observe('click', function(event) {
            var result = valid.validate();
            if (!result) {
                Event.stop(event);
            }
            else {
                $$('div.z-formbuttons input').each(function(btn) {
                    btn.hide();
                });
            }
            return result;
        });
    });

//]]>
</script>

{include file="«controllerName»/footer.tpl"}
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE FormRow FOR DerivedField-»
            {formlabel for="«actualFieldName().formatForCode()»" __text='«EXPAND FormLabel»'«IF mandatory» mandatorysym="1"«ENDIF»}«IF metaType == UploadField»<br />{* break required for Google Chrome *}«ENDIF»
«REM» visible=false html=1 FormStyledPlugin«ENDREM»«""-»
            «EXPAND FormField-»
«IF mandatory-»
            {«entity.container.application.appName().formatForDB()»ValidationError id="«actualFieldName().formatForCode()»" class="required"}
«ENDIF-»
            «EXPAND AdditionalValidationMessages-»
«ENDDEFINE»


«DEFINE FormLabel FOR EntityField-»
«error("Error: undefined entity field type " + metaType.toString() + " (code 902346)") -> ""-»
«ENDDEFINE»
«DEFINE FormLabel FOR DerivedField-»
«actualFieldName().formatForDisplayCapital()-»
«ENDDEFINE»
«DEFINE FormLabel FOR CalculatedField-»
«error("Error: undefined calculated field type " + metaType.toString() + " (code 902348)") -> ""-»
«ENDDEFINE»


«DEFINE FormLabel FOR IntegerField-»
«LET entity.incoming.typeSelect(JoinRelationship).select(e|e.source.idField() == name.formatForDB()) AS pointingRelations-»
«IF pointingRelations.size > 0-»
«LET pointingRelations.get(0) AS pointingRelation-»
«LET pointingRelation.source AS joiningEntity-»
«IF pointingRelation.sourceAlias != null && pointingRelation.sourceAlias != ""-»
«pointingRelation.sourceAlias.formatForDisplayCapital()-»
«ELSE-»
«IF pointingRelation.metaType == OneToOneRelationship-»«joiningEntity.name.formatForDisplayCapital()»«ELSE-»«joiningEntity.nameMultiple.formatForDisplayCapital()»«ENDIF-»«""-»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ELSE-»
«actualFieldName().formatForDisplayCapital()-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»



«DEFINE AdditionalValidationMessages FOR DerivedField-»«ENDDEFINE»
«DEFINE AdditionalValidationMessages FOR AbstractIntegerField-»
            {«entity.container.application.appName().formatForDB()»ValidationError id="«actualFieldName().formatForCode()»" class="validate-digits"}
«ENDDEFINE»
«DEFINE AdditionalValidationMessages FOR DecimalField-»
            {«entity.container.application.appName().formatForDB()»ValidationError id="«actualFieldName().formatForCode()»" class="validate-number"}
«ENDDEFINE»
«DEFINE AdditionalValidationMessages FOR FloatField-»
            {«entity.container.application.appName().formatForDB()»ValidationError id="«actualFieldName().formatForCode()»" class="validate-number"}
«ENDDEFINE»
«DEFINE AdditionalValidationMessages FOR EmailField-»
            {«entity.container.application.appName().formatForDB()»ValidationError id="«actualFieldName().formatForCode()»" class="validate-email"}
«ENDDEFINE»
«DEFINE AdditionalValidationMessages FOR UrlField-»
            {«entity.container.application.appName().formatForDB()»ValidationError id="«actualFieldName().formatForCode()»" class="validate-url"}
«ENDDEFINE»


«DEFINE FormField FOR EntityField-»
«error("Error: undefined entity field type " + metaType.toString() + " (code 902386)") -> ""-»
«ENDDEFINE»
«DEFINE FormField FOR DerivedField-»
«error("Error: undefined derived field type " + metaType.toString() + " (code 902387)") -> ""-»
«ENDDEFINE»
«DEFINE FormField FOR CalculatedField-»
«error("Error: undefined calculated field type " + metaType.toString() + " (code 902388)") -> ""-»
«ENDDEFINE»

«DEFINE FormField FOR BooleanField-»
            {formcheckbox id="«actualFieldName().formatForCode()»" readOnly=«readonly» __title='«actualFieldName().formatForDisplay()» ?'«IF mandatory» cssClass="required"«ENDIF»}
«REM» visible=false FormStyledPlugin«ENDREM»«""-»
«REM»
    var $group;                 // group name for sub arrays
«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR IntegerField-»
«LET entity.incoming.typeSelect(JoinRelationship).select(e|e.source.idField() == name.formatForDB()) AS pointingRelations-»
«IF pointingRelations.size > 0-»
«LET pointingRelations.get(0) AS pointingRelation-»
«LET pointingRelation.source AS joiningEntity-»
«REM»Join-selector; if the where param is an array then [0] is the DQL and [1] the place holder values [example: array('status = ?', 'XY')]. Otherwise use normal syntax like [where="active = true"].«ENDREM»«""-»
            {formdropdownrelationlist id="«joiningEntity.idField()»" mandatory=«mandatory.displayBool()» recordClass="«joiningEntity.implClassModelRecord()»" displayField="«joiningEntity.getLeadingField().actualFieldName().formatForCode()»" orderby="«joiningEntity.idField()»"«IF pointingRelation.metaType == OneToManyRelationship-»«REM» selectionMode="multiple"«ENDREM»«ENDIF-»}
«ENDLET-»
«ENDLET-»
«ELSE-»
            {formintinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' maxLength=«length»«IF minValue != 0 || maxValue != 0-» minValue=«minValue» maxValue=«maxValue»«ENDIF»«EXPAND FieldValidationCssClass»}
«REM»TODO: general attributes from FormTextInput«ENDREM»«""-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE FormField FOR FloatField-»
            {formfloatinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»'«EXPAND FieldValidationCssClass»}
«REM»TODO: general attributes from FormTextInput, minValue=123 maxValue=123«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR DecimalField-»
            {formfloatinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' maxLength=«(length+3+scale)»«EXPAND FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR StringField-»
            {formtextinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» readOnly=«readonly» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode="singleline" maxLength=«length»«EXPAND FieldValidationCssClass»}
«REM»TODO: visible=false    cssClass="myClass" FormStyledPlugin (width="80%", width="30em"), textMode="password" for password input fields«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR TextField-»«EXPAND FormFieldTextarea»«ENDDEFINE»

«DEFINE FormFieldTextarea FOR DerivedField-»
            {formtextinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode="multiline" rows="8" cols="50"«EXPAND FieldValidationCssClass»}
«REM»
    var $group;                     // group name for sub arrays
    var $size;                      // size of HTML input (number of characters)
«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR EmailField-»
            {formemailinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» readOnly=«readonly» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode="singleline" maxLength=«length»«EXPAND FieldValidationCssClass»}
«REM»TODO: visible=false cssClass="myClass" FormStyledPlugin (width="80%", width="30em")«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR UrlField-»
            {formurlinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» readOnly=«readonly» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode="singleline" maxLength=«length»«EXPAND FieldValidationCssClass»}
«REM»TODO: visible=false cssClass="myClass" FormStyledPlugin (width="80%", width="30em")«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR UploadField-»«REM»class="upload"«ENDREM»
            {formuploadinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» readOnly=«readonly»«EXPAND FieldValidationCssClass»}
«REM»TODO: visible=false FormStyledPlugin
    var $group;                     // group name for sub arrays
«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR UserField-»
«LET actualFieldName().formatForCode() AS realName»
            <div id="«realName»liveusersearch" class="«entity.container.application.appName().formatForDB()»LiveSearchUser z-hide">
                {formtextinput id="«realName»desc" mandatory=«mandatory» readOnly=«readonly» __title='Input a part of the user name to search' maxLength=«length» cssClass="«IF mandatory»required «ENDIF»validate-alphanum"}
                {img id="ajax_indicator" style="display: none" modname='core' set='icons/extrasmall' src="indicator_circle.gif" alt=""}
                <div id="«realName»desc_choices" class="«entity.container.application.appName().formatForDB()»AutoCompleteUser"></div>
                <script type="text/javascript">
                //<![CDATA[
                    {{if $mode ne "create" && $«realName» gt 0}}
                        $('«realName»desc').value = '{{usergetvar name=uname uid=$«realName»}}';
                    {{/if}}
                    $('«realName»liveusersearch').removeClassName('z-hide');
                    new Ajax.Autocompleter('«realName»desc', '«realName»desc_choices', Zikula.Config['baseURL'] + 'ajax.php?module=«entity.container.application.appName()»&func=get«entity.name.formatForCodeCapital()»«realName.formatForCodeCapital()»Users',
                        {
                            paramName: 'fragment',
                            minChars: 3,
                            afterUpdateElement: function(data) {
                                $('«realName»').value = $($(data).value).value;
                            }
                        }
                    );
                //]]>
                </script>
            </div>
            <input type="hidden" id="«realName»" name="«realName»" value="{«realName»}" />
            {if $mode ne "create" && $«realName»}<div class="z-formnote"><a href="{modurl modname="Users" type="admin" func="modify" userid=$«realName»}" title="{gt text="Switch to the user administration"}">{gt text="Manage user"}</a></div>{/if}
«IF mandatory-»
            {«entity.container.application.appName()»ValidationError id="«realName»" class="required"}
«ENDIF-»
            {«entity.container.application.appName()»ValidationError id="«realName»" class="validate-alphanum"}
«ENDLET»
«ENDDEFINE»

«REM»TODO: support formdropdownlist or formradiobutton«ENDREM»
«DEFINE FormField FOR EnumField-»«EXPAND FormFieldTextarea»«ENDDEFINE»

«REM»TODO: find a better way for editing«ENDREM»
«DEFINE FormField FOR BlobField-»«EXPAND FormFieldTextarea»«ENDDEFINE»

«DEFINE FormField FOR ClobField-»«EXPAND FormFieldTextarea»«ENDDEFINE»

«DEFINE FormField FOR TimestampField-»
            {if $mode == "edit"}
                {formdateinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' includeTime=true}
            {else}
                {formdateinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' includeTime=true defaultValue="now"}
            {/if}
«REM»TODO: general attributes from FormTextInput«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR DateField-»«REM»class="date"«ENDREM»
            {if $mode == "edit"}
                {formdateinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' useSelectionMode=true}
            {else}
                {formdateinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' useSelectionMode=true defaultValue="today"}
            {/if}
«REM»TODO: general attributes from FormTextInput«ENDREM»«""-»
«ENDDEFINE»

«REM»TODO: support time fields in Zikula core«ENDREM»
«DEFINE FormField FOR TimeField-»
            {formtextinput id="«actualFieldName().formatForCode()»" mandatory=«mandatory» readOnly=«readonly» __title='Input the «actualFieldName().formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode="singleline" maxLength=8}
«REM»TODO: visible=false    cssClass="myClass" FormStyledPlugin (width="80%", width="30em"), textMode="password" for password input fields«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR GzipField-»«EXPAND FormFieldTextarea»«ENDDEFINE»

«DEFINE FieldValidationCssClass FOR DerivedField-»«IF mandatory» cssClass="required"«ENDIF»«ENDDEFINE»
«DEFINE FieldValidationCssClass FOR AbstractIntegerField-» cssClass="«IF mandatory»required «ENDIF»validate-digits"«ENDDEFINE»
«DEFINE FieldValidationCssClass FOR DecimalField-» cssClass="«IF mandatory»required «ENDIF»validate-number"«ENDDEFINE»
«DEFINE FieldValidationCssClass FOR FloatField-» cssClass="«IF mandatory»required «ENDIF»validate-number"«ENDDEFINE»
«DEFINE FieldValidationCssClass FOR EmailField-» cssClass="«IF mandatory»required «ENDIF»validate-email"«ENDDEFINE»
«DEFINE FieldValidationCssClass FOR UrlField-» cssClass="«IF mandatory»required «ENDIF»validate-url"«ENDDEFINE»



