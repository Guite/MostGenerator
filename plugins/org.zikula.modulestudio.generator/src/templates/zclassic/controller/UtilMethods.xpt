«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»start point for the Util class creation«ENDREM»
«DEFINE Root FOR Application»
    «FILE "lib/".msconcat(appName()).msconcat("/Base/Util.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND CommonFunctionsBase-»«ENDFILE»
    «FILE "lib/".msconcat(appName()).msconcat("/Util.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND CommonFunctionsImpl-»«ENDFILE»
«ENDDEFINE»

«DEFINE CommonFunctionsBase FOR Application-»
/**
 * Utility helper base class
 */
class «appName()»_Base_Util
{
    /**
     * Returns an array of all allowed object types in «appName()».
     *
     * @param        context        string        usage context (allowed values: controllerAction, actionHandler, block, contentType, mailz)
     * @param        args           array         additional arguments
     * @return array list of allowed object types
     */
    public static function getObjectTypes($context = '', $args = array())
    {
        if (!in_array($context, array('controllerAction', 'actionHandler', 'block', 'contentType', 'mailz'))) {
            $context = 'controllerAction';
        }

        $allowedObjectTypes = array();
«FOREACH models.entities AS entity-»
        $allowedObjectTypes[] = '«entity.name.formatForCode()»';
«ENDFOREACH-»
        return $allowedObjectTypes;
    }

    /**
     * Utility method for managing view templates.
     *
     * @param        view           Zikula_View   reference to view object
     * @param        type           string        current type (admin, user, ...)
     * @param        objectType     string        name of treated entity type
     * @param        func           string        current function (main, view, ...)
     * @param        args           array         additional arguments
     * @return mixed Output.
     */
    public static function processViewTemplate($view, $type, $objectType, $func, $args=array())
    {
        $template = DataUtil::formatForOS($type . '/' . $objectType . '/' . $func);
        $tpl = FormUtil::getPassedValue('tpl', isset($args['tpl']) ? $args['tpl'] : '');
        if (!empty($tpl) && $view->template_exists($template . '_' . DataUtil::formatForOS($tpl) . '.tpl')) {
            $template .= '_' . DataUtil::formatForOS($tpl);
        }
        $template .= '.tpl';

        $raw = FormUtil::getPassedValue('raw', (isset($args['raw']) && is_bool($args['raw'])) ? $args['raw'] : false);
        if ($raw == true) {
            // standalone output
            $view->display($template);
            return true;
        }

        // normal output
        return $view->fetch($template);
    }
«IF hasUploads()-»

    /**
     * Retrieve the base path for given object type and upload field combination.
     *
     * @param        objectType     string        name of treated entity type
     * @param        fieldName      string        name of upload field
     * @param        args           array         additional arguments
     * @return mixed Output.
     */
    public static function getFileBaseFolder($objectType, $fieldName)
    {
        if (!in_array($objectType, self::getObjectTypes())) {
            $objectType = '«getLeadingEntity().name.formatForCode()»';
        }

	    $basePath = 'modules/«appName()»/files/';

        switch ($objectType) {
«FOREACH getUploadEntities() AS entity-»
«LET entity.fields.typeSelect(UploadField) AS uploadFields-»
            case '«entity.name.formatForCode()»':
«IF uploadFields.size > 1-»
                            $basePath .= '«entity.nameMultiple.formatForDB()»/';
                            switch ($fieldName) {
«FOREACH uploadFields AS uploadField-»
                                case '«uploadField.name.formatForCode()»':
                                    $basePath .= '«uploadField.subFolderPathSegment()»/';
                                    break;
«ENDFOREACH-»
                            }
«ELSE-»
                            $basePath .= '«entity.nameMultiple.formatForDB()»/«uploadFields.get(0).subFolderPathSegment()»/';
«ENDIF-»
                            break;
«ENDLET-»
«ENDFOREACH-»
        }

	    return $basePath;
    }

    /**
     * display a given file size in a readable format
     *
     * @param        size           string        file size in bytes
     * @param        nodesc         boolean       if set to true the description will not be appended
     * @param        onlydesc       boolean       if set to true only the description will be returned
     * @return string file size in a readable form
     */
    public static function getReadableFileSize($size, $nodesc = false, $onlydesc = false)
    {
        $dom = ZLanguage::getModuleDomain('«appName()»');
        $sizeDesc = __('Bytes', $dom);
        if ($size >= 1024) {
            $size /= 1024;
            $sizeDesc = __('KB', $dom);
        }
        if ($size >= 1024) {
            $size /= 1024;
            $sizeDesc = __('MB', $dom);
        }
        if ($size >= 1024) {
            $size /= 1024;
            $sizeDesc = __('GB', $dom);
        }
        $sizeDesc = '&nbsp;' . $sizeDesc;

        // format number
        $dec_point = ',';
        $thousands_separator = '.';
        if ($size - number_format($size, 0) >= 0.005) {
            $size = number_format($size, 2, $dec_point, $thousands_separator);
        } else {
            $size = number_format($size, 0, '', $thousands_separator);
        }

        // append size descriptor if desired
        if (!$nodesc) {
            $size .= $sizeDesc;
        }

        // return either only the description or the complete string
        $result = ($onlydesc) ? $sizeDesc : $size;
        return $result;
    }
«ENDIF-»
}
«ENDDEFINE»

«DEFINE CommonFunctionsImpl FOR Application-»
/**
 * Utility helper implementation class
 */
class «appName()»_Util extends «appName()»_Base_Util
{
    // feel free to add your own convenience methods here
}
«ENDDEFINE»
