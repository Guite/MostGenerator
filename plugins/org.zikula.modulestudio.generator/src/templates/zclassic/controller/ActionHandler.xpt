«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Form handler classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH getEditActions()-»
«EXPAND templates::zclassic::controller::actionHandler::Config::Root-»
«ENDDEFINE»

«DEFINE Root(Application app) FOR Action-»
    «EXPAND Root(app, controller, 'edit') FOREACH app.models.entities-»
«ENDDEFINE»


«DEFINE FormCreate(String appName, Controller controller, String actionName) FOR Action-»
    // Create new Form reference
    $view = FormUtil::newForm('«appName.formatForCode()»');

«LET formatForCode(appName.msconcat("_Form_Handler_").msconcat(prepClassPart(controller.name)).msconcat(prepClassPart(actionName))) AS controllerPraefix-»

    // Execute form using supplied template and page event handler
    return $view->execute('«controllerPraefix».tpl', new «controllerPraefix»());
«ENDLET-»
«ENDDEFINE»


«REM»Entry point for Form handler classes«ENDREM»
«DEFINE Root(Application app, Controller controller, String actionName) FOR Entity-»
«info("Generating \"" + controller.name + "\" form handler classes for \"" + name + "_" + actionName + "\"") -> ""-»
«FILE baseClassFormHandler(controller, name, actionName).asFile()»
«EXPAND FileHelper::phpFileHeader(app)-»
«EXPAND FormHandlerBaseImpl(app, controller, actionName)-»
«ENDFILE»
«FILE implClassFormHandler(controller, name, actionName).asFile()»
«EXPAND FileHelper::phpFileHeader(app)-»
«EXPAND FormHandlerImpl(app, controller, actionName)-»
«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE FormHandlerBaseImpl(Application app, Controller controller, String actionName) FOR Entity-»
/**
 * This handler class handles the page events of the Form called by the «formatForCode(app.appName().msconcat("_").msconcat(controller.name()).msconcat("_").msconcat(actionName))»() function.
 * It aims on the «name.formatForDisplay()» object type.
 *
 * Member variables in a form handler object are persisted accross different page requests. This means
 * a member variable $this->X can be set on one request and on the next request it will still contain
 * the same value.
 *
 * A form handler will be notified of various events that happens during it's life-cycle.
 * When a specific event occurs then the corresponding event handler (class method) will be executed. Handlers
 * are named exactly like their events - this is how the framework knows which methods to call.
 *
 * The list of events is:
 *
 * - <b>initialize</b>: this event fires before any of the events for the plugins and can be used to setup
 *   the form handler. The event handler typically takes care of reading URL variables, access control
 *   and reading of data from the database.
 *
 * - <b>handleCommand</b>: this event is fired by various plugins on the page. Typically it is done by the
 *   Form_Plugin_Button plugin to signal that the user activated a button.
 */
class «baseClassFormHandler(controller, name, actionName)» extends Form_Handler
{
    /**
     * Persistent member vars
     */

    // id of «name.formatForDisplay()»
    protected $«idField()»;

    // create or edit
    protected $mode;

    // treated object type
    protected $objectType;

    // code for redirect after command handling
    protected $returnTo = null;

    // url of current form with all parameters for multiple creations
    protected $repeatReturnUrl = null;

    // whether this form is being used inline
    protected $inlineUsage = false;

    // full prefix for related items
    protected $idPrefix = '';

    /**
     * Post construction hook.
     *
     * @return mixed
     */
    public function setup()
    {
    }

«EXPAND initialize(app, controller, actionName)-»

    /**
     * Method stub for own additions in subclasses.
     */
    protected function initializeAdditions($view)
    {
    }

    /**
     * Pre-initialise hook.
     *
     * @return void
     */
    public function preInitialize()
    {
    }

    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
    }

«EXPAND getRedirectCodes(app, controller, actionName)-»

«EXPAND getDefaultReturnUrl(app, controller, actionName)-»

«EXPAND handleCommand(app, controller, actionName)-»

«EXPAND getRedirectUrl(app, controller, actionName)-»

«EXPAND retrieveRelatedObjects(app, controller)-»

    /**
     * Helper method for updating links to related records.
     */
    protected function updateRelationLinks($businessEntity)
    {
«EXPAND UpdateRelationLinks(true) FOREACH incoming.typeSelect(ManyToManyRelationship)-»
«EXPAND UpdateRelationLinks(false) FOREACH outgoing.typeSelect(JoinRelationship)-»
    }

«IF hasUploadFields()-»

«EXPAND handleUploads(app)-»
«ENDIF-»
}
«ENDDEFINE»


«REM»concrete implementation stub«ENDREM»
«DEFINE FormHandlerImpl(Application app, Controller controller, String actionName) FOR Entity-»
/**
 * This handler class handles the page events of the Form called by the «formatForCode(app.appName().msconcat("_").msconcat(controller.name()).msconcat("_").msconcat(actionName))»() function.
 * It aims on the «name.formatForDisplay()» object type.
 */
class «implClassFormHandler(controller, name, actionName)» extends «baseClassFormHandler(controller, name, actionName)»
{
    // feel free to extend the base handler class here
}
«ENDDEFINE»

«DEFINE initialize(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize($view)
    {
        $this->inlineUsage = ((UserUtil::getTheme() == 'Printer') ? true : false);
        $this->idPrefix = FormUtil::getPassedValue('idp', '', 'GET');

        // retrieve the ID of the object we wish to edit
        // default to 0 (which is a numeric id but an invalid value)
        // no provided id means that we want to create a new object
        $this->«idField()» = (int) FormUtil::getPassedValue('«idField()»', 0, 'GET', FILTER_VALIDATE_INT);
        if (!$this->«idField()») {
            $this->«idField()» = (int) FormUtil::getPassedValue('id', 0, 'GET', FILTER_VALIDATE_INT);
        }

        $this->objectType = '«name.formatForCode()»';

        // initialise redirect goal
        $this->returnTo = FormUtil::getPassedValue('returnTo', null, 'GET');
        // store current uri for repeated creations
        $this->repeatReturnUrl = System::getCurrentURI();

        $objectType = $this->objectType;
«EXPAND ControllerHelper::instantiateBusinessObject(app.appName(), false, 'actionHandler', controller.name(), 'initialize')-»

        $objectData = array();
        $this->mode = 'create';

        // if «idField()» is not 0, we wish to edit an existing «name.formatForDisplay()»
        if ($this->«idField()») {
            $this->mode = 'edit';

            if (!SecurityUtil::checkPermission('«app.appName()»:«name.formatForCodeCapital()»:', '::', ACCESS_EDIT)) {
                // set an error message and return false
                return $view->registerError(LogUtil::registerPermissionError());
            }

            $idField = '«idField()»';
«EXPAND ControllerHelper::retrieveEntityFromModel('idField', "this->" + idField(), true)-»

            // try to guarantee that only one person at a time can be editing this «name.formatForDisplay()»
            $returnUrl = ModUtil::url('«app.appName()»', '«controller.name()»', 'display', array('ot' => $this->objectType, '«idField()»' => $this->«idField()»));
            ModUtil::apiFunc('PageLock', 'user', 'pageLock',
                                 array('lockName' => '«app.appName()»«name.formatForCodeCapital()»{$this->«idField()»}',
                                       'returnUrl' => $returnUrl));
        }
        else {
            if (!SecurityUtil::checkPermission('«app.appName()»:«name.formatForCodeCapital()»:', '::', ACCESS_ADD)) {
                return $view->registerError(LogUtil::registerPermissionError());
            }

            $template«idField().toFirstUpper()» = (int) FormUtil::getPassedValue('astemplate', 0, 'GET', FILTER_VALIDATE_INT);
            if ($template«idField().toFirstUpper()» > 0) {
                // reuse existing «name.formatForDisplay()»
                $idField = '«idField()»';
«EXPAND ControllerHelper::retrieveEntityFromModel('idField', "template" + idField().toFirstUpper(), true)-»
                unset($object);
                unset($objectData['«idField()»']);
            }
            else {
                // retrieve array with default data values
                $objectData = $object->getNewArrayWithDefaultData();

«EXPAND InitRelatedObjectDefault(true) FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND InitRelatedObjectDefault(false) FOREACH outgoing.typeSelect(JoinRelationship)-»
            }
        }

«FOREACH fields.typeSelect(DateField) AS dateField-»
        if ($objectData['«dateField.name.formatForCode()»'] == '1900-01-01 00:00:00') {
            $objectData['«dateField.name.formatForCode()»'] = null;
        }
«ENDFOREACH-»

        // assign data to template
        $view->assign($objectData)                         // assign object data first for form fields
             ->assign('«name.formatForDB()»', $objectData) // assign object data again for notifyhooks
             ->assign('mode', $this->mode)
             ->assign('inlineUsage', $this->inlineUsage);

        $this->initializeAdditions($view);

        // everything okay, no initialization errors occured
        return true;
    }
«ENDDEFINE»


«DEFINE InitRelatedObjectDefault(Boolean incoming) FOR JoinRelationship-»
«LET getRelationAliasName(!incoming).formatForCodeCapital() AS relationAliasName-»
«LET (!(incoming && this.metaType != ManyToManyRelationship || this.metaType == OneToOneRelationship)) AS many-»
                $objectData['«relationAliasName»'] = $this->retrieveRelatedObjects('«((incoming) ? source : target).name.formatForCode()»', '«relationAliasName.formatForDB()»', «IF !many»false«ELSE»true«ENDIF»);
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE retrieveRelatedObjects(Application app, Controller controller) FOR Entity-»
    /**
     * Select a related object in create mode.
     *
     * @return array Single result or list of results.
     */
    protected function retrieveRelatedObjects($objectType, $relationInputFieldName, $many = false, $source = 'GET')
    {
        $idField = strtolower($objectType) . 'id';
        $objectCollection = «app.appName()»_Factory::getBusinessCollection($objectType, 'controllerAction', array('controller' => '«controller.name()»', 'action' => 'edit'));
        $where = '';
        $sortParam = $objectCollection->get_intDefaultSortingField() . ' asc';
        if ($many) {
            $inputValue = FormUtil::getPassedValue($relationInputFieldName, '', $source);
            if (empty($inputValue)) {
                return array();
            }

            $where = $idField . ' IN (' . DataUtil::formatForStore($inputValue) . ')';
        }
        else {
            $inputValue = (int) FormUtil::getPassedValue($relationInputFieldName, 0, $source, FILTER_VALIDATE_INT);
            if ($inputValue == 0) {
                return array();
            }

            $where = $idField . ' = \'' . DataUtil::formatForStore($inputValue) . '\'';
        }
        $result = $objectCollection->selectWherePaginated($where, $sortParam, 1, 50);
        return (($many) ? $result : $result[0]);
    }
«ENDDEFINE»

«DEFINE getRedirectCodes(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Get list of allowed redirect codes.
     */
    protected function getRedirectCodes()
    {
        $codes = array();
«FOREACH app.controllers.controllers AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('main')-»
        // main page of «controllerName» area
        $codes[] = '«controllerName»';
«ENDIF-»
«IF someController.hasActions('view')-»
        // «controllerName» list of «nameMultiple.formatForDisplay()»
        $codes[] = '«someController.name()»View';
«ENDIF-»
«IF someController.hasActions('display')-»
        // «controllerName» display page of treated «name.formatForDisplay()»
        $codes[] = '«controllerName»Display';
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«FOREACH incoming.select(e|e.metaType == OneToOneRelationship || e.metaType == OneToManyRelationship) AS incomingRelation-»
«LET incomingRelation.source AS sourceEntity-»
«IF sourceEntity.name != this.name-»
«FOREACH app.controllers.controllers AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('view')-»
        // «controllerName» list of «sourceEntity.nameMultiple.formatForDisplay()»
        $codes[] = '«controllerName»View«sourceEntity.name.formatForCodeCapital()»';
«ENDIF-»
«IF someController.hasActions('display')-»
        // «controllerName» display page of treated «sourceEntity.name.formatForDisplay()»
        $codes[] = '«controllerName»Display«sourceEntity.name.formatForCodeCapital()»';
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        return $codes;
    }
«ENDDEFINE»

«DEFINE getDefaultReturnUrl(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Get the default redirect url. Required if no returnTo parameter has been supplied.
     * This method is called in handleCommand so we know which command has been performed.
     */
    protected function getDefaultReturnUrl($args, $obj)
    {
«IF controller.hasActions('view')-»
        // redirect to the list of «nameMultiple.formatForCode()»
        $url = ModUtil::url('«app.appName()»', '«controller.name()»', 'view',
                                                             array('ot' => $this->objectType));
«ELSEIF controller.hasActions('main')-»
        // redirect to the main page
        $url = ModUtil::url('«app.appName()»', '«controller.name()»', 'main');
«ELSE-»
        $url = System::getHomepageUrl();
«ENDIF-»

«IF controller.hasActions('display')-»
        if ($args['commandName'] != 'delete') {
            // redirect to the detail page of treated «name.formatForCode()»
            $url = ModUtil::url('«app.appName()»', '«controller.name()»', 'display',
                                                             array('ot' => $this->objectType,
                                                                   '«idField()»' => $this->«idField()»));
        }
«ENDIF-»
        return $url;
    }
«ENDDEFINE»

«DEFINE getRedirectUrl(Application app, Controller controller, String actionName) FOR Entity-»
«LET app.appName() AS appName-»
    /**
     * Get url to redirect to.
     */
    protected function getRedirectUrl($args, $obj, $repeatCreateAction = false)
    {
        if ($this->inlineUsage == true) {
            // inline usage, return to special function for closing the Zikula.UI.Window instance
            return ModUtil::url('«appName»', '«controller.name()»', 'handleInlineRedirect',
                                                                 array('idp' => $this->idPrefix,
                                                                       'id' => $this->«idField()»,
                                                                       'com' => $args['commandName']));
        }

        if ($repeatCreateAction) {
            return $this->repeatReturnUrl;
        }

        // normal usage, compute return url from given redirect code
        if (!in_array($this->returnTo, $this->getRedirectCodes())) {
            // invalid return code, so return the default url
            return $this->getDefaultReturnUrl($args, $obj);
        }

        // parse given redirect code and return corresponding url
        switch ($this->returnTo) {
«FOREACH app.controllers.controllers AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('main')-»
            case '«controllerName»':
                                    return ModUtil::url('«appName»', '«controllerName»');
«ENDIF-»
«IF someController.hasActions('view')-»
            case '«controllerName»View':
                                    return ModUtil::url('«appName»', '«controllerName»', 'view',
                                                             array('ot' => $this->objectType));
«ENDIF-»
«IF someController.hasActions('display')-»
            case '«controllerName»Display':
                                    if ($args['commandName'] != 'delete') {
                                        return ModUtil::url('«appName»', '«controllerName»', 'display',
                                                             array('ot' => $this->objectType,
                                                                   '«idField()»' => $this->«idField()»));
                                    }
                                    return $this->getDefaultReturnUrl($args, $obj);
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«FOREACH incoming.select(e|e.metaType == OneToOneRelationship || e.metaType == OneToManyRelationship) AS incomingRelation-»
«LET incomingRelation.source AS sourceEntity-»
«IF sourceEntity.name != this.name-»
«FOREACH app.controllers.controllers AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('view')-»
            case '«controllerName»View«sourceEntity.name.formatForCodeCapital()»':
                                    return ModUtil::url('«appName»', '«controllerName»', 'view',
                                                             array('ot' => '«sourceEntity.name.formatForCode()»'));
«ENDIF-»
«IF someController.hasActions('display')-»
            case '«controllerName»Display«sourceEntity.name.formatForCodeCapital()»':
                                    if (isset($obj['«sourceEntity.idField()»']) && $obj['«sourceEntity.idField()»']) {
                                        return ModUtil::url('«appName»', '«controllerName»', 'display',
                                                             array('ot' => '«sourceEntity.name.formatForCode()»',
                                                                   '«sourceEntity.idField()»' => $obj['«sourceEntity.idField()»']));
                                    }
                                    return $this->getDefaultReturnUrl($args, $obj);
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
            default:
                                    return $this->getDefaultReturnUrl($args, $obj);
        }
    }
«ENDLET-»
«ENDDEFINE»

«DEFINE handleCommand(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Form_Plugin_Button
     * @see Form_Plugin_ImageButton
     */
    public function handleCommand($view, &$args)
    {
        if ($args['commandName'] == 'delete') {
            if (!SecurityUtil::checkPermission('«app.appName()»:«name.formatForCodeCapital()»:', '::', ACCESS_DELETE)) {
                return $view->registerError(LogUtil::registerPermissionError());
            }
        }

        if ($args['commandName'] != 'delete' && $args['commandName'] != 'cancel') {
            // do forms validation including checking all validators on the page to validate their input
            if (!$view->isValid()) {
                return false;
            }
        }

        $this->objectType = '«name.formatForCode()»';

«EXPAND ReassignRelatedObjects(true) FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND ReassignRelatedObjects(false) FOREACH outgoing.typeSelect(JoinRelationship)-»

        $objectType = $this->objectType;
«EXPAND ControllerHelper::instantiateBusinessObject(app.appName(), false, 'actionHandler', controller.name(), 'handleCommand')-»

        $«name.formatForCode()» = null;
        if ($args['commandName'] != 'create') {
            $object->selectById($this->«idField()», false);
        }
        $«name.formatForCode()» = $object;

«EXPAND FetchInputData(name.formatForCode())-»

        if ($args['commandName'] == 'create') {
            // event handling if user clicks on create

            // Let any hooks perform additional validation actions
            $this->notifyHooks('«app.name.formatForDB()».hook.«nameMultiple.formatForDB()».validate.edit', null, null);

            // save «name.formatForDisplay()»
            $«name.formatForCode()»->save();

            // store new id
            $this->«idField()» = $«name.formatForCode()»->get_intId();
            // check if the insert has worked, might become obsolete due to exception usage
            if ($this->«idField()» === false) {
                return LogUtil::registerError($this->__('Error! Creation attempt failed.'));
            }

            $this->updateRelationLinks($«name.formatForCode()»);

            LogUtil::registerStatus($this->__('Done! «name.formatForDisplayCapital()» created.'));

            // Let any hooks know that we have created an item
            $this->notifyHooks('«app.name.formatForDB()».hook.«nameMultiple.formatForDB()».process.edit', $«name.formatForCode()», $this->«idField()»);
        } else if ($args['commandName'] == 'update') {
            // event handling if user clicks on update

            // Let any hooks perform additional validation actions
            $this->notifyHooks('«app.name.formatForDB()».hook.«nameMultiple.formatForDB()».validate.edit', $«name.formatForCode()», $this->«idField()»);

            // save «name.formatForDisplay()»
            $updateResult = $«name.formatForCode()»->save();
            // check if the update has worked, might become obsolete due to exception usage
            if ($updateResult === false) {
                return LogUtil::registerError($this->__('Error! Update attempt failed.'));
            }

            $this->updateRelationLinks($«name.formatForCode()»);

            LogUtil::registerStatus($this->__('Done! «name.formatForDisplayCapital()» updated.'));

            // Let any hooks know that we have updated an item
            $this->notifyHooks('«app.name.formatForDB()».hook.«nameMultiple.formatForDB()».process.edit', $«name.formatForCode()», $this->«idField()»);
        } else if ($args['commandName'] == 'delete') {
            // event handling if user clicks on delete

            // Let any hooks perform additional validation actions
            $this->notifyHooks('«app.name.formatForDB()».hook.«nameMultiple.formatForDB()».validate.delete', $«name.formatForCode()», $this->«idField()»);

            // delete «name.formatForDisplay()»
            if ($«name.formatForCode()»->delete() === false) {
                return LogUtil::registerError($this->__('Error! Deletion attempt failed.'));
            }

            LogUtil::registerStatus($this->__('Done! «name.formatForDisplayCapital()» deleted.'));

            // Let any hooks know that we have deleted an item
            $this->notifyHooks('«app.name.formatForDB()».hook.«nameMultiple.formatForDB()».process.delete', $«name.formatForCode()», $this->«idField()»);
        } else if ($args['commandName'] == 'cancel') {
            // event handling if user clicks on cancel
        }

        if ($args['commandName'] != 'cancel') {
            // clear view cache to reflect our changes
            $view->clear_cache();
        }

        if ($this->mode == 'edit') {
            ModUtil::apiFunc('PageLock', 'user', 'releaseLock',
                             array('lockName' => '«app.appName()»«name.formatForCodeCapital()»{$this->«idField()»}'));
        }

        return $view->redirect($this->getRedirectUrl($args, $«name.formatForCode()», $repeatCreateAction));

        // We should in principle not end here at all, since the above command handlers should
        // match all possible commands, but we return "ok" (true) for all cases.
        // You could also return $view->setErrorMsg('Unexpected command')
        return true;
    }
«ENDDEFINE»


«DEFINE ReassignRelatedObjects(Boolean incoming) FOR JoinRelationship-»
«LET getRelationAliasName(!incoming).formatForCodeCapital() AS relationAliasName-»
«LET (!(incoming && this.metaType != ManyToManyRelationship || this.metaType == OneToOneRelationship)) AS many-»
«LET getUniqueRelationNameForJs(container.application, ((!incoming) ? target : source), false, incoming, relationAliasName) AS uniqueNameForJs-»
        // reassign the «((incoming) ? target : source).getEntityNameSingularPlural(many).formatForDisplay()» eventually chosen by the user
        $view->assign('user«relationAliasName.toFirstUpper()»', $this->retrieveRelatedObjects('«((incoming) ? source : target).name.formatForCode()»', '«uniqueNameForJs»ItemList', «IF !many»false«ELSE»true«ENDIF», 'POST'));
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»


«DEFINE UpdateRelationLinks(Boolean incoming) FOR JoinRelationship-»
«LET getRelationAliasName(!incoming).formatForCodeCapital() AS relationAliasName-»
«LET (!(incoming && this.metaType != ManyToManyRelationship || this.metaType == OneToOneRelationship)) AS many-»
«LET getUniqueRelationNameForJs(container.application, ((!incoming) ? target : source), false, incoming, relationAliasName) AS uniqueNameForJs-»
«IF many && this.getEditStageCode(incoming) > 1-»
«IF incoming-»«REM»only incoming for now, see http://code.zikula.org/generator/ticket/89«ENDREM»«""-»
        $relatedIds = FormUtil::getPassedValue('«uniqueNameForJs»ItemList', '', 'POST');
        $recordObj = $businessEntity->get«((incoming) ? target : source).name.formatForCodeCapital()»();
        if ($this->mode != 'create') {
            // remove all existing references
            $recordObj->unlinkInDb('«relationAliasName»');
        }
        if (!empty($relatedIds)) {
            $relatedIds = explode(',', $relatedIds);
        }
        if (is_array($relatedIds) && count($relatedIds)) {
            // create new links
«IF this.metaType != ManyToManyRelationship-»
            $recordObj->link('«relationAliasName»', $relatedIds);
«ELSE-»
            foreach ($relatedIds as $relatedId) {
                $linkObj = new «((ManyToManyRelationship)this).implClassModelRefRecord()»();
                $linkObj->«source.idField()» = «IF incoming»$relatedId«ELSE»$this->«((incoming) ? target : source).idField()»«ENDIF»;
                $linkObj->«target.idField()» = «IF !incoming»$relatedId«ELSE»$this->«((incoming) ? target : source).idField()»«ENDIF»;
                $linkObj->save();
            }
«ENDIF-»
        }

        // not sure yet if this is needed at all
        // $recordObj->save();

«ENDIF-»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»


«DEFINE FetchInputData(String obj) FOR Entity-»
        // fetch posted data input values as an associative array
        $formData = $view->getValues();
«EXPAND FetchRelationValue(true) FOREACH incoming.typeSelect(JoinRelationship).reject(e|e.metaType == ManyToManyRelationship)-»
«LET getUniqueDerivedFields().reject(e|e.primaryKey) AS uniqueFields-»
«LET getUserFields() AS userFields-»
«LET getUploadFields() AS uploadFields-»
«IF !(uniqueFields.isEmpty && userFields.isEmpty && uploadFields.isEmpty)-»

        if ($args['commandName'] == 'create' || $args['commandName'] == 'update') {
«FOREACH uniqueFields AS uniqueField-»
            // check if another «name.formatForDisplay()» with the same «uniqueField.actualFieldName().formatForDisplay()» does already exist
            if ($object->get_intValidator()->checkIf«uniqueField.actualFieldName().formatForCodeCapital()»Exists($formData['«uniqueField.actualFieldName().formatForCode()»'], $this->«idField()»)) {
                return LogUtil::registerError($this->__f('The «uniqueField.actualFieldName().formatForDisplay()» %s is already assigned. Please choose another «uniqueField.actualFieldName().formatForDisplay()».', array($formData['«uniqueField.actualFieldName().formatForCode()»'])));
            }
«ENDFOREACH-»
«FOREACH userFields AS userField-»
«LET userField.actualFieldName().formatForCode() AS realName-»
            $formData['«realName»'] = (int) FormUtil::getPassedValue('«realName»', 0, 'POST', FILTER_VALIDATE_INT);
            if (!$formData['«realName»'] || UserUtil::getVars($formData['«realName»']) === false) {
«IF userField.mandatory-»
                // Oops, we have an invalid user id. As this field is mandatory, we raise an error.
                return LogUtil::registerError($this->__('Invalid value received for field "«userField.actualFieldName().formatForDisplay()»".'));
«ELSE-»
                // Oops, we have an invalid user id. As this field is not mandatory, we simply set it to 0.
                $formData['«realName»'] = 0;
«ENDIF-»
            }
«ENDLET-»
«ENDFOREACH-»
«IF !uploadFields.isEmpty-»
            $formData = $this->handleUploads($formData);
            if ($formData == false) {
                return false;
            }
«ENDIF-»
        }
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»

        $repeatCreateAction = false;
        if ($args['commandName'] == 'create' && isset($formData['repeatcreation'])) {
            $repeatCreateAction = $formData['repeatcreation'];
            unset($formData['repeatcreation']);
        }

        // assign fetched data
        $«obj»->merge($formData);
«ENDDEFINE»

«REM»Assign input value from incoming 1:1 and 1:n relationships (example: get customerid for an order).
As the autocomplete fields are not done with a Form plugin (yet), we do that manually.«ENDREM»
«DEFINE FetchRelationValue(Boolean incoming) FOR JoinRelationship-»
«LET getRelationAliasName(!incoming).formatForCodeCapital() AS relationAliasName-»
«LET getUniqueRelationNameForJs(container.application, ((!incoming) ? target : source), false, incoming, relationAliasName) AS uniqueNameForJs-»
        $formData['«source.idField()»'] = (int) FormUtil::getPassedValue('«uniqueNameForJs»ItemList', 0, 'POST', FILTER_VALIDATE_INT);
«REM»Alternative: $address->link('Customer', array($customer['id']));«ENDREM»«""-»
        if (!$formData['«source.idField()»']) {
            // Oops, we have an invalid relation id. As this field is mandatory, we raise an error.
            return LogUtil::registerError($this->__('Invalid value received for relation field "«relationAliasName.formatForDisplay()»".'));
        }
«ENDLET-»
«ENDLET-»
«ENDDEFINE»


«DEFINE handleUploads(Application app) FOR Entity-»
    /**
     * Helper method to process upload fields
     */
    protected function handleUploads($formData)
    {
«LET getUploadFields() AS uploadFields-»
«IF !uploadFields.isEmpty-»
        // initialise the upload handler
        $uploadManager = new «app.appName()»_UploadHandler();

        // list of upload fields to consider
        $uploadFields = array(«FOREACH uploadFields AS uploadField SEPARATOR ", "»'«uploadField.name.formatForCode()»'«ENDFOREACH»);
        // list of mandatory fields
        $uploadFieldsMandatory = array(«FOREACH uploadFields.select(e|e.mandatory) AS uploadField SEPARATOR ", "»'«uploadField.name.formatForCode()»'«ENDFOREACH»);
        // process all fields
        foreach ($uploadFields as $uploadField) {
            // look whether a file has been provided
            if (!$formData[$uploadField] || $formData[$uploadField]['size'] == 0) {
                // no file has been uploaded
                unset($formData[$uploadField]);
                // skip to next one
                continue;
            }

            // do the actual upload (includes validation, physical file processing and reading meta data)
            $uploadResult = $uploadManager->performFileUpload($this->objectType, $formData, $uploadField);
            // assign the upload file name
            $formData[$uploadField] = $uploadResult['fileName'];
            // assign the meta data
            $formData[$uploadField . 'Meta'] = $uploadResult['metaData'];

            // if current field is mandatory check if everything has been done 
            if (in_array($uploadField, $uploadFieldsMandatory) && $formData[$uploadField] === false) {
                // mandatory upload has not been completed successfully
                return false;
            }

            // upload succeeded
        }
«ENDIF-»
«ENDLET-»
        return $formData;
    }
«ENDDEFINE»

