«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Form handler classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH controllers.controllers.actions.typeSelect(EditAction)-»
«IF needsConfig()-»
«FILE tempBaseClassConfigHandler().asFile()»
«EXPAND FileHelper::phpFileHeader(this)-»

/**
 * Configuration handler base class
 */
class «tempBaseClassConfigHandler()» extends Form_Handler
{
    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    function initialize($view)
    {
        if (!SecurityUtil::checkPermission('«appName()»::', '::', ACCESS_ADMIN)) {
            return $view->registerError(LogUtil::registerPermissionError());
        }

        // assign all module vars
        $view->assign('config', ModUtil::getVar('«appName()»'«REM»$this->getVars() Form_Handler does not inherit from Zikula_Base (yet)«ENDREM»));

        $this->initializeAdditions($view);

        // everything okay, no initialization errors occured
        return true;
    }

    /**
     * Method stub for own additions in subclasses.
     */
    function initializeAdditions($view)
    {
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Form_Plugin_Button
     * @see Form_Plugin_ImageButton
     */
    function handleCommand($view, &$args)
    {

        if ($args['commandName'] == 'save') {
            if (!$view->isValid()) {
                return false;
            }

            $data = $view->getValues();

            // update all module vars
            if (!ModUtil::setVars('«appName()»', $data['config'])) {
                return $view->setErrorMsg($this->__('Error! Failed to set configuration variables.'));
            }

            LogUtil::registerStatus($this->__('Done! Module configuration updated.'));
            ModUtil::callHooks('module', 'updateconfig', '«appName()»', array('module' => '«appName()»'));
        }
        else if ($args['commandName'] == 'cancel') {
        }

        $url = ModUtil::url('«appName()»', '«configController().formatForDB()»', 'config');
        return $view->redirect($url);
    }
}
«ENDFILE»

«FILE tempImplClassConfigHandler().asFile()»
«EXPAND FileHelper::phpFileHeader(this)-»


/**
 * Configuration handler implementation class
 */
class «tempImplClassConfigHandler()» extends «tempBaseClassConfigHandler()»
{
    // feel free to extend the base handler class here
}
«ENDFILE»

«ENDIF-»
«ENDDEFINE»

«DEFINE Root(Application app) FOR Action-»
    «EXPAND Root(app, controller, 'edit') FOREACH app.models.entities-»
«ENDDEFINE»


«DEFINE FormCreate(String appName, Controller controller, String actionName) FOR Action-»
    // Create new Form reference
    $view = FormUtil::newForm('«appName.formatForCode()»');

«LET formatForCode(appName.msconcat("_Form_Handler_").msconcat(prepClassPart(controller.name)).msconcat(prepClassPart(actionName))) AS controllerPraefix-»

    // Execute form using supplied template and page event handler
    return $view->execute('«controllerPraefix».tpl', new «controllerPraefix»());
«ENDLET-»
«ENDDEFINE»


«REM»Entry point for Form handler classes«ENDREM»
«DEFINE Root(Application app, Controller controller, String actionName) FOR Entity-»
«info("Generating \"" + controller.name + "\" form handler classes for \"" + name + "_" + actionName + "\"") -> ""-»
«FILE baseClassFormHandler(controller, name, actionName).asFile()»
«EXPAND FileHelper::phpFileHeader(app)-»
«EXPAND FormHandlerBaseImpl(app, controller, actionName)-»
«ENDFILE»
«FILE implClassFormHandler(controller, name, actionName).asFile()»
«EXPAND FileHelper::phpFileHeader(app)-»
«EXPAND FormHandlerImpl(app, controller, actionName)-»
«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE FormHandlerBaseImpl(Application app, Controller controller, String actionName) FOR Entity-»
«LET app.appName() AS appName-»
«LET controller.name.formatForDB() AS controllerName-»
/**
 * This handler class handles the page events of the Form called by the «formatForCode(appName.msconcat("_").msconcat(controllerName).msconcat("_").msconcat(actionName))»() function.
 * It aims on the «name.formatForDisplay()» object type.
 *
 * Member variables in a form handler object are persisted accross different page requests. This means
 * a member variable $this->X can be set on one request and on the next request it will still contain
 * the same value.
 *
 * A form handler will be notified of various events that happens during it's life-cycle.
 * When a specific event occurs then the corresponding event handler (class method) will be executed. Handlers
 * are named exactly like their events - this is how the framework knows which methods to call.
 *
 * The list of events is:
 *
 * - <b>initialize</b>: this event fires before any of the events for the plugins and can be used to setup
 *   the form handler. The event handler typically takes care of reading URL variables, access control
 *   and reading of data from the database.
 *
 * - <b>handleCommand</b>: this event is fired by various plugins on the page. Typically it is done by the
 *   Form_Plugin_Button plugin to signal that the user activated a button.
 */
class «baseClassFormHandler(controller, name, actionName)» extends Form_Handler
{
    /**
     * Persistent member vars
     */

    // id of «name.formatForDisplay()»
    private $«idField()»;

    // create or edit
    private $mode;

    // treated object type
    private $objectType;

    // url to redirect to
    private $returnUrl = null;

    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    function initialize($view)
    {
«EXPAND initialize(app, controller, actionName, appName, controllerName)-»

        $this->initializeAdditions($view);

        // everything okay, no initialization errors occured
        return true;
    }

    /**
     * Method stub for own additions in subclasses.
     */
    function initializeAdditions($view)
    {
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Form_Plugin_Button
     * @see Form_Plugin_ImageButton
     */
    function handleCommand($view, &$args)
    {
«EXPAND handleCommand(app, controller, actionName, appName, controllerName)-»
    }
«IF fields.typeSelect(UploadField).size > 0-»

    /**
     * Helper method to process upload fields
     */
    private function handleUploads($formData)
    {
«EXPAND handleUploads(app)-»
    }
«ENDIF-»
}
«ENDLET-»
«ENDLET-»
«ENDDEFINE»


«REM»concrete implementation stub«ENDREM»
«DEFINE FormHandlerImpl(Application app, Controller controller, String actionName) FOR Entity-»
«LET app.appName() AS appName-»
«LET controller.name.formatForDB() AS controllerName-»
/**
 * This handler class handles the page events of the Form called by the «formatForCode(appName.msconcat("_").msconcat(controllerName).msconcat("_").msconcat(actionName))»() function.
 * It aims on the «name.formatForDisplay()» object type.
 */
class «implClassFormHandler(controller, name, actionName)» extends «baseClassFormHandler(controller, name, actionName)»
{
    // feel free to extend the base handler class here
}
«ENDLET-»
«ENDLET-»
«ENDDEFINE»


«DEFINE initialize(Application app, Controller controller, String actionName, String appName, String controllerName) FOR Entity-»
        // retrieve the ID of the object we wish to edit
        // default to 0 (which is a numeric id but an invalid value)
        // no provided id means that we want to create a new object
        $this->«idField()» = (int) FormUtil::getPassedValue('«idField()»', 0, 'GET');

        $this->objectType = '«name.formatForCode()»';
        $objectType = $this->objectType;
«EXPAND ControllerHelper::instantiateBusinessObject(appName, false)-»

        $this->mode = 'create';
        // if «idField()» is not 0, we wish to edit an existing «name.formatForDisplay()»
        if ($this->«idField()») {
            $this->mode = 'edit';

            if (!SecurityUtil::checkPermission('«appName»:«name.formatForCodeCapital()»:', '::', ACCESS_EDIT)) {
                // set an error message and return false
                return $view->registerError(LogUtil::registerPermissionError());
            }

            $idField = '«idField()»';
«EXPAND ControllerHelper::retrieveEntityFromModel('idField', "this->" + idField(), true)-»

            // try to guarantee that only one person at a time can be editing this «name.formatForDisplay()»
            $returnUrl = ModUtil::url('«appName»', '«controllerName»', 'display', array('ot' => $this->objectType, '«idField()»' => $this->«idField()»));
            ModUtil::apiFunc('PageLock', 'user', 'pageLock',
                                 array('lockName' => "«appName»«name.formatForCodeCapital()»{$this->«idField()»}",
                                       'returnUrl' => $returnUrl));
        }
        else {
            if (!SecurityUtil::checkPermission('«appName»:«name.formatForCodeCapital()»:', '::', ACCESS_ADD)) {
                return $view->registerError(LogUtil::registerPermissionError());
            }

«IF fields.typeSelect(TimestampField).size > 0-»
            $thisTimestamp = date('Y-m-d H:i:s');
«ENDIF-»
«IF fields.typeSelect(DateField).size > 0-»
            $todayDate = date('Y-m-d');
«ENDIF-»
«IF fields.typeSelect(TimeField).size > 0-»
            $thisTime = date('H:i:s');
«ENDIF-»

            $objectData = Array(«EXPAND FieldAssignment FOREACH fields.typeSelect(DerivedField).reject(e|e.primaryKey) SEPARATOR ','»);
        }

«FOREACH fields.typeSelect(DateField) AS dateField-»
        if ($objectData['«dateField.name.formatForCode()»'] == '1900-01-01 00:00:00') {
            $objectData['«dateField.name.formatForCode()»'] = null;
        }
«ENDFOREACH-»

        // assign data to template
        $view->assign($objectData)->assign('mode', $this->mode);
«ENDDEFINE»


«DEFINE FieldAssignment FOR EntityField»
                '«name.formatForCode()»' => «EXPAND FieldDefaultData»«ENDDEFINE»
«DEFINE FieldAssignment FOR DerivedField»
                '«actualFieldName()»' => «EXPAND FieldDefaultData»«ENDDEFINE»

«DEFINE FieldDefaultData FOR EntityField-»
«error("Error: undefined entity field type " + metaType.toString() + " (code 925624)") -> ""-»
«ENDDEFINE»
«DEFINE FieldDefaultData FOR DerivedField-»
«error("Error: undefined derived field type " + metaType.toString() + " (code 925627)") -> ""-»
«ENDDEFINE»
«DEFINE FieldDefaultData FOR CalculatedField-»
«error("Error: undefined calculated field type " + metaType.toString() + " (code 925628)") -> ""-»
«ENDDEFINE»

«DEFINE FieldDefaultDataText FOR DerivedField-»'«defaultValue»'«ENDDEFINE»
«DEFINE FieldDefaultData FOR BooleanField»«IF defaultValue == true || defaultValue == "true"»true«ELSE»false«ENDIF»«ENDDEFINE»
«DEFINE FieldDefaultData FOR AbstractIntegerField-»
«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF-»
«ENDDEFINE»
«DEFINE FieldDefaultData FOR IntegerField-»
«LET entity.incoming.select(e|e.source.idField() == name) AS joins-»
«IF joins.size > 0-»
«FOREACH joins AS join-»(int) FormUtil::getPassedValue('«join.source.idField()»', 0, 'GET')«ENDFOREACH-»
«ELSE-»
«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF-»
«ENDIF-»«ENDLET-»«ENDDEFINE»
«DEFINE FieldDefaultData FOR FloatField»«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»«ENDDEFINE»
«DEFINE FieldDefaultData FOR DecimalField»«IF defaultValue.length > 0»«defaultValue»«ELSE»0.00«ENDIF»«ENDDEFINE»
«DEFINE FieldDefaultData FOR StringField-»«EXPAND FieldDefaultDataText-»«ENDDEFINE»
«DEFINE FieldDefaultData FOR TextField-»«EXPAND FieldDefaultDataText-»«ENDDEFINE»
«DEFINE FieldDefaultData FOR EmailField-»«EXPAND FieldDefaultDataText-»«ENDDEFINE»
«DEFINE FieldDefaultData FOR UrlField-»«EXPAND FieldDefaultDataText-»«ENDDEFINE»
«DEFINE FieldDefaultData FOR UploadField-»«EXPAND FieldDefaultDataText-»«ENDDEFINE»
«DEFINE FieldDefaultData FOR ArrayField»array()«ENDDEFINE»
«DEFINE FieldDefaultData FOR EnumField»array()«ENDDEFINE»
«DEFINE FieldDefaultData FOR ObjectField»null«ENDDEFINE»
«DEFINE FieldDefaultData FOR BlobField»'«REM»nothing for now«ENDREM»'«ENDDEFINE»
«DEFINE FieldDefaultData FOR ClobField»«EXPAND FieldDefaultDataText-»«ENDDEFINE»
«DEFINE FieldDefaultData FOR TimestampField»«IF mandatory»«IF defaultValue.length > 0»«defaultValue»«ELSE»$thisTimestamp«ENDIF»«ELSE»null«ENDIF»«ENDDEFINE»
«DEFINE FieldDefaultData FOR DateField»«IF mandatory»«IF defaultValue.length > 0»«defaultValue»«ELSE»$todayDate«ENDIF»«ELSE»null«ENDIF»«ENDDEFINE»
«DEFINE FieldDefaultData FOR TimeField»«IF mandatory»«IF defaultValue.length > 0»«defaultValue»«ELSE»$thisTime«ENDIF»«ELSE»null«ENDIF»«ENDDEFINE»
«DEFINE FieldDefaultData FOR GzipField-»«EXPAND FieldDefaultDataText-»«ENDDEFINE»


«DEFINE handleCommand(Application app, Controller controller, String actionName, String appName, String controllerName) FOR Entity-»

        if ($args['commandName'] == 'delete') {
            if (!SecurityUtil::checkPermission('«appName»:«name.formatForCodeCapital()»:', '::', ACCESS_DELETE)) {
                return $view->registerError(LogUtil::registerPermissionError());
            }
        }

        if ($args['commandName'] != 'delete' && $args['commandName'] != 'cancel') {
            // do forms validation including checking all validators on the page to validate their input
            if (!$view->isValid()) {
                return false;
            }
        }

        $this->objectType = '«name.formatForCode()»';
        $objectType = $this->objectType;
«EXPAND ControllerHelper::instantiateBusinessObject(appName, false)-»

        $«name.formatForCode()» = null;
        if ($args['commandName'] == 'create') {
            // instantiate the class we just loaded
            $«name.formatForCode()» = new $class();
        }
        else {
            $object->selectById($this->«idField()», false);
            $«name.formatForCode()» = $object;
        }

        «EXPAND FetchInputData(name.formatForCode())-»

        if ($args['commandName'] == 'create') {
            // event handling if user clicks on create

            // save «name.formatForDisplay()»
            $«name.formatForCode()»->save();

            $this->«idField()» = $«name.formatForCode()»->get_intId();
            if ($this->«idField()» === false) {
                return LogUtil::registerError($this->__('Error! Creation attempt failed.'));
            }

            LogUtil::registerStatus($this->__('Done! «name.formatForDisplayCapital()» created.'));

            // redirect to the detail page of the newly created «name.formatForCode()»
            $this->returnUrl = ModUtil::url('«appName»', '«controllerName»', 'display',
                                                             array('ot' => $this->objectType,
                                                                   '«idField()»' => $this->«idField()»));
        } else if ($args['commandName'] == 'update') {
            // event handling if user clicks on update

            // save «name.formatForDisplay()»
            $updateResult = $«name.formatForCode()»->save();

            if ($updateResult === false) {
                return LogUtil::registerError($this->__('Error! Update attempt failed.'));
            }

            LogUtil::registerStatus($this->__('Done! «name.formatForDisplayCapital()» updated.'));

            // redirect to the detail page of the treated «name.formatForCode()»
            $this->returnUrl = ModUtil::url('«appName»', '«controllerName»', 'display',
                                                             array('ot' => $this->objectType,
                                                                   '«idField()»' => $this->«idField()»));
        } else if ($args['commandName'] == 'delete') {
            // event handling if user clicks on delete

            // delete «name.formatForDisplay()»
            if ($«name.formatForCode()»->delete() === false) {
                return LogUtil::registerError($this->__('Error! Deletion attempt failed.'));
            }

            LogUtil::registerStatus($this->__('Done! «name.formatForDisplayCapital()» deleted.'));

            // redirect to the list of «nameMultiple.formatForCode()»
            $this->returnUrl = ModUtil::url('«appName»', '«controllerName»', 'view',
                                                                 array('ot' => $this->objectType));
        } else if ($args['commandName'] == 'cancel') {
            // event handling if user clicks on cancel

            if ($this->mode == 'edit') {
                // redirect to the detail page of the treated «name.formatForCode()»
                $this->returnUrl = ModUtil::url('«appName»', '«controllerName»', 'display',
                                                                 array('ot' => $this->objectType,
                                                                       '«idField()»' => $this->«idField()»));
            } else {
                // redirect to the list of «nameMultiple.formatForCode()»
                $this->returnUrl = ModUtil::url('«appName»', '«controllerName»', 'view',
                                                                     array('ot' => $this->objectType));
            }
        }


        if ($this->returnUrl != null) {
            if ($this->mode == 'edit') {
                ModUtil::apiFunc('PageLock', 'user', 'releaseLock',
                                 array('lockName' => "«appName»«name.formatForCodeCapital()»{$this->«idField()»}"));
            }

            return $view->redirect($this->returnUrl);
        }

        // We should in principle not end here at all, since the above command handlers should
        // match all possible commands, but we return "ok" (true) for all cases.
        // You could also return $view->setErrorMsg('Unexpected command')
        return true;
«ENDDEFINE»


«DEFINE FetchInputData(String obj) FOR Entity-»
            // fetch posted data input values as an associative array
            $formData = $view->getValues();
«REM»«FOREACH columns AS field-»
«LET entity.relations.select(e|e.target.name == name && e.source.idField() == field.name) AS joins-»
«IF joins.size > 0-»
«FOREACH joins AS join-»
            $formData['«join.source.idField()»'] = (int) FormUtil::getPassedValue('«join.source.idField()»', 0, 'POST');
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»«ENDREM»
«IF fields.typeSelect(UploadField).size > 0-»

        if ($args['commandName'] == 'create' || $args['commandName'] == 'update') {
            $formData = $this->handleUploads($formData);
        }
«ENDIF-»

        // assign fetched data
        $«obj»->merge($formData);
«ENDDEFINE»



«DEFINE handleUploads(Application app) FOR Entity-»
«LET fields.typeSelect(UploadField) AS uploadFields-»
«IF uploadFields.size > 0-»
        $uploadManager = new «app.appName()»_UploadHandler();

        $uploadFields = array(«FOREACH uploadFields AS uploadField SEPARATOR ", "»'«name.formatForCode()»'«ENDFOREACH»);
        $uploadFieldsMandatory = array(«FOREACH uploadFields.select(e|e.mandatory) AS uploadField SEPARATOR ", "»'«name.formatForCode()»'«ENDFOREACH»);
        foreach ($uploadFields as $uploadField) {
            if (!$formData[$uploadField] || $formData[$uploadField]['size'] == 0) {
                // no file uploaded
                unset($formData[$uploadField]);
                continue;
            }

            $formData[$uploadField] = $uploadManager->performFileUpload($this->objectType, $formData, $uploadField);
            if (in_array(uploadField, $uploadFieldsMandatory) && $formData[$uploadField] === false) {
                // mandatory upload has not been completed successfully
                return false;
            }

            // upload succeeded
        }
«ENDIF-»
«ENDLET-»
        return $formData;
«ENDDEFINE»
