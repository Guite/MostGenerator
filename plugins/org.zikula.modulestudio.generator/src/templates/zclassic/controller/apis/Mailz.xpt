«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE Root FOR Application-»
«FILE "lib/".msconcat(appName()).msconcat('/Api/Base/Mailz.php')-»
«EXPAND FileHelper::phpFileHeader(this)»
/**
 * Mailz api base class
 */
class «appName()»_Api_Base_Mailz extends «appName()»_Base_Installer
{
«EXPAND MailzImpl-»
}
«ENDFILE»

«FILE "lib/".msconcat(appName()).msconcat('/Api/Mailz.php')-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Mailz api implementation class
 */
class «appName()»_Api_Mailz extends «appName()»_Api_Base_Mailz
{
    // feel free to extend the mailz api here
}
«ENDFILE»

«EXPAND templates::zclassic::view::Additions::Mailz::Root»
«ENDDEFINE»

«DEFINE MailzImpl FOR Application-»
    /**
     * Get mailz plugins with type / title
     *
     * @param   $args['id']     int     optional, show specific one or all otherwise
     * @return  array
     */
    public function getPlugins($args)
    {
        $plugins = array();
        $plugins[] = array(
            'pluginid'      => 1,
            'module'        => '«appName()»',
            'title'         => $this->__('3 newest «getLeadingEntity().nameMultiple.formatForDisplay()»'),
            'description'   => $this->__('A list of the three newest «getLeadingEntity().nameMultiple.formatForDisplay()».')
        );
        $plugins[] = array(
            'pluginid'      => 2,
            'module'        => '«appName()»',
            'title'         => $this->__('3 random «getLeadingEntity().nameMultiple.formatForDisplay()»'),
            'description'   => $this->__('A list of three random «getLeadingEntity().nameMultiple.formatForDisplay()».')
        );
        return $plugins;
    }

    /*
     * get content for plugins
     *
     * @param   $args['pluginid']       int         id number of plugin (internal id for this module, see getPlugins method)
     * @param   $args['params']         string      optional, show specific one or all otherwise
     * @param   $args['uid']            int         optional, user id for user specific content
     * @param   $args['contenttype']    string      h or t for html or text
     * @param   $args['last']           datetime    timtestamp of last newsletter
     * @return  array
     */
    public function getContent($args)
    {
// $args is something like:
// Array ( [uid] => 5 [contenttype] => h [pluginid] => 1 [nid] => 1 [last] => 0000-00-00 00:00:00 [params] => Array ( [] => ) ) 1

        $objectType = '«getLeadingEntity().name.formatForCode()»';
«EXPAND templates::zclassic::controller::ControllerHelper::loadBusinessObjectClass(appName(), true)-»

        // instantiate the object collection
        $objectCollection = new $class();

/** TODO
        Loader::LoadClass('FilterUtil');
        $fu =& new FilterUtil('«appName()»', $objectArray->_objType, array('join' => &$objectArray->_objJoin));

        $filter = '';
/*        if (!empty($this->filter)) {
        $filter .= ',' . $this->filter;
        }* /
        $fu->setFilter($filter);
        $ret = $fu->GetSQL();
*/
        $sortParam = '';
        if ($args['pluginid'] == 2) $sortParam = 'RAND()';
        elseif ($args['pluginid'] == 1) $sortParam = $objectCollection->get_intIdField() . ' DESC';

        $resultsPerPage = 3;

        // get objects from database
        // while the result will be saved in the object, we assign in to a local variable for convenience.
        $objectData = $objectCollection->selectWherePaginated($var['filter'], $sortParam, -1, $resultsPerPage);

        // get total number of records for building the pagination by method call
        //$objectCount = $objectCollection->selectCount($where);

        $output = '';
        if ($args['contenttype'] == 't') { /* text */
            $counter = 0;
            $output .= "\n";
            foreach ($objectData as $object) {
                $counter++;
                $output .= $counter . '. ' . $object['«getLeadingEntity().getLeadingField().name.formatForCode()»'] . "\n";
            }
        } else {
            $this->view->setCaching(false);

            //$data = array('sorting' => $this->sorting, 'amount' => $this->amount, 'filter' => $this->filter, 'template' => $this->template);
            //$this->view->assign('vars', $data);
            $this->view->assign('objectType', '«getLeadingEntity().name.formatForCode()»')
                       ->assign('items', $objectData);

            //$output = $this->view->fetch('contenttype/itemlist_display.html');
            $output = $this->view->fetch('«appName()»_mailz_itemlist.htm');
        }
        return $output;
    }

«ENDDEFINE»

