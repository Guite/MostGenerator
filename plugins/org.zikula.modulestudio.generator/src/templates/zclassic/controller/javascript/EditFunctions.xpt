«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»start point for the javascript file with edit functionality«ENDREM»
«DEFINE Root FOR Application-»
«FILE 'javascript/'.msconcat(appName()).msconcat('_editFunctions.js')-»
<!--

«EXPAND InitUserField-»
«EXPAND RelationFunctions-»

-->
«ENDFILE»
«ENDDEFINE»

«DEFINE InitUserField FOR Application-»
«IF hasUserFields()-»
/**
 * Initialise a user field with autocompletion.
 */
function «prefix()»InitUserField(fieldName, getterName)
{
    if (!$(fieldName + 'liveusersearch')) {
        return;
    }
    $(fieldName + 'liveusersearch').removeClassName('z-hide');
    new Ajax.Autocompleter(
        fieldName + 'desc',
        fieldName + 'desc_choices',
        Zikula.Config['baseURL'] + 'ajax.php?module=«appName()»&func=' + getterName,
        {
            paramName: 'fragment',
            minChars: 3,
            afterUpdateElement: function(data) {
                $(fieldName).value = $($(data).value).value;
            }
        }
    );
}

«ENDIF-»
«ENDDEFINE»

«DEFINE RelationFunctions FOR Application-»
«IF models.relations.size > 0-»
«EXPAND InitRelatedItemsForm(prefix())-»
«EXPAND RemoveRelatedItem-»
«EXPAND ResetRelatedItemForm-»
«EXPAND ToggleRelatedItemForm-»
«EXPAND CloseWindowFromInside-»

// TODO: support auto-hiding notification windows (see http://code.zikula.org/core/ticket/2526 for more information)
«ENDIF-»
«ENDDEFINE»

«DEFINE InitRelatedItemsForm(String prefixSmall) FOR Application-»
/**
 * Initialise a relation field section with autocompletion and optional edit capabilities
 */
function «prefixSmall»InitRelationItemsForm(objectType, idPrefix, includeEditing)
{
    if ($(idPrefix + 'AddLink')) {
        $(idPrefix + 'AddLink').observe('click', function(e) { «prefixSmall»ToggleRelatedItemForm(idPrefix); });
    }
    «prefixSmall»ResetRelatedItemForm(idPrefix);

    itemPreview = '';

    var acOptions = {
            paramName: 'fragment',
            minChars: 2,
            callback: function(inputField, defaultQueryString) {
                    // Called just before the Request is actually made, allowing to modify the querystring that is sent to the server.
                    defaultQueryString += '&ot=' + objectType;
                    if ($(idPrefix + 'ExcludeList')) {
                        defaultQueryString += '&exclude=' + $F(idPrefix + 'ExcludeList');
                    }
                    return defaultQueryString;
            },
            afterUpdateElement: function(inputField, selectedListItem) {
                    // Called after the input element has been updated (i.e. when the user has selected an entry).
                    // This function is called after the built-in function that adds the list item text to the input field.
                    var componentName = $F(inputField);
                    $(idPrefix + 'SelectorId').value = selectedListItem.id;
                    if ($('itempreview' + selectedListItem.id)) {
                        itemPreview = $('itempreview' + selectedListItem.id).innerHTML;
                    }
                    $(idPrefix + 'Selector').disabled = true;
                    $(idPrefix + 'SelectorDoAdd').disabled = false;
            }
    };
    relationHandler.each(function(relationHandler) {
        if (relationHandler['prefix'] == idPrefix && relationHandler['acInstance'] == null) {
            relationHandler['acInstance'] = new Ajax.Autocompleter(
                idPrefix + 'Selector',
                idPrefix + 'SelectorChoices',
                Zikula.Config['baseURL'] + 'ajax.php?module=«appName()»&func=getItemList',
                acOptions
            );
        }
    });

    $(idPrefix + 'SelectorDoAdd').observe('click', function(e) {
        var newTitle = $F(idPrefix + 'Selector');
        var itemID = $F(idPrefix + 'SelectorId');
        var includeEditing = ($F(idPrefix + 'Mode') == '1') ? true : false;
        var editLink;
        var removeLink;

        var li = Builder.node('li', {id: idPrefix + 'Reference_' + itemID}, newTitle);
        if (includeEditing == true) {
            var editHref = $(idPrefix + 'SelectorDoNew').href + '&amp;' + objectType.toLowerCase() + '=' + itemID;
            editLink = Builder.node('a', {id: idPrefix + 'Edit', href: editHref}, 'edit');
            li.appendChild(editLink);
        }
        removeLink = Builder.node('a', {id: idPrefix + 'Remove', href: 'javascript:«prefixSmall»RemoveRelatedItem(\'' + idPrefix + '\', ' + itemID + ');'}, 'remove');
        li.appendChild(removeLink);
        if (itemPreview != '') {
            var fldPreview = Builder.node('div', {id: idPrefix + 'preview', name: idPrefix + 'preview'}, '');
            fldPreview.update(itemPreview);
            li.appendChild(fldPreview);
            itemPreview = '';
        }
        $(idPrefix + 'ReferenceList').appendChild(li);

        // show image link
        if (includeEditing == true) {
            editLink.update(' ' + editImage);
        }
        removeLink.update(' ' + removeImage);

        var excludedItemIDs = $F(idPrefix + 'ExcludeList');
        if (excludedItemIDs != '') {
            if ($F(idPrefix + 'Scope') == '0') {
                var excludedIDs = excludedItemIDs.split(',');
                excludedIDs.each(function(existingID) {
                    «prefixSmall»RemoveRelatedItem(idPrefix, existingID);
                });
                excludedItemIDs = '';
            }
            else {
                excludedItemIDs += ',';
            }
        }
        excludedItemIDs += itemID;
        $(idPrefix + 'ExcludeList').value = excludedItemIDs;

        «prefixSmall»ResetRelatedItemForm(idPrefix);
    });
    $(idPrefix + 'SelectorDoCancel').observe('click', function(e) { «prefixSmall»ResetRelatedItemForm(idPrefix); });

    if (!includeEditing || !$(idPrefix + 'SelectorDoNew')) {
        return;
    }

    // from here inline editing will be handled
    $(idPrefix + 'SelectorDoNew').observe('click', function(e) {
        relationHandler.each(function(relationHandler) {
            if (relationHandler['prefix'] == idPrefix) {
                if (relationHandler['windowInstance'] != null) {
                    relationHandler['windowInstance'].destroy();
                }
                relationHandler['windowInstance'] = new Zikula.UI.Window(
                    $(idPrefix + 'SelectorDoNew'),
                    {
                        minmax: true,
                        resizable: true,
                        //title: $F(idPrefix + 'SelectorDoNew'),
                        width: 600,
                        initMaxHeight: 500,
                        modal: false,
                        iframe: true
                    }
                );
            }
        });

        e.stop();
        return false;
    });
}

«ENDDEFINE»

«DEFINE CloseWindowFromInside FOR Application-»
/**
 * Closes an iframe from the document displayed in it
 */
function «prefix()»CloseWindowFromInside(idPrefix, itemID)
{
    if (window.parent != "") {
        window.parent.relationHandler.each(function(relationHandler) {
            if (relationHandler['prefix'] == '{$idPrefix}') {
                if ($itemId > 0) {
                    if (relationHandler['acInstance'] != null) {
                        relationHandler['acInstance'].activate();
                        Zikula.UI.Alert('Action has been done', 'Information');
                    }
                }
                if (relationHandler['windowInstance'] != null) {
                    relationHandler['windowInstance'].closeHandler();
                }
            }
        });
    }
}

«ENDDEFINE»

«DEFINE RemoveRelatedItem FOR Application-»
/**
 * Removes a related item from the list of selected ones.
 */
function «prefix()»RemoveRelatedItem(idPrefix, itemID)
{
    var excludedItemIDs = $F(idPrefix + 'ExcludeList');
    var excludedIDs = excludedItemIDs.split(',');
    excludedIDs = excludedIDs.without(itemID);
    excludedItemIDs = excludedIDs.join(',');
    $(idPrefix + 'ExcludeList').value = excludedItemIDs;
    $(idPrefix + 'Reference_' + itemID).remove();
}

«ENDDEFINE»

«DEFINE ResetRelatedItemForm FOR Application-»
/**
 * Resets an auto completion field.
 */
function «prefix()»ResetRelatedItemForm(idPrefix)
{
    «prefix()»ToggleRelatedItemForm(idPrefix);
    $(idPrefix + 'Selector').disabled = false;
    $(idPrefix + 'Selector').value = '';
    $(idPrefix + 'SelectorDoAdd').disabled = true;
}

«ENDDEFINE»

«DEFINE ToggleRelatedItemForm FOR Application-»
/**
 * Toggles the fields of an auto completion field.
 */
function «prefix()»ToggleRelatedItemForm(idPrefix)
{
    if (!$(idPrefix + 'AddLink')) {
        return;
    }
    $(idPrefix + 'AddLink').toggle();
    $(idPrefix + 'AddFields').toggle();
}

«ENDDEFINE»

