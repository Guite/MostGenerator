«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»start point for the javascript file with edit functionality«ENDREM»
«DEFINE Root FOR Application-»
«FILE 'javascript/'.msconcat(appName()).msconcat('_editFunctions.js')-»
<!--

«EXPAND InitUserField-»
«EXPAND RelationFunctions-»

-->
«ENDFILE»
«ENDDEFINE»

«DEFINE InitUserField FOR Application-»
«IF hasUserFields()-»
/**
 * Initialise a user field with autocompletion.
 */
function «prefix()»InitUserField(fieldName, getterName)
{
    if (!$(fieldName + 'liveusersearch')) {
        return;
    }
    $(fieldName + 'liveusersearch').removeClassName('z-hide');
    new Ajax.Autocompleter(
        fieldName + 'desc',
        fieldName + 'desc_choices',
        Zikula.Config['baseURL'] + 'ajax.php?module=«appName()»&func=' + getterName,
        {
            paramName: 'fragment',
            minChars: 3,
            afterUpdateElement: function(data) {
                $(fieldName).value = $($(data).value).value;
            }
        }
    );
}

«ENDIF-»
«ENDDEFINE»

«DEFINE RelationFunctions FOR Application-»
«IF models.relations.size > 0-»
«EXPAND InitRelatedItemsForm(prefix())-»
«EXPAND RemoveRelatedItem-»
«EXPAND ResetRelatedItemForm-»
«EXPAND ToggleRelatedItemForm-»
«EXPAND FakeKeyPress-»
«EXPAND ResetCreateRelatedItemForm-»
«ENDIF-»
«ENDDEFINE»

«DEFINE InitRelatedItemsForm(String prefixSmall) FOR Application-»
/**
 * Initialise a relation field section with autocompletion and optional edit capabilities
 */
function «prefixSmall»InitRelationItemsForm(objectType, idPrefix, includeEditing)
{
    $(idPrefix + 'AddLink').observe('click', «prefixSmall»ToggleRelatedItemForm);
    «prefixSmall»ResetRelatedItemForm();

    itemPreview = '';

    var acOptions = {
            paramName: 'fragment',
            minChars: 2,
            callback: function(inputField, defaultQueryString) {
                    // Called just before the Request is actually made, allowing to modify the querystring that is sent to the server.
                    defaultQueryString += '&ot=' + objectType + '&exclude=' + $F(idPrefix + 'ExcludeList');
                    return defaultQueryString;
            },
            afterUpdateElement: function(inputField, selectedListItem) {
                    // Called after the input element has been updated (i.e. when the user has selected an entry).
                    // This function is called after the built-in function that adds the list item text to the input field.
                    var componentName = $F(inputField);
                    $(idPrefix + 'SelectorId').value = selectedListItem.id;
                    if (objectType == 'mediaItem') {
                        itemPreview = $('itempreview' + selectedListItem.id).innerHTML;
                    }
                    if (includeEditing) {
                        $('«prefixSmall»newcollectionitem').disabled = true;
                        $(idPrefix + 'SelectorDoAdd').disabled = false;
                    }
            }
    };
    new Ajax.Autocompleter(
        idPrefix + 'Selector',
        idPrefix + 'SelectorChoices',
        Zikula.Config['baseURL'] + 'ajax.php?module=«appName()»&func=getItemList',
        acOptions
    );

    $(idPrefix + 'SelectorDoAdd').observe('click', function() {
        var newTitle = $F(prefix + 'Selector');
        var itemID = $F(idPrefix + 'SelectorId');
        var li = Builder.node('li', {id: idPrefix + 'Reference_' + itemID}, newTitle);
        var removeLink = Builder.node('a', {id: idPrefix + 'remove', href: 'javascript:«prefixSmall»RemoveRelatedItem(\'' + idPrefix + '\', ' + itemID + ');'}, 'remove');
        li.appendChild(removeLink);
        if (objectType == 'mediaItem') {
            var fldPreview = Builder.node('div', {id: idPrefix + 'preview', name: idPrefix + 'preview'}, '');
            fldPreview.update(mediaItemPreview);
            li.appendChild(fldPreview);
        }
        $(idPrefix + 'ReferenceList').appendChild(li);

        // show image link
        removeLink.update(' ' + removeImage);

        var excludedItemIDs = $F(idPrefix + 'ExcludeList');
        if (excludedItemIDs != '') {
            excludedItemIDs += ',';
        }
        excludedItemIDs += itemID;
        $(idPrefix + 'ExcludeList').value = excludedItemIDs;

        «prefixSmall»ResetRelatedItemForm();
    });
    $(idPrefix + 'SelectorDoCancel').observe('click', «prefixSmall»ResetRelatedItemForm);

    if (!includeEditing || !$('«prefixSmall»newcollectionform')) {
        return;
    }

    // from here inline editing will be handled
    $('«prefixSmall»newcollectionform').hide();
    $('«prefixSmall»collectionitemdonew').observe('click', function() {
        $('createnewcollection_title').value = $F('«prefixSmall»newcollectionitem');
        $('«prefixSmall»newcollectionform').show();
        «prefixSmall»ResetRelatedItemForm(); // hide
    });

    $('«prefixSmall»createcollectionsave').observe('click', function() {
        if ($F('createnewcollection_title') == '') {
            alert('Please enter a title for the new item!');
            return false;
        }

        $('«prefixSmall»createcollectionsave').disabled = true;
        $('«prefixSmall»createcollectioncancel').disabled = true;

        var pars = 'module=«appName()»&func=createCollection'
                    + '&title=' + encodeURIComponent($F('createnewcollection_title'))
                    + '&description=' + encodeURIComponent($F('createnewcollection_description'));

        var myAjax = new Ajax.Request('ajax.php', {
            method: 'post',
            parameters: pars,
            onSuccess: function(req) {
                var json = pndejsonize(req.responseText);
                if (json.mediacollectionid) {
                    $('«prefixSmall»newcollectionitem').value = $F('createnewcollection_title');
                    «prefixSmall»ToggleRelatedItemForm();
                    «prefixSmall»ResetCreateRelatedItemForm();
                    $('«prefixSmall»newcollectionform').hide();
                    //«prefixSmall»FakeKeyPress('«prefixSmall»newcollectionitem');
                    $('«prefixSmall»newcollectionitem').activate();
                }
                else alert('Error! Could not create the new item.');
                $('«prefixSmall»createcollectionsave').disabled = false;
                $('«prefixSmall»createcollectioncancel').disabled = false;
            }
        });
    });
    $('«prefixSmall»createcollectioncancel').observe('click', «prefixSmall»ResetCreateRelatedItemForm);
}
«ENDDEFINE»

«DEFINE RemoveRelatedItem FOR Application-»
/**
 * Removes a related item from the list of selected ones.
 */
function «prefix()»RemoveRelatedItem(idPrefix, itemID)
{
    var excludedItemIDs = $F(idPrefix + 'ExcludeList');
    var excludedIDs = excludedItemIDs.split(',');
    excludedIDs = excludedIDs.without(itemID);
    excludedItemIDs = excludedIDs.join(',');
    $(idPrefix + 'ReferenceList').value = excludedItemIDs;
    $(idPrefix + 'Reference_' + itemID).remove();
}
«ENDDEFINE»

«DEFINE ResetRelatedItemForm FOR Application-»
/**
 * Resets an auto completion field.
 */
function «prefix()»ResetRelatedItemForm()
{
    «prefix()»ToggleRelatedItemForm();

    $('«prefix()»newcollectionitem').disabled = false;
    $('«prefix()»newcollectionitem').value = '';

    $('«prefix()»collectionitemdoadd').disabled = true;
}
«ENDDEFINE»

«DEFINE ToggleRelatedItemForm FOR Application-»
/**
 * Toggles the fields of an auto completion field.
 */
function «prefix()»ToggleRelatedItemForm()
{
    $('«prefix()»addcollectionitem').toggle();
    $('«prefix()»collectionitemaddfields').toggle();
}
«ENDDEFINE»

«DEFINE FakeKeyPress FOR Application-»
«REM»trying activate() instead - see http://stackoverflow.com/questions/124935/how-do-i-make-an-ajax-autocompleter-perform-a-request-without-typing
/**
 * Performs a key press to activate auto completion automatically.
 */
function «prefixSmall»FakeKeyPress(input_id) {
    var input = $(input_id);
    if (input.fireEvent) {
      // ie stuff
      var evt = document.createEventObject();
      evt.keyCode = 67;
      $(input_id).fireEvent("onKeyDown", evt);
    } else {
      // firefox stuff
      var evt = document.createEvent("KeyboardEvent");
      evt.initKeyEvent('keydown', true, true, null, false, false, false, false, 27, 0);
      var canceled = !$(input_id).dispatchEvent(evt);
    }
}«ENDREM»
«ENDDEFINE»

«DEFINE ResetCreateRelatedItemForm FOR Application-»
/**
 * Resets the form for editing a related object or creating a new one.
 */
function «prefix()»ResetCreateRelatedItemForm(objectType)
{
    if (!$('«prefix()»new' + objectType + 'form')) {
        return;
    }
    $('«prefix()»new' + objectType + 'form').hide();

    $('createnew' + objectType + '_title').value = '';
    $('createnew' + objectType + '_description').update('');
}
«ENDDEFINE»



