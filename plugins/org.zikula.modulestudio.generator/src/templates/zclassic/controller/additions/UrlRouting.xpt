«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»start point for the Factory creation«ENDREM»
«DEFINE Root FOR Application»
    «FILE "lib/".msconcat(appName()).msconcat("/Base/RouterFacade.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND RouterFacadeBase-»«ENDFILE»
    «FILE "lib/".msconcat(appName()).msconcat("/RouterFacade.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND RouterFacadeImpl-»«ENDFILE»
«ENDDEFINE»

«DEFINE RouterFacadeBase FOR Application-»
«LET appName() AS appName-»
/**
 * Url router facade base class
 */
class «appName»_Base_RouterFacade
{
    /**
     * @var Zikula_Routing_UrlRouter The router which is used internally
     */
    protected $router;

    /**
     * @var array Common requirement definitions
     */
    protected $requirements;

    /**
     * Constructor.
     */
    function __construct()
    {
        $displayDefaultEnding = System::getVar('shorturlsext', 'html');
«REM»Modifier: + (1..n), * (0..n), ? (0..1), {x,y} (x..y)«ENDREM»«""-»
        $this->requirements = array(
            'func'          => '\w+',
            'ot'            => '\w+',
            'title'         => '[^/.]+', // title used for slugs ([^/.]+ = all chars except / and .)
            'displayending' => '(?:' . $displayDefaultEnding . '|xml|pdf)',
            'viewending'    => '(?:\.csv|\.rss|\.atom|\.xml|\.pdf)?',
            'id'            => '\d+'
        );

        // initialise and reference router instance
        $this->router = new Zikula_Routing_UrlRouter();

        // add generic routes
        return $this->initUrlRoutes();
    }
«EXPAND InitUrlRoutes-»
«EXPAND GetGroupingFolderFromObjectType-»
«EXPAND GetObjectTypeFromGroupingFolder-»
«EXPAND GetFormattedSlug-»

«EXPAND FileHelper::GetterAndSetterMethods('router', 'Zikula_Routing_UrlRouter')»
«ENDLET-»
}
«ENDDEFINE»

«DEFINE InitUrlRoutes FOR Application-»

«LET appName() AS appName-»
«LET getUserController() AS userController-»
    /**
     * Initialise the url routes for this application.
     *
     * @return       Zikula_Routing_UrlRouter the router instance treating all initialised routes
     */
    protected function initUrlRoutes()
    {
        $fieldRequirements = $this->requirements;
        $isDefaultModule = (System::getVar('shorturlsdefaultmodule', '') == '«appName»');

        $defaults = array();
        $modulePrefix = '';
        if (!$isDefaultModule) {
            $defaults['module'] = '«appName»';
            $modulePrefix = ':module/';
        }

«IF userController.hasActions('view')-»
        $defaults['func'] = 'view';
        $viewFolder = 'view';
        // normal views (e.g. orders/ or customers.xml)
        $this->router->set('va', new Zikula_Routing_UrlRoute($modulePrefix . $viewFolder . '/:ot:viewending', $defaults, $fieldRequirements));

        // filter views (e.g. /orders/customer/mr-smith.csv)
        // TODO: incorporate later
        // $this->initRouteForEachSlugType('vn', $modulePrefix . $viewFolder . '/:ot/:filterot/', ':viewending', $defaults, $fieldRequirements);
«ENDIF-»

«IF userController.hasActions('display')-»
        $defaults['func'] = 'display';
        // normal display pages including the group folder corresponding to the object type
        $this->initRouteForEachSlugType('dn', $modulePrefix . ':ot/', ':displayending', $defaults, $fieldRequirements);

        // additional rules for the leading object type (where ot is omitted)
        $defaults['ot'] = '«getLeadingEntity().name.formatForCode()»';
        $this->initRouteForEachSlugType('dl', $modulePrefix . '', ':displayending', $defaults, $fieldRequirements);
«ENDIF-»

        return $this->router;
    }

    /**
     * Helper function to route permalinks for different slug types
     */
    protected function initRouteForEachSlugType($prefix, $patternStart, $patternEnd, $defaults, $fieldRequirements)
    {
        // entities with unique slug (slug only)
        $this->router->set($prefix . 'a', new Zikula_Routing_UrlRoute($patternStart . ':title.' . $patternEnd,        $defaults, $fieldRequirements));
        // entities with non-unique slug (slug and id)
        $this->router->set($prefix . 'b', new Zikula_Routing_UrlRoute($patternStart . ':title.:id.' . $patternEnd,    $defaults, $fieldRequirements));
        // entities without slug (id)
        $this->router->set($prefix . 'c', new Zikula_Routing_UrlRoute($patternStart . 'id.:id.' . $patternEnd,        $defaults, $fieldRequirements));
    }
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE GetGroupingFolderFromObjectType FOR Application-»
«LET getUserController() AS userController-»

    /**
     * Get name of grouping folder for given object type and function.
     *
     * @param        objectType     string        name of treated entity type
     * @param        func           string        name of function
     * @return       string the name of the group folder
     */
    public function getGroupingFolderFromObjectType($objectType, $func)
    {
        // object type will be used as a fallback
        $groupFolder = $objectType;

        if ($func == 'view') {
            switch ($objectType) {
«EXPAND GetGroupingFolderFromObjectType(true) FOREACH models.entities-»
                default: return '';
            }
        }
        else if ($func == 'display') {
            switch ($objectType) {
«EXPAND GetGroupingFolderFromObjectType(false) FOREACH models.entities-»
                default: return '';
            }
        }

        return $groupFolder;
    }
«ENDLET-»
«ENDDEFINE»

«DEFINE GetObjectTypeFromGroupingFolder FOR Application-»
«LET getUserController() AS userController-»

    /**
     * Get name of object type based on given grouping folder
     *
     * @param        groupFolder    string        name of group folder
     * @param        func           string        name of function
     * @return       string the name of the object type
     */
    public function getObjectTypeFromGroupingFolder($groupFolder, $func)
    {
        // group folder will be used as a fallback
        $objectType = $groupFolder;

        if ($func == 'view') {
            switch ($groupFolder) {
«EXPAND GetObjectTypeFromGroupingFolder(true) FOREACH models.entities-»
                default: return '';
            }
        }
        else if ($func == 'display') {
            switch ($groupFolder) {
«EXPAND GetObjectTypeFromGroupingFolder(false) FOREACH models.entities-»
                default: return '';
            }
        }

        return $objectType;
    }
«ENDLET-»
«ENDDEFINE»

«DEFINE GetGroupingFolderFromObjectType(Boolean plural) FOR Entity-»
                case '«name.formatForCode()»':
                            $groupFolder = '«getEntityNameSingularPlural(plural).formatForDB()»';
                            break;
«ENDDEFINE»

«DEFINE GetObjectTypeFromGroupingFolder(Boolean plural) FOR Entity-»
                case '«getEntityNameSingularPlural(plural).formatForDB()»':
                            $objectType = '«name.formatForCode()»';
                            break;
«ENDDEFINE»

«DEFINE GetFormattedSlug FOR Application-»

    /**
     * Get permalink value based on slug properties.
     *
     * @param        objectType     string        name of treated entity type
     * @param        func           string        name of function
     * @param        args           array         additional parameters
     * @param        itemid         integer       identifier of treated item
     * @return       string the resulting url ending
     */
    public function getFormattedSlug($objectType, $func, $args, $itemid)
    {
        $slug = '';

        switch ($objectType) {
«EXPAND GetSlugForItem FOREACH models.entities-»
        }

        return $slug;
    }
«ENDDEFINE»

«DEFINE GetSlugForItem FOR Entity-»
            case '«name.formatForCode()»':
«IF sluggable-»
«EXPAND templates::zclassic::controller::ControllerHelper::instantiateBusinessObject(container.application.appName(), false, 'api', 'RouteFacade', 'getFormattedSlug')-»
                        $item = $object->selectById($itemid);
«LET ((sluggableFieldAlias != null && sluggableFieldAlias != "") ? sluggableFieldAlias : sluggableFieldName).formatForCode() AS sluggableFieldRealName-»
«IF sluggableUnique-»
                        $slug = $item['«sluggableFieldRealName»'];
«ELSE-»
                        $slug = $item['«sluggableFieldRealName»'] . $item['«idField()»'];
«ENDIF-»
«ENDLET-»
«ELSE-»
                        $slug = $itemid;
«ENDIF-»
                        break;
«ENDDEFINE»

«DEFINE RouterFacadeImpl FOR Application-»
/**
 * Url router facade implementation class
 */
class «appName()»_RouterFacade extends «appName()»_Base_RouterFacade
{
    // here you can customise the data which is provided to the url router 
}
«ENDDEFINE»
