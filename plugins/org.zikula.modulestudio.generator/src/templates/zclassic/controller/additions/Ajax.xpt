«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE AdditionalAjaxFunctions(Application app) FOR Controller-»«ENDDEFINE»
«DEFINE AdditionalAjaxFunctions(Application app) FOR AjaxController-»
«LET app.getUserFields() AS userFields-»
«IF !userFields.isEmpty-»
«FOREACH userFields AS userField-»

    public function get«userField.entity.name.formatForCodeCapital()»«userField.actualFieldName().formatForCodeCapital()»Users()
    {
        return $this->getCommonUsersList();
    }
«ENDFOREACH-»

    /**
     * Retrieve a general purpose list of users
     */ 
    public function getCommonUsersList()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            return true;
        }

        $fragment = FormUtil::getpassedValue('fragment');

        ModUtil::dbInfoLoad('Users');
        $tables = DBUtil::getTables();

        $usersColumn = $tables['users_column'];

        $where = 'WHERE ' . $usersColumn['uname'] . ' REGEXP \'(' . DataUtil::formatForStore($fragment) . ')\'';
        $results = DBUtil::selectObjectArray('users', $where);

        $out = '<ul>';
        if (is_array($results) && count($results) > 0) {
            foreach($results as $result) {
                $out .= '<li>' . DataUtil::formatForDisplay($result['uname']) . '<input type="hidden" id="' . DataUtil::formatForDisplay($result['uname']) . '" value="' . $result['uid'] . '" /></li>';
            }
        }
        $out .= '</ul>';
        echo $out;
        return true;
    }
«ENDIF-»
«ENDLET-»

«LET app.models.getJoinRelations() AS joinRelations-»
«IF !joinRelations.isEmpty-»

    /**
     * Searches for entities for auto completion usage
     *
     * @param        ot             string    treated object type
     * @param        fragment       string    the fragment of the entered item name
     * @param        exclude        string    comma separated list with ids of other items (to be excluded from search)
     * @return void nothing, direct output using echo
     */
    public function getItemList()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            return true;
        }

        $objectType = FormUtil::getPassedValue('ot', '«app.getLeadingEntity().name.formatForCode()»');
        if (!in_array($objectType, «app.appName()»_Util::getObjectTypes('controllerAction', array('controller' => '«name()»', 'action' => 'getItemList')))) {
            $objectType = '«app.getLeadingEntity().name.formatForCode()»';
        }

        $idField = strtolower($objectType) . 'id';
«EXPAND templates::zclassic::controller::ControllerHelper::instantiateBusinessObject(app.appName(), true, 'controllerAction', name(), 'getItemList')-»

        $fragment = FormUtil::getPassedValue('fragment');
        $exclude = FormUtil::getPassedValue('exclude', '');

        // parameter for used sorting field
        $sort = FormUtil::getPassedValue('sort', '', 'GET');
«EXPAND templates::zclassic::controller::ControllerHelper::DefaultSorting-»

        $currentPage = 1;
        $resultsPerPage = 20;

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' asc';

        $fragment = DataUtil::formatForStore($fragment);

        // TODO: move into Doctrine_Table subclasses and refactor to Doctrine_Query instance.
        if (!empty($exclude)) {
            $where = $idField . ' NOT IN (' . DataUtil::formatForStore($exclude) . ')';
        }

        $whereSub = '';
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
            case '«entity.name.formatForCode()»':
«FOREACH entity.getDerivedFields().reject(e|e.primaryKey || e.metaType == ArrayField || e.metaType == ObjectField) AS field-»
                    $whereSub .= ((!empty($whereSub)) ? ' OR ' : '') . '«field.actualFieldName()» «IF field.metaType == StringField || field.metaType == TextField»LIKE \'%' . $fragment . '%\'«ELSE»= \'' . $fragment . '\'«ENDIF»';
«ENDFOREACH-»
                    break;
«ENDFOREACH-»
        }
        if (!empty($whereSub)) {
            $where .= ((!empty($where)) ? ' AND (' . $whereSub . ')' : $whereSub);
        }


        // get objects from database
        // while the result will be saved in the object, we assign in to a local variable for convenience.
        $objectData = $objectCollection->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);

        $out = '<ul>';
        if (is_array($objectData) && count($objectData) > 0) {
            $titleFieldName = $descriptionFieldName = '';

            switch ($objectType) {
«FOREACH app.models.entities AS entity-»
                case '«entity.name.formatForCode()»':
                        $titleFieldName = '«entity.getLeadingField().actualFieldName().formatForCode()»';
«LET entity.fields.typeSelect(TextField).reject(e|e.leading) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ELSE-»
«LET entity.fields.typeSelect(StringField).reject(e|e.leading) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ENDIF-»
«ENDLET-»
«ENDIF-»
«ENDLET-»
                        break;
«ENDFOREACH-»
            }

            foreach ($objectData as $item) {
                // class="informal" --> show in dropdown, but do not copy in the input field after selection
                $itemTitle = $item[$titleFieldName];
                $itemTitleStripped = str_replace('"', '', $itemTitle);
                $itemDescription = ((isset($item[$descriptionFieldName]) && !empty($item[$descriptionFieldName])) ? $item[$descriptionFieldName] : '');//$this->__('No description yet.'));
                $out .= '<li id="' . $item[$idField] . '" title="' . $itemTitleStripped . '">';
                $out .= '<div class="itemtitle">' . $itemTitle . '</div>';
                if (!empty($itemDescription)) {
                    $out .= '<div class="itemdesc informal">' . $itemDescription . '</div>';
                }
«IF app.models.entities.exists(e|e.hasImageFields())-»
                // check for preview image
                $previewFieldName = '';
                switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«IF entity.hasImageFields()-»
                    case '«entity.name.formatForCode()»':
                            $previewFieldName = '«entity.getImageFields().get(0).actualFieldName().formatForCode()»';
                            break;
«ENDIF»
«ENDFOREACH-»
                }
                if (!empty($previewFieldName) && isset($item[$previewFieldName . 'FullPath'])) {
                    $thumbWidth = 100;
                    $thumbHeight = 80;
                    $thumbImagePath = «app.appName()»_Util::getImageThumb($item[$previewFieldName], $item[$previewFieldName . 'FullPath'], $thumbWidth, $thumbHeight);
                    $preview = '<img src="' . $thumbImagePath . '" width="' . $thumbWidth . '" height="' . $thumbHeight . '" alt="' . $itemTitleStripped . '" />';
                    $out .= '<div class="itempreview informal" id="itempreview' . $item[$idField] . '">' . $preview . '</div>';
                }
«ENDIF-»
                $out .= '</li>';
            }
        }
        $out .= '</ul>';
        echo $out;
        return true;
    }
«ENDIF-»
«ENDLET-»
«IF app.models.entities.exists(e|e.getUniqueDerivedFields().reject(e|e.primaryKey).size > 0)-»

    /**
     * Checks whether a field value is a duplicate or not
     *
     * @param        ot             string    treated object type
     * @param        fragment       string    the fragment of the entered item name
     * @param        exclude        string    comma separated list with ids of other items (to be excluded from search)
     * @return void nothing, direct output using echo
     */
    public function checkForDuplicate()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            return false;
        }

        $objectType = FormUtil::getPassedValue('ot', '«app.getLeadingEntity().name.formatForCode()»', 'POST');
        if (!in_array($objectType, «app.appName()»_Util::getObjectTypes('controllerAction', array('controller' => '«name()»', 'action' => 'checkForDuplicate')))) {
            $objectType = '«app.getLeadingEntity().name.formatForCode()»';
        }

        $fieldName = FormUtil::getPassedValue('fn', '', 'POST');
        $value = FormUtil::getPassedValue('v', '', 'POST');

        if (empty($fieldName) || empty($value)) {
            return false;
        }

        // check if the given field is existing and unique
        $uniqueFields = array();
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«LET entity.getUniqueDerivedFields().reject(e|e.primaryKey) AS uniqueFields-»
«IF !uniqueFields.isEmpty-»
            case '«entity.name.formatForCode()»':
                    $uniqueFields = array(«FOREACH uniqueFields AS uniqueField SEPARATOR ', '»'«uniqueField.actualFieldName().formatForCode()»'«ENDFOREACH»);
                    break;
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        }
        if (!count($uniqueFields) || !in_array($fieldName, $uniqueFields)) {
            return false;
        }

        $exclude = (int) FormUtil::getPassedValue('ex', 0, 'POST');

«EXPAND templates::zclassic::controller::ControllerHelper::instantiateBusinessObject(app.appName(), false, 'controllerAction', name(), 'checkForDuplicate')-»

        $result = false;
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«LET entity.getUniqueDerivedFields().reject(e|e.primaryKey) AS uniqueFields-»
«IF !uniqueFields.isEmpty-»
            case '«entity.name.formatForCode()»':
                    switch ($fieldName) {
«FOREACH uniqueFields AS uniqueField-»
                        case '«uniqueField.actualFieldName().formatForCode()»':
                                $result = $object->get_intValidator()->checkIf«uniqueField.actualFieldName().formatForCodeCapital()»Exists($value, $exclude);
                                break;
«ENDFOREACH-»
                    }
                    break;
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        }

        // output the results
        AjaxUtil::output(array('isDuplicate' => $result));
    }
«ENDIF-»

«ENDDEFINE»

