«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE AdditionalAjaxFunctions(Application app) FOR Controller-»«ENDDEFINE»
«DEFINE AdditionalAjaxFunctions(Application app) FOR AjaxController-»
«LET app.getUserFields() AS userFields-»
«IF !userFields.isEmpty-»
«FOREACH userFields AS userField-»

    public function get«userField.entity.name.formatForCodeCapital()»«userField.actualFieldName().formatForCodeCapital()»Users()
    {
        return $this->getCommonUsersList();
    }
«ENDFOREACH-»

    /**
     * Retrieve a general purpose list of users.
     */ 
    public function getCommonUsersList()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            return true;
        }

        $fragment = FormUtil::getpassedValue('fragment', '', 'GETPOST');

        ModUtil::dbInfoLoad('Users');
        $tables = DBUtil::getTables();

        $usersColumn = $tables['users_column'];

        $where = 'WHERE ' . $usersColumn['uname'] . ' REGEXP \'(' . DataUtil::formatForStore($fragment) . ')\'';
        $results = DBUtil::selectObjectArray('users', $where);

        $out = '<ul>';
        if (is_array($results) && count($results) > 0) {
            foreach($results as $result) {
                $out .= '<li>' . DataUtil::formatForDisplay($result['uname']) . '<input type="hidden" id="' . DataUtil::formatForDisplay($result['uname']) . '" value="' . $result['uid'] . '" /></li>';
            }
        }
        $out .= '</ul>';
        return new Zikula_Response_Ajax_Plain($out);
    }
«ENDIF-»
«ENDLET-»

«LET app.models.getJoinRelations() AS joinRelations-»
«IF !joinRelations.isEmpty-»

    /**
     * Searches for entities for auto completion usage.
     *
     * @param string $ot       Treated object type.
     * @param string $fragment The fragment of the entered item name.
     * @param string $exclude  Comma separated list with ids of other items (to be excluded from search).
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function getItemList()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            return true;
        }

        $objectType = FormUtil::getPassedValue('ot', '«app.getLeadingEntity().name.formatForCode()»', 'GETPOST', FILTER_SANITIZE_STRING);
        if (!in_array($objectType, «app.appName()»_Util::getObjectTypes('controllerAction', array('controller' => '«name()»', 'action' => 'getItemList')))) {
            $objectType = «app.appName()»_Util::getDefaultObjectType('controllerAction', array('controller' => '«name()»', 'action' => 'getItemList'));
        }

        $idField = strtolower($objectType) . 'id';
«EXPAND templates::zclassic::controller::ControllerHelper::instantiateBusinessObject(app.appName(), true, 'controllerAction', name(), 'getItemList')-»

        $fragment = FormUtil::getPassedValue('fragment', '', 'GETPOST');
        $exclude = FormUtil::getPassedValue('exclude', '', 'GETPOST');

        // parameter for used sorting field
        $sort = FormUtil::getPassedValue('sort', '', 'GET');
«EXPAND templates::zclassic::controller::ControllerHelper::DefaultSorting-»

        $currentPage = 1;
        $resultsPerPage = 20;

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' asc';

        $fragment = DataUtil::formatForStore($fragment);

        // TODO: move into Doctrine_Table subclasses and refactor to Doctrine_Query instance.
        if (!empty($exclude)) {
            $where = $idField . ' NOT IN (' . DataUtil::formatForStore($exclude) . ')';
        }

        $whereSub = '';
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
            case '«entity.name.formatForCode()»':
«FOREACH entity.getDerivedFields().reject(e|e.primaryKey || e.metaType == BooleanField || e.metaType == ArrayField || e.metaType == ObjectField) AS field-»
                    $whereSub .= ((!empty($whereSub)) ? ' OR ' : '') . '«field.actualFieldName()» «IF field.metaType == StringField || field.metaType == TextField»LIKE \'%' . $fragment . '%\'«ELSE»= \'' . $fragment . '\'«ENDIF»';
«ENDFOREACH-»
                    break;
«ENDFOREACH-»
        }
        if (!empty($whereSub)) {
            $where .= ((!empty($where)) ? ' AND (' . $whereSub . ')' : $whereSub);
        }


        // get objects from database
        // while the result will be saved in the object, we assign in to a local variable for convenience.
        $objectData = $objectCollection->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);

        $out = '<ul>';
        if (is_array($objectData) && count($objectData) > 0) {
            $titleFieldName = $descriptionFieldName = '';

            switch ($objectType) {
«FOREACH app.models.entities AS entity-»
                case '«entity.name.formatForCode()»':
                        $titleFieldName = '«entity.getLeadingField().actualFieldName().formatForCode()»';
«LET entity.fields.typeSelect(TextField).reject(e|e.leading) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ELSE-»
«LET entity.fields.typeSelect(StringField).reject(e|e.leading) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ENDIF-»
«ENDLET-»
«ENDIF-»
«ENDLET-»
                        break;
«ENDFOREACH-»
            }

            foreach ($objectData as $item) {
                // class="informal" --> show in dropdown, but do not copy in the input field after selection
                $itemTitle = $item[$titleFieldName];
                $itemTitleStripped = str_replace('"', '', $itemTitle);
                $itemDescription = ((isset($item[$descriptionFieldName]) && !empty($item[$descriptionFieldName])) ? $item[$descriptionFieldName] : '');//$this->__('No description yet.'));
                $out .= '<li id="' . $item[$idField] . '" title="' . $itemTitleStripped . '">';
                $out .= '<div class="itemtitle">' . $itemTitle . '</div>';
                if (!empty($itemDescription)) {
                    $out .= '<div class="itemdesc informal">' . $itemDescription . '</div>';
                }
«IF app.models.entities.exists(e|e.hasImageFields())-»
                // check for preview image
                $previewFieldName = '';
                switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«IF entity.hasImageFields()-»
                    case '«entity.name.formatForCode()»':
                            $previewFieldName = '«entity.getImageFields().get(0).actualFieldName().formatForCode()»';
                            break;
«ENDIF»
«ENDFOREACH-»
                }
                if (!empty($previewFieldName) && isset($item[$previewFieldName . 'FullPath'])) {
                    $thumbWidth = 100;
                    $thumbHeight = 80;
                    $thumbImagePath = «app.appName()»_Util::getImageThumb($item[$previewFieldName], $item[$previewFieldName . 'FullPath'], $thumbWidth, $thumbHeight);
                    $preview = '<img src="' . $thumbImagePath . '" width="' . $thumbWidth . '" height="' . $thumbHeight . '" alt="' . $itemTitleStripped . '" />';
                    $out .= '<div class="itempreview informal" id="itempreview' . $item[$idField] . '">' . $preview . '</div>';
                }
«ENDIF-»
                $out .= '</li>';
            }
        }
        $out .= '</ul>';
        return new Zikula_Response_Ajax_Plain($out);
    }
«ENDIF-»
«ENDLET-»
«IF app.models.entities.exists(e|e.getUniqueDerivedFields().reject(e|e.primaryKey).size > 0)-»

    /**
     * Checks whether a field value is a duplicate or not.
     *
     * @param string $ot       Treated object type.
     * @param string $fragment The fragment of the entered item name.
     * @param string $exclude  Comma separated list with ids of other items (to be excluded from search).
     *
     * @throws Zikula_Exception If something fatal occurs.
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function checkForDuplicate()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            LogUtil::registerPermissionError(null, true);
            throw new Zikula_Exception_Forbidden();
        }
/*
        // test authid and throw an exception on failure
        if (!SecurityUtil::confirmAuthKey()) {
            LogUtil::registerAuthidError();
            throw new Zikula_Exception_Fatal();
        }
*/
        $objectType = FormUtil::getPassedValue('ot', '«app.getLeadingEntity().name.formatForCode()»', 'POST', FILTER_SANITIZE_STRING);
        if (!in_array($objectType, «app.appName()»_Util::getObjectTypes('controllerAction', array('controller' => '«name()»', 'action' => 'checkForDuplicate')))) {
            $objectType = «app.appName()»_Util::getDefaultObjectType('controllerAction', array('controller' => '«name()»', 'action' => 'checkForDuplicate'));
        }

        $fieldName = FormUtil::getPassedValue('fn', '', 'POST', FILTER_SANITIZE_STRING);
        $value = FormUtil::getPassedValue('v', '', 'POST');

        if (empty($fieldName) || empty($value)) {
            return new Zikula_Response_Ajax_BadData($this->__('Invalid input'));
        }

        // check if the given field is existing and unique
        $uniqueFields = array();
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«LET entity.getUniqueDerivedFields().reject(e|e.primaryKey) AS uniqueFields-»
«IF !uniqueFields.isEmpty-»
            case '«entity.name.formatForCode()»':
                    $uniqueFields = array(«FOREACH uniqueFields AS uniqueField SEPARATOR ', '»'«uniqueField.actualFieldName().formatForCode()»'«ENDFOREACH»);
                    break;
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        }
        if (!count($uniqueFields) || !in_array($fieldName, $uniqueFields)) {
            return new Zikula_Response_Ajax_BadData($this->__('Invalid input'));
        }

        $exclude = (int) FormUtil::getPassedValue('ex', 0, 'POST', FILTER_VALIDATE_INT);

«EXPAND templates::zclassic::controller::ControllerHelper::instantiateBusinessObject(app.appName(), false, 'controllerAction', name(), 'checkForDuplicate')-»

        $result = false;
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«LET entity.getUniqueDerivedFields().reject(e|e.primaryKey) AS uniqueFields-»
«IF !uniqueFields.isEmpty-»
            case '«entity.name.formatForCode()»':
                    switch ($fieldName) {
«FOREACH uniqueFields AS uniqueField-»
                        case '«uniqueField.actualFieldName().formatForCode()»':
                                $result = $object->get_intValidator()->checkIf«uniqueField.actualFieldName().formatForCodeCapital()»Exists($value, $exclude);
                                break;
«ENDFOREACH-»
                    }
                    break;
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        }

        // return response
        return new Zikula_Response_Ajax(array('isDuplicate' => $result));
    }
«ENDIF-»
«IF app.hasNestedSets()-»

    /**
     * Performs different operations on nested set trees.
     *
     * @param string $ot       Treated object type.
     * @param string $op       The operation which should be performed.
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function handleNestedSetOperation()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT));

«LET app.getNestedSetEntities() AS nestedSetEntities-»
        // parameter specifying which type of objects we are treating
        $objectType = DataUtil::convertFromUTF8(FormUtil::getPassedValue('ot', '«nestedSetEntities.get(0).name.formatForCode()»', 'POST', FILTER_SANITIZE_STRING));
        // ensure that we use only object types with nested set behaviour enabled
        if (!in_array($objectType, array(«FOREACH nestedSetEntities AS nestedSetEntity SEPARATOR ", "»'«nestedSetEntity.name.formatForCode()»'«ENDFOREACH»))) {
            $objectType = '«nestedSetEntities.get(0).name.formatForCode()»';
        }
«ENDLET-»

        $returnValue = array(
            'data'    => array(),
            'message' => ''
        );

        $op = DataUtil::convertFromUTF8(FormUtil::getPassedValue('op', '', 'POST', FILTER_SANITIZE_STRING));
        if (!in_array($op, array('addRootNode', 'addChildNode', 'deleteNode', 'moveNode', 'moveNodeTo'))) {
            LogUtil::registerError($this->__('Error: invalid operation.'));
            throw new Zikula_Exception_Fatal();
        }

        // Get id of treated node
        $id = 0;
        if (!in_array($op, array('addRootNode', 'addChildNode'))) {
            $id = (int) FormUtil::getPassedValue('id', 0, 'POST', FILTER_VALIDATE_INT);
            if (!$id) {
                LogUtil::registerError($this->__('Error: invalid node.'));
                throw new Zikula_Exception_Fatal();
            }
        }

        $factoryArgs = array('controller' => 'ajax', 'action' => 'HandleNestedSetOperation');

        $object = «app.appName()»_Factory::getBusinessEntity($objectType, 'controllerAction', false, $factoryArgs);
        $objectCollection = «app.appName()»_Factory::getBusinessCollection($objectType, 'controllerAction', $factoryArgs);

        $rootId = 1;
        $useMultipleRoots = method_exists($objectCollection, 'selectAllTrees');
        if ($useMultipleRoots && !in_array($op, array('addRootNode'))) {
            $rootId = (int) FormUtil::getPassedValue('root', 0, 'POST', FILTER_VALIDATE_INT);
            if (!$rootId) {
                LogUtil::registerError($this->__('Error: invalid root node.'));
                throw new Zikula_Exception_Fatal();
            }
        }

        // Select tree
        $tree = null;
        if (in_array($op, array('addRootNode'))) {
            $tree = $objectCollection->selectTree($rootId);
        }

        $titleFieldName = $descriptionFieldName = '';

        switch ($objectType) {
«FOREACH app.getNestedSetEntities() AS entity-»
                case '«entity.name.formatForCode()»':
                        $titleFieldName = '«entity.getLeadingField().actualFieldName().formatForCode()»';
«LET entity.fields.typeSelect(TextField).reject(e|e.leading) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ELSE-»
«LET entity.fields.typeSelect(StringField).reject(e|e.leading) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ENDIF-»
«ENDLET-»
«ENDIF-»
«ENDLET-»
                        break;
«ENDFOREACH-»
        }

        switch ($op) {
            case 'addRootNode':
                            $objectData = $object->getNewArrayWithDefaultData();
                            $objectData[$titleFieldName] = $this->__('New root node');
                            if (!empty($descriptionFieldName)) {
                                $objectData[$descriptionFieldName] = $this->__('This is a new root node');
                            }
                            $object->merge($objectData);
                            // save new object to set the root id
                            $object->save();

                            $getterName = 'get' . ucwords($objectType);
                            $objectCollection->getTreeObject()->createRoot($object->$getterName());
                            break;
            case 'addChildNode':
                            $parentId = (int) FormUtil::getPassedValue('pid', 0, 'POST', FILTER_VALIDATE_INT);
                            if (!$parentId) {
                                LogUtil::registerError($this->__('Error: invalid parent node.'));
                                throw new Zikula_Exception_Fatal();
                            }

                            $childObject = «app.appName()»_Factory::getBusinessEntity($objectType, 'controllerAction', false, $factoryArgs);
                            $objectData = $childObject->getNewArrayWithDefaultData();
                            $objectData[$titleFieldName] = $this->__('New child node');
                            if (!empty($descriptionFieldName)) {
                                $objectData[$descriptionFieldName] = $this->__('This is a new child node');
                            }
                            $childObject->merge($objectData);

                            $parentRecord = $object->selectById($parentId, false);
                            $getterName = 'get' . ucwords($objectType);
                            $parentRecord->getNode()->addChild($childObject->$getterName());

                            /** alternatives:
                            $childNode = $childObject->$getterName()->getNode();
                            $childNode->insertAsLastChildOf($parent);
                            $childNode->insertAsFirstChildOf($parent);
                            $childNode->insertAsPrevSiblingOf($sibling);
                            $childNode->insertAsNextSiblingOf($sibling);
                            $childNode->insertAsParentOf($anotherNode);
                            */
                            break;
            case 'deleteNode':
                            $record = $object->selectById($id, false);
                            $record->getNode()->delete();
                            break;
            case 'moveNode':
                            $moveDirection = FormUtil::getPassedValue('direction', '', 'POST', FILTER_SANITIZE_STRING);
                            if (!in_array($moveDirection, array('up', 'down'))) {
                                LogUtil::registerError($this->__('Error: invalid direction.'));
                                throw new Zikula_Exception_Fatal();
                            }

                            $record = $object->selectById($id, false);
                            $node = $record->getNode();

                            if ($moveDirection == 'up') {
                                $node->moveAsPrevSiblingOf($node->getPrevSibling());
                            }
                            else if ($moveDirection == 'down') {
                                $node->moveAsNextSiblingOf($node->getNextSibling());
                            }

                            break;
            case 'moveNodeTo':
                            $moveDirection = FormUtil::getPassedValue('direction', '', 'POST', FILTER_SANITIZE_STRING);
                            if (!in_array($moveDirection, array('after', 'before', 'bottom'))) {
                                LogUtil::registerError($this->__('Error: invalid direction.'));
                                throw new Zikula_Exception_Fatal();
                            }

                            $destId = (int) FormUtil::getPassedValue('destid', 0, 'POST', FILTER_VALIDATE_INT);
                            if (!$destId) {
                                LogUtil::registerError($this->__('Error: invalid destination node.'));
                                throw new Zikula_Exception_Fatal();
                            }

                            $record = $object->selectById($id, false);
                            $node = $record->getNode();

                            $destObject = «app.appName()»_Factory::getBusinessEntity($objectType, 'controllerAction', false, $factoryArgs);
                            $destRecord = $destObject->selectById($destId, false);

                            if ($moveDirection == 'after') {
                                $node->moveAsNextSiblingOf($destRecord);
                            }
                            elseif ($moveDirection == 'before') {
                                $node->moveAsPrevSiblingOf($destRecord);
                            }
                            elseif ($moveDirection == 'bottom') {
                                //$node->moveAsFirstChildOf($destRecord);
                                $node->moveAsLastChildOf($destRecord);
                            }
                            break;
        }

        $returnValue['message'] = $this->__('The operation was successful.');

        // Renew tree
        /** postponed, for now we do a page reload
        $returnValue['data'] = $objectCollection->selectTree($rootId);
        */

        return new Zikula_Response_Ajax($returnValue);
    }
«ENDIF-»
«ENDDEFINE»

