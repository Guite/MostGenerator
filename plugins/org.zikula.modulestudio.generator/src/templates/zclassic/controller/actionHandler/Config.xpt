«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for config form handler«ENDREM»
«DEFINE Root FOR Application-»
«IF needsConfig()-»
«FILE tempBaseClassConfigHandler().asFile()»
«EXPAND FileHelper::phpFileHeader(this)-»

«EXPAND ConfigHandlerBaseClass-»
«ENDFILE»

«FILE tempImplClassConfigHandler().asFile()»
«EXPAND FileHelper::phpFileHeader(this)-»

«EXPAND ConfigHandlerImplClass-»
«ENDFILE»
«ENDIF-»
«ENDDEFINE»

«DEFINE ConfigHandlerBaseClass FOR Application-»
/**
 * Configuration handler base class
 */
class «tempBaseClassConfigHandler()» extends Form_Handler
{
    /**
     * Post construction hook.
     *
     * @return mixed
     */
    public function setup()
    {
    }

    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    function initialize($view)
    {
        if (!SecurityUtil::checkPermission('«appName()»::', '::', ACCESS_ADMIN)) {
            return $view->registerError(LogUtil::registerPermissionError());
        }

        // assign all module vars
        $view->assign('config', ModUtil::getVar('«appName()»'«REM»$this->getVars() Form_Handler does not inherit from Zikula_Base (yet)«ENDREM»));

        $this->initializeAdditions($view);

        // everything okay, no initialization errors occured
        return true;
    }

    /**
     * Method stub for own additions in subclasses.
     */
    function initializeAdditions($view)
    {
        /** TODO: remove this method in favour of postInitialize() */
    }

    /**
     * Pre-initialise hook.
     *
     * @return void
     */
    public function preInitialize()
    {
    }

    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Form_Plugin_Button
     * @see Form_Plugin_ImageButton
     */
    function handleCommand($view, &$args)
    {

        if ($args['commandName'] == 'save') {
            if (!$view->isValid()) {
                return false;
            }

            $data = $view->getValues();

            // update all module vars
            if (!ModUtil::setVars('«appName()»', $data['config'])) {
                return $view->setErrorMsg($this->__('Error! Failed to set configuration variables.'));
            }

            LogUtil::registerStatus($this->__('Done! Module configuration updated.'));
        }
        else if ($args['commandName'] == 'cancel') {
        }

        $url = ModUtil::url('«appName()»', '«configController().formatForDB()»', 'config');
        return $view->redirect($url);
    }
}
«ENDDEFINE»

«DEFINE ConfigHandlerImplClass FOR Application-»
/**
 * Configuration handler implementation class
 */
class «tempImplClassConfigHandler()» extends «tempBaseClassConfigHandler()»
{
    // feel free to extend the base handler class here
}
«ENDDEFINE»

