«IMPORT modulestudio»
«IMPORT templates::zclassic::controller»
«EXTENSION extensions::Utils»

«DEFINE Impl(String appName) FOR Action-»
«EXPAND ControllerHelper::loadObjectClass(appName, true)-»

        // instantiate the object-array
        $objectArray = new $class();

        // parameter for used sorting field
        $sort = FormUtil::getPassedValue('sort', '', 'GET');
«EXPAND ViewDefaultSort-»

        // parameter for used sort order
        $sdir = FormUtil::getPassedValue('sdir', '', 'GET');
        if ($sdir != 'asc' && $sdir != 'desc') $sdir = 'asc';

«REM»TODO«ENDREM»
        // startnum is the current offset which is used to calculate the pagination
        $startnum = (int) FormUtil::getPassedValue('pos', 1, 'GET');

        // pagesize is the number of items displayed on a page for pagination
        $pagesize = (int) FormUtil::getPassedValue('num', 0, 'GET');
        if ($pagesize == 0) {
            $pagesize = $this->getVar('pagesize', 10);
        }

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' ' . $sdir;

        // use FilterUtil to support generic filtering based on an object-oriented approach
        $fu = new FilterUtil(array('table' => $objectArray->_objType, array('join' => &$objectArray->_objJoin)));

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and get result for DBUtil
        $ret = $fu->GetSQL();
        $where = $ret['where'];

        // get() returns the cached object fetched from the DB during object instantiation
        // get() with parameters always performs a new select
        // while the result will be saved in the object, we assign in to a local variable for convenience.
        $objectData = $objectArray->get($where, $sortParam, $startnum-1, $pagesize);

        // get total number of records for building the pagination by method call
        $objcount = $objectArray->getCount($where);

        // turn off caching
        $this->view->setCaching(false);

        // assign the object data, sorting information and details for creating the pager
        $this->view->assign('objectArray', $objectData)
                   ->assign('sort', $sort)
                   ->assign('sdir', ($sdir == 'asc') ? 'desc' : 'asc') // reverted for links
                   ->assign('pager', array('numitems'     => $objcount,
                                           'itemsperpage' => $pagesize));

        // fetch and return the appropriate template
        return «appName»_Util::processViewTemplate($this->view, '«dbName(controller.name)»', $objectType, 'view', $args);
«ENDDEFINE»

«DEFINE ViewDefaultSort FOR Action-»
        if (empty($sort) || !in_array($sort, $objectArray->getAllowedSortingFields())) {
            $sort = $objectArray->getDefaultSortingField();
        }
«ENDDEFINE»
