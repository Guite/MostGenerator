«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»start point for the Factory creation«ENDREM»
«DEFINE Root FOR Application»
    «FILE "lib/".msconcat(appName()).msconcat("/Base/Factory.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND BusinessFactoryBase-»«ENDFILE»
    «FILE "lib/".msconcat(appName()).msconcat("/Factory.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND BusinessFactoryImpl-»«ENDFILE»
«ENDDEFINE»

«DEFINE BusinessFactoryBase FOR Application-»
/**
 * Business entity factory base class
 */
class «appName()»_Base_Factory
{
    /**
     * Returns a business entity or a business collection object according given parameters.
     *
     * @param boolean $useCollection Whether to return a business or an entity class instance.
     * @param string  $objectType    Name of treated entity type.
     * @param string  $context       Usage context (allowed values: controllerAction, block, contentType, mailz).
     * @param array   $args          Additional arguments, for example array('controller' => 'admin', 'action' => 'view');.
     *
     * @return mixed Business entity or collection class instance.
     */
    public static function getBusinessObjectCommon($useCollection = false, $objectType = '«getLeadingEntity().name.formatForCode()»', $context = '', $args = array())
    {
        if (!in_array($context, array('controllerAction', 'actionHandler', 'block', 'contentType', 'mailz'))) {
            $context = 'controllerAction';
        }
        if (!in_array($objectType, «appName()»_Util::getObjectTypes($context, $args))) {
            $objectType = «appName()»_Util::getDefaultObjectType($context, $args);
        }

        $class = '«appName()»_BusinessEntity_' . ucfirst($objectType) . (($useCollection === true) ? 'Collection' : '');
        return new $class();
    }

    /**
     * Returns a business entity object according given parameters.
     *
     * @param string  $objectType     Name of treated entity type.
     * @param string  $context        Usage context (allowed values: controllerAction, actionHandler, block, contentType, mailz).
     * @param boolean $useCollection  Whether to return a business or an entity class instance.
     * @param array   $args           Additional arguments, for example array('controller' => 'admin', 'action' => 'view');.
     *
     * @return mixed Business entity class instance.
     */
    public static function getBusinessEntity($objectType = '«getLeadingEntity().name.formatForCode()»', $context = '', $useCollection = false, $args = array())
    {
        return self::getBusinessObjectCommon(false, $objectType, $context, $args);
    }

    /**
     * Returns a business collection object according given parameters.
     *
     * @param string  $objectType     Name of treated entity type.
     * @param string  $context        Usage context (allowed values: controllerAction, actionHandler, block, contentType, mailz).
     * @param boolean $useCollection  Whether to return a business or an entity class instance.
     * @param array   $args           Additional arguments, for example array('controller' => 'admin', 'action' => 'view');.
     *
     * @return mixed Business entity class instance.
     */
    public static function getBusinessCollection($objectType = '«getLeadingEntity().name.formatForCode()»', $context = '', $args = array())
    {
        return self::getBusinessObjectCommon(true, $objectType, $context, $args);
    }
}
«ENDDEFINE»

«DEFINE BusinessFactoryImpl FOR Application-»
/**
 * Business entity factory implementation class
 */
class «appName()»_Factory extends «appName()»_Base_Factory
{
    // feel free to add your custom factory implementations here
}
«ENDDEFINE»
