«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»start point for the Controller creation«ENDREM»
«DEFINE Root FOR Application»
    «EXPAND Root(this) FOREACH controllers.controllers-»
    «EXPAND UtilMethods::Root»
    «EXPAND Factory::Root»
«ENDDEFINE»


«REM»creates controller and api class files for every Controller instance«ENDREM»
«DEFINE Root(Application app) FOR Controller-»
«info("Generating \"" + name + "\" controller classes")»
    «FILE baseClassController().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerBaseImpl(app)»«ENDFILE»
    «FILE implClassController().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerImpl(app)»«ENDFILE»
«info("Generating \"" + name + "\" api classes")»
    «FILE baseClassApi().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerApiBaseImpl(app)»«ENDFILE»
    «FILE implClassApi().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerApiImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ControllerBaseImpl(Application app) FOR Controller-»

/**
 * This is the «name» controller class providing navigation and interaction functionality.
 */
class «baseClassController()» extends Zikula_Controller
{
«IF metaType == AjaxController-»
    public function _postSetup()
    {
        // no need for a view so override it.
    }
«ELSE-»
«EXPAND ControllerHelper::ControllerPostInitialize(true)-»
«ENDIF-»

«EXPAND Action::Root(app) FOREACH actions-»
«IF app.needsConfig() && app.configControllerType() == metaType.toString()-»

    /*
     * This function takes care of the application configuration.
     *
     * @return string Output
     */
    public function config()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_ADMIN));

        // Create new Form reference
        $view = FormUtil::newForm('«app.appName()»');

        // Execute form using supplied template and page event handler
        return $view->execute('«app.configController().formatForDB()»/config.tpl', new «app.appName()»_Form_Handler_«app.configController().formatForDB().toFirstUpper()»_Config());
    }
«ENDIF-»
«IF metaType == AjaxController-»
«LET app.models.entities.fields.typeSelect(UserField) AS userFields-»
«IF userFields.size > 0-»
«FOREACH userFields AS userField-»
    public function get«userField.entity.name.formatForCodeCapital()»«userField.actualFieldName().formatForCodeCapital()»Users()
    {
        return $this->getCommonUsersList();
    }
«ENDFOREACH-»

    public function getCommonUsersList()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_READ)) {
            return true;
        }

        $fragment = FormUtil::getpassedValue('fragment');

        ModUtil::dbInfoLoad('Users');
        $tables = DBUtil::getTables();

        $userscolumn = $tables['users_column'];

        $where = 'WHERE ' . $userscolumn['uname'] . ' REGEXP \'(' . DataUtil::formatForStore($fragment) . ')\'';
        $results = DBUtil::selectObjectArray('users', $where);

        $out = '<ul>';
        if (is_array($results) && count($results) > 0) {
            foreach($results as $result) {
                $out .= '<li>' . DataUtil::formatForDisplay($result['uname']) .'<input type="hidden" id="' . DataUtil::formatForDisplay($result['uname']) . '" value="' . $result['uid'] . '" /></li>';
            }
        }
        $out .= '</ul>';
        echo DataUtil::convertToUTF8($out);
        return true;
    }

«ENDIF-»
«ENDLET-»
«IF app.models.relations.typeSelect(JoinRelationship).size > 0-»
«REM»TODO«ENDREM»
«ENDIF-»
«ENDIF-»
}
«ENDDEFINE»


«REM»concrete implementation stub«ENDREM»
«DEFINE ControllerImpl(Application app) FOR Controller-»

/**
 * This is the «name» controller class providing navigation and interaction functionality.
 */
class «implClassController()» extends «baseClassController()»
{
    // feel free to add your own controller methods here
}
«ENDDEFINE»




«DEFINE ControllerApiBaseImpl(Application app) FOR Controller-»
/**
 * This is the «name» api helper class.
 */
class «baseClassApi()» extends Zikula_Api
{
    /**
     * get available «name» panel links
     *
     * @return       array      array of admin links
     */
    public function getlinks()
    {
        $links = array();

«FOREACH app.models.entities AS entity-»
        if (SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_«IF metaType == AdminController»ADMIN«ELSE»READ«ENDIF»)) {
            $links[] = array('url' => ModUtil::url('«app.appName()»', '«name.formatForDB()»', 'view', array('ot' => '«entity.name.formatForCode()»')),
                             'text' => $this->__('«entity.nameMultiple.formatForDisplayCapital()»'));
        }
«ENDFOREACH-»
«IF app.needsConfig() && metaType.toString() == app.configControllerType()-»
        if (SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_ADMIN)) {
            $links[] = array('url' => ModUtil::url('«app.appName()»', '«app.configController().formatForDB()»', 'config'), 'text' => $this->__('Configuration'));
        }
«ENDIF-»
        return $links;
    }
}
«ENDDEFINE»

«DEFINE ControllerApiImpl(Application app) FOR Controller-»
/**
 * This is the «name» api helper class.
 */
class «implClassApi()» extends «baseClassApi()»
{
    // feel free to add own api methods here
}
«ENDDEFINE»
