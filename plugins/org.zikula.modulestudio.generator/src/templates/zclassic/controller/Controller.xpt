«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»start point for the Controller creation«ENDREM»
«DEFINE Root FOR Application»
    «EXPAND Root(this) FOREACH controllers.controllers-»
    «EXPAND UtilMethods::Root»
    «EXPAND Factory::Root»
«IF hasUserController()-»
«REM»At the moment short urls are only used in the user area, see http://code.zikula.org/core/ticket/2538«ENDREM»
    «EXPAND additions::UrlRouting::Root»
«ENDIF-»
«IF hasEditActions()-»
    «EXPAND javascript::EditFunctions::Root»
«ENDIF-»
«IF !models.getJoinRelations().isEmpty-»
    «EXPAND javascript::DisplayFunctions::Root»
«ENDIF-»
«ENDDEFINE»


«REM»creates controller and api class files for every Controller instance«ENDREM»
«DEFINE Root(Application app) FOR Controller-»
«info("Generating \"" + name + "\" controller classes")»
    «FILE baseClassController().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerBaseImpl(app)»«ENDFILE»
    «FILE implClassController().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerImpl(app)»«ENDFILE»
«info("Generating \"" + name + "\" api classes")»
    «FILE baseClassApi().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerApiBaseImpl(app)»«ENDFILE»
    «FILE implClassApi().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerApiImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ControllerBaseImpl(Application app) FOR Controller-»

/**
 * This is the «name» controller class providing navigation and interaction functionality.
 */
class «baseClassController()» extends Zikula_Controller
{
«IF metaType == AjaxController-»
    public function _postSetup()
    {
        // no need for a view so override it.
    }
«ELSE-»
«EXPAND ControllerHelper::ControllerPostInitialize(true)-»
«ENDIF-»

«EXPAND Action::Root(app) FOREACH actions-»
«IF hasActions('edit')-»

    /**
     * This method cares for a redirect within an inline frame.
     */
    public function handleInlineRedirect()
    {
        $itemId = (int) FormUtil::getPassedValue('id', 0, 'GET', FILTER_VALIDATE_INT);
        $idPrefix = FormUtil::getPassedValue('idp', '', 'GET');
        $commandName = FormUtil::getPassedValue('com', '', 'GET');
        if (empty($idPrefix)) {
            return false;
        }

        $this->view->assign('itemId', $itemId)
                   ->assign('idPrefix', $idPrefix)
                   ->assign('commandName', $commandName)
                   ->assign('jcssConfig', JCSSUtil::getJSConfig())
                   ->display('«name()»/inlineRedirectHandler.tpl');
        return true;
    }
«ENDIF-»
«IF app.needsConfig() && app.configControllerType() == metaType.toString()-»

    /**
     * This method takes care of the application configuration.
     *
     * @return string Output
     */
    public function config()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_ADMIN));

        // Create new Form reference
        $view = FormUtil::newForm('«app.appName()»', $this);

        // Execute form using supplied template and page event handler
        return $view->execute('«app.configController().formatForDB()»/config.tpl', new «app.appName()»_Form_Handler_«app.configController().formatForDB().toFirstUpper()»_Config());
    }
«ENDIF-»
«EXPAND additions::Ajax::AdditionalAjaxFunctions(app)-»
}
«ENDDEFINE»


«REM»concrete implementation stub«ENDREM»
«DEFINE ControllerImpl(Application app) FOR Controller-»

/**
 * This is the «name» controller class providing navigation and interaction functionality.
 */
class «implClassController()» extends «baseClassController()»
{
    // feel free to add your own controller methods here
}
«ENDDEFINE»




«DEFINE ControllerApiBaseImpl(Application app) FOR Controller-»
/**
 * This is the «name» api helper class.
 */
class «baseClassApi()» extends Zikula_Api
{
    /**
     * get available «name» panel links
     *
     * @return       array      array of admin links
     */
    public function getlinks()
    {
        $links = array();

«IF hasActions('view')-»
«FOREACH app.models.entities AS entity-»
        if (SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_«IF metaType == AdminController»ADMIN«ELSE»READ«ENDIF»)) {
            $links[] = array('url' => ModUtil::url('«app.appName()»', '«name()»', 'view', array('ot' => '«entity.name.formatForCode()»')),
                             'text' => $this->__('«entity.nameMultiple.formatForDisplayCapital()»'),
                             'title' => $this->__('«entity.name.formatForDisplayCapital()» list'));
        }
«ENDFOREACH-»
«ENDIF-»
«IF app.needsConfig() && metaType.toString() == app.configControllerType()-»
        if (SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_ADMIN)) {
            $links[] = array('url' => ModUtil::url('«app.appName()»', '«app.configController().formatForDB()»', 'config'),
                             'text' => $this->__('Configuration'),
                             'title' => $this->__('Manage settings for this application'));
        }
«ENDIF-»
        return $links;
    }
«IF metaType == UserController-»
«EXPAND apis::ShortUrls::Root(app)-»
«ENDIF-»
}
«ENDDEFINE»

«DEFINE ControllerApiImpl(Application app) FOR Controller-»
/**
 * This is the «name» api helper class.
 */
class «implClassApi()» extends «baseClassApi()»
{
    // feel free to add own api methods here
}
«ENDDEFINE»

