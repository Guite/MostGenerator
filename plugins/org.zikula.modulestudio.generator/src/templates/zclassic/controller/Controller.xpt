«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»start point for the Controller creation«ENDREM»
«DEFINE Root FOR Application»
    «EXPAND Root(this) FOREACH controllers.controllers-»
    «EXPAND UtilMethods::Root»
    «EXPAND Factory::Root»
«IF hasEditActions()-»
    «EXPAND javascript::EditFunctions::Root»
«ENDIF-»
«ENDDEFINE»


«REM»creates controller and api class files for every Controller instance«ENDREM»
«DEFINE Root(Application app) FOR Controller-»
«info("Generating \"" + name + "\" controller classes")»
    «FILE baseClassController().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerBaseImpl(app)»«ENDFILE»
    «FILE implClassController().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerImpl(app)»«ENDFILE»
«info("Generating \"" + name + "\" api classes")»
    «FILE baseClassApi().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerApiBaseImpl(app)»«ENDFILE»
    «FILE implClassApi().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ControllerApiImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ControllerBaseImpl(Application app) FOR Controller-»

/**
 * This is the «name» controller class providing navigation and interaction functionality.
 */
class «baseClassController()» extends Zikula_Controller
{
«IF metaType == AjaxController-»
    public function _postSetup()
    {
        // no need for a view so override it.
    }
«ELSE-»
«EXPAND ControllerHelper::ControllerPostInitialize(true)-»
«ENDIF-»

«EXPAND Action::Root(app) FOREACH actions-»
«IF hasActions('edit')-»

    /**
     * This method cares for a redirect within an inline frame.
     */
    public function handleInlineRedirect()
    {
        $itemId = (int) FormUtil::getPassedValue('id', 0, 'GET');
        $idPrefix = FormUtil::getPassedValue('idp', '', 'GET');
        $commandName = FormUtil::getPassedValue('com', '', 'GET');
        if (empty($idPrefix)) {
            return false;
        }

        $this->view->assign('itemId', $itemId)
                   ->assign('idPrefix', $idPrefix)
                   ->assign('commandName', $commandName)
                   ->assign('jcssConfig', JCSSUtil::getJSConfig())
                   ->display('«name()»/inlineRedirectHandler.tpl');
        return true;
    }
«ENDIF-»
«IF app.needsConfig() && app.configControllerType() == metaType.toString()-»

    /**
     * This method takes care of the application configuration.
     *
     * @return string Output
     */
    public function config()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_ADMIN));

        // Create new Form reference
        $view = FormUtil::newForm('«app.appName()»');

        // Execute form using supplied template and page event handler
        return $view->execute('«app.configController().formatForDB()»/config.tpl', new «app.appName()»_Form_Handler_«app.configController().formatForDB().toFirstUpper()»_Config());
    }
«ENDIF-»
«EXPAND AdditionalAjaxFunctions(app)-»
}
«ENDDEFINE»


«REM»concrete implementation stub«ENDREM»
«DEFINE ControllerImpl(Application app) FOR Controller-»

/**
 * This is the «name» controller class providing navigation and interaction functionality.
 */
class «implClassController()» extends «baseClassController()»
{
    // feel free to add your own controller methods here
}
«ENDDEFINE»




«DEFINE ControllerApiBaseImpl(Application app) FOR Controller-»
/**
 * This is the «name» api helper class.
 */
class «baseClassApi()» extends Zikula_Api
{
    /**
     * get available «name» panel links
     *
     * @return       array      array of admin links
     */
    public function getlinks()
    {
        $links = array();

«FOREACH app.models.entities AS entity-»
        if (SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_«IF metaType == AdminController»ADMIN«ELSE»READ«ENDIF»)) {
            $links[] = array('url' => ModUtil::url('«app.appName()»', '«name()»', 'view', array('ot' => '«entity.name.formatForCode()»')),
                             'text' => $this->__('«entity.nameMultiple.formatForDisplayCapital()»'));
        }
«ENDFOREACH-»
«IF app.needsConfig() && metaType.toString() == app.configControllerType()-»
        if (SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_ADMIN)) {
            $links[] = array('url' => ModUtil::url('«app.appName()»', '«app.configController().formatForDB()»', 'config'), 'text' => $this->__('Configuration'));
        }
«ENDIF-»
        return $links;
    }
}
«ENDDEFINE»

«DEFINE ControllerApiImpl(Application app) FOR Controller-»
/**
 * This is the «name» api helper class.
 */
class «implClassApi()» extends «baseClassApi()»
{
    // feel free to add own api methods here
}
«ENDDEFINE»


«DEFINE AdditionalAjaxFunctions(Application app) FOR Controller-»«ENDDEFINE»
«DEFINE AdditionalAjaxFunctions(Application app) FOR AjaxController-»
«LET app.getUserFields() AS userFields-»
«IF userFields.size > 0-»
«FOREACH userFields AS userField-»

    public function get«userField.entity.name.formatForCodeCapital()»«userField.actualFieldName().formatForCodeCapital()»Users()
    {
        return $this->getCommonUsersList();
    }
«ENDFOREACH-»

    public function getCommonUsersList()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            return true;
        }

        $fragment = FormUtil::getpassedValue('fragment');

        ModUtil::dbInfoLoad('Users');
        $tables = DBUtil::getTables();

        $usersColumn = $tables['users_column'];

        $where = 'WHERE ' . $usersColumn['uname'] . ' REGEXP \'(' . DataUtil::formatForStore($fragment) . ')\'';
        $results = DBUtil::selectObjectArray('users', $where);

        $out = '<ul>';
        if (is_array($results) && count($results) > 0) {
            foreach($results as $result) {
                $out .= '<li>' . DataUtil::formatForDisplay($result['uname']) . '<input type="hidden" id="' . DataUtil::formatForDisplay($result['uname']) . '" value="' . $result['uid'] . '" /></li>';
            }
        }
        $out .= '</ul>';
        echo $out;
        return true;
    }
«ENDIF-»
«ENDLET-»

«LET app.models.getJoinRelations() AS joinRelations-»
«IF joinRelations.size > 0-»

    /**
     * searches for entities for auto completion usage
     *
     * @param        ot             string    treated object type
     * @param        fragment       string    the fragment of the entered item name
     * @param        exclude        string    comma separated list with ids of other items (to be excluded from search)
     * @return void nothing, direct output using echo
     */
    public function getItemList()
    {
        if (!SecurityUtil::checkPermission('«app.appName()»::', '::', ACCESS_EDIT)) {
            return true;
        }

        $objectType = lcfirst(FormUtil::getPassedValue('ot', '«app.getLeadingEntity().name.formatForCode()»'));
        $idField = strtolower($objectType) . 'id';
«EXPAND ControllerHelper::instantiateBusinessObject(app.appName(), true, 'controllerAction')-»

        $fragment = FormUtil::getPassedValue('fragment');
        $exclude = FormUtil::getPassedValue('exclude', '');

        // parameter for used sorting field
        $sort = FormUtil::getPassedValue('sort', '', 'GET');
«EXPAND ControllerHelper::DefaultSorting-»

        $currentPage = 1;
        $resultsPerPage = 20;

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' asc';

        $fragment = DataUtil::formatForStore($fragment);

        // TODO: use FilterUtil
        if (!empty($exclude)) {
            $where = $idField . ' NOT IN (' . DataUtil::formatForStore($exclude) . ')';
        }

        // TODO: move into Doctrine_Table subclasses and refactor to Doctrine_Query instance.
        $whereSub = '';
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
            case '«entity.name.formatForCode()»':
«FOREACH entity.getDerivedFields().reject(e|e.primaryKey || e.metaType == ArrayField || e.metaType == ObjectField) AS field-»
                    $whereSub .= ((!empty($whereSub)) ? ' OR ' : '') . '«field.actualFieldName()» «IF field.metaType == StringField || field.metaType == TextField»LIKE \'%' . $fragment . '%\'«ELSE»= \'' . $fragment . '\'«ENDIF»';
«ENDFOREACH-»
                    break;
«ENDFOREACH-»
        }
        if (!empty($whereSub)) {
            $where .= ((!empty($where)) ? ' AND (' . $whereSub . ')' : $whereSub);
        }


        // get objects from database
        // while the result will be saved in the object, we assign in to a local variable for convenience.
        $objectData = $objectCollection->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);

        $out = '<ul>';
        if (is_array($objectData) && count($objectData) > 0) {
            $titleFieldName = $descriptionFieldName = '';

            switch ($objectType) {
«FOREACH app.models.entities AS entity-»
                case '«entity.name.formatForCode()»':
                        $titleFieldName = '«entity.getLeadingField().actualFieldName().formatForCode()»';
«LET entity.fields.typeSelect(TextField) AS textFields-»
«IF textFields.size > 0-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ELSE-»
«LET entity.fields.typeSelect(StringField).reject(e|e.leading) AS textFields-»
«IF textFields.size > 0-»
                        $descriptionFieldName = '«textFields.get(0).actualFieldName().formatForCode()»';
«ENDIF-»
«ENDLET-»
«ENDIF-»
«ENDLET-»
                        break;
«ENDFOREACH-»
            }

            foreach ($objectData as $item) {
                // class="informal" --> show in dropdown, but do not copy in the input field after selection
                $itemTitle = $item[$titleFieldName];
                $itemTitleStripped = str_replace('"', '', $itemTitle);
                $itemDescription = ((isset($item[$descriptionFieldName]) && !empty($item[$descriptionFieldName])) ? $item[$descriptionFieldName] : $this->__('No description yet.'));
                $out .= '<li id="' . $item[$idField] . '" title="' . $itemTitleStripped . '">';
                $out .= '<div class="itemtitle">' . $itemTitle . '</div>';
                $out .= '<div class="itemdesc informal">' . $itemDescription . '</div>';
«IF app.models.entities.exists(e|e.hasImageFields())-»
                // check for preview image
                $previewFieldName = '';
                switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«IF entity.hasImageFields()-»
                    case '«entity.name.formatForCode()»':
                            $previewFieldName = '«entity.getImageFields().get(0).actualFieldName().formatForCode()»';
                            break;
«ENDIF»
«ENDFOREACH-»
                }
                if (!empty($previewFieldName) && isset($item[$previewFieldName . 'FullPath'])) {
                    $thumbWidth = 100;
                    $thumbHeight = 80;
                    $thumbImagePath = «app.appName()»_Util::getImageThumb($item[$previewFieldName], $item[$previewFieldName . 'FullPath'], $thumbWidth, $thumbHeight);
                    $preview = '<img src="" width="' . $thumbWidth . '" height="' . $thumbHeight . '" alt="' . $itemTitleStripped . '" />';
                    $out .= '<div class="itempreview informal" id="itempreview' . $item[$idField] . '">' . $preview . '</div>';
                }
«ENDIF-»
                $out .= '</li>';
            }
        }
        $out .= '</ul>';
        echo $out;
        return true;
    }
«ENDIF-»
«ENDLET-»


«ENDDEFINE»



