«IMPORT modulestudio»
«IMPORT processing»
«EXTENSION extensions::Utils»


«DEFINE Root FOR Module»
	«FILE "version.php"»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND ModuleInfo»«ENDFILE»
«ENDDEFINE»

«DEFINE ModuleInfo FOR Module-»
// retrieve gettext domain for this module
$dom = ZLanguage::getModuleDomain('«moduleName(name)»');

// define the name of the module
$modversion['name']           = '«moduleName(name)»';
// define the displayed name of the module
$modversion['displayname']    = __('«moduleName(name)»', $dom);
// define the module description
$modversion['description']    = __('«moduleName(name)» module generated by ModuleStudio «EXPAND FileHelper::msVersion»', $dom);
// url version of name
$modversion['url']            = __('«dbName(name)»', $dom);
// define the current module version
$modversion['version']        = '«version»';

«LET "docs" AS docDir-»
// file with credit information
$modversion['credits']        = '«docDir»/credits.txt';
// help file
$modversion['help']           = '«docDir»/readme.txt';
// changelog file
$modversion['changelog']      = '«docDir»/changelog.txt';
// file with license information
$modversion['license']        = '«docDir»/license.txt';
«ENDLET-»

// this is no official core / system module
$modversion['official']       = 0;
// the module author
$modversion['author']         = '«author»';
// module homepage
$modversion['contact']        = '«url»';

«LET processingContainer.processors AS processors-»
// we do «IF processors.typeSelect(AdminProcessor).size < 1»not «ENDIF»have an admin area
$modversion['admin']          = «IF processors.typeSelect(AdminProcessor).size > 0»1«ELSE»0«ENDIF»;
// we do «IF processors.typeSelect(UserProcessor).size < 1»not «ENDIF»have a user area
$modversion['user']           = «IF processors.typeSelect(UserProcessor).size > 0»1«ELSE»0«ENDIF»;
«ENDLET-»

// permission schema
«EXPAND PermissionSchema-»

«IF otherModules.size > 0-»
// module dependencies
$modversion['dependencies'] = array(
«EXPAND ModuleDependency FOREACH otherModules SEPARATOR ','-»
                      );
«ENDIF-»
«ENDDEFINE»


«DEFINE PermissionSchema FOR Module»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»


«DEFINE ModuleDependency FOR Module-»
                    array('modname'    => '«moduleName(name)»', 
                          'minversion' => '0', 
                          'maxversion' => '«version»', 
                          'status'     => DEPENDENCY_REQUIRED«REM»TODO: RECOMMENDED, CONFLICTS«ENDREM»),
«ENDDEFINE»