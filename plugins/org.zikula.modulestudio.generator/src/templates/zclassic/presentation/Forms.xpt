«IMPORT modulestudio»
«IMPORT processing»
«IMPORT presentation»
«EXTENSION extensions::Utils»

«DEFINE Root FOR Module-»
	«EXPAND Root(this) FOREACH processingContainer.processors.processorStates.typeSelect(EditProcessorState)-»
«ENDDEFINE»

«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Module module) FOR ProcessorState-»
	«EXPAND Root(module.modName(), stateProcessor, 'edit') FOREACH module.persistenceContainer.tables-»
«ENDDEFINE»


«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(String moduleName, Processor proc, String actionName) FOR persistence::Table-»
«LET dbName(proc.name) AS procName-»
«FILE "templates/" + moduleName(moduleName + "_" + procName + "_" + name + "_" + actionName) + ".tpl"-»
«EXPAND FormTemplate(moduleName, proc, actionName)-»
«ENDFILE»
«ENDLET-»
«ENDDEFINE»

«DEFINE FormTemplate(String modName, Processor proc, String actionName) FOR persistence::Table-»
«LET dbName(proc.name) AS procName-»
«LET dbName(name) AS tabName-»
{* purpose of this template: build the Form to «moduleName(actionName)» an instance of «moduleName(name)» *}

{include file="«modName»_«procName»_header.tpl"}

{if $mode eq "edit"}
    {gt text='Edit «formattedName(name)»' assign="templateTitle"}
«IF proc.metaType == AdminProcessor-»
    {assign var="adminpageicon" value="edit.gif"}
«ENDIF-»
{elseif $mode eq "create"}
    {gt text='Create «formattedName(name)»' assign="templateTitle"}
«IF proc.metaType == AdminProcessor-»
    {assign var="adminpageicon" value="filenew.gif"}
«ENDIF-»
{else}
    {gt text='Edit «formattedName(name)»' assign="templateTitle"}
«IF proc.metaType == AdminProcessor-»
    {assign var="adminpageicon" value="edit.gif"}«REM»TODO«ENDREM»
«ENDIF-»
{/if}

«IF proc.metaType == AdminProcessor-»
<div class="z-admincontainer">
<div class="z-adminpageicon">{img modname="core" src=$adminpageicon set="icons/large" alt=$templateTitle}</div>
«ELSE-»
<div class="z-frontendcontainer">
«ENDIF-»

{pagesetvar name="title" value=$templateTitle}
<h2>{$templateTitle}</h2>
<br />
{form cssClass="z-form"}
«REM»
{form enctype="multipart/form-data"}
cssClass="myClass"
    $encodingHtml = (array_key_exists('enctype', $params) ? " enctype=\"$params[enctype]\"" : '');
    $action = htmlspecialchars($_SERVER['REQUEST_URI']);

    $render->pnFormPostRender();

    $out  =  "<form id=\"FormForm\" {$classString}action=\"$action\" method=\"post\"{$encodingHtml}>";
«ENDREM»«""-»

    {* add validation summary and a <div> element for styling the form *}
    {«dbName(modName)»FormFrame}
    {*formvalidationsummary*}«REM»CSS class summary: 'validationSummary z-errormsg'«ENDREM»
«REM»{formerrormessage id=error}«ENDREM»«""-»

    {formsetinitialfocus inputId="«dbName(columns.get(1).name)»"}
«REM»
  {formsetinitialfocus inputId=PluginId doSelect=true} <-- for dropdown lists (performs input.select())
«ENDREM»«""-»

    <fieldset>
        <legend>{gt text='Content'}</legend>
«FOREACH columns.reject(e|e.isPrimaryKey) AS col-»
        <div class="z-formrow">
            {formlabel for="«dbName(col.name)»" __text='«formattedNameCapitalized(col.name)»'«IF col.isMandatory» mandatorysym="1"«ENDIF»}
«REM» visible=false html=1 cssClass="myClass" FormStyledPlugin«ENDREM»«""-»
            «EXPAND FormField FOR col»«""-»
        </div>
«ENDFOREACH-»
    </fieldset>
«IF usesStandardFields == true-»
{if $mode ne "create"}
    {include file="«modName»_«procName»_include_metadata_edit.tpl"}
{/if}
«ENDIF-»
«REM»TODO: check if needed«ENDREM»«""-»
{*
    <fieldset>
        <legend>{gt text='Hooks'}</legend>
        {if $mode eq "edit"}
            {modcallhooks hookobject="item" hookaction="modify" module="«modName»" hookid="«dbName(name)»`$«idField()»`"}
        {elseif $mode eq "create"}
            {modcallhooks hookobject="item" hookaction="new" module="«modName»"}
        {else}«REM»TODO«ENDREM»
            {modcallhooks hookobject="item" hookaction="modify" module="«modName»" hookid="«dbName(name)»`$«idField()»`"}
        {/if}
    </fieldset>
*}
    {gt text='Really delete this «formattedName(name)»?' assign="deleteConfirmMsg"}

    <div class="z-formbuttons">
    {if $mode eq "edit"}
        {formbutton commandName="update" __text='Update «formattedName(name)»'}
        {formbutton commandName="delete" __text='Delete «formattedName(name)»' confirmMessage=$deleteConfirmMsg}
    {elseif $mode eq "create"}
        {formbutton commandName="create" __text='Create «formattedName(name)»'}
    {else}
        {formbutton commandName="update«REM»TODO«ENDREM»" __text='OK'}
    {/if}
        {formbutton commandName="cancel" __text='Cancel'}
    </div>
  {/«dbName(modName)»FormFrame}
{/form}

«IF proc.metaType == AdminProcessor-»
</div>
«ELSE-»
</div>
«ENDIF-»

{include file="«modName»_«procName»_footer.tpl"}
«ENDLET-»
«ENDLET-»
«ENDDEFINE»



«DEFINE FormField FOR persistence::TableColumn-»
{* TODO: Undefined TableColumn *}
«ENDDEFINE»


«DEFINE FormField FOR persistence::StringField-»
            {formtextinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»' textMode="singleline" maxLength=«length»}
«REM» visible=false    readOnly=true  cssClass="myClass" FormStyledPlugin (width="80%", width="30em")«ENDREM»«""-»
«ENDDEFINE»

«REM»TODO: textMode="password" for password input fields«ENDREM»

«DEFINE FormField FOR persistence::TextField-»
            {formtextinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»' textMode="multiline" rows="8" cols="50"}
«REM»
type: NORMAL; LARGE; MULTIBYTE; LARGEMULTIBYTE
    var $group;						// group name for this input
    								// used to locate data in the render (when databased)
    								// and to restrict which plugins to do validation on (to be implemented).

    var $size;						// size of HTML input (number of characters)

    // indicates if the input is empty
    function bool isEmpty();
«ENDREM»«""-»
«ENDDEFINE»
«DEFINE FormField FOR persistence::DateField-»«REM»class="date"«ENDREM»
            {if $mode == "edit"}
                {formdateinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»' useSelectionMode=true}
            {else}
                {formdateinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»' useSelectionMode=true defaultValue="today"}
            {/if}
«REM» FormTextInput		defaults: maxLength = 12; width = '8em';«ENDREM»«""-»
«ENDDEFINE»
«DEFINE FormField FOR persistence::TimestampField-»
            {if $mode == "edit"}
                {formdateinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»' includeTime=true}
            {else}
                {formdateinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»' includeTime=true defaultValue="now"}
            {/if}
«REM» FormTextInput		defaults: maxLength = 18; width = '10em';«ENDREM»«""-»
«ENDDEFINE»
«DEFINE FormField FOR persistence::BooleanField-»«REM»class="cbx"«ENDREM»
            {formcheckbox id="«dbName(name)»" __title='«formattedName(name)» ?'}
«REM» visible=false readOnly=true FormStyledPlugin«ENDREM»«""-»
«REM»
    var $group;					// group name for this input
								// used to locate data in the render (when databased)
								// and to restrict which plugins to do validation on (to be implemented).
«ENDREM»«""-»
«ENDDEFINE»
«DEFINE FormField FOR persistence::IntegerField-»
«LET columnTable.incoming.select(e|dbName(e.source.name + "id") == dbName(name)) AS pointingRelations-»
«IF pointingRelations.size > 0-»
«LET pointingRelations.get(0) AS pointingRelation-»
«LET pointingRelation.source AS joiningTable-»
«REM»Join-Selector«ENDREM»«""-»
            {formdropdownrelationlist id="«joiningTable.idField()»" mandatory=«IF isMandatory-»true«ELSE»false«ENDIF-» module="«columnTable.tableContainer.persistenceModule.modName()»" objecttype="«moduleName(joiningTable.name)»" idField="«joiningTable.idField()»" displayField="«joiningTable.columns.select(e|e.isLeading == true).get(0).name.dbName()»" orderby="«joiningTable.columns.select(e|e.isLeading == true).get(0).name.dbName()»"«IF pointingRelation.metaType == persistence::OneToManyRelationship-» selectionMode="multiple"«ENDIF-»}«IF isMandatory-»&nbsp;*«ENDIF»
«ENDLET-»
«ENDLET-»
«ELSE-»
            {formintinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»' maxLength=«length»}
«REM» minValue=123 maxValue=123 FormTextInput
defaults: maxLength = 20; width = '6em';«ENDREM»«""-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE FormField FOR persistence::FloatField-»
            {formfloatinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»'}
«REM» maxLength=«length+3+precision» minValue=123 maxValue=123 FormTextInput
defaults: maxLength = 30; width = '6em';«ENDREM»«""-»
«ENDDEFINE»

«DEFINE FormField FOR persistence::DecimalField-»
            {formfloatinput id="«dbName(name)»" mandatory=«isMandatory» __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»'}
«ENDDEFINE»


«DEFINE FormField FOR persistence::BlobField-»
            {formtextinput id="«dbName(name)»" readOnly=true __title='Input the «formattedName(name)» of the «formattedName(columnTable.name)»'}
«REM»TODO«ENDREM»«""-»
«ENDDEFINE»



«DEFINE OtherFieldsTODO FOR Object-»
«REM»

{formemailinput}«REM»class="email" extends FormTextInput«END-REM»
	$this->maxLength = 100;

{formurlinput}«REM»class="url" extends FormTextInput«END-REM»
	$this->maxLength = 2000;


{formuploadinput}«REM»class="upload"«ENDREM»
«REM» id="bla" [isMandatory=true visible=false readOnly=true FormStyledPlugin]«END-REM»
    var $group;						// group name for this input
    								// used to locate data in the render (when databased)
    								// and to restrict which plugins to do validation on (to be implemented).
				default: null



formdropdownlist

formradiobutton

plus new stuff

«ENDREM»
«ENDDEFINE»

