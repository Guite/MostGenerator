«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE BusinessEntityCollectionBaseImpl(Application app) FOR Entity»
    /**
     * @var array Reference to list of «nameMultiple.formatForDisplay()» model («implClassModelRecord()»).
     */
    protected $«nameMultiple.formatForCode()» = array();

    /**
     * @var string The tablename this object maps to.
     */
    protected $_intObjectType = '«fullEntityName()»';

    /**
     * @var string The id field for this object.
     */
    protected $_intIdField = '«idField()»';

    /**
     * @var string Optional where clause for selection.
     */
    protected $_intWhere = '';

    /**
     * @var string Optional order clause for selection.
     */
    protected $_intOrderBy = '';

    /**
     * @var string The default sorting field/expression.
     */
    protected $_intDefaultSortingField = '«getLeadingField().actualFieldName().formatForCode()»';


    /**
     * Constructor.
     *
     * @param string $where   The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy The order-by clause to use when retrieving the object array (optional) (default='').
     */
    function __construct($where = '', $orderBy = '')
    {
        $this->set_intWhere($where);
        $this->set_intOrderBy($orderBy);
    }

    /**
     * Select object collection from model (e.g. from database).
     *
     * For now we use Doctrine records, but as the controllers communicate only with
     * business entities, we can exchange the model behind it without any subsequent
     * efforts on the controller layer.
     *
     * @param string $where   The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy The order-by clause to use when retrieving the object array (optional) (default='').
     *
     * @return Doctrine_Collection collection containing retrieved Doctrine_Record instances
     */
    public function selectWhere($where = '', $orderBy = '')
    {
        // store parameters
        $this->set_intWhere($where);
        $this->set_intOrderBy($orderBy);

        // select items from the model
        $result = $this->_intTable()->selectCollection($where, $orderBy);

        // store the results
        $this->set«nameMultiple.formatForCodeCapital()»($result);

        // and return them
        return $this->get«nameMultiple.formatForCodeCapital()»();
    }

    /**
     * Select with a given where clause.
     *
     * @param string $where           The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy         The order-by clause to use when retrieving the object array (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $asArray        Whether to return the result as array instead as record object (optional) (default=true).
     *
     * @return array|Doctrine_Collection retrieved data array or collection containing retrieved Doctrine_Record instances.
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $asArray = true)
    {
        // store parameters
        $this->set_intWhere($where);
        $this->set_intOrderBy($orderBy);

        // select items from the model
        $result = $this->_intTable()->selectWherePaginated($where, $orderBy, $currentPage, $resultsPerPage, $asArray);

        // store the results
        $this->set«nameMultiple.formatForCodeCapital()»($result);

        // and return them
        return $this->get«nameMultiple.formatForCodeCapital()»();
    }

    /**
     * Select count with a given where clause.
     *
     * @param string $where The where clause to use when retrieving the object count (optional) (default='').
     *
     * @return integer Number of affected records.
     */
    public function selectCount($where = '')
    {
        // store parameters
        $this->set_intWhere($where);

        // get result from the model
        return $this->_intTable()->selectCount($where);
    }
«IF nestedSet-»

    /**
     * Get tree object for managing the nested set.
     *
     * @return Doctrine_Doctrine_Tree_NestedSet tree object reference.
     */
    public function getTreeObject()
    {
        return $this->_intTable()->getTree();
    }

    /**
     * Select tree of «nameMultiple.formatForCode()».
     *
«IF nestedSetHasManyRoots-»
     * @param integer $rootId         Optional id of root node to use as a branch, defaults to 0 which corresponds to the whole tree.
«ENDIF-»
     * @param boolean $asArray        Whether to return the result as array instead as record object (optional) (default=true).
     *
     * @return array|Doctrine_Doctrine_Tree_NestedSet retrieved data array or tree objects containing retrieved Doctrine_Node_NestedSet instances.
     */
    public function selectTree(«IF nestedSetHasManyRoots-»$rootId = 0, «ENDIF»$asArray = false)
    {
        // get reference to tree object
        $treeObject = $this->getTreeObject();
        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
«IF nestedSetHasManyRoots-»

        // return branch if we have given a certain root
        if ($rootId > 0) {
            $root = $treeObject->fetchRoot($rootId);
            return $treeObject->fetchBranch($root->getId(), array(), $fetchType);
        }
«ENDIF-»

        // «IF nestedSetHasManyRoots-»otherwise «ENDIF-»return the whole tree
        return $treeObject->fetchTree(array(), $fetchType);
/** TODO: introduce selection with relations */
    }
«ENDIF-»
«IF nestedSetHasManyRoots-»

    /**
     * Select all trees at once.
     *
     * @param boolean $asArray        Whether to return the result as array instead as record object (optional) (default=true).
     *
     * @return array list of retrieved data arrays or tree objects containing retrieved Doctrine_Node_NestedSet instances.
     */
    public function selectAllTrees($asArray = false)
    {
        $trees = array();
        $treeObject = $this->_intTable()->getTree();
        $rootColumnName = $treeObject->getAttribute('rootColumnName');
        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);

        foreach ($treeObject->fetchRoots() as $rootNode) {
            $options = array('root_id' => $rootNode->$rootColumnName);
            $trees[] = $treeObject->fetchTree($options, $fetchType);
        }

        return $trees;
/** TODO: introduce selection with relations */
    }
«ENDIF-»

    /**
     * Convenience method to get table managed by record.
     *
     * @return Doctrine_Table Table being managed by the record referenced by this collection.
     */
    private function _intTable()
    {
        return Doctrine_Core::getTable('«implClassModelRecord()»');
    }

    /**
     * Retrieves an array with all fields which can be used for sorting instances.
     *
     * @return array
     */
    public function get_intAllowedSortingFields()
    {
        // TODO: to be refactored
        return array(«EXPAND singleSortingField FOREACH fields SEPARATOR ','»«EXPAND standardSortingFields FOR this-»
        );
    }

«EXPAND FileHelper::GetterAndSetterMethods(nameMultiple.formatForCode(), 'array')»
«EXPAND FileHelper::GetterAndSetterMethods('_intObjectType', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intIdField', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intWhere', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intOrderBy', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intDefaultSortingField', 'string')»

«EXPAND FileHelper::ClassToString(baseClassBusinessEntity(true))-»
«ENDDEFINE»

«DEFINE singleSortingField FOR EntityField»«REM»DUMMY«ENDREM»«ENDDEFINE»
«DEFINE singleSortingField FOR DerivedField»
«LET entity.incoming.select(e|formatForDB(e.source.idField()) == name.formatForDB()) AS joins-»
«IF !joins.isEmpty-»
                     '«joins.get(0).source.name.formatForCode()»'«""-»
«ELSE-»
                     '«actualFieldName().formatForCode()»'«""-»
«ENDIF-»
«ENDLET-»«ENDDEFINE»
«DEFINE singleSortingField FOR CalculatedField»
                     '«actualFieldName().formatForCode()»'«""-»
«ENDDEFINE»

«DEFINE standardSortingFields FOR Entity»
«REM»will be filled by Advices (Aspect Orientation)«ENDREM»
«ENDDEFINE»

