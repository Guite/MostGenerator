«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE BusinessEntityBaseImpl(Application app) FOR Entity»
    /**
     * @var array  Reference to treated «name.formatForDisplay()» model («implClassModelRecord()»)
     */
    protected $«name.formatForCode()» = null;

    /**
     * @var string The tablename this object maps to
     */
    protected $_intObjectType = '«fullEntityName()»';

    /**
     * @var string The id field for this object
     */
    protected $_intIdField = '«idField()»';

    /**
     * @var integer The id for this object
     */
    protected $_intId = 0;

«EXPAND fieldMemberVar FOREACH fields.typeSelect(DerivedField)»
«EXPAND fieldMemberVar FOREACH outgoing.typeSelect(JoinRelationship)»

    /**
     * Constructor.
     *
     * @param integer $id         The id to use to retrieve the object (optional) (default=null).
     */
    function __construct($id = 0)
    {
        $this->_intObjectType = '«fullEntityName()»';
        $this->_intIdField = '«name.formatForDB()»id';
        $this->_intId = $id;
    }

    /**
     * Select object from model (e.g. from database).
     * For now we use Doctrine records, but as the controllers communicate only with
     * business entities, we can exchange the model behind it without any subsequent
     * efforts on the controller layer.
     *
     * @param integer $id         The id to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray    Whether to return the result as array instead as record object (optional) (default=true).
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance
     */
    public function selectById($id = 0, $asArray = true)
    {
        if ($id == 0 && $this->_intId == 0) {
            return LogUtil::registerArgsError();
        }
        if ($id > 0) {
            $this->_intId = $id;
        }
        $table = Doctrine_Core::getTable('«implClassModelRecord()»');

        $q = $table->createQuery('e')
                   ->where('e.' . $this->_intIdField . ' = ?', $this->_intId);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $q->fetchOne(array(), $fetchType);
    }

    /**
     * Convenience merge method delegating to treated «implClassModelRecord()» instance
     *
     * @param array data fields
     */
    public function merge(array $data)
    {
        return $this->get«name.formatForCodeCapital()»()->merge($data);
    }

    /**
     * Convenience save method delegating to treated «implClassModelRecord()» instance
     */
    public function save()
    {
        $result = $this->get«name.formatForCodeCapital()»()->save();
        $this->set_intId($this->«name.formatForCode()»[$this->_intIdField]);
        return $result;
    }

    /**
     * Convenience delete method delegating to treated «implClassModelRecord()» instance
     */
    public function delete()
    {
        $result = $this->get«name.formatForCodeCapital()»()->delete();
        $this->set_intId(0);
        $this->«name.formatForCode()» = null;
        return $result;
    }

    /**
     * get «name.formatForDisplay()»
     *
     * @return «implClassModelRecord()»
     */
    public function get«name.toFirstUpper()»()
    {
        if (is_null($this->«name.formatForCode()»)) {
            $this->set«name.formatForCodeCapital()»(new «implClassModelRecord()»());
        }
        return $this->«name.formatForCode()»;
    }

«EXPAND FileHelper::SetterMethod(name.formatForCode(), implClassModelRecord())»
«EXPAND FileHelper::GetterAndSetterMethods('_intObjectType', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intIdField', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intId', 'integer')»

«EXPAND fieldAccessors FOREACH fields.typeSelect(DerivedField)»
«EXPAND outgoingRelationAccessors FOREACH outgoing.typeSelect(JoinRelationship)»

«EXPAND FileHelper::ClassToString(baseClassBusinessEntity(false))-»
«ENDDEFINE»

«REM»Note we use protected and not private to let the dev change things in concrete implementations«ENDREM»
«DEFINE fieldMemberVar FOR DerivedField»
«EXPAND FileHelper::MemberVar(actualFieldName().formatForCode(), fieldTypeAsString(), "")»
«ENDDEFINE»
«DEFINE fieldMemberVar FOR ArrayField-»
«EXPAND FileHelper::MemberVar(actualFieldName().formatForCode(), fieldTypeAsString(), " = array()")»
«ENDDEFINE»
«DEFINE fieldMemberVar FOR JoinRelationship»
«EXPAND FileHelper::MemberVar(target.name.formatForCode(), target.implClassBusinessEntity((metaType != OneToOneRelationship)), "")»
«ENDDEFINE»

«DEFINE fieldAccessors FOR DerivedField»
«EXPAND FileHelper::GetterAndSetterMethodsDelegate(actualFieldName().formatForCode(), fieldTypeAsString(), entity.name)»
«ENDDEFINE»

«DEFINE outgoingRelationAccessors FOR JoinRelationship»
«EXPAND FileHelper::GetterAndSetterMethods(target.name.formatForCode(), target.implClassBusinessEntity((metaType != OneToOneRelationship)))»
«ENDDEFINE»
