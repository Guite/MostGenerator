«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE BusinessEntityBaseImpl(Application app) FOR Entity»
    /**
     * @var array  Reference to treated «name.formatForDisplay()» model («implClassModelRecord()»)
     */
    protected $«name.formatForCode()» = null;

    /**
     * @var string The tablename this object maps to
     */
    protected $_intObjectType = '«fullEntityName()»';

    /**
     * @var string The id field for this object
     */
    protected $_intIdField = '«idField()»';

    /**
     * @var integer The id for this object
     */
    protected $_intId = 0;

«EXPAND fieldMemberVar FOREACH fields.typeSelect(DerivedField)»
«EXPAND fieldMemberVar(false) FOREACH incoming.typeSelect(JoinRelationship)»
«EXPAND fieldMemberVar(true) FOREACH outgoing.typeSelect(JoinRelationship)»

    /**
     * Constructor.
     *
     * @param integer $id         The id to use to retrieve the object (optional) (default=null).
     */
    function __construct($id = 0)
    {
        $this->_intObjectType = '«fullEntityName()»';
        $this->_intIdField = '«name.formatForDB()»id';
        $this->_intId = $id;
    }

    /**
     * Select object from model (e.g. from database).
     * For now we use Doctrine records, but as the controllers communicate only with
     * business entities, we can exchange the model behind it without any subsequent
     * efforts on the controller layer.
     *
     * @param integer $id         The id to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray    Whether to return the result as array instead as record object (optional) (default=true).
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance
     */
    public function selectById($id = 0, $asArray = true)
    {
        // check id parameter
        if ($id == 0 && $this->_intId == 0) {
            return LogUtil::registerArgsError();
        }
        // store id parameter
        if ($id > 0) {
            $this->_intId = $id;
        }

        // get reference to table
        $table = Doctrine_Core::getTable('«implClassModelRecord()»');

        // get result from the model
        $item = $table->selectOneItemById($id, $asArray);

        // look whether we fetched an object or an array
        if (!$asArray) {
            // store the result object
            $this->set«name.formatForCodeCapital()»($item);
        }

        // return the results
        return $item;
    }

    /**
     * Convenience merge method delegating to treated «implClassModelRecord()» instance
     *
     * @param array data fields
     */
    public function merge(array $data)
    {
        return $this->get«name.formatForCodeCapital()»()->merge($data);
    }

    /**
     * Convenience save method delegating to treated «implClassModelRecord()» instance
     */
    public function save()
    {
        $result = $this->get«name.formatForCodeCapital()»()->save();
        $this->set_intId($this->«name.formatForCode()»[$this->_intIdField]);
        return $result;
    }

    /**
     * Convenience delete method delegating to treated «implClassModelRecord()» instance
     */
    public function delete()
    {
        $result = $this->get«name.formatForCodeCapital()»()->delete();
        $this->set_intId(0);
        $this->«name.formatForCode()» = null;
        return $result;
    }

    /**
     * Helper method for assigning default data values.
     *
     * @return array
     */
    public function getNewArrayWithDefaultData()
    {
«IF fields.typeSelect(TimestampField).size > 0-»
        $thisTimestamp = date('Y-m-d H:i:s');
«ENDIF-»
«IF fields.typeSelect(DateField).size > 0-»
        $todayDate = date('Y-m-d');
«ENDIF-»
«IF fields.typeSelect(TimeField).size > 0-»
        $thisTime = date('H:i:s');
«ENDIF-»

        $objectData = Array(«EXPAND DefaultFieldAssignment FOREACH getDerivedFields().reject(e|e.primaryKey) SEPARATOR ','»);

        return $objectData;
    }

    /**
     * get «name.formatForDisplay()»
     *
     * @return «implClassModelRecord()»
     */
    public function get«name.toFirstUpper()»()
    {
        if (is_null($this->«name.formatForCode()»)) {
            $this->set«name.formatForCodeCapital()»(new «implClassModelRecord()»());
        }
        return $this->«name.formatForCode()»;
    }

«EXPAND FileHelper::SetterMethod(name.formatForCode(), implClassModelRecord())»
«EXPAND FileHelper::GetterAndSetterMethods('_intObjectType', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intIdField', 'string')»
«EXPAND FileHelper::GetterAndSetterMethods('_intId', 'integer')»

«EXPAND fieldAccessors FOREACH fields.typeSelect(DerivedField)»
«EXPAND relationAccessors(false) FOREACH incoming.typeSelect(JoinRelationship)»
«EXPAND relationAccessors(true) FOREACH outgoing.typeSelect(JoinRelationship)»

«EXPAND FileHelper::ClassToString(baseClassBusinessEntity(false))-»
«ENDDEFINE»


«DEFINE DefaultFieldAssignment FOR EntityField»
                '«name.formatForCode()»' => «EXPAND DefaultFieldAssignmentData»«ENDDEFINE»
«DEFINE DefaultFieldAssignment FOR DerivedField»
                '«actualFieldName()»' => «EXPAND DefaultFieldAssignmentData»«ENDDEFINE»

«DEFINE DefaultFieldAssignmentData FOR EntityField-»
«error("Error: undefined entity field type " + metaType.toString() + " (code 925624)") -> ""-»
«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR DerivedField-»
«error("Error: undefined derived field type " + metaType.toString() + " (code 925627)") -> ""-»
«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR CalculatedField-»
«error("Error: undefined calculated field type " + metaType.toString() + " (code 925628)") -> ""-»
«ENDDEFINE»

«DEFINE DefaultFieldAssignmentDataText FOR DerivedField-»'«defaultValue»'«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR BooleanField»«IF defaultValue == true || defaultValue == "true"»true«ELSE»false«ENDIF»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR AbstractIntegerField-»
«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF-»
«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR IntegerField-»
«LET getPointingRelations() AS pointingRelations-»
«IF pointingRelations.size > 0-»(int) FormUtil::getPassedValue('«pointingRelations.get(0).source.idField()»', 0, 'GET')
«ELSE-»
«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF-»
«ENDIF-»«ENDLET-»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR FloatField»«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR DecimalField»«IF defaultValue.length > 0»«defaultValue»«ELSE»0.00«ENDIF»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR StringField-»«EXPAND DefaultFieldAssignmentDataText-»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR TextField-»«EXPAND DefaultFieldAssignmentDataText-»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR EmailField-»«EXPAND DefaultFieldAssignmentDataText-»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR UrlField-»«EXPAND DefaultFieldAssignmentDataText-»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR UploadField-»«EXPAND DefaultFieldAssignmentDataText-»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR ArrayField»array()«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR EnumField»array()«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR ObjectField»null«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR BlobField»'«REM»nothing for now«ENDREM»'«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR ClobField»«EXPAND DefaultFieldAssignmentDataText-»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR TimestampField»«IF mandatory»«IF defaultValue.length > 0»«defaultValue»«ELSE»$thisTimestamp«ENDIF»«ELSE»null«ENDIF»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR DateField»«IF mandatory»«IF defaultValue.length > 0»«defaultValue»«ELSE»$todayDate«ENDIF»«ELSE»null«ENDIF»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR TimeField»«IF mandatory»«IF defaultValue.length > 0»«defaultValue»«ELSE»$thisTime«ENDIF»«ELSE»null«ENDIF»«ENDDEFINE»
«DEFINE DefaultFieldAssignmentData FOR GzipField-»«EXPAND DefaultFieldAssignmentDataText-»«ENDDEFINE»


«REM»Note we use protected and not private to let the dev change things in concrete implementations«ENDREM»
«DEFINE fieldMemberVar FOR DerivedField»
«EXPAND FileHelper::MemberVar(actualFieldName().formatForCode(), fieldTypeAsString(), "")»
«ENDDEFINE»
«DEFINE fieldMemberVar FOR ArrayField-»
«EXPAND FileHelper::MemberVar(actualFieldName().formatForCode(), fieldTypeAsString(), " = array()")»
«ENDDEFINE»
«DEFINE fieldMemberVar(Boolean useTarget) FOR JoinRelationship»
«LET getRelationAliasName(useTarget).formatForCode() AS relationAliasName-»
«EXPAND FileHelper::MemberVar(relationAliasName, ((useTarget) ? target : source).implClassBusinessEntity((metaType != OneToOneRelationship)), "")»
«ENDLET-»
«ENDDEFINE»

«DEFINE fieldAccessors FOR DerivedField»
«EXPAND FileHelper::GetterAndSetterMethodsDelegate(actualFieldName().formatForCode(), fieldTypeAsString(), entity.name)»
«ENDDEFINE»

«DEFINE relationAccessors(Boolean useTarget) FOR JoinRelationship»
«LET getRelationAliasName(useTarget).formatForCode() AS relationAliasName-»
«EXPAND FileHelper::GetterAndSetterMethods(relationAliasName, ((useTarget) ? target : source).implClassBusinessEntity((metaType != OneToOneRelationship)))»
«ENDLET-»
«ENDDEFINE»
