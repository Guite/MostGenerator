«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE SetUpRelations FOR Entity-»
        /**
         * Relations
         */
«IF outgoing.typeSelect(JoinRelationship).size > 0-»
        // outgoing relations
«FOREACH outgoing.typeSelect(JoinRelationship) AS relation-»
«EXPAND RelationDefinition(false) FOR relation-»
«ENDFOREACH-»

«ENDIF-»
«IF incoming.typeSelect(JoinRelationship).size > 0-»
        // incoming relations
«FOREACH incoming.typeSelect(JoinRelationship) AS relation-»
«EXPAND RelationDefinition(true) FOR relation-»
«ENDFOREACH-»

«ENDIF-»
«ENDDEFINE»

«DEFINE RelationDefinition(Boolean incoming) FOR JoinRelationship-»
        $this->has«IF metaType == OneToOneRelationship || (incoming && metaType == OneToManyRelationship)-»One«ELSE»Many«ENDIF»('«IF incoming-»«source.implClassModelRecord()»«IF sourceAlias != null && sourceAlias != ""-» as «sourceAlias.formatForCode()»«ENDIF»«ELSE»«target.implClassModelRecord()»«IF targetAlias != null && targetAlias != ""-» as «targetAlias.formatForCode()»«ENDIF»«ENDIF»', array(
                // linked field in the defining class
                'local' => '«source.relationFieldName(sourceField)»',
                // linked field in the linked class
                'foreign' => '«IF metaType == ManyToManyRelationship-»«target.relationFieldName(targetField)»«ELSE»«source.relationFieldName(sourceField)»«ENDIF»',«REM»Rule: always place the foreign key in the owned class«ENDREM»
«IF metaType == ManyToManyRelationship-»
                // name of the many-to-many association class
                'refClass' => '«((ManyToManyRelationship)this).implClassModelRefRecord()»',
«ENDIF-»
                // true indicates the owning side (owning the foreign key)
                'owningSide' => «(!incoming).displayBool()»,
«IF metaType != ManyToManyRelationship && foreignKeyName != null && foreignKeyName != ""-»
                'foreignKeyName' => '«foreignKeyName»',
«ENDIF-»
«EXPAND CascadeInfo-»
            )
        );
«ENDDEFINE»

«DEFINE CascadeInfo FOR JoinRelationship-»
                'onDelete' => '«cascadeTypeUpdate.asConstant()-»',
                'onUpdate' => '«cascadeTypeDelete.asConstant()-»',
                'cascade' => «IF cascadeTypeDelete.asConstant() == "CASCADE" && source.tableType.asConstant() == "MYISAM"»array('delete')«ELSE»''«ENDIF»
«ENDDEFINE»

«DEFINE SubClasses FOR Entity-»
«LET getChildRelationsWithAggregation() AS aggregatedChildren-»
«IF aggregatedChildren.size > 0»
        $this->setSubclasses(array(
«EXPAND SubClass FOREACH aggregatedChildren-»
            )
        );
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE SubClass FOR InheritanceRelationship-»
                '«source.name.formatForCode()»' => array('«columnAggregationField.formatForCode()»' => '«source.name.formatForCode()»')
«ENDDEFINE»


