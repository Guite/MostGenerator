«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Business entity classes«ENDREM»
«DEFINE Root FOR Application-»
	«EXPAND BusinessEntityWrapper(this, false) FOREACH models.entities-»
	«EXPAND BusinessEntityWrapper(this, true) FOREACH models.entities-»
    «EXPAND BusinessValidatorWrapper(this) FOREACH models.entities-»
«ENDDEFINE»

«REM»creates a business entity and a collection class file for every Entity instance«ENDREM»
«DEFINE BusinessEntityWrapper(Application app, Boolean isCollection) FOR Entity-»
«info("Generating business " + ((isCollection) ? 'collection' : 'entity') +  " classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourceLibPath(app.appName()).msconcat(baseClassBusinessEntity(isCollection).asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND BusinessEntityBaseImplSwitch(app, isCollection)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourceLibPath(app.appName()).msconcat(implClassBusinessEntity(isCollection).asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND BusinessEntityImplSwitch(app, isCollection)»«ENDFILE»
«ENDDEFINE»

«REM»creates a business validator file for every Entity instance«ENDREM»
«DEFINE BusinessValidatorWrapper(Application app) FOR Entity-»
«info("Generating business validator classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourceLibPath(app.appName()).msconcat(baseClassBusinessValidator().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND BusinessValidatorBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourceLibPath(app.appName()).msconcat(implClassBusinessValidator().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND BusinessValidatorImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE BusinessEntityBaseImplSwitch(Application app, Boolean isCollection) FOR Entity-»

/**
 * Business entity «IF isCollection»collection «ENDIF»class for communication with controllers and encapsulating model details.
 *
 * This is the base business class for «name.formatForDisplay()» entities.
 */
abstract class «baseClassBusinessEntity(isCollection)»«IF isCollection»/* extends Zikula_Collection_Container*/«ENDIF»
{
«IF isCollection == false-»
«EXPAND business::Entity::BusinessEntityBaseImpl(app)-»
«ELSE-»
«EXPAND business::EntityCollection::BusinessEntityCollectionBaseImpl(app)-»
«ENDIF-»
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE BusinessEntityImplSwitch(Application app, Boolean isCollection) FOR Entity-»

/**
 * Business entity «IF isCollection»collection «ENDIF»class for communication with controllers and encapsulating model details.
 *
 * This is the concrete business class for «name.formatForDisplay()» entities.
 */
class «implClassBusinessEntity(isCollection)» extends «IF isInheriting()»«parentType().implClassBusinessEntity(isCollection)»«ELSE»«baseClassBusinessEntity(isCollection)»«ENDIF»
{
    // feel free to add your own additions here
}
«ENDDEFINE»



«REM»base implementation«ENDREM»
«DEFINE BusinessValidatorBaseImpl(Application app) FOR Entity-»

/**
 * Business validator class for encapsulating validation methods.
 *
 * This is the base validation class for «name.formatForDisplay()» entities.
 */
abstract class «baseClassBusinessValidator()»
{
«EXPAND business::Validator::BusinessValidatorBaseImpl(app)-»
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE BusinessValidatorImpl(Application app) FOR Entity-»

/**
 * Business validator class for encapsulating validation methods.
 *
 * This is the concrete validation class for «name.formatForDisplay()» entities.
 */
class «implClassBusinessValidator()» extends «IF isInheriting()»«parentType().implClassBusinessValidator()»«ELSE»«baseClassBusinessValidator()»«ENDIF»
{
    // here you can add custom validation methods or override existing checks
}
«ENDDEFINE»

