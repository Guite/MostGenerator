«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine record classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
«ENDDEFINE»

«REM»creates a record class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating record classes for entity \"" + name + "\"") -> ""-»
    «FILE baseClassModelRecord(false).asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRecordBaseImpl(app)»«ENDFILE»
    «FILE implClassModelRecord(false).asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRecordImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelRecordBaseImpl(Application app) FOR Entity-»

/**
 * Model class that defines the entity structure and behaviours.
 *
 * This is the base record class for «name.formatForDisplay()» entities
 */
class «baseClassModelRecord(false)» extends Doctrine_Record
{
«EXPAND RecordInfo-»
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRecordImpl(Application app) FOR Entity-»

/**
 * Model class that defines the entity structure and behaviours.
 *
 * This is the concrete table class for «name.formatForDisplay()» entities
 */
class «implClassModelRecord(false)» extends «baseClassModelRecord(false)»
{
    // feel free to add your own methods here
}
«ENDDEFINE»


«DEFINE RecordInfo FOR Entity-»
    /**
     * Set table definition.
     * Define columns, indexes and other information about the table schema.
     *
     * @return void
     */
    public function setTableDefinition()
    {
«EXPAND SetTableDefinition-»
    }

    /**
     * Record setup.
     * Attach behaviours and define relationships.
     *
     * @return void
     */
    public function setUp()
    {
«EXPAND SetUpBehaviour-»
    }
«ENDDEFINE»

«DEFINE SetTableDefinition FOR Entity-»
        $this->setTableName('«fullEntityName()»');
«EXPAND FieldSetColumn FOREACH fields-»
«IF indexes.size > 0-»
    // define additional indexes
    $tables['«fullEntityName()»_column_idx'] = array(«EXPAND IndexStructure FOREACH indexes SEPARATOR ','»);
«ENDIF-»
«ENDDEFINE»


«REM»column definition«ENDREM»
«DEFINE FieldSetColumn FOR EntityField-»
«error("Error: undefined entity field type (code 592354)") -> ""-»
«ENDDEFINE»
«DEFINE FieldSetColumn FOR DerivedField-»
        $this->hasColumn(«EXPAND FieldSetColumnDetails-», array(
«EXPAND FieldSetColumnOptions-»
            )
        );
«ENDDEFINE»
«DEFINE FieldSetColumn FOR CalculatedField-»
«REM»Nothing at the moment«ENDREM»
«ENDDEFINE»
«DEFINE FieldDefaultData FOR EntityField-»
«error("Error: undefined entity field type (code 592374)") -> ""-»
«ENDDEFINE»
«DEFINE FieldDefaultData FOR DerivedField-»
«error("Error: undefined derived field type (code 592376)") -> ""-»
«ENDDEFINE»
«DEFINE FieldDefaultData FOR CalculatedField-»
«error("Error: undefined calculated field type (code 592378)") -> ""-»
«ENDDEFINE»

«DEFINE FieldSetColumnDetails FOR DerivedField-»'«EXPAND FieldName-»', '«EXPAND FieldType-»', «EXPAND FieldLength-»«ENDDEFINE»

«DEFINE FieldName FOR DerivedField-»«name.formatForCode()»«IF alias != null && alias != ""-» as «alias.formatForCode()»«ENDIF-»«ENDDEFINE»

«DEFINE FieldType FOR DerivedField-»«metaType.toString().replaceAll("Field", "").toLowerCase()»«ENDDEFINE»
«REM»required for own types like user, email, url, upload«ENDREM» 
«DEFINE FieldType FOR AbstractIntegerField-»integer«ENDDEFINE»
«DEFINE FieldType FOR AbstractStringField-»string«ENDDEFINE»

«DEFINE FieldLength FOR DerivedField-»
«error("Error: undefined length for derived field type (code 348673)") -> ""-»
«ENDDEFINE»

«REM»
Column length: an integer that specifies the column length.
The length is different depending on the type of column you are using:
    * integer - Length is the the number of bytes the integer occupies.
    * string - Number of the characters allowed in the string.
    * float/decimal - Total number of characters allowed excluding the decimal.
    * enum - If using native enum length does not apply but if using emulated enums then it is just the string length of the column value.
«ENDREM»
«REM»
        $this->hasColumn('username', 'string', 255);
        $this->hasColumn('password', 'string', 255);
        $this->hasColumn('id', 'integer', 8, array('type' => 'integer', 'length' => 8, 'primary' => true, 'autoincrement' => true));
        $this->hasColumn('first_name', 'string', 255, array('type' => 'string', 'length' => 255));
        $this->hasColumn('last_name', 'string', 255, array('type' => 'string', 'length' => 255));
        $this->hasColumn('username', 'string', 255, array('type' => 'string', 'length' => 255));
        $this->hasColumn('password', 'string', 255, array('type' => 'string', 'length' => 255));
        $this->hasColumn('type', 'string', 255, array('type' => 'string', 'length' => 255));
        $this->hasColumn('is_active', 'integer', 1, array('type' => 'integer', 'length' => 1, 'default' => '1'));
        $this->hasColumn('is_super_admin', 'integer', 1, array('type' => 'integer', 'length' => 1, 'default' => '0'));
        $this->hasColumn('created_at', 'timestamp', null, array('type' => 'timestamp', 'notnull' => true));
        $this->hasColumn('updated_at', 'timestamp', null, array('type' => 'timestamp', 'notnull' => true));
«ENDREM»

«DEFINE FieldSetColumnOptions FOR DerivedField-»
                'default' => 'default username',
                'unsigned' => true
«ENDDEFINE»

«DEFINE FieldStructure(String prefix) FOR EntityField»
        '«name.formatForCode()»' => '«formatForDB(prefix + '_' + name)»'«ENDDEFINE»


«DEFINE FieldData FOR DerivedField»
        '«name.formatForCode()»' => "«IF primaryKey == true»I NOTNULL AUTO PRIMARY«ELSE»«EXPAND TypeDef»«EXPAND TypeValue»«ENDIF»"«ENDDEFINE»

«DEFINE TypeDef FOR DerivedField-»
«error("Error: undefined derived field type (code 925621)") -> ""-»
«ENDDEFINE»
«DEFINE TypeValue FOR DerivedField»«IF mandatory == true» NOTNULL«ENDIF»«REM»no default value for text and blob fields, breaks mysql strict mode«ENDREM»«IF metaType != BlobField && metaType != ClobField» DEFAULT '«defaultValue»'«ENDIF»«ENDDEFINE»

«DEFINE TypeDef FOR StringField»C(«IF length > 0 && length < 256»«length»«ELSE»255«ENDIF»)«ENDDEFINE»
«DEFINE TypeDef FOR ClobField»$«name.formatForCode()»Type«ENDDEFINE»
«DEFINE TypeDef FOR BlobField»B«ENDDEFINE»

«DEFINE TypeDef FOR DateField»D«ENDDEFINE»«REM»1970-01-01«ENDREM»
«DEFINE TypeValue FOR DateField»«IF mandatory == true» NOTNULL«ENDIF» «IF defaultValue.length > 0»DEFAULT '«defaultValue»'«ELSEIF mandatory == true»DEFDATE«ELSE»DEFAULT NULL«ENDIF»«ENDDEFINE»

«DEFINE TypeDef FOR TimestampField»T«ENDDEFINE»«REM»1970-01-01 00:00:00«ENDREM»
«DEFINE TypeValue FOR TimestampField»«IF mandatory == true» NOTNULL«ENDIF» «IF defaultValue.length > 0»DEFAULT '«defaultValue»'«ELSEIF mandatory == true»DEFTIMESTAMP«ELSE»DEFAULT NULL«ENDIF»«ENDDEFINE»

«DEFINE TypeDef FOR BooleanField»L«ENDDEFINE»
«DEFINE TypeValue FOR BooleanField»«IF mandatory == true» NOTNULL«ENDIF» DEFAULT '«IF defaultValue == true || defaultValue == "true"»1«ELSE»0«ENDIF»'«ENDDEFINE»

«DEFINE TypeDef FOR IntegerField»I«IF length == "1" || length == "2" || length == "4" || length == "8"»«length»«ELSE»4«ENDIF»«ENDDEFINE»
«DEFINE TypeValue FOR IntegerField»«IF mandatory == true» NOTNULL«ENDIF» DEFAULT '«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»'«ENDDEFINE»

«DEFINE TypeDef FOR FloatField»F«IF length > 0»(«length»)«ELSE»(10.2)«ENDIF»«ENDDEFINE»
«DEFINE TypeValue FOR FloatField»«IF mandatory == true» NOTNULL«ENDIF» DEFAULT '«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»'«ENDDEFINE»

«DEFINE TypeDef FOR DecimalField»N«IF length > 0»(«length».«scale»)«ELSE»(10.2)«ENDIF»«ENDDEFINE»
«DEFINE TypeValue FOR DecimalField»«IF mandatory == true» NOTNULL«ENDIF» DEFAULT «IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»«ENDDEFINE»


«DEFINE IndexStructure FOR EntityIndex»
        '«name.formatForDB()»' => «IF items.size > 1»array(«EXPAND IndexField FOREACH items SEPARATOR ', '»)«ELSE»'«formatForDB(items.get(0).name)»'«ENDIF»«ENDDEFINE»
«DEFINE IndexField FOR EntityIndexItem»'«name.formatForDB()»'«ENDDEFINE»


«DEFINE SetUpBehaviour FOR Entity-»
        $this->actAs('Timestampable');
«EXPAND ObjectExtensions-»
«ENDDEFINE»

«DEFINE ObjectExtensions FOR Entity»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»

