«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine table classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
«ENDDEFINE»

«REM»creates a table class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating table classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE baseClassModelTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelTableBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE implClassModelTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelTableImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelTableBaseImpl(Application app) FOR Entity-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the base table class for «name.formatForDisplay()» entities.
 */
class «baseClassModelTable()» extends Doctrine_Table
{
    /**
     * Hook into the constructor process
     */
    public function construct()
    {
    }

    public function truncateTable()
    {
        $q = Doctrine_Query::create()
            ->delete('«implClassModelRecord()»');
        $q->execute();
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelTableImpl(Application app) FOR Entity-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the concrete table class for «name.formatForDisplay()» entities.
 */
class «implClassModelTable()» extends «IF isInheriting()»«parentType().implClassModelTable()»«ELSE»«baseClassModelTable()»«ENDIF»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»


«REM»creates a reference table class file for every many-to-many relationship instance«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE baseClassModelRefTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefTableBaseImpl(app)»«ENDFILE»
    «FILE implClassModelRefTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefTableImpl(app)»«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ModelRefTableBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the base table class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefTable()» extends Doctrine_Table
{
    public function truncateTable()
    {
        $q = Doctrine_Query::create()
            ->delete('«implClassModelRefRecord()»');
        $q->execute();
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefTableImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the concrete table class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «implClassModelRefTable()» extends «baseClassModelRefTable()»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»
