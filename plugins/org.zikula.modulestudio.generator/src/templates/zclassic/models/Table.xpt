«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine table classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
«ENDDEFINE»

«REM»creates a table class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating table classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE baseClassModelTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelTableBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE implClassModelTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelTableImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelTableBaseImpl(Application app) FOR Entity-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the base table class for «name.formatForDisplay()» entities.
 */
class «baseClassModelTable()» extends Doctrine_Table
{
    /**
     * Hook into the constructor process.
     */
    public function construct()
    {
    }

    /**
     * Helper method for truncating the table.
     * Used during installation when inserting default data.
     */
    public function truncateTable()
    {
        $q = Doctrine_Query::create()
            ->delete('«implClassModelRecord()»');
        $q->execute();
    }

    /**
     * Select object from the database.
     *
     * @param integer $id         The id to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray    Whether to return the result as array instead as record object (optional) (default=true).
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance
     */
    public function selectOneItemById($id = 0, $asArray = true)
    {
        $q = $this->_intBaseQuery()
           ->where('tbl.«idField()» = ?', $id);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $q->fetchOne(array(), $fetchType);
    }

    /**
     * Select a collection
     *
     * @param string $where             The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy           The order-by clause to use when retrieving the object array (optional) (default='').
     */
    public function selectCollection($where = '', $orderBy = '')
    {
        $q = $this->_intBaseQuery($where, $orderBy);
        return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
    }

    /**
     * Select with a given where clause.
     *
     * @param string $where             The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy           The order-by clause to use when retrieving the object array (optional) (default='').
     * @param integer $currentPage      Where to start selection
     * @param integer $resultsPerPage   Amount of items to select
     * @param boolean $asArray          Whether to return the result as array instead as record object (optional) (default=true).
     * @return array|Doctrine_Collection retrieved data array or collection containing retrieved Doctrine_Record instances
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $asArray = true)
    {
        $pager = new Doctrine_Pager(
              $this->_intBaseQuery($where, $orderBy),
              $currentPage,
              $resultsPerPage
        );
«REM»TODO: see http://www.doctrine-project.org/projects/orm/1.2/docs/manual/utilities/en
        //$pager->setCountQuery($query);
«ENDREM»«""-»

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $pager->execute(array(), $fetchType);
    }

    /**
     * Select count with a given where clause.
     *
     * @param string $where             The where clause to use when retrieving the object count (optional) (default='').
     * @return integer amount of affected records
     */
    public function selectCount($where = '')
    {
        $q = Doctrine_Query::create()
            ->select('COUNT(tbl.«idField()») AS num«nameMultiple.formatForCodeCapital()»')
            ->from('«implClassModelRecord()» tbl');
        $this->addJoins($q);
        if (!empty($where)) {
            $q->where($where);
        }
        return $q->fetchOne(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string $where             The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy           The order-by clause to use when retrieving the object array (optional) (default='').
     * @return Doctrine_Query query instance to be further processed
     */
    private function _intBaseQuery($where = '', $orderBy = '')
    {
        $selection = 'tbl.*';
        if ($orderBy == 'RAND()') {
            $selection .= ', RANDOM() rand';
        }

        $q = Doctrine_Query::create()
            ->select($selection)
            ->from('«implClassModelRecord()» tbl');
        $this->addJoins($q);
        if (!empty($where)) {
            $q->where('tbl.' . $where);
        }
        if (!empty($orderBy)) {
            if ($orderBy == 'RAND()') {
                $q->orderBy('rand');
            }
            else {
«IF i18n-»
                // HACK FOR I18n behavior
                $sortParts = explode(' ', $orderBy);
                $sortField = $sortParts[0];
                if (in_array($sortField, array('«i18nFields.replaceAll(", ", "', '")»'))) {
                    $q->leftJoin('tbl.Translation tblt')
                          ->orderBy('tblt.' . $orderBy);
                }
                else {
                    $q->orderBy('tbl.' . $orderBy);
                }
«ELSE-»
                $q->orderBy('tbl.' . $orderBy);
«ENDIF-»
            }
        }
        return $q;
    }

    /**
     * Helper method to add join clauses
     *
     * @param Doctrine_Query $q           Reference to query to be enriched
     */
    private function addJoins(Doctrine_Query $q)
    {
«EXPAND AddJoin(false) FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND AddJoin(true) FOREACH outgoing.typeSelect(JoinRelationship)-»
    }
}
«ENDDEFINE»

«DEFINE AddJoin(Boolean incoming) FOR JoinRelationship-»
«LET getRelationAliasName(incoming).formatForCodeCapital() AS relationAliasName-»
        $q->«joinCommand(incoming)»('tbl.«relationAliasName» tbl«relationAliasName»');
«ENDLET-»
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelTableImpl(Application app) FOR Entity-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the concrete table class for «name.formatForDisplay()» entities.
 */
class «implClassModelTable()» extends «IF isInheriting()»«parentType().implClassModelTable()»«ELSE»«baseClassModelTable()»«ENDIF»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»


«REM»creates a reference table class file for every many-to-many relationship instance«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE baseClassModelRefTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefTableBaseImpl(app)»«ENDFILE»
    «FILE implClassModelRefTable().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefTableImpl(app)»«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ModelRefTableBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the base table class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefTable()» extends Doctrine_Table
{
    public function truncateTable()
    {
        $q = Doctrine_Query::create()
            ->delete('«implClassModelRefRecord()»');
        $q->execute();
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefTableImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the concrete table class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «implClassModelRefTable()» extends «baseClassModelRefTable()»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»
