«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine listener classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
«ENDDEFINE»

«REM»creates a listener class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating listener classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«REM»Later: «EXPAND EventListenerMethod FOREACH listeners-»«ENDREM»«""-»
«IF !isInheriting()-»
    «FILE baseClassModelListener().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelListenerBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE implClassModelListener().asFile()»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelListenerImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelListenerBaseImpl(Application app) FOR Entity-»

/**
 * Doctrine_Record_Listener class used to listen for and hook into events.
 *
 * This is the base listener class for «name.formatForDisplay()» entities.
 */
class «baseClassModelListener()» extends Doctrine_Record_Listener
{
«EXPAND stubMethodsForNow-»
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelListenerImpl(Application app) FOR Entity-»

/**
 * Doctrine_Record_Listener class used to listen for and hook into events.
 *
 * This is the concrete listener class for «name.formatForDisplay()» entities.
 */
class «implClassModelListener()» extends «IF isInheriting()»«parentType().implClassModelListener()»«ELSE»«baseClassModelListener()»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»




«DEFINE EventListenerMethod FOR EntityEventListener-»
«error("Error: undefined event listener type " + metaType.toString() + " (code 925724)") -> ""-»
«ENDDEFINE»
«DEFINE EventListenerMethod FOR PreProcess-»
«error("Error: undefined pre process type " + metaType.toString() + " (code 925725)") -> ""-»
«ENDDEFINE»
«DEFINE EventListenerMethod FOR PostProcess-»
«error("Error: undefined post process type " + metaType.toString() + " (code 925726)") -> ""-»
«ENDDEFINE»


«REM»Temporary hack«ENDREM»
«DEFINE stubMethodsForNow FOR Entity-»

«REM»«DEFINE EventListenerMethod FOR PreSave-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior to a hydrate operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    public function preHydrate(Doctrine_Event $event)
    {
        // echo 'selecting a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostSave-»«ENDREM»«""-»
    /**
     * Post-Process the data after a hydrate operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    public function postHydrate(Doctrine_Event $event)
    {
        // echo 'selected a record ...';

        $data = $event->data;

    «EXPAND sanitizeForOutput FOREACH fields»

        $event->data = $data;
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PreSave-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior to a save operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    public function preSave(Doctrine_Event $event)
    {
        // echo 'saving a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostSave-»«ENDREM»«""-»
    /**
     * Post-Process the data after a save operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    public function postSave(Doctrine_Event $event)
    {
        // echo 'saved a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PreUpdate-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior to an update operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    function preUpdate(Doctrine_Event $event)
    {
        // echo 'updating a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostUpdate-»«ENDREM»«""-»
    /**
     * Post-Process the data after an update operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    function postUpdate(Doctrine_Event $event)
    {
        // echo 'updated a record ...';

        $this->updateHooks($event, 'update');
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PreInsert-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior to an insert operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    function preInsert(Doctrine_Event $event)
    {
        // echo 'inserting a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostInsert-»«ENDREM»«""-»
    /**
     * Post-Process the data after an insert operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    function postInsert(Doctrine_Event $event)
    {
        // echo 'inserted a record ...';

        $this->updateHooks($event, 'create');
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PreDelete-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior a delete operation.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    function preDelete(Doctrine_Event $event)
    {
        // echo 'deleting a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostDelete-»«ENDREM»«""-»
    /**
     * Post-Process the data after a delete.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void
     */
    function postDelete(Doctrine_Event $event)
    {
        // echo 'deleted a record ...';
«LET getUploadFields() AS uploadFields-»
«IF uploadFields.size > 0-»

        $data = $event->data;
        $uploadFields = array(«FOREACH uploadFields AS uploadField SEPARATOR ", "»'«name.formatForCode()»'«ENDFOREACH»);
        foreach ($uploadFields as $uploadField) {
            if (empty($data[$uploadField])) {
                continue;
            }
            $basePath = «container.application.appName()»_Util::getFileBaseFolder('«name.formatForCode()»', $uploadField);
            unlink($basePath . $data[$uploadField]);
            /** TODO: remove thumbnails, too - see http://code.zikula.org/generator/ticket/82 for more information */
        }
«ENDIF-»
«ENDLET-»

        $this->updateHooks($event, 'delete');
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PreValidate-»«ENDREM»«""-»
    /**
     * Pre-Process the validation process with class specific logic.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    function preValidate(Doctrine_Event $event)
    {
        // echo 'validating a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostValidate-»«ENDREM»«""-»
    /**
     * Post-Process the validation process with class specific logic.
     *
     * @param Doctrine_Event $event Event object
     *
     * @return void.
     */
    function postValidate(Doctrine_Event $event)
    {
        // echo 'validated a record ...';
    }

    /**
     * Helper method to call api item hooks after according actions
     */
    private function updateHooks(Doctrine_Event $event, $mode = '') {
        if (!in_array($mode, array('create', 'update', 'delete'))) {
            return true;
        }
        $data = $event->data;
        $itemID = $data['«idField()»'];
        ModUtil::callHooks('item', $mode, '«name.formatForCode()»' . $itemID, array('module' => '«container.application.appName()»', 'ot' => '«name.formatForCode()»'));
        return true;
    }
«ENDDEFINE»




«DEFINE sanitizeForOutput FOR EntityField-»
        $data['«actualFieldName().formatForCode()»'] = ((isset($data['«actualFieldName().formatForCode()»']) && !empty($data['«actualFieldName().formatForCode()»'])) ? DataUtil::formatForDisplay($data['«actualFieldName().formatForCode()»']) : '');
«ENDDEFINE»

«DEFINE sanitizeForOutputHTML FOR EntityField-»
        $data['«actualFieldName().formatForCode()»'] = ((isset($data['«actualFieldName().formatForCode()»']) && !empty($data['«actualFieldName().formatForCode()»'])) ? DataUtil::formatForDisplayHTML($data['«actualFieldName().formatForCode()»']) : '');
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR BooleanField-»
        $data['«actualFieldName().formatForCode()»'] = (bool) $data['«actualFieldName().formatForCode()»'];
«ENDDEFINE»
«DEFINE sanitizeForOutput FOR StringField-»«EXPAND sanitizeForOutputHTML»«ENDDEFINE»
«DEFINE sanitizeForOutput FOR TextField-»«EXPAND sanitizeForOutputHTML»«ENDDEFINE»
«DEFINE sanitizeForOutput FOR UploadField-»
«LET actualFieldName().formatForCode() AS realName-»
        $extensionarr = explode('.', $data['«realName»']);
        $data['«realName»Extension'] = $extensionarr[count($extensionarr) - 1];
        $data['«realName»IsImage'] = (in_array($data['«realName»Extension'], array('gif', 'jpeg', 'jpg', 'png')) ? true : false);
        if (!empty($data['«realName»']) && FormUtil::getPassedValue('func', 'main', 'GETPOST') != 'edit') {
            $basePath = «entity.container.application.appName()»_Util::getFileBaseFolder('«entity.name.formatForCode()»', '«realName»');
            $data['«realName»FullPath'] = $basePath .  $data['«realName»'];
            $data['«realName»FullPathURL'] = System::getBaseUrl() .  $data['«realName»FullPath'];
        }
«ENDLET-»
«ENDDEFINE»
«DEFINE sanitizeForOutput FOR ClobField-»«EXPAND sanitizeForOutputHTML»«ENDDEFINE»
«DEFINE sanitizeForOutput FOR BlobField-»«ENDDEFINE»



