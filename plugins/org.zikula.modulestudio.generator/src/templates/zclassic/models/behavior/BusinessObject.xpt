«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::UtilsBO»

«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for DBObject implementations«ENDREM»
«DEFINE Root FOR Application-»
    «FILE "lib/" + applicationClassFileName(this, false)»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND dbObjectModuleClass(false)»«ENDFILE»
    «FILE "lib/" + applicationClassFileName(this, true)»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND dbObjectModuleClass(true)»«ENDFILE»

	«EXPAND ObjectClassWrapper(this, false) FOREACH models.entities-»
	«EXPAND ObjectClassWrapper(this, true) FOREACH models.entities-»
«ENDDEFINE»

«REM»Module specific DBObject base class«ENDREM»
«DEFINE dbObjectModuleClass(Boolean appendArray) FOR Application-»
/**
 * This is a base class encapsulating the generic functionality which is
 * common for all DBObject«IF appendArray»Array«ENDIF» types in the «appName()» module
 */
class «moduleClassName(this, appendArray)» extends DBObject«IF appendArray»Array«ENDIF»
{
}
«ENDDEFINE»


«DEFINE ObjectClassWrapper(Application app, Boolean appendArray) FOR Entity-»
«info("Generating object class for \"" + name + "\"")»
«FILE "lib/" + baseClassFileName(appendArray)»«EXPAND FileHelper::phpFileHeader(app)»

/**
 * This class provides basic functionality of «baseClassName(appendArray)»
 */
abstract class «baseClassName(appendArray)» extends «moduleClassName(app, appendArray)»
{
«IF appendArray == false-»
«EXPAND ObjectClassImpl(app)-»
«ELSE-»
«EXPAND ObjectArrayClassImpl(app)-»
«ENDIF-»
}
«ENDFILE»

«FILE "lib/" + implClassFileName(appendArray)»«EXPAND FileHelper::phpFileHeader(app)»

/**
 * This class implements the functionality of «baseClassName(appendArray)»
 */
class «implClassName(appendArray)» extends «baseClassName(appendArray)»
{
// feel free to add your logic here by implementing pre and post process methods
«IF appendArray == false-»
«REM»«EXPAND ObjectClassImpl(module)»«ENDREM»«""-»
«ELSE-»
«REM»«EXPAND ObjectArrayClassImpl(module)»«ENDREM»«""-»
«ENDIF-»
}
«ENDFILE»
«ENDDEFINE»


«DEFINE ObjectClassImpl(Application app) FOR Entity-»
    /**
     * Constructor, init everything to sane defaults and handle parameters.
     * It only needs to set the fields which are used to configure
     * the object's specific properties and actions.
     *
     * @param init        Initialization value (can be an object or a string directive) (optional) (default=null)
     *                    If it is an array it is set, otherwise it is interpreted as a string
     *                    specifying the source from where the data should be retrieved from.
     *                    Possible values:
     *                        D (DB), G ($_GET), P ($_POST), R ($_REQUEST), S ($_SESSION), V (failed validation)
     *
     * @param key         The DB key to use to retrieve the object (optional) (default=null)
     * @param field       The field containing the key value (optional) (default=null)
     */
    function __construct($init = null, $key = 0, $field = null)
    {
        // call base class constructor
        parent::__construct();

        // set the tablename this object maps to
«REM»        $this->_objType       = '«dbName(module.prefix + '_' + dataSource().name)»';«ENDREM»
        $this->_objType       = '«fullEntityName()»';

        // set the ID field for this object
«REM»        $this->_objField      = '«dbName(dataSource().name)»id';«ENDREM»
        $this->_objField      = '«dbName(name)»id';

        // set the access path under which the object's
        // input data can be retrieved upon input
«REM»        $this->_objPath       = '«dbName(dataSource().name)»';«ENDREM»
        $this->_objPath       = '«dbName(name)»';

«EXPAND ObjectJoins-»

«EXPAND ObjectPermissionFilters(app.appName())-»

        // call initialisation routine
        $this->_init($init, $key, $this->_objField);
    }

    function selectPostProcess($data = null)
    {
        if (!$data) {
            $data =& $this->_objData;
        }

«EXPAND sanitizeForOutput FOREACH fields-»
    }
«REM»	«EXPAND BusinessStateFunction FOREACH businessStates-»«ENDREM»

	«EXPAND BehaviorCommon::ClassToString(baseClassName(false))-»
«ENDDEFINE»

«DEFINE SelectJoinFieldTableNames(String exludedIdField) FOR Entity-»
«EXPAND ArrayListEntry('') FOREACH fields.reject(e|e.name == exludedIdField || e.isPrimaryKey) SEPARATOR ', '-»
«ENDDEFINE»

«DEFINE SelectJoinFieldObjNames(String exludedIdField) FOR Entity-»
«EXPAND ArrayListEntry(dbName(name) + '_') FOREACH fields.reject(e|e.name == exludedIdField || e.isPrimaryKey) SEPARATOR ', '-»
«ENDDEFINE»

«DEFINE ArrayListEntry(String entryPrefix) FOR EntityField-»
'«entryPrefix»«dbName(name)»'«ENDDEFINE»

«DEFINE ObjectJoins FOR Entity-»
«FOREACH incoming AS relation-»
        $this->_objJoin[]     = array ('join_table'          => '«fullTableName(relation.source)»',
                                       'join_field'          => array(«EXPAND SelectJoinFieldTableNames(dbName(name)+"id") FOR relation.source-»),
                                       'object_field_name'   => array(«EXPAND SelectJoinFieldObjNames(dbName(name)+"id") FOR relation.source-»),
                                       'compare_field_table' => '«dbName(relation.source.name)»id',
                                       'compare_field_join'  => '«dbName(relation.source.name)»id');
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE ObjectPermissionFilters(String modName) FOR Entity-»
        // apply object permission filters
        $this->_objPermissionFilter[] = array('component_left'   => '«modName»',
                                              'component_middle' => '«capitalName(name)»',
                                              'component_right'  => '',
                                              'instance_left'    => '«dbName(name)»id',
                                              'instance_middle'  => '',
                                              'instance_right'   => '',
                                              'level'            => ACCESS_READ);

«FOREACH incoming AS join-»
        $this->_objPermissionFilter[] = array('component_left'   => '«modName»',
                                              'component_middle' => '«capitalName(join.source.name)»',
                                              'component_right'  => '«capitalName(name)»',
                                              'instance_left'    => '«dbName(join.source.name)»id',
                                              'instance_middle'  => '«dbName(name)»id',
                                              'instance_right'   => '',
                                              'level'            => ACCESS_READ);

«ENDFOREACH-»
«ENDDEFINE»


«DEFINE EventListenerMethod FOR EntityEventListener-»
//TODO: Undefined Event Listener
«ENDDEFINE»
«DEFINE EventListenerMethod FOR PreProcess-»
//TODO: Undefined PreProcess
«ENDDEFINE»
«DEFINE EventListenerMethod FOR PostProcess-»
//TODO: Undefined PostProcess
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PreSave-»
«ENDDEFINE»
«DEFINE EventListenerMethod FOR PostSave-»
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PreInsert-»
    /**
     * Pre-Process the data prior to an insert.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function insertPreProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PostInsert-»
    /**
     * Post-Process the data after an insert.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function insertPostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

    	return;
    }
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PreUpdate-»
    /**
     * Pre-Process the data prior to an update.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function updatePreProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PostUpdate-»
    /**
     * Post-Process the data after an update.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function updatePostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

    	return;
    }
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PreDelete-»
    /**
     * Pre-Process the data prior a delete.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function deletePreProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PostDelete-»
    /**
     * Post-Process the data after a delete.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function deletePostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return;
    }
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PreValidate-»
«ENDDEFINE»

«DEFINE EventListenerMethod FOR PostValidate-»
    /**
     * Post-Process the basic object validation with class specific logic.
     *
     * @param $type
     */
    function validatePostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE GetObjectReference FOR EntityEventListener-»
        // in case we don't get any explicit data array assigned we default to the data the object acquired.
        // Typically this data is acquired from the getDataFromInput() method. 
        if (!$obj)
            $obj = &$this->_objData;
«ENDDEFINE»








«DEFINE ObjectArrayClassImpl(Application app) FOR Entity-»
    /**
     * Constructor, init everything to sane defaults and handle parameters.
     * It only needs to set the fields which are used to configure
     * the object's specific properties and actions.
     *
     * @param init        Initialization value (can be an object or a string directive) (optional) (default=null)
     *                    If it is an array it is set, otherwise it is interpreted as a string
     *                    specifying the source from where the data should be retrieved from.
     *                    Possible values:
     *                        D (DB), G ($_GET), P ($_POST), R ($_REQUEST), S ($_SESSION), V (failed validation)
     *
     * @param where       The where clause to use when retrieving the object array (optional) (default='')
     * @param orderBy     The order-by clause to use when retrieving the object array (optional) (default='')
     * @param assocKey    Key field to use for building an associative array (optional) (default=null)
     */
    function __construct($init = null, $where = '', $orderBy = '', $assocKey = null)
    {
        // call base class constructor
        parent::__construct();

        // set the tablename this object maps to
        $this->_objType       = '«fullEntityName()»';
«REM»        $this->_objType       = '«dbName(module.prefix + '_' + dataSource().name)»';«ENDREM»

        // set the ID field for this object
        $this->_objField      = '«dbName(name)»id';
«REM»        $this->_objField      = '«dbName(dataSource().name)»id';«ENDREM»
«REM»TODO«ENDREM»

        // set the access path under which the object's
        // input data can be retrieved upon input
        $this->_objPath       = '«dbName(name)»_array';

«EXPAND ObjectJoins-»

«EXPAND ObjectPermissionFilters(app.appName())-»

        // call initialization routine
        $this->_init($init, $where, $orderBy, $assocKey);
    }

    /**
     * Retrieves an array with all fields which can be used for sorting instances
     */
    function getAllowedSortingFields()
    {
        return array(«EXPAND singleSortingField FOREACH fields SEPARATOR ','»«EXPAND standardSortingFields FOR this-»);
    }

    /**
     * Retrieves the default sorting field/expression
     */
    function getDefaultSortingField()
    {
        return '«fields.select(e|e.leading == true).get(0).name.dbName()»';
    }

    function selectPostProcess($all = null)
    {
        foreach ($this->_objData as $k => $data) {
    «EXPAND sanitizeForOutput FOREACH fields»
            $this->_objData[$k] = $data;
        }
    }

«EXPAND BehaviorCommon::ClassToString(baseClassName(true))-»
«ENDDEFINE»

«DEFINE singleSortingField FOR EntityField»
«LET entity.incoming.select(e|dbName(e.source.name + "id") == dbName(name)) AS joins-»
«IF joins.size > 0-»
                     '«joins.get(0).source.name.dbName()»_«joins.get(0).source.fields.select(e|e.leading == true).get(0).name.dbName()»'«""-»
«ELSE-»
                     '«name.dbName()»'«""-»
«ENDIF-»
«ENDLET-»«ENDDEFINE»

«DEFINE standardSortingFields FOR Entity»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR EntityField-»
        $data['«dbName(name)»'] = ((isset($data['«dbName(name)»']) && !empty($data['«dbName(name)»'])) ? DataUtil::formatForDisplay($data['«dbName(name)»']) : '');
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR StringField-»
        $data['«dbName(name)»'] = ((isset($data['«dbName(name)»']) && !empty($data['«dbName(name)»'])) ? DataUtil::formatForDisplayHTML($data['«dbName(name)»']) : '');
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR BooleanField-»
        $data['«dbName(name)»'] = (bool) $data['«dbName(name)»'];
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR BlobField-»
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR ClobField-»
        $data['«dbName(name)»'] = ((isset($data['«dbName(name)»']) && !empty($data['«dbName(name)»'])) ? DataUtil::formatForDisplayHTML($data['«dbName(name)»']) : '');
«ENDDEFINE»
