«IMPORT modulestudio»
«IMPORT processing»
«EXTENSION extensions::Utils»

«REM»Definition of permission schema arrays«ENDREM»
«AROUND templates::zclassic::smallstuff::VersionFile::PermissionSchema FOR Module-»
// DEBUG: permission schema aspect starts
$modversion['securityschema'] = array('«modName()»::' => '::',
«EXPAND PermissionSchema(modName()) FOREACH persistenceContainer.tables SEPARATOR ','-»);
// DEBUG: permission schema aspect ends
«targetDef.proceed()-»
«ENDAROUND»

«DEFINE PermissionSchema(String modName) FOR persistence::Table-»
«IF incoming.size > 0-»
«EXPAND PermissionSchema(modName) FOREACH incoming SEPARATOR ','-»,
«ENDIF»
'«modName»:«capitalName(name)»:' => '«capitalName(name)»ID::'«ENDDEFINE»

«DEFINE PermissionSchema(String modName) FOR persistence::Relationship»
'«modName»:«capitalName(source.name)»:«capitalName(target.name)»' => '«capitalName(source.name)»ID:«capitalName(target.name)»ID:'«ENDDEFINE»

«REM»Permission checks in system use cases«ENDREM»
«AROUND templates::zclassic::processing::Processor::PermissionCheck FOR ProcessorState-»
// DEBUG: permission check aspect starts
«LET stateProcessor.processingContainer.processingModule.modName() AS modName-»
«IF stateProcessor.metaType == AdminProcessor-»
        if (!SecurityUtil::checkPermission('«modName»::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError(ModUtil::url('«modName»', 'user', 'main'));
«ELSE-»
«IF metaType == MainProcessorState-»
        if (!SecurityUtil::checkPermission('«modName»::', '::', ACCESS_OVERVIEW)) {
«ELSEIF metaType == ViewProcessorState-»
        if (!SecurityUtil::checkPermission('«modName»::', '::', ACCESS_READ)) {
«ELSEIF metaType == DisplayProcessorState-»
        if (!SecurityUtil::checkPermission('«modName»::', '::', ACCESS_READ)) {
«ELSEIF metaType == EditProcessorState-»
        if (!SecurityUtil::checkPermission('«modName»::', '::', ACCESS_EDIT)) {
«ELSEIF metaType == DeleteProcessorState-»
        if (!SecurityUtil::checkPermission('«modName»::', '::', ACCESS_DELETE)) {
«ELSEIF metaType == CustomProcessorState-»
        if (!SecurityUtil::checkPermission('«modName»::', '::', ACCESS_OVERVIEW)) {
«ENDIF-»
            return LogUtil::registerPermissionError();
«ENDIF-»
        }
«ENDLET-»
// DEBUG: permission check aspect ends
«targetDef.proceed()-»
«ENDAROUND»
