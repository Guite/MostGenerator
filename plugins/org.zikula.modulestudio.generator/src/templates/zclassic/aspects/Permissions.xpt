«IMPORT modulestudio»
«EXTENSION extensions::Utils»

«REM»Definition of permission schema arrays«ENDREM»
«AROUND templates::zclassic::smallstuff::VersionFile::PermissionSchema FOR Application-»
        // DEBUG: permission schema aspect starts
        $modversion['securityschema'] = array(
            '«appName()»::' => '::',
«EXPAND PermissionSchema(appName()) FOREACH this.models.entities SEPARATOR ','-»
        );
        // DEBUG: permission schema aspect ends
«targetDef.proceed()-»
«ENDAROUND»

«DEFINE PermissionSchema(String appName) FOR Entity-»
«IF incoming.size > 0-»
«EXPAND PermissionSchema(appName) FOREACH incoming SEPARATOR ','-»,
«ENDIF»
            '«appName»:«name.formatForCodeCapital()»:' => '«name.formatForCodeCapital()»ID::'«""-»
«ENDDEFINE»

«DEFINE PermissionSchema(String modName) FOR Relationship»
            '«modName»:«source.name.formatForCodeCapital()»:«target.name.formatForCodeCapital()»' => '«source.name.formatForCodeCapital()»ID:«target.name.formatForCodeCapital()»ID:'«ENDDEFINE»

«REM»Permission checks in system use cases«ENDREM»
«AROUND templates::zclassic::controller::Controller::PermissionCheck FOR Action-»
// DEBUG: permission check aspect starts
«LET this.controller.container.application.appName() AS appName-»
«IF this.controller.metaType == AdminController-»
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('«appName»::', '::', ACCESS_ADMIN));
«ELSE-»
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('«appName»::', '::', «EXPAND getPermissionAccessLevel-»));
«ENDIF-»
«ENDLET-»
// DEBUG: permission check aspect ends
«targetDef.proceed()-»
«ENDAROUND»

«DEFINE getPermissionAccessLevel FOR Action-»
«IF     metaType == MainAction-»ACCESS_OVERVIEW«""-»
«ELSEIF metaType == ViewAction-»ACCESS_READ«""-»
«ELSEIF metaType == DisplayAction-»ACCESS_READ«""-»
«ELSEIF metaType == EditAction-»ACCESS_EDIT«""-»
«ELSEIF metaType == DeleteAction-»ACCESS_DELETE«""-»
«ELSEIF metaType == CustomAction-»ACCESS_OVERVIEW
«ENDIF-»
«ENDDEFINE»
