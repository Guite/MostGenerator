«IMPORT modulestudio»
«IMPORT persistence»
«IMPORT processing»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::UtilsBO»

«REM»start point for the Processor creation«ENDREM»
«DEFINE Root FOR Module»
    «EXPAND Root(this) FOREACH processingContainer.processors-»
    «FILE "Util.php"»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND CommonFunctions-»«ENDFILE»
«ENDDEFINE»

«DEFINE CommonFunctions FOR Module-»
class «modName()»_Util
{
    /**
     * returns an array of all allowed object types in «modName()»
     */
    public static function getObjectTypes()
    {
        $allowedObjectTypes = array();
«FOREACH persistenceContainer.tables AS tab-»
        $allowedObjectTypes[] = '«moduleName(tab.name)»';
«ENDFOREACH-»
        return $allowedObjectTypes;
    }

    /**
     * utility method for managing view templates
     */
    public static function processViewTemplate(&$view, $type, $objectType, $func, $args=array())
    {
        $template = DataUtil::formatForOS('«modName()»_' . $type . '_' . $objectType . '_' . $func);
        $tpl = FormUtil::getPassedValue('tpl', isset($args['tpl']) ? $args['tpl'] : '');
        if (!empty($tpl) && $view->template_exists($template . '_' . DataUtil::formatForOS($tpl) . '.tpl')) {
            $template .= '_' . DataUtil::formatForOS($tpl);
        }
        $template .= '.tpl';

        $raw = FormUtil::getPassedValue('raw', (isset($args['raw']) && is_bool($args['raw'])) ? $args['raw'] : false);
        if ($raw == true) {
            // standalone output
            $view->display($template);
            return true;
        }

        // normal output
        return $view->fetch($template);
    }
}
«ENDDEFINE»

«REM»creates a file for every Processor instance«ENDREM»
«DEFINE Root(Module module) FOR Processor-»
    «FILE "lib/" + module.modName() + "/Controller/" + dbName(name).toFirstUpper() + ".php"»«EXPAND FileHelper::phpFileHeader(module)»«EXPAND ProcessorImpl(module)»«ENDFILE»
    «FILE "lib/" + module.modName() + "/Api/" + dbName(name).toFirstUpper() + ".php"»«EXPAND FileHelper::phpFileHeader(module)»«EXPAND ProcessorApiImpl(module)»«ENDFILE»
«ENDDEFINE»

«REM»file structure implementation«ENDREM»
«DEFINE ProcessorImpl(Module module) FOR Processor-»

/**
 * This is the «name» controller class providing navigation and interaction functionality
 *
 * @author       «module.author»
 */
class «module.modName().toFirstUpper()»_Controller_«dbName(name).toFirstUpper()» extends Zikula_Controller
{
«IF metaType == AjaxProcessor-»
    public function _postSetup() 
    { 
        // no need for a view so override it. 
    } 
«ELSE-»
«EXPAND ProcHelper::ControllerPostInitialize(true)-»
«ENDIF-»

«EXPAND Root(module) FOREACH processorStates-»
«IF module.needsConfig() && metaType == AdminProcessor-»

    /*
     * This function takes care of the module configuration.
     *
     * @return string Output
     */
    public function config()
    {
        if (!SecurityUtil::checkPermission('«module.modName()»::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError(ModUtil::url('«module.modName()»', 'user', 'main'));
        }

        // Create new Form reference
        $view = FormUtil::newForm('«module.modName()»');

        // Execute form using supplied template and page event handler
        return $view->execute('«module.modName()»_admin_config.tpl', new «module.modName().toFirstUpper()»_Admin_Config());
    }

«ENDIF-»
}
«ENDDEFINE»



«DEFINE Root(Module module) FOR ProcessorState-»

    /**
«EXPAND StateDoc(module)-»
     */
    public function «dbName(name)»($args)
    {
«EXPAND StateImpl(module)-»
    }
«ENDDEFINE»

«DEFINE StateDoc(Module module) FOR ProcessorState-»
«IF metaType == MainProcessorState-»
     * This method is the default function, and is called whenever the
     * module's «moduleName(stateProcessor.name)» area is called without defining arguments.
«ELSEIF metaType == ViewProcessorState-»
     * This method provides a generic item list overview.
«ELSEIF metaType == DisplayProcessorState-»
     * This method provides a generic item detail view.
«ELSEIF metaType == EditProcessorState-»
     * This method provides a generic handling of all edit requests.
«ELSEIF metaType == CustomProcessorState-»
     * This is a custom method. Documentation for this will be improved in later versions.
«ENDIF-»
     *
     * @params       TODO
«IF metaType == ViewProcessorState || metaType == DisplayProcessorState || metaType == EditProcessorState || metaType == DeleteProcessorState-»
     * @param        ot             string    treated object type
«IF metaType == DeleteProcessorState-»
     * @param        id             int       ID of the entry
     * @param        confirmation   boolean   Confirm the deletion, else a confirmation page is displayed
«ENDIF-»
«IF metaType == ViewProcessorState-»
     * @param        sort           string    sorting field
     * @param        sdir           string    sorting direction
     * @param        pos            int       current pager position
     * @param        num            int       amount of entries to display
«ENDIF-»
     * @param        tpl            string    name of alternative template (for alternative display options, feeds and xml output)
     * @param        raw            boolean   optional way to display a template instead of fetching it (needed for standalone output)
«ENDIF-»
     * @return       Render output
«ENDDEFINE»

«DEFINE StateImpl(Module module) FOR ProcessorState-»
«EXPAND PermissionCheck-»
«LET module.modName() AS modName-»
«IF metaType != MainProcessorState-»
        // parameter specifying which type of objects we are treating
        $objectType = FormUtil::getPassedValue('ot', '«module.getLeadObj()»', 'GET');

        if (!in_array($objectType, «modName»_Util::getObjectTypes())) {
            $objectType = '«module.getLeadObj()»';
        }
«ENDIF-»
«REM»TODO: introduce polymorphism here«ENDREM»
«IF metaType == MainProcessorState-»«EXPAND PStates::Main::Impl(modName)-»
«ELSEIF metaType == ViewProcessorState-»«EXPAND PStates::View::Impl(modName)-»
«ELSEIF metaType == DisplayProcessorState-»«EXPAND PStates::Display::Impl(modName)-»
«ELSEIF metaType == EditProcessorState-»«EXPAND PStates::Edit::Impl(modName)-»
«ELSEIF metaType == DeleteProcessorState-»«EXPAND PStates::Delete::Impl(modName)-»
«ELSEIF metaType == CustomProcessorState-»«EXPAND PStates::Custom::Impl(modName)-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE PermissionCheck FOR ProcessorState-»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»



«DEFINE ProcessorApiImpl(Module module) FOR Processor-»
/**
 * This is the «name» api helper class.
 */
class «module.modName().toFirstUpper()»_API_«dbName(name).toFirstUpper()» extends Zikula_Api
{
    /**
     * get available «name» panel links
     *
     * @return       array      array of admin links
     */
    public function getlinks()
    {
        $links = array();

«FOREACH module.persistenceContainer.tables AS tab-»
        if (SecurityUtil::checkPermission('«module.modName()»::', '::', ACCESS_READ)) {
            $links[] = array('url' => ModUtil::url('«module.modName()»', '«dbName(name)»', 'view', array('ot' => '«moduleName(tab.name)»')),
                             'text' => $this->__('«formattedNameCapitalized(tab.nameMultiple)»'));
        }
«ENDFOREACH-»
«IF metaType == AdminProcessor && module.needsConfig()-»
        if (SecurityUtil::checkPermission('«module.modName()»::', '::', ACCESS_ADMIN)) {
            $links[] = array('url' => ModUtil::url('«module.modName()»', 'admin', 'config'), 'text' => $this->__('Configuration'));
        }
«ENDIF-»
        return $links;
    }
}
«ENDDEFINE»

