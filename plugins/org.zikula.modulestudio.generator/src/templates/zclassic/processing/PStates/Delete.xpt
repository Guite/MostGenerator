«IMPORT processing»
«IMPORT templates::zclassic::processing»
«EXTENSION extensions::Utils»

«DEFINE Impl(String modName) FOR ProcessorState-»
    «EXPAND ProcHelper::loadObjectClass(modName, false)-»
    «EXPAND ProcHelper::instantiateObject("", "")-»
        $idField = $object->getIDField();

        // retrieve the ID of the object we wish to view
        $id = (int) FormUtil::getPassedValue($idField, isset($args[$idField]) && is_numeric($args[$idField]) ? $args[$idField] : 0, 'GET');
        if (!$id) {
            return LogUtil::registerError('Invalid ' . $idField . ' [' . DataUtil::formatForDisplay($id) . '] received ...');
        }

        $confirmation = (bool) FormUtil::getPassedValue('confirmation', isset($args['confirmation']) ? $args['confirmation'] : false, 'GETPOST');

        if ($confirmation) {
            $object->setData(array($idField => $id), false);

            if (!$object->delete()) {
                LogUtil::registerError($this->__('Error! Deletion attempt failed.'));
            } else {
                LogUtil::registerStatus($this->__('Done! «formattedNameCapitalized(name)» deleted.'));
            }
        } else {
    «EXPAND ProcHelper::getObjectFromSource("", "id", "idField")-»

            // turn off output caching
            $this->view->setCaching(false);

            // assign the object we loaded above
            $this->view->assign($objectType, $objectData);

            // fetch and return the appropriate template
            return «modName»_Util::processViewTemplate($this->view, '«dbName(stateProcessor.name)»', $objectType, 'delete', $args);
        }

        // redirect to the list of the current object type
        return System::redirect(ModUtil::url('«modName»', '«dbName(stateProcessor.name)»', «IF stateProcessor.hasPStates('view')-»'view',
                                                                                    array('ot' => $objectType)«ELSE-»'main'«ENDIF-»));

«ENDDEFINE»
