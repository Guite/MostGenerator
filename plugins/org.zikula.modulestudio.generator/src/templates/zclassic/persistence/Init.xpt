«IMPORT modulestudio»
«IMPORT persistence»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»Entry point for module initialization«ENDREM»
«DEFINE Root FOR Module»
«FILE "Installer.php"-»
«EXPAND FileHelper::phpFileHeader(this)-»
class «modName()»_Installer extends Zikula_Installer
{
«EXPAND NormalInstall-»
}
«ENDFILE»
«IF interactiveInstallation == true»
«FILE "lib/" + modName().toFirstUpper() + "/InteractiveInstaller.php"-»
«EXPAND FileHelper::phpFileHeader(this)-»
class «modName()»_Interactiveinstaller extends Zikula_InteractiveInstaller
{
«EXPAND InteractiveInstall»
}
«ENDFILE»
«EXPAND Init_Templates::Root»
«ENDIF»
«ENDDEFINE»

«DEFINE NormalInstall FOR Module-»
«EXPAND FuncInit-»
«EXPAND FuncUpdate-»
«EXPAND FuncDelete-»
«EXPAND FuncDefaultData-»
«ENDDEFINE»

«DEFINE InteractiveInstall FOR Module-»
«EXPAND FuncInteractiveInit-»
«IF needsConfig()»«EXPAND FuncInteractiveInitStep2»«ENDIF»
«EXPAND FuncInteractiveInitStep3-»
«EXPAND FuncInteractiveUpdate-»
«EXPAND FuncInteractiveDelete-»
«ENDDEFINE»

«DEFINE FuncInit FOR Module-»
    /**
     * initialise the «modName()» module
     *
     * @author       «author»
     * @return       bool       true on success, false otherwise
     */
    public function install()
    {
«FOREACH persistenceContainer.tables AS tab-»
        // create the «moduleName(tab.name)» table
        if (!DBUtil::createTable('«fullTableName(tab)»')) {
            return false;
        }
«ENDFOREACH-»

«REM»
    // register hook functions
    if (!ModUtil::registerHook('item', 'display', 'GUI', '«modName()»', 'user', 'viewupload')) {
        return LogUtil::registerError(_REGISTERFAILED . ', Nr. 1');
    }
    if (!ModUtil::registerHook('item', 'create', 'GUI', '«modName()»', 'user', 'createupload')) {
        return LogUtil::registerError(_REGISTERFAILED . ', Nr. 2');
    }
    if (!ModUtil::registerHook('item', 'update', 'GUI', '«modName()»', 'user', 'createupload')) {
        return LogUtil::registerError(_REGISTERFAILED . ', Nr. 3');
    }
    if (!ModUtil::registerHook('item', 'delete', 'API', '«modName()»', 'user', 'deleteupload')) {
        return LogUtil::registerError(_REGISTERFAILED . ', Nr. 4');
    }
«ENDREM»

        // set up all our module vars with initial values
«FOREACH persistenceContainer.modvarContainer.modvars AS modvar-»
«IF interactiveInstallation == true-»
        $sessionValue = SessionUtil::getVar('«moduleName(name + '_' + modvar.name)»');
        ModUtil::setVar(«modName()», «moduleName(modvar.name)», (($sessionValue <> false) ? «EXPAND ModVarValFromSession FOR modvar» : «EXPAND ModVarValSession2Mod FOR modvar»));
        SessionUtil::delVar(«moduleName(name + '_' + modvar.name)»);
«ELSE-»
        ModUtil::setVar('«modName()»', '«moduleName(modvar.name)»', «EXPAND ModVarValDirect2Mod FOR modvar»);
«ENDIF-»
«ENDFOREACH-»

        // create the default data for «modName()»
        $this->defaultdata();

        // Initialisation successful
        return true;
    }
«ENDDEFINE»


«DEFINE IndexStructure FOR TableIndex»
        '«moduleName(name)»' => «IF indexItems.size > 1»array(«EXPAND IndexField FOREACH indexItems SEPARATOR ', '»)«ELSE»'«dbName(indexItems.get(0).name)»'«ENDIF»«ENDDEFINE»
«DEFINE IndexField FOR TableIndexItem»'«dbName(name)»'«ENDDEFINE»

«DEFINE ModVarValFromSession FOR ModuleVar»$sessionValue«ENDDEFINE»
«DEFINE ModVarValFromSession FOR ModuleVarList»serialize($sessionValue)«ENDDEFINE»

«DEFINE ModVarValSession2Mod FOR ModuleVar»'«value»'«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR ModuleVarList»serialize(array(«EXPAND ModVarValSession2Mod FOREACH items.select(item|item.isDefault == true) SEPARATOR ', '»))«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR ModuleVarListItem»«IF isDefault == true»'«moduleName(name)»'«ENDIF»«ENDDEFINE»

«REM»
<select name="blabla[]" size="6" multiple>
Ausgelesen als Array: $blabla["0"];
«ENDREM»

«DEFINE ModVarValDirect2Mod FOR ModuleVar»'«value»'«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR ModuleVarList»serialize(array(«EXPAND ModVarValDirect2Mod FOREACH items.select(item|item.isDefault == true) SEPARATOR ', '»))«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR ModuleVarListItem»'«moduleName(name)»'«ENDDEFINE»


«DEFINE FuncUpdate FOR Module»
    /**
     * upgrade the «modName()» module from an old version
     *
     * This function must consider all the released versions of the module!
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @author       «author»
     * @param       int        $oldversion version to upgrade from
     * @return      bool       true on success, false otherwise
     */
    public function upgrade($oldversion)
    {
/*
    // Upgrade dependent on old version number
    switch ($oldversion){
    case '1.00':
            «modName()»_createTables_101();
        break;
    }
*/

        // Update successful
        return true;
    }
«ENDDEFINE»

«DEFINE FuncDelete FOR Module»
    /**
     * delete the «modName()» module

     * @author       «author»
     * @return       bool       true on success, false otherwise
     */
    public function uninstall()
    {
«FOREACH persistenceContainer.tables AS tab-»
        if (!DBUtil::dropTable('«fullTableName(tab)»')) {
            return false;
        }
«ENDFOREACH-»

«REM»
    // unregister hook functions
    if (!ModUtil::unregisterHook('item', 'display', 'GUI', '«modName()»', 'user', 'viewupload')) {
        return LogUtil::registerError(_UNREGISTERFAILED . ', Nr. 1');
    }
    if (!ModUtil::unregisterHook('item', 'create', 'GUI', '«modName()»', 'user', 'createupload')) {
        return LogUtil::registerError(_UNREGISTERFAILED . ', Nr. 2');
    }
    if (!ModUtil::unregisterHook('item', 'update', 'GUI', '«modName()»', 'user', 'createupload')) {
        return LogUtil::registerError(_UNREGISTERFAILED . ', Nr. 3');
    }
    if (!ModUtil::unregisterHook('item', 'delete', 'API', '«modName()»', 'user', 'deleteupload')) {
        return LogUtil::registerError(_UNREGISTERFAILED . ', Nr. 4');
    }
«ENDREM»

        // remove all module vars
        ModUtil::delVar('«modName()»');

        // Deletion successful
        return true;
    }
«ENDDEFINE»

«DEFINE FuncDefaultData FOR Module»
    /**
     * create the default data for «modName()»
     *
     * @author       «author»
     * @return       bool       true on success, false otherwise
     */
    public function defaultdata()
    {
        // ensure that tables are cleared
        if («EXPAND clearTable FOREACH persistenceContainer.tables SEPARATOR ' ||'») {
            return false;
        }

        $dom = ZLanguage::getModuleDomain('«modName()»');

«IF persistenceContainer.select(e|e.isDefaultDataSource).get(0).numExampleRows > 0-»
«FOREACH persistenceContainer.tables AS tab-»
        // define default data for «moduleName(tab.name)» table
        $records = array(«EXPAND createExampleRows(this) FOR tab»
        );

        // insert it into the «moduleName(tab.name)» table
        DBUtil::insertObjectArray($records, '«dbName(prefix + '_' + tab.name)»', '«dbName(tab.name)»id', true);
«ENDFOREACH-»
«ENDIF-»

        // insertion successful
        return true;
    }
«ENDDEFINE»

«DEFINE clearTable FOR Table»
        !DBUtil::deleteWhere('«fullTableName(this)»', '1=1')«ENDDEFINE»

«DEFINE createExampleRows(Module module) FOR Table»
«FOREACH 1.upTo(tableContainer.numExampleRows) AS number SEPARATOR ','-»

        array(«EXPAND ExampleRow(module, name, number) FOREACH columns SEPARATOR ','»)«ENDFOREACH-»
«ENDDEFINE»
«DEFINE ExampleRow(Module module, String tabName, Integer number) FOR TableColumn»
            '«dbName(name)»' => __('«tabName» «name» «number»', $dom)«ENDDEFINE»

«DEFINE FuncInteractiveInit FOR Module»
    /**
     * interactive installation procedure
     *
     * @author       «author»
     * @return       Renderer output
     */
    public function install()
    {
        if (!SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // get Renderer instance for this module
        $render = Renderer::getInstance('«modName()»', false);

        // fetch and return the appropriate template
        return $render->fetch('«modName()»_init_interactive.htm');
    } 
«ENDDEFINE»

«DEFINE FuncInteractiveInitStep2 FOR Module»
    /**
     * interactive installation procedure step 2
     *
     * @author       «author»
     * @return       Renderer output
     */
    public function interactiveinitstep2()
    {
        if (!SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $submit = FormUtil::getPassedValue('submit', null, 'POST');
        if (!$submit) {
            // get Renderer instance for this module
            $render = Renderer::getInstance('«modName()»', false);

            // assign auth key
            $render->assign('authid', SecurityUtil::generateAuthKey('«modName()»'));

            // fetch and return the appropriate template
            return $render->fetch('«modName()»_init_step2.htm');
        }

        if (!SecurityUtil::confirmAuthKey()) {
            LogUtil::registerError(DataUtil::formatForDisplayHTML(_BADAUTHKEY));
            return System::redirect(ModUtil::url('Modules', 'admin', 'view'));
        }

	«FOREACH persistenceContainer.modvarContainer.modvars AS modvar-»
        $formValue = FormUtil::getPassedValue('«moduleName(modvar.name)»', «EXPAND ModVarValForm2SessionDefault FOR modvar», 'POST');
        SessionUtil::setVar('«moduleName(name + '_' + modvar.name)»', $formValue);

«ENDFOREACH-»

        $activate = (bool) FormUtil::getPassedValue('activate', false, 'POST');
        $activate = (!empty($activate)) ? true : false; 

        return System::redirect(ModUtil::url('«modName()»', 'init', 'interactiveinitstep3', array('activate' => $activate)));
    }
«ENDDEFINE»

«DEFINE ModVarValForm2SessionDefault FOR ModuleVar»'«moduleName(value)»'«ENDDEFINE»
«DEFINE ModVarValForm2SessionDefault FOR ModuleVarList»serialize(array(«EXPAND ModVarValForm2SessionDefault FOREACH items.select(item|item.isDefault == true) SEPARATOR ', '»))«ENDDEFINE»
«DEFINE ModVarValForm2SessionDefault FOR ModuleVarListItem»'«moduleName(name)»'«ENDDEFINE»

«DEFINE FuncInteractiveInitStep3 FOR Module»
    /**
     * interactive installation procedure step 3
     *
     * @author       «author»
     * @return       Renderer output
     */
    public function interactiveinitstep3()
    {
        if (!SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }
        $activate = (bool) FormUtil::getPassedValue('activate', false, 'POST');

        // get Renderer instance for this module
        $render = Renderer::getInstance('«modName()»', false);

        // assign auth key
        $render->assign('authid', SecurityUtil::generateAuthKey('Modules'));

        // assign activation flag
        $render->assign('activate', $activate);

        // fetch and return the appropriate template
        return $render->fetch('«modName()»_init_step3.htm');
    }
«ENDDEFINE»

«DEFINE FuncInteractiveUpdate FOR Module»
    /**
     * interactive update procedure
     *
     * @author       «author»
     * @return       Renderer output
     */
    function upgrade()
    {
        if (!SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // TODO

        return true;
    }
«ENDDEFINE»

«DEFINE FuncInteractiveDelete FOR Module»
    /**
     * interactive delete
     *
     * @author       «author»
     * @return       Renderer output
     */
    public function uninstall()
    {
        if (!SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // get Renderer instance for this module
        $render = Renderer::getInstance('«modName()»', false);

        // assign auth key
        $render->assign('authid', SecurityUtil::generateAuthKey('Modules'));

        // fetch and return the appropriate template
        return $render->fetch('«modName()»_init_delete.htm');
    }
«ENDDEFINE»
