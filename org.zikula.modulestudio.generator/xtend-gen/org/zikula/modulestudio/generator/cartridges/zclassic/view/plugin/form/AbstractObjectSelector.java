package org.zikula.modulestudio.generator.cartridges.zclassic.view.plugin.form;

import com.google.inject.Inject;
import de.guite.modulestudio.metamodel.modulestudio.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class AbstractObjectSelector {
  @Inject
  @Extension
  private FormattingExtensions _formattingExtensions = new Function0<FormattingExtensions>() {
    public FormattingExtensions apply() {
      FormattingExtensions _formattingExtensions = new FormattingExtensions();
      return _formattingExtensions;
    }
  }.apply();
  
  @Inject
  @Extension
  private NamingExtensions _namingExtensions = new Function0<NamingExtensions>() {
    public NamingExtensions apply() {
      NamingExtensions _namingExtensions = new NamingExtensions();
      return _namingExtensions;
    }
  }.apply();
  
  @Inject
  @Extension
  private Utils _utils = new Function0<Utils>() {
    public Utils apply() {
      Utils _utils = new Utils();
      return _utils;
    }
  }.apply();
  
  private FileHelper fh = new Function0<FileHelper>() {
    public FileHelper apply() {
      FileHelper _fileHelper = new FileHelper();
      return _fileHelper;
    }
  }.apply();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    final String formPluginPath = (_appSourceLibPath + "Form/Plugin/");
    String _plus = (formPluginPath + "Base/AbstractObjectSelector.php");
    CharSequence _selectorBaseFile = this.selectorBaseFile(it);
    fsa.generateFile(_plus, _selectorBaseFile);
    String _plus_1 = (formPluginPath + "AbstractObjectSelector.php");
    CharSequence _selectorFile = this.selectorFile(it);
    fsa.generateFile(_plus_1, _selectorFile);
  }
  
  private CharSequence selectorBaseFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _phpFileHeader = this.fh.phpFileHeader(it);
    _builder.append(_phpFileHeader, "");
    _builder.newLineIfNotEmpty();
    CharSequence _selectorBaseImpl = this.selectorBaseImpl(it);
    _builder.append(_selectorBaseImpl, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence selectorFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _phpFileHeader = this.fh.phpFileHeader(it);
    _builder.append(_phpFileHeader, "");
    _builder.newLineIfNotEmpty();
    CharSequence _selectorImpl = this.selectorImpl(it);
    _builder.append(_selectorImpl, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence selectorBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _targets = this._utils.targets(it, "1.3.5");
      boolean _not = (!_targets);
      if (_not) {
        _builder.append("namespace ");
        String _appNamespace = this._utils.appNamespace(it);
        _builder.append(_appNamespace, "");
        _builder.append("\\Form\\Plugin\\Base;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("use DataUtil;");
        _builder.newLine();
      }
    }
    _builder.append("use Doctrine\\Common\\Collections\\Collection;");
    _builder.newLine();
    {
      boolean _targets_1 = this._utils.targets(it, "1.3.5");
      if (_targets_1) {
        _builder.newLine();
      } else {
        _builder.append("use FormUtil;");
        _builder.newLine();
        _builder.append("use ModUtil;");
        _builder.newLine();
        _builder.append("use ServiceUtil;");
        _builder.newLine();
        _builder.append("use Zikula_EntityAccess;");
        _builder.newLine();
        _builder.append("use Zikula_Form_Plugin_DropdownList;");
        _builder.newLine();
        _builder.append("use Zikula_Form_View;");
        _builder.newLine();
        _builder.newLine();
      }
    }
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Abstract object selector plugin base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    {
      boolean _targets_2 = this._utils.targets(it, "1.3.5");
      if (_targets_2) {
        _builder.append("abstract class ");
        String _appName = this._utils.appName(it);
        _builder.append(_appName, "");
        _builder.append("_Form_Plugin_Base_AbstractObjectSelector extends Zikula_Form_Plugin_DropdownList");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("class AbstractObjectSelector extends Zikula_Form_Plugin_DropdownList");
        _builder.newLine();
      }
    }
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _memberVars = this.memberVars(it);
    _builder.append(_memberVars, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Get filename of this file.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The information is used to re-establish the plugins on postback.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return string");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function getFilename()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return __FILE__;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _createPlugin = this.createPlugin(it);
    _builder.append(_createPlugin, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _load = this.load(it);
    _builder.append(_load, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _renderAttributes = this.renderAttributes(it);
    _builder.append(_renderAttributes, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _loadItems = this.loadItems(it);
    _builder.append(_loadItems, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _validate = this.validate(it);
    _builder.append(_validate, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _setSelectedValue = this.setSelectedValue(it);
    _builder.append(_setSelectedValue, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _relationPreProcess = this.relationPreProcess(it);
    _builder.append(_relationPreProcess, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _relationPostProcess = this.relationPostProcess(it);
    _builder.append(_relationPostProcess, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _buildWhereClause = this.buildWhereClause(it);
    _builder.append(_buildWhereClause, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _helperMethods = this.helperMethods(it);
    _builder.append(_helperMethods, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence memberVars(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of the owning module.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $name = \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The treated object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $objectType = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Reverse alias for inverse method calls.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $aliasReverse = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List of identifier field names.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $idFields = array();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Where clause.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $where = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* OrderBy clause.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $orderBy = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The amount of objects to select.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* A value of 0 causes the inclusion of all existing objects.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var integer");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $resultsPerPage = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The current page offset.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var integer");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $currentPage = 1;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of the field to display.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $displayField = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of optional second field to display.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $displayFieldTwo = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Whether to display an empty value to select nothing.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $showEmptyValue = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List of preselected items.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $preselectedItems = array();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List of selected items.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public $selectedItems = array();");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence createPlugin(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Create event handler.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_Form_View $view    Reference to Zikula_Form_View object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array            &$params Parameters passed from the Smarty plugin function.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see    Zikula_Form_AbstractPlugin");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function create(Zikula_Form_View $view, &$params)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($params[\'objectType\']) || empty($params[\'objectType\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->trigger_error(__f(\'Error! in %1$s: the %2$s parameter must be specified.\', array(\'");
    String _appName = this._utils.appName(it);
    String _formatForDB = this._formattingExtensions.formatForDB(_appName);
    _builder.append(_formatForDB, "        ");
    _builder.append("RelationSelectorList\', \'objectType\')));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->objectType = $params[\'objectType\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("unset($params[\'objectType\']);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($params[\'aliasReverse\']) || empty($params[\'aliasReverse\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->trigger_error(__f(\'Error! in %1$s: the %2$s parameter must be specified.\', array(\'relationtesterRelationSelectorList\', \'aliasReverse\')));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->aliasReverse = $params[\'aliasReverse\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("unset($params[\'aliasReverse\']);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($params[\'displayField\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!empty($params[\'displayField\'])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$this->displayField = $params[\'displayField\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'displayField\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($this->displayField)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// fallback to the leading field");
    _builder.newLine();
    {
      boolean _targets = this._utils.targets(it, "1.3.5");
      if (_targets) {
        _builder.append("        ");
        _builder.append("$entityClass = $this->name . \'_Entity_\' . ucwords($this->objectType);");
        _builder.newLine();
      } else {
        _builder.append("        ");
        _builder.append("$entityClass = \'\\\\");
        String _vendor = it.getVendor();
        String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_vendor);
        _builder.append(_formatForCodeCapital, "        ");
        _builder.append("\\\\");
        String _name = it.getName();
        String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(_name);
        _builder.append(_formatForCodeCapital_1, "        ");
        _builder.append("Module\\\\Entity\\\\\' . ucwords($this->objectType) . \'Entity\';");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.append("$entityManager = ServiceUtil::getManager()->getService(\'doctrine.entitymanager\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$repository = $entityManager->getRepository($entityClass);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->displayField = $repository->getTitleFieldName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->displayFieldTwo = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($params[\'displayField2\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->displayFieldTwo = $params[\'displayField2\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'displayField2\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif (isset($params[\'displayFieldTwo\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->displayFieldTwo = $params[\'displayFieldTwo\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'displayFieldTwo\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($params[\'where\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->where = $params[\'where\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'where\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($params[\'orderBy\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->orderBy = $params[\'orderBy\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'orderBy\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif (isset($params[\'orderby\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->orderBy = $params[\'orderby\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'orderby\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($params[\'num\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->resultsPerPage = intval($params[\'num\']);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'num\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($params[\'pos\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->currentPage = intval($params[\'pos\']);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'pos\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($params[\'showEmptyValue\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->showEmptyValue = (bool) $params[\'showEmptyValue\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($params[\'showEmptyValue\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("parent::create($view, $params);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->idFields = ModUtil::apiFunc($this->name, \'selection\', \'getIdFields\', array(\'ot\' => $this->objectType));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->cssClass .= \' \' . $this->getStyleClass() . \' \' . strtolower($this->objectType);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Entry point for customised css class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getStyleClass()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return \'z-form-itemlist\';");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence load(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Load event handler.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_Form_View $view    Reference to Zikula_Form_View object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array            &$params Parameters passed from the Smarty plugin function.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function load(Zikula_Form_View $view, &$params)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$this->mandatory) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addItem(\'\', \'\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->showEmptyValue != false) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addItem(\'- - -\', 0);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$items = $this->loadItems($params);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($items as $item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isIncluded($item)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$itemLabel = $this->createItemLabel($item);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$itemId = $this->createItemIdentifier($item);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addItem($itemLabel, $itemId);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("parent::load($view, $params);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence renderAttributes(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Render attributes.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_Form_View $view Reference to Zikula_Form_View object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function renderAttributes(Zikula_Form_View $view)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$attributes = parent::renderAttributes($view);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$attributes = str_replace(\' linkingItem=\"Array\"\', \'\', $attributes);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $attributes;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence loadItems(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Performs the actual data selection.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array &$params Parameters passed from the Smarty plugin function.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array List of selected objects.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function loadItems(&$params)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$selectionArgs = array(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'ot\' => $this->objectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'where\' => $this->where,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'orderBy\' => $this->orderBy");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->resultsPerPage < 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// no pagination");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entities = ModUtil::apiFunc($this->name, \'selection\', \'getEntities\', $selectionArgs);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $entities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// pagination");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$selectionArgs[\'currentPage\'] = $this->currentPage;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$selectionArgs[\'resultsPerPage\'] = $this->resultsPerPage;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("list($entities, $objectCount) = ModUtil::apiFunc($this->name, \'selection\', \'getEntitiesPaginated\', $selectionArgs);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $entities;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence validate(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Validates the input.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_Form_View $view Reference to Zikula_Form_View object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function validate(Zikula_Form_View $view)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->clearValidation($view);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence setSelectedValue(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Set the selected value.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param mixed $value Selected value.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function setSelectedValue($value)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$newValue = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->selectionMode == \'single\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($value instanceof Zikula_EntityAccess && method_exists[$value, \'createCompositeIdentifier\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$newValue = $value->createCompositeIdentifier();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$newValue = array();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (is_array($value) || $value instanceof Collection) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($value as $entity) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if ($entity instanceof Zikula_EntityAccess && method_exists[$entity, \'createCompositeIdentifier\')) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$newValue[] = $entity->createCompositeIdentifier();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return parent::setSelectedValue($newValue);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence relationPreProcess(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Pre-process relationship identifiers.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_Form_View $view    Reference to Zikula_Form_View object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array            &$params Parameters passed from the Smarty plugin function.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function preprocessIdentifiers(Zikula_Form_View $view, &$params)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entityData = isset($params[\'linkingItem\']) ? $params[\'linkingItem\'] : $view->get_template_vars(\'linkingItem\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$alias = $this->id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$itemIds = array();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$many = ($this->selectionMode == \'multiple\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($entityData[$alias])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$relatedItems = $entityData[$alias];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (is_array($relatedItems) || is_object($relatedItems)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($many) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("foreach ($relatedItems as $relatedItem) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$itemIds[] = $this->createItemIdentifier($relatedItem);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$itemIds[] = $this->createItemIdentifier($relatedItems);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->preselectedItems = $relatedItems;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entityData[$alias] = $itemIds;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$view->assign(\'linkingItem\', $entityData);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence relationPostProcess(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Post-process submitted data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_Form_View $view   Reference to Zikula_Form_View object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string           $source The data source used (GET or POST).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function processRequestData(Zikula_Form_View $view, $source)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$alias = $this->id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$many = ($this->selectionMode == \'multiple\');");
    _builder.newLine();
    _builder.newLine();
    {
      boolean _targets = this._utils.targets(it, "1.3.5");
      if (_targets) {
        _builder.append("    ");
        _builder.append("$entityClass = $this->name . \'_Entity_\' . ucwords($this->objectType);");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("$entityClass = \'\\\\");
        String _vendor = it.getVendor();
        String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_vendor);
        _builder.append(_formatForCodeCapital, "    ");
        _builder.append("\\\\");
        String _name = it.getName();
        String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(_name);
        _builder.append(_formatForCodeCapital_1, "    ");
        _builder.append("Module\\\\Entity\\\\\' . ucwords($this->objectType) . \'Entity\';");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("$serviceManager = ServiceUtil::getManager();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entityManager = $serviceManager->getService(\'doctrine.entitymanager\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $entityManager->getRepository($entityClass);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$inputValue = $this->getSelectedValue();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($inputValue) || !$inputValue) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$inputValue = FormUtil::getPassedValue($this->inputName, \'\', $source);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($inputValue)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $many ? array() : null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!is_array($inputValue)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$inputValue = explode(\',\', $inputValue);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!is_array($inputValue) || !count($inputValue)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $many ? array() : null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->selectedItems = $this->fetchRelatedItems($view, $inputValue);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Reassign related items to the edited entity.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_Form_View $view       Reference to Zikula_Form_View object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array|string     $inputValue The input data fetched in processRequestData().");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function fetchRelatedItems($view, $inputValue)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$selectionArgs = array(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'ot\' => $this->objectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'where\' => $this->buildWhereClause($inputValue),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'orderBy\' => $this->orderBy");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$relatedItems = ModUtil::apiFunc($this->name, \'selection\', \'getEntities\', $selectionArgs);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $relatedItems;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Reassign related items to the edited entity.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Zikula_EntityAccess $entity     Reference to the updated entity.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array               $entityData Entity related form data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array form data after processing.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function assignRelatedItemsToEntity($entity, $entityData)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$alias = $this->id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$many = ($this->selectionMode == \'multiple\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entity[$alias] = $this->preselectedItems;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// remove all existing references");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($many) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$removeMethod = \'remove\' . ucwords($alias);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($entity[$alias] as $relatedItem) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$entity->$removeMethod($relatedItem);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif (!$this->mandatory) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$alias] = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (in_array($alias, array_keys($entityData))) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($entityData[$alias]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// create new references");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$getter = \'get\' . ucwords($alias);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$assignMethod = ($many ? \'add\' : \'set\') . ucwords($alias);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($this->selectedItems as $relatedItem) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($many && $entity->$getter()->contains($relatedItem)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$many) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// check if we are assigning the parent (1-side) of a bidirectional 1:n relationship");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$inverseAddMethod = \'add\' . ucwords($this->aliasReverse);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (method_exists[$relatedItem, $inverseAddMethod)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// call the inverse method which calls the method in $entity");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$relatedItem->$inverseAddMethod($entity);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity->$assignMethod($relatedItem);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $entityData;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Persists related items.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function persistRelatedItems()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entityManager = ServiceUtil::getManager()->getService(\'doctrine.entitymanager\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($this->selectedItems as $relatedItem) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entityManager->persist($relatedItem);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence buildWhereClause(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("protected function buildWhereClause($inputValue)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$this->mandatory) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// remove empty option if it has been selected");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($inputValue as $k => $v) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!$v) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("unset($inputValue[$k]);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// readd filter value for returning nothing if no real item has been selected");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (count($inputValue) == 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$inputValue[] = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$where = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (count($this->idFields) > 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$idsPerField = $this->decodeCompositeIdentifier($inputValue);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($this->idFields as $idField) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!empty($where)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$where .= \' AND \';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$where .= \'tbl.\' . $idField . \' IN (\' . DataUtil::formatForStore(implode(\', \', $idsPerField[$idField])) . \')\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$many = ($this->selectionMode == \'multiple\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$idField = reset($this->idFields);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($many) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$where .= \'tbl.\' . $idField . \' IN (\' . DataUtil::formatForStore(implode(\', \', $inputValue)) . \')\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$where .= \'tbl.\' . $idField . \' = \\\'\' . DataUtil::formatForStore(array_shift($inputValue)) . \'\\\'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!empty($this->where)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$where .= \' AND \' . $this->where;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $where;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence helperMethods(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determines whether a certain list item should be included or not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Allows to exclude undesired items after the selection has happened.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Doctrine\\ORM\\Entity $item The treated entity.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return boolean Whether this entity should be included into the list.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function isIncluded($item)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Calculates the label for a certain list item.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Doctrine\\ORM\\Entity $item The treated entity.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The created label string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function createItemLabel($item)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$itemLabel = $item[$this->displayField];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!empty($this->displayFieldTwo) && isset($item[$this->displayFieldTwo])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$itemLabel .= \' (\' . $item[$this->displayFieldTwo] . \')\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $itemLabel;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Calculates the identifier for a certain list item.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Doctrine\\ORM\\Entity $item The treated entity.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The created identifier string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function createItemIdentifier($item)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// create concatenated list of identifiers (for composite keys)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$itemId = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($this->idFields as $idField) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$itemId .= ((!empty($itemId)) ? \'_\' : \'\') . $item[$idField];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $itemId;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Decode a list of concatenated identifier strings (for composite keys).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This method is used for reading selected relationships.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Array $itemIds List of concatenated identifiers.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return Array with list of single identifiers. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function decodeCompositeIdentifier($itemIds)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$idValues = array();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($this->idFields as $idField) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$idValues[$idField] = array();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($itemIds as $itemId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$itemIdParts = explode(\'_\', $itemId);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$i = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($this->idFields as $idField) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$idValues[$idField][] = $itemIdParts[$i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$i++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $idValues;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence selectorImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _targets = this._utils.targets(it, "1.3.5");
      boolean _not = (!_targets);
      if (_not) {
        _builder.append("namespace ");
        String _appNamespace = this._utils.appNamespace(it);
        _builder.append(_appNamespace, "");
        _builder.append("\\Form\\Plugin;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("use ");
        String _appNamespace_1 = this._utils.appNamespace(it);
        _builder.append(_appNamespace_1, "");
        _builder.append("\\Form\\Plugin\\Base\\AbstractObjectSelector as BaseAbstractObjectSelector;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Abstract object selector plugin implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    {
      boolean _targets_1 = this._utils.targets(it, "1.3.5");
      if (_targets_1) {
        _builder.append("abstract class ");
        String _appName = this._utils.appName(it);
        _builder.append(_appName, "");
        _builder.append("_Form_Plugin_AbstractObjectSelector extends ");
        String _appName_1 = this._utils.appName(it);
        _builder.append(_appName_1, "");
        _builder.append("_Form_Plugin_Base_AbstractObjectSelector");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("class AbstractObjectSelector extends BaseAbstractObjectSelector");
        _builder.newLine();
      }
    }
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to add your customisation here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
