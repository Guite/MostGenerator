package org.zikula.modulestudio.generator.cartridges.zclassic.controller.apis;

import com.google.inject.Inject;
import de.guite.modulestudio.metamodel.modulestudio.Application;
import de.guite.modulestudio.metamodel.modulestudio.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.cartridges.zclassic.view.additions.ContentTypeListView;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class ContentTypeList {
  @Inject
  @Extension
  private FormattingExtensions _formattingExtensions = new Function0<FormattingExtensions>() {
    public FormattingExtensions apply() {
      FormattingExtensions _formattingExtensions = new FormattingExtensions();
      return _formattingExtensions;
    }
  }.apply();
  
  @Inject
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new Function0<ModelBehaviourExtensions>() {
    public ModelBehaviourExtensions apply() {
      ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
      return _modelBehaviourExtensions;
    }
  }.apply();
  
  @Inject
  @Extension
  private ModelExtensions _modelExtensions = new Function0<ModelExtensions>() {
    public ModelExtensions apply() {
      ModelExtensions _modelExtensions = new ModelExtensions();
      return _modelExtensions;
    }
  }.apply();
  
  @Inject
  @Extension
  private NamingExtensions _namingExtensions = new Function0<NamingExtensions>() {
    public NamingExtensions apply() {
      NamingExtensions _namingExtensions = new NamingExtensions();
      return _namingExtensions;
    }
  }.apply();
  
  @Inject
  @Extension
  private Utils _utils = new Function0<Utils>() {
    public Utils apply() {
      Utils _utils = new Utils();
      return _utils;
    }
  }.apply();
  
  private FileHelper fh = new Function0<FileHelper>() {
    public FileHelper apply() {
      FileHelper _fileHelper = new FileHelper();
      return _fileHelper;
    }
  }.apply();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    InputOutput.<String>println("Generating content type for multiple objects");
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    final String contentTypePath = (_appSourceLibPath + "ContentType/");
    String _plus = (contentTypePath + "Base/ItemList.php");
    CharSequence _contentTypeBaseFile = this.contentTypeBaseFile(it);
    fsa.generateFile(_plus, _contentTypeBaseFile);
    String _plus_1 = (contentTypePath + "ItemList.php");
    CharSequence _contentTypeFile = this.contentTypeFile(it);
    fsa.generateFile(_plus_1, _contentTypeFile);
    ContentTypeListView _contentTypeListView = new ContentTypeListView();
    _contentTypeListView.generate(it, fsa);
  }
  
  private CharSequence contentTypeBaseFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _phpFileHeader = this.fh.phpFileHeader(it);
    _builder.append(_phpFileHeader, "");
    _builder.newLineIfNotEmpty();
    CharSequence _contentTypeBaseClass = this.contentTypeBaseClass(it);
    _builder.append(_contentTypeBaseClass, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence contentTypeFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _phpFileHeader = this.fh.phpFileHeader(it);
    _builder.append(_phpFileHeader, "");
    _builder.newLineIfNotEmpty();
    CharSequence _contentTypeImpl = this.contentTypeImpl(it);
    _builder.append(_contentTypeImpl, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence contentTypeBaseClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _targets = this._utils.targets(it, "1.3.5");
      boolean _not = (!_targets);
      if (_not) {
        _builder.append("namespace ");
        String _appNamespace = this._utils.appNamespace(it);
        _builder.append(_appNamespace, "");
        _builder.append("\\ContentType\\Base;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("use ");
        String _appNamespace_1 = this._utils.appNamespace(it);
        _builder.append(_appNamespace_1, "");
        _builder.append("\\Util\\ControllerUtil;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          boolean _hasCategorisableEntities = this._modelBehaviourExtensions.hasCategorisableEntities(it);
          if (_hasCategorisableEntities) {
            _builder.append("use CategoryUtil;");
            _builder.newLine();
          }
        }
        _builder.append("use ModUtil;");
        _builder.newLine();
        _builder.append("use SecurityUtil;");
        _builder.newLine();
        _builder.append("use ServiceUtil;");
        _builder.newLine();
        _builder.append("use Zikula_View;");
        _builder.newLine();
        _builder.append("use ZLanguage;");
        _builder.newLine();
        _builder.newLine();
      }
    }
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generic item list content plugin base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    {
      boolean _targets_1 = this._utils.targets(it, "1.3.5");
      if (_targets_1) {
        _builder.append("class ");
        String _appName = this._utils.appName(it);
        _builder.append(_appName, "");
        _builder.append("_ContentType_Base_ItemList extends Content_AbstractContentType");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("class ItemList extends \\Content_AbstractContentType");
        _builder.newLine();
      }
    }
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _contentTypeBaseImpl = this.contentTypeBaseImpl(it);
    _builder.append(_contentTypeBaseImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence contentTypeBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The treated object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $objectType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The sorting criteria.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $sorting;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The amount of desired items.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var integer");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $amount;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of template file.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $template;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of custom template file.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $customTemplate;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Optional filters.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $filter;");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities) {
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of object types allowing categorisation.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $categorisableObjectTypes;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of category registries for different trees.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $catRegistries;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of category properties for different trees.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $catProperties;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of category ids with sub arrays for each registry.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $catIds;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the module providing this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The module name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getModule()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the name of this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The content type name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getName()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return \'ItemList\';");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the title of this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The content type title.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getTitle()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dom = ZLanguage::getModuleDomain(\'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "    ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return __(\'");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "    ");
    _builder.append(" list view\', $dom);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the description of this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The content type description.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getDescription()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dom = ZLanguage::getModuleDomain(\'");
    String _appName_3 = this._utils.appName(it);
    _builder.append(_appName_3, "    ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return __(\'Display list of ");
    String _appName_4 = this._utils.appName(it);
    _builder.append(_appName_4, "    ");
    _builder.append(" objects.\', $dom);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Loads the data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array $data Data array with parameters.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function loadData(&$data)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$serviceManager = ServiceUtil::getManager();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$controllerHelper = new ");
    {
      boolean _targets = this._utils.targets(it, "1.3.5");
      if (_targets) {
        String _appName_5 = this._utils.appName(it);
        _builder.append(_appName_5, "    ");
        _builder.append("_Util_Controller");
      } else {
        _builder.append("ControllerUtil");
      }
    }
    _builder.append("($serviceManager");
    {
      boolean _targets_1 = this._utils.targets(it, "1.3.5");
      boolean _not = (!_targets_1);
      if (_not) {
        _builder.append(", ModUtil::getModule($this->name)");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$utilArgs = array(\'name\' => \'list\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'objectType\']) || !in_array($data[\'objectType\'], $controllerHelper->getObjectTypes(\'contentType\', $utilArgs))) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'objectType\'] = $controllerHelper->getDefaultObjectType(\'contentType\', $utilArgs);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->objectType = $data[\'objectType\'];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'sorting\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'sorting\'] = \'default\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'amount\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'amount\'] = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'template\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'template\'] = \'itemlist_\' . $this->objectType . \'_display.tpl\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'customTemplate\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'customTemplate\'] = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'filter\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'filter\'] = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->sorting = $data[\'sorting\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->amount = $data[\'amount\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->template = $data[\'template\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->customTemplate = $data[\'customTemplate\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->filter = $data[\'filter\'];");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_1 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_1) {
        _builder.append("    ");
        _builder.append("$this->categorisableObjectTypes = array(");
        {
          Iterable<Entity> _categorisableEntities = this._modelBehaviourExtensions.getCategorisableEntities(it);
          boolean _hasElements = false;
          for(final Entity entity : _categorisableEntities) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "    ");
            }
            _builder.append("\'");
            String _name = entity.getName();
            String _formatForCode = this._formattingExtensions.formatForCode(_name);
            _builder.append(_formatForCode, "    ");
            _builder.append("\'");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// fetch category properties");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->catRegistries = array();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->catProperties = array();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if (in_array($this->objectType, $this->categorisableObjectTypes)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$idFields = ModUtil::apiFunc(\'");
        String _appName_6 = this._utils.appName(it);
        _builder.append(_appName_6, "        ");
        _builder.append("\', \'selection\', \'getIdFields\', array(\'ot\' => $this->objectType));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->catRegistries = ModUtil::apiFunc(\'");
        String _appName_7 = this._utils.appName(it);
        _builder.append(_appName_7, "        ");
        _builder.append("\', \'category\', \'getAllPropertiesWithMainCat\', array(\'ot\' => $this->objectType, \'arraykey\' => $idFields[0]));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->catProperties = ModUtil::apiFunc(\'");
        String _appName_8 = this._utils.appName(it);
        _builder.append(_appName_8, "        ");
        _builder.append("\', \'category\', \'getAllProperties\', array(\'ot\' => $this->objectType));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if (!isset($data[\'catIds\'])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$primaryRegistry = ModUtil::apiFunc(\'");
        String _appName_9 = this._utils.appName(it);
        _builder.append(_appName_9, "        ");
        _builder.append("\', \'category\', \'getPrimaryProperty\', array(\'ot\' => $this->objectType));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$data[\'catIds\'] = array($primaryRegistry => array());");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("// backwards compatibility");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (isset($data[\'catId\'])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$data[\'catIds\'][$primaryRegistry][] = $data[\'catId\'];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("unset($data[\'catId\']);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("} elseif (!is_array($data[\'catIds\'])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$data[\'catIds\'] = explode(\',\', $data[\'catIds\']);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("foreach ($this->catRegistries as $registryId => $registryCid) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$propName = \'\';");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("foreach ($this->catProperties as $propertyName => $propertyId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if ($propertyId == $registryId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$propName = $propertyName;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (isset($data[\'catids\' . $propName])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$data[\'catIds\'][$propName] = $data[\'catids\' . $propName];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (!is_array($data[\'catIds\'][$propName])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if ($data[\'catIds\'][$propName]) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$data[\'catIds\'][$propName] = array($data[\'catIds\'][$propName]);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("} else {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$data[\'catIds\'][$propName] = array();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->catIds = $data[\'catIds\'];");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Displays the data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The returned output.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function display()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dom = ZLanguage::getModuleDomain(\'");
    String _appName_10 = this._utils.appName(it);
    _builder.append(_appName_10, "    ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("ModUtil::initOOModule(\'");
    String _appName_11 = this._utils.appName(it);
    _builder.append(_appName_11, "    ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _targets_2 = this._utils.targets(it, "1.3.5");
      if (_targets_2) {
        _builder.append("    ");
        _builder.append("$entityClass = \'");
        String _appName_12 = this._utils.appName(it);
        _builder.append(_appName_12, "    ");
        _builder.append("_Entity_\' . ucwords($this->objectType);");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("    ");
        _builder.append("$entityClass = \'\\\\");
        String _vendor = it.getVendor();
        String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_vendor);
        _builder.append(_formatForCodeCapital, "    ");
        _builder.append("\\\\");
        String _name_1 = it.getName();
        String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(_name_1);
        _builder.append(_formatForCodeCapital_1, "    ");
        _builder.append("Module\\\\Entity\\\\\' . ucwords($this->objectType) . \'Entity\';");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("$serviceManager = ServiceUtil::getManager();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entityManager = $serviceManager->getService(\'doctrine.entitymanager\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $entityManager->getRepository($entityClass);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$where = $this->filter;");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_2 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_2) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// apply category filters");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if (in_array($this->objectType, $this->categorisableObjectTypes)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (is_array($this->catIds) && count($this->catIds) > 0) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$categoryFiltersPerRegistry = ModUtil::apiFunc(\'");
        String _appName_13 = this._utils.appName(it);
        _builder.append(_appName_13, "            ");
        _builder.append("\', \'category\', \'buildFilterClauses\', array(\'ot\' => $this->objectType, \'catids\' => $this->catIds));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if (count($categoryFiltersPerRegistry) > 0) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("if (!empty($where)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("$where .= \' AND \';");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$where .= \'(\' . implode(\' OR \', $categoryFiltersPerRegistry) . \')\';");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ensure that the view does not look for templates in the Content module (#218)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->view->toplevelmodule = \'");
    String _appName_14 = this._utils.appName(it);
    _builder.append(_appName_14, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->view->setCaching(Zikula_View::CACHE_ENABLED);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// set cache id");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$component = \'");
    String _appName_15 = this._utils.appName(it);
    _builder.append(_appName_15, "    ");
    _builder.append(":\' . ucwords($this->objectType) . \':\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$instance = \'::\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$accessLevel = ACCESS_READ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (SecurityUtil::checkPermission($component, $instance, ACCESS_COMMENT)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$accessLevel = ACCESS_COMMENT;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$accessLevel = ACCESS_EDIT;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->view->setCacheId(\'view|ot_\' . $this->objectType . \'_sort_\' . $this->sorting . \'_amount_\' . $this->amount . \'_\' . $accessLevel);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$template = $this->getDisplayTemplate();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// if page is cached return cached content");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->view->is_cached($template)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $this->view->fetch($template);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$resultsPerPage = (isset($this->amount) ? $this->amount : 1);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// get objects from database");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$selectionArgs = array(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'ot\' => $this->objectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'where\' => $where,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'orderBy\' => $this->getSortParam($repository),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'currentPage\' => 1,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'resultsPerPage\' => $resultsPerPage");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("list($entities, $objectCount) = ModUtil::apiFunc(\'");
    String _appName_16 = this._utils.appName(it);
    _builder.append(_appName_16, "    ");
    _builder.append("\', \'selection\', \'getEntitiesPaginated\', $selectionArgs);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$data = array(\'objectType\' => $this->objectType,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("\'catids\' => $this->catIds,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("\'sorting\' => $this->sorting,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("\'amount\' => $this->amount,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("\'template\' => $this->template,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("\'customTemplate\' => $this->customTemplate,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("\'filter\' => $this->filter);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// assign block vars and fetched data");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->view->assign(\'vars\', $data)");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->assign(\'objectType\', $this->objectType)");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->assign(\'items\', $entities)");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->assign($repository->getAdditionalTemplateParameters(\'contentType\'));");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_3 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_3) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// assign category data");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->view->assign(\'registries\', $this->catRegistries);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->view->assign(\'properties\', $this->catProperties);");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$output = $this->view->fetch($template);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $output;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the template used for output.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string the template path.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getDisplayTemplate()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateFile = $this->template;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($templateFile == \'custom\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$templateFile = $this->customTemplate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateForObjectType = str_replace(\'itemlist_\', \'itemlist_\' . $this->objectType . \'_\', $templateFile);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$template = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->view->template_exists(\'");
    {
      boolean _targets_3 = this._utils.targets(it, "1.3.5");
      if (_targets_3) {
        _builder.append("contenttype");
      } else {
        _builder.append("ContentType");
      }
    }
    _builder.append("/\' . $templateForObjectType)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$template = \'");
    {
      boolean _targets_4 = this._utils.targets(it, "1.3.5");
      if (_targets_4) {
        _builder.append("contenttype");
      } else {
        _builder.append("ContentType");
      }
    }
    _builder.append("/\' . $templateForObjectType;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("} elseif ($this->view->template_exists(\'");
    {
      boolean _targets_5 = this._utils.targets(it, "1.3.5");
      if (_targets_5) {
        _builder.append("contenttype");
      } else {
        _builder.append("ContentType");
      }
    }
    _builder.append("/\' . $templateFile)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$template = \'");
    {
      boolean _targets_6 = this._utils.targets(it, "1.3.5");
      if (_targets_6) {
        _builder.append("contenttype");
      } else {
        _builder.append("ContentType");
      }
    }
    _builder.append("/\' . $templateFile;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$template = \'");
    {
      boolean _targets_7 = this._utils.targets(it, "1.3.5");
      if (_targets_7) {
        _builder.append("contenttype");
      } else {
        _builder.append("ContentType");
      }
    }
    _builder.append("/itemlist_display.tpl\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $template;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determines the order by parameter for item selection.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Doctrine_Repository $repository The repository used for data fetching.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string the sorting clause.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getSortParam($repository)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->sorting == \'random\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'RAND()\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$sortParam = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->sorting == \'newest\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$idFields = ModUtil::apiFunc(\'");
    String _appName_17 = this._utils.appName(it);
    _builder.append(_appName_17, "        ");
    _builder.append("\', \'selection\', \'getIdFields\', array(\'ot\' => $this->objectType));");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("if (count($idFields) == 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$sortParam = $idFields[0] . \' DESC\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($idFields as $idField) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (!empty($sortParam)) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$sortParam .= \', \';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$sortParam .= $idField . \' ASC\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($this->sorting == \'default\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$sortParam = $repository->getDefaultSortingField() . \' ASC\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $sortParam;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Displays the data for editing.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function displayEditing()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->display();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the default data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array Default data and parameters.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getDefaultData()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return array(\'objectType\' => \'");
    Entity _leadingEntity = this._modelExtensions.getLeadingEntity(it);
    String _name_2 = _leadingEntity.getName();
    String _formatForCode_1 = this._formattingExtensions.formatForCode(_name_2);
    _builder.append(_formatForCode_1, "    ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("                 ");
    _builder.append("\'sorting\' => \'default\',");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("\'amount\' => 1,");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("\'template\' => \'itemlist_display.tpl\',");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("\'customTemplate\' => \'\',");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("\'filter\' => \'\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Executes additional actions for the editing mode.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function startEditing()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ensure that the view does not look for templates in the Content module (#218)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->view->toplevelmodule = \'");
    String _appName_18 = this._utils.appName(it);
    _builder.append(_appName_18, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ensure our custom plugins are loaded");
    _builder.newLine();
    {
      boolean _targets_8 = this._utils.targets(it, "1.3.5");
      if (_targets_8) {
        _builder.append("    ");
        _builder.append("array_push($this->view->plugins_dir, \'modules/");
        String _appName_19 = this._utils.appName(it);
        _builder.append(_appName_19, "    ");
        _builder.append("/templates/plugins\');");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("    ");
        _builder.append("array_push($this->view->plugins_dir, \'modules/");
        String _viewPath = this._namingExtensions.getViewPath(it);
        _builder.append(_viewPath, "    ");
        _builder.append("\u00BB/plugins\');");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _hasCategorisableEntities_4 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_4) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// assign category data");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->view->assign(\'registries\', $this->catRegistries);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->view->assign(\'properties\', $this->catProperties);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// assign categories lists for simulating category selectors");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$dom = ZLanguage::getModuleDomain(\'");
        String _appName_20 = this._utils.appName(it);
        _builder.append(_appName_20, "    ");
        _builder.append("\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("$locale = ZLanguage::getLanguageCode();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$categories = array();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("foreach ($this->catRegistries as $registryId => $registryCid) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$propName = \'\';");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("foreach ($this->catProperties as $propertyName => $propertyId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if ($propertyId == $registryId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$propName = $propertyName;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("//$mainCategory = CategoryUtil::getCategoryByID($registryCid);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$cats = CategoryUtil::getSubCategories($registryCid, true, true, false, true, false, null, \'\', null, \'sort_value\');");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$catsForDropdown = array(");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("array(\'value\' => \'\', \'text\' => __(\'All\', $dom))");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append(");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("foreach ($cats as $cat) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$catName = isset($cat[\'display_name\'][$locale]) ? $cat[\'display_name\'][$locale] : $cat[\'name\'];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$catsForDropdown[] = array(\'value\' => $cat[\'id\'], \'text\' => $catName);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$categories[$propName] = $catsForDropdown;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->view->assign(\'categories\', $categories);");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence contentTypeImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _targets = this._utils.targets(it, "1.3.5");
      boolean _not = (!_targets);
      if (_not) {
        _builder.append("namespace ");
        String _appNamespace = this._utils.appNamespace(it);
        _builder.append(_appNamespace, "");
        _builder.append("\\ContentType;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generic item list content plugin implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    {
      boolean _targets_1 = this._utils.targets(it, "1.3.5");
      if (_targets_1) {
        _builder.append("class ");
        String _appName = this._utils.appName(it);
        _builder.append(_appName, "");
        _builder.append("_ContentType_ItemList extends ");
        String _appName_1 = this._utils.appName(it);
        _builder.append(_appName_1, "");
        _builder.append("_ContentType_Base_ItemList");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("class ItemList extends Base\\ItemList");
        _builder.newLine();
      }
    }
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the content type here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function ");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "");
    _builder.append("_Api_ContentTypes_itemlist($args)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new ");
    String _appName_3 = this._utils.appName(it);
    _builder.append(_appName_3, "    ");
    _builder.append("_Api_ContentTypes_itemListPlugin();");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
