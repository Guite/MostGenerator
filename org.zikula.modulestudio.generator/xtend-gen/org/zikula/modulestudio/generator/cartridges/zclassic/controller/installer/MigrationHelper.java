package org.zikula.modulestudio.generator.cartridges.zclassic.controller.installer;

import com.google.inject.Inject;
import de.guite.modulestudio.metamodel.modulestudio.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class MigrationHelper {
  @Inject
  @Extension
  private FormattingExtensions _formattingExtensions = new Function0<FormattingExtensions>() {
    public FormattingExtensions apply() {
      FormattingExtensions _formattingExtensions = new FormattingExtensions();
      return _formattingExtensions;
    }
  }.apply();
  
  @Inject
  @Extension
  private Utils _utils = new Function0<Utils>() {
    public Utils apply() {
      Utils _utils = new Utils();
      return _utils;
    }
  }.apply();
  
  public CharSequence generateUsageExample(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// rename module for all modvars");
    _builder.newLine();
    _builder.append("$this->updateModVarsTo136();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// update extension information about this app");
    _builder.newLine();
    _builder.append("$this->updateExtensionInfoFor136();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// rename existing permission rules");
    _builder.newLine();
    _builder.append("$this->renamePermissionsFor136();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// rename all tables");
    _builder.newLine();
    _builder.append("$this->renameTablesFor136();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// register two new event handlers");
    _builder.newLine();
    _builder.append("$this->registerNewEventHandlersIn136();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// update module name in the hook tables");
    _builder.newLine();
    _builder.append("$this->updateHookNamesFor136();");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate(final Application it) {
    CharSequence _xblockexpression = null;
    {
      this.updateModVarsTo136(it);
      this.updateExtensionInfoFor136(it);
      this.renamePermissionsFor136(it);
      this.renameTablesFor136(it);
      this.registerNewEventHandlersIn136(it);
      this.updateHookNamesFor136(it);
      this.getConnection(it);
      CharSequence _dbName = this.getDbName(it);
      _xblockexpression = (_dbName);
    }
    return _xblockexpression;
  }
  
  private CharSequence updateModVarsTo136(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Renames the module name for variables in the module_vars table.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function updateModVarsTo136()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dbName = $this->getDbName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn = $this->getConnection();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.module_vars");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET modname = \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "                         ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE modname = \'");
    String _name = it.getName();
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_name);
    _builder.append(_formatForCodeCapital, "                         ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence updateExtensionInfoFor136(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Renames this application in the core\'s extensions table.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function updateExtensionInfoFor136()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn = $this->getConnection();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dbName = $this->getDbName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.modules");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET name = \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "                         ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("                             ");
    _builder.append("directory = \'");
    String _vendor = it.getVendor();
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_vendor);
    _builder.append(_formatForCodeCapital, "                             ");
    _builder.append("/");
    String _name = it.getName();
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(_name);
    _builder.append(_formatForCodeCapital_1, "                             ");
    _builder.append("Module\'");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE name = \'");
    String _name_1 = it.getName();
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(_name_1);
    _builder.append(_formatForCodeCapital_2, "                         ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence renamePermissionsFor136(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Renames all permission rules stored for this app.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function renamePermissionsFor136()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn = $this->getConnection();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dbName = $this->getDbName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$componentLength = strlen(\'");
    String _name = it.getName();
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_name);
    _builder.append(_formatForCodeCapital, "    ");
    _builder.append("\') + 1;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.group_perms");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET component = CONCAT(\'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "                         ");
    _builder.append("\', SUBSTRING(component, $componentLength))");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE component LIKE \'");
    String _name_1 = it.getName();
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(_name_1);
    _builder.append(_formatForCodeCapital_1, "                         ");
    _builder.append("%\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence renameTablesFor136(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Renames all (existing) tables of this app.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function renameTablesFor136()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn = $this->getConnection();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dbName = $this->getDbName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$oldPrefix = \'");
    String _prefix = it.getPrefix();
    _builder.append(_prefix, "    ");
    _builder.append("_\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$oldPrefixLength = strlen($oldPrefix);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$newPrefix = \'");
    String _vendor = it.getVendor();
    String _formatForDB = this._formattingExtensions.formatForDB(_vendor);
    _builder.append(_formatForDB, "    ");
    _builder.append("_");
    String _prefix_1 = this._utils.prefix(it);
    _builder.append(_prefix_1, "    ");
    _builder.append("_\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$sm = $conn->getSchemaManager();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$tables = $sm->listTables();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($tables as $table) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$tableName = $table->getName();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (substr($tableName, 0, $oldPrefixLength) != $oldPrefix) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$newTableName = str_replace($oldPrefix, $newPrefix, $tableName)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$conn->executeQuery(\"RENAME TABLE $dbName.$tableName");
    _builder.newLine();
    _builder.append("                             ");
    _builder.append("TO $dbName.$newTableName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence registerNewEventHandlersIn136(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Registers new event handlers introduced in 1.3.6.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function registerNewEventHandlersIn136()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn = $this->getConnection();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dbName = $this->getDbName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    String _vendor = it.getVendor();
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_vendor);
    String _plus = (_formatForCodeCapital + "\\");
    String _name = it.getName();
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(_name);
    String _plus_1 = (_plus + _formatForCodeCapital_1);
    final String listenerBase = (_plus_1 + "Module\\Listener\\");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    final String listenerSuffix = "Listener";
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// installer -> ");
    String _plus_2 = (listenerBase + "Installer");
    String callableClass = (_plus_2 + listenerSuffix);
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("EventUtil::registerPersistentModuleHandler(\'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "    ");
    _builder.append("\', \'installer.module.activated\', array(\'");
    _builder.append(callableClass, "    ");
    _builder.append("\', \'moduleActivated\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("EventUtil::registerPersistentModuleHandler(\'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "    ");
    _builder.append("\', \'installer.module.deactivated\', array(\'");
    _builder.append(callableClass, "    ");
    _builder.append("\', \'moduleDeactivated\'));");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// special purposes and 3rd party api support -> ");
    String _plus_3 = (listenerBase + "ThirdParty");
    String _plus_4 = (_plus_3 + listenerSuffix);
    String _callableClass = callableClass = _plus_4;
    _builder.append(_callableClass, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("EventUtil::registerPersistentModuleHandler(\'");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "    ");
    _builder.append("\', \'module.scribite.editorhelpers\', array(\'");
    _builder.append(callableClass, "    ");
    _builder.append("\', \'getEditorHelpers\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("EventUtil::registerPersistentModuleHandler(\'");
    String _appName_3 = this._utils.appName(it);
    _builder.append(_appName_3, "    ");
    _builder.append("\', \'moduleplugin.tinymce.externalplugins\', array(\'");
    _builder.append(callableClass, "    ");
    _builder.append("\', \'getTinyMcePlugins\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("EventUtil::registerPersistentModuleHandler(\'");
    String _appName_4 = this._utils.appName(it);
    _builder.append(_appName_4, "    ");
    _builder.append("\', \'moduleplugin.ckeditor.externalplugins\', array(\'");
    _builder.append(callableClass, "    ");
    _builder.append("\', \'getCKEditorPlugins\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence updateHookNamesFor136(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Updates the module name in the hook tables.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function updateHookNamesFor136()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn = $this->getConnection();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dbName = $this->getDbName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.hook_area");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET owner = \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "                         ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE owner = \'");
    String _name = it.getName();
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(_name);
    _builder.append(_formatForCodeCapital, "                         ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$componentLength = strlen(\'subscriber.");
    String _name_1 = it.getName();
    String _formatForDB = this._formattingExtensions.formatForDB(_name_1);
    _builder.append(_formatForDB, "    ");
    _builder.append("\') + 1;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.hook_area");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET areaname = CONCAT(\'subscriber.");
    String _appName_1 = this._utils.appName(it);
    String _formatForDB_1 = this._formattingExtensions.formatForDB(_appName_1);
    _builder.append(_formatForDB_1, "                         ");
    _builder.append("\', SUBSTRING(areaname, $componentLength))");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE areaname LIKE \'subscriber.");
    String _name_2 = it.getName();
    String _formatForDB_2 = this._formattingExtensions.formatForDB(_name_2);
    _builder.append(_formatForDB_2, "                         ");
    _builder.append("%\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.hook_binding");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET sowner = \'");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "                         ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE sowner = \'");
    String _name_3 = it.getName();
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(_name_3);
    _builder.append(_formatForCodeCapital_1, "                         ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.hook_runtime");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET sowner = \'");
    String _appName_3 = this._utils.appName(it);
    _builder.append(_appName_3, "                         ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE sowner = \'");
    String _name_4 = it.getName();
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(_name_4);
    _builder.append(_formatForCodeCapital_2, "                         ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$componentLength = strlen(\'");
    String _name_5 = it.getName();
    String _formatForDB_3 = this._formattingExtensions.formatForDB(_name_5);
    _builder.append(_formatForDB_3, "    ");
    _builder.append("\') + 1;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.hook_runtime");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET eventname = CONCAT(\'");
    String _appName_4 = this._utils.appName(it);
    String _formatForDB_4 = this._formattingExtensions.formatForDB(_appName_4);
    _builder.append(_formatForDB_4, "                         ");
    _builder.append("\', SUBSTRING(eventname, $componentLength))");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE eventname LIKE \'");
    String _name_6 = it.getName();
    String _formatForDB_5 = this._formattingExtensions.formatForDB(_name_6);
    _builder.append(_formatForDB_5, "                         ");
    _builder.append("%\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.hook_subscriber");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET owner = \'");
    String _appName_5 = this._utils.appName(it);
    _builder.append(_appName_5, "                         ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE owner = \'");
    String _name_7 = it.getName();
    String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(_name_7);
    _builder.append(_formatForCodeCapital_3, "                         ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$componentLength = strlen(\'");
    String _name_8 = it.getName();
    String _formatForDB_6 = this._formattingExtensions.formatForDB(_name_8);
    _builder.append(_formatForDB_6, "    ");
    _builder.append("\') + 1;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$conn->executeQuery(\"UPDATE $dbName.hook_subscriber");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("SET eventname = CONCAT(\'");
    String _appName_6 = this._utils.appName(it);
    String _formatForDB_7 = this._formattingExtensions.formatForDB(_appName_6);
    _builder.append(_formatForDB_7, "                         ");
    _builder.append("\', SUBSTRING(eventname, $componentLength))");
    _builder.newLineIfNotEmpty();
    _builder.append("                         ");
    _builder.append("WHERE eventname LIKE \'");
    String _name_9 = it.getName();
    String _formatForDB_8 = this._formattingExtensions.formatForDB(_name_9);
    _builder.append(_formatForDB_8, "                         ");
    _builder.append("%\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence getConnection(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns connection to the database.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return Connection the current connection.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getConnection()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$em = $this->entityManager;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$conn = $em->getConnection();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $conn;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence getDbName(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the name of the default system database.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string the database name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getDbName()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global $ZConfig;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dbName = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($ZConfig[\'DBInfo\'])");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("&& isset($ZConfig[\'DBInfo\'][\'databases\'])");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("&& isset($ZConfig[\'DBInfo\'][\'databases\'][\'default\'])");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("&& isset($ZConfig[\'DBInfo\'][\'databases\'][\'default\'][\'dbname\'])");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(") {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$dbName = $ZConfig[\'DBInfo\'][\'databases\'][\'default\'][\'dbname\'] . \'.\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $dbName;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
