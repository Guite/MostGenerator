package org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff

import de.guite.modulestudio.metamodel.Application
import de.guite.modulestudio.metamodel.Entity
import de.guite.modulestudio.metamodel.JoinRelationship
import de.guite.modulestudio.metamodel.ReferredApplication
import org.eclipse.xtext.generator.IFileSystemAccess
import org.zikula.modulestudio.generator.extensions.FormattingExtensions
import org.zikula.modulestudio.generator.extensions.GeneratorSettingsExtensions
import org.zikula.modulestudio.generator.extensions.ModelExtensions
import org.zikula.modulestudio.generator.extensions.ModelJoinExtensions
import org.zikula.modulestudio.generator.extensions.NamingExtensions
import org.zikula.modulestudio.generator.extensions.Utils
import org.zikula.modulestudio.generator.extensions.WorkflowExtensions

class VersionFile {
    extension FormattingExtensions = new FormattingExtensions
    extension GeneratorSettingsExtensions = new GeneratorSettingsExtensions 
    extension ModelExtensions = new ModelExtensions
    extension ModelJoinExtensions = new ModelJoinExtensions
    extension NamingExtensions = new NamingExtensions
    extension Utils = new Utils
    extension WorkflowExtensions = new WorkflowExtensions

    FileHelper fh = new FileHelper

    def generate(Application it, IFileSystemAccess fsa) {
        generateClassPair(fsa, getAppSourceLibPath + (if (targets('1.3.x')) '' else name.formatForCodeCapital + 'Module') + 'Version.php', versionBaseFile, versionFile)
    }

    def private versionBaseFile(Application it) '''
        «fh.phpFileHeaderVersionClass(it)»
        «appInfoBaseImpl»
    '''

    def private versionFile(Application it) '''
        «fh.phpFileHeaderVersionClass(it)»
        «appInfoImpl»
    '''

    def private appInfoBaseImpl(Application it) '''
        «IF !targets('1.3.x')»
            namespace «appNamespace»\Base;

            use HookUtil;
            «IF !referredApplications.empty»
                use ModUtil;
            «ENDIF»
            use Zikula_AbstractVersion;
            use Zikula\Component\HookDispatcher\ProviderBundle;
            use Zikula\Component\HookDispatcher\SubscriberBundle;
            use Zikula\SearchModule\AbstractSearchable;

        «ENDIF»
        /**
         * Version information base class.
         */
        class «IF targets('1.3.x')»«appName»_Base_«ELSE»«name.formatForCodeCapital»Module«ENDIF»Version extends Zikula_AbstractVersion
        {
            /**
             * Retrieves meta data information for this application.
             *
             * @return array List of meta data.
             */
            public function getMetaData()
            {
                $meta = array();
                // the current module version
                $meta['version']              = '«version»';
                // the displayed name of the module
                $meta['displayname']          = $this->__('«name.formatForDisplayCapital»');
                // the module description
                $meta['description']          = $this->__('«IF documentation !== null && documentation != ''»«documentation.replace("'", "\\'")»«ELSE»«name.formatForDisplayCapital» module generated by ModuleStudio «msVersion».«ENDIF»');
                //! url version of name, should be in lowercase without space
                $meta['url']                  = $this->__('«name.formatForDB»');
                // core requirement
                «IF targets('1.3.x')»
                    $meta['core_min']             = '1.3.5'; // requires minimum 1.3.5
                    $meta['core_max']             = '1.3.99'; // not ready for 1.4.0 yet
                «ELSE»
                    $meta['core_min']             = '1.4.1'; // requires minimum 1.4.1 or later
                    $meta['core_max']             = '1.4.99'; // not ready for 1.5.0 yet
                «ENDIF»

                // define special capabilities of this module
                $meta['capabilities'] = array(
                      «IF capabilities !== null && capabilities != ''»
                          «FOR capability : capabilities.replaceAll(', ', '').split(',')»
                              '«capability.formatForDisplay»' => array('version' => '1.0'),
                          «ENDFOR»
                      «ENDIF»
                      HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)«IF !targets('1.3.x') && generateSearchApi»,
                      AbstractSearchable::SEARCHABLE => array('class' => '«appNamespace»\Helper\SearchHelper')
                      «ENDIF»
        /*,
                      HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #15
        */
                );

                // permission schema
                «permissionSchema»

                «IF !referredApplications.empty»
                    // module dependencies
                    $meta['dependencies'] = array(
                        «FOR referredApp : referredApplications SEPARATOR ','»«appDependency(referredApp)»«ENDFOR»
                    );
                «ENDIF»

                return $meta;
            }

            /**
             * Define hook subscriber«/* and provider (TODO see #15) */» bundles.
             */
            protected function setupHookBundles()
            {
        «val appName = appName.formatForDB»
                «FOR entity : getAllEntities»
                    «/* we register one hook subscriber bundle foreach entity type */»
                    «val areaName = entity.nameMultiple.formatForDB»
                    $bundle = new «IF targets('1.3.x')»Zikula_HookManager_«ENDIF»SubscriberBundle($this->name, 'subscriber.«appName».ui_hooks.«areaName»', 'ui_hooks', $this->__('«appName» «entity.nameMultiple.formatForDisplayCapital» Display Hooks'));
                    «/* $bundle->addEvent('hook type', 'event name triggered by *this* module');*/»
                    // Display hook for view/display templates.
                    $bundle->addEvent('display_view', '«appName».ui_hooks.«areaName».display_view');
                    // Display hook for create/edit forms.
                    $bundle->addEvent('form_edit', '«appName».ui_hooks.«areaName».form_edit');
                    // Display hook for delete dialogues.
                    $bundle->addEvent('form_delete', '«appName».ui_hooks.«areaName».form_delete');
                    // Validate input from an ui create/edit form.
                    $bundle->addEvent('validate_edit', '«appName».ui_hooks.«areaName».validate_edit');
                    // Validate input from an ui create/edit form (generally not used).
                    $bundle->addEvent('validate_delete', '«appName».ui_hooks.«areaName».validate_delete');
                    // Perform the final update actions for a ui create/edit form.
                    $bundle->addEvent('process_edit', '«appName».ui_hooks.«areaName».process_edit');
                    // Perform the final delete actions for a ui form.
                    $bundle->addEvent('process_delete', '«appName».ui_hooks.«areaName».process_delete');
                    $this->registerHookSubscriberBundle($bundle);

                    $bundle = new «IF targets('1.3.x')»Zikula_HookManager_«ENDIF»SubscriberBundle($this->name, 'subscriber.«appName».filter_hooks.«areaName»', 'filter_hooks', $this->__('«appName» «entity.nameMultiple.formatForDisplayCapital» Filter Hooks'));
                    // A filter applied to the given area.
                    $bundle->addEvent('filter', '«appName».filter_hooks.«areaName».filter');
                    $this->registerHookSubscriberBundle($bundle);
                «ENDFOR»

                «/* TODO see #15
                    Example for name of provider area: provider_area.comments.general

                    $bundle = new «IF targets('1.3.x')»Zikula_HookManager_«ENDIF»ProviderBundle($this->name, 'provider.ratings.ui_hooks.rating', 'ui_hooks', $this->__('Ratings Hook Providers'));
                    $bundle->addServiceHandler('display_view', 'Ratings_Hooks', 'uiView', 'ratings.service');
                    // add other hooks as needed
                    $this->registerHookProviderBundle($bundle);

                    //... repeat as many times as necessary
                */»
            }
        }
    '''

    def private appInfoImpl(Application it) '''
        «IF !targets('1.3.x')»
            namespace «appNamespace»;

            use «appNamespace»\Base\«name.formatForCodeCapital»ModuleVersion as Base«name.formatForCodeCapital»ModuleVersion;

        «ENDIF»
        /**
         * Version information implementation class.
         */
        «IF targets('1.3.x')»
        class «appName»_Version extends «appName»_Base_Version
        «ELSE»
        class «name.formatForCodeCapital»ModuleVersion extends Base«name.formatForCodeCapital»ModuleVersion
        «ENDIF»
        {
            // custom enhancements can go here
        }
    '''

    /**
     * Definition of permission schema arrays.
     */
    def private permissionSchema(Application it) '''
        $meta['securityschema'] = array(
            '«appName»::' => '::',
            '«appName»::Ajax' => '::',
            «IF generateListBlock»
                '«appName»:ItemListBlock:' => 'Block title::',
            «ENDIF»
            «IF needsApproval»
                '«appName»:ModerationBlock:' => 'Block title::',
            «ENDIF»
            «FOR entity : getAllEntities»«entity.permissionSchema(appName)»«ENDFOR»
        );
        // DEBUG: permission schema aspect ends
    '''

    def private appDependency(Application app, ReferredApplication it) '''
        array('modname'    => '«name.formatForCode.toFirstUpper»',
              'minversion' => '«minVersion»',
              'maxversion' => '«maxVersion»',
              'status'     => ModUtil::DEPENDENCY_«appDependencyType»«IF !app.targets('1.3.x')»,
              'reason'     => '«documentation.replace("'", "")»'«ENDIF»)
    '''

    def private appDependencyType(ReferredApplication it) {
        switch it.dependencyType {
            case RECOMMENDATION: 'RECOMMENDED'
            case CONFLICT: 'CONFLICTS'
            default: 'REQUIRED'
        }
    }

    def private permissionSchema(Entity it, String appName) '''
        '«appName»:«name.formatForCodeCapital»:' => '«name.formatForCodeCapital» ID::',
        «val incomingRelations = getIncomingJoinRelations/*.filter[e|e.source.container == it.container]*/»
        «IF !incomingRelations.empty»
            «FOR relation : incomingRelations»«relation.permissionSchema(appName)»«ENDFOR»
        «ENDIF»
    '''

    def private permissionSchema(JoinRelationship it, String modName) '''
        '«modName»:«source.name.formatForCodeCapital»:«target.name.formatForCodeCapital»' => '«source.name.formatForCodeCapital» ID:«target.name.formatForCodeCapital» ID:',
    '''
}
