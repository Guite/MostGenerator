package org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff

import de.guite.modulestudio.metamodel.modulestudio.AbstractDateField
import de.guite.modulestudio.metamodel.modulestudio.Application
import de.guite.modulestudio.metamodel.modulestudio.BooleanField
import de.guite.modulestudio.metamodel.modulestudio.DecimalField
import de.guite.modulestudio.metamodel.modulestudio.DerivedField
import de.guite.modulestudio.metamodel.modulestudio.Entity
import de.guite.modulestudio.metamodel.modulestudio.FloatField
import de.guite.modulestudio.metamodel.modulestudio.IntegerField
import org.zikula.modulestudio.generator.extensions.FormattingExtensions
import org.zikula.modulestudio.generator.extensions.GeneratorSettingsExtensions
import org.zikula.modulestudio.generator.extensions.ModelExtensions
import org.zikula.modulestudio.generator.extensions.ModelJoinExtensions
import org.zikula.modulestudio.generator.extensions.Utils

class FileHelper {
    extension FormattingExtensions = new FormattingExtensions
    extension GeneratorSettingsExtensions = new GeneratorSettingsExtensions
    extension ModelExtensions = new ModelExtensions
    extension ModelJoinExtensions = new ModelJoinExtensions
    extension Utils = new Utils

    def phpFileHeader(Application it) '''
        <?php
        /**
         «phpFileHeaderImpl»
         * @version «generatedBy(timestampAllGeneratedFiles)»
         */

    '''

    def phpFileContent(Application it, CharSequence content) '''
        «phpFileHeader»
        «content»
    '''

    def phpFileHeaderVersionClass(Application it) '''
        <?php
        /**
         «phpFileHeaderImpl»
         * @version «generatedBy(true)»
         */

    '''

    def private phpFileHeaderImpl(Application it) '''
        * «name».
        *
        * @copyright «author» («vendor»)
        * @license «license»
        «IF targets('1.3.5')»
            * @package «name»
        «ENDIF»
        * @author «author»«IF email !== null && email != ''» <«email»>«ENDIF».
        * @link «IF url != ''»«url»«ELSE»«msUrl»«ENDIF»«IF url != 'http://zikula.org'»
        * @link http://zikula.org«ENDIF»
    '''

    def private generatedBy(Application it, Boolean includeTimestamp) '''Generated by ModuleStudio «msVersion» («msUrl»)«IF includeTimestamp» at «timestamp»«ENDIF».'''

    def msWeblink(Application it) '''
        <p class="«IF targets('1.3.5')»z«ELSE»text«ENDIF»-center">
            Powered by <a href="«msUrl»" title="Get the MOST out of Zikula!">ModuleStudio «msVersion»</a>
        </p>
    '''


    def getterAndSetterMethods(Object it, String name, String type, Boolean isMany, Boolean useHint, String init, CharSequence customImpl) '''
        «getterMethod(name, type, isMany)»
        «setterMethod(name, type, isMany, useHint, init, customImpl)»
    '''

    def getterMethod(Object it, String name, String type, Boolean isMany) '''
        /**
         * Get «name.formatForDisplay».
         *
         * @return «IF type == 'smallint' || type == 'bigint'»integer«ELSE»«type»«ENDIF»«IF type.toLowerCase != 'array' && isMany»[]«ENDIF»
         */
        public function get«name.formatForCodeCapital»()
        {
            return $this->«name»;
        }
        «/* this last line is on purpose */»
    '''

    def setterMethod(Object it, String name, String type, Boolean isMany, Boolean useHint, String init, CharSequence customImpl) '''
        /**
         * Set «name.formatForDisplay».
         *
         * @param «IF type == 'smallint' || type == 'bigint'»integer«ELSE»«type»«ENDIF»«IF type.toLowerCase != 'array' && isMany»[]«ENDIF» $«name».
         *
         * @return void
         */
        public function set«name.formatForCodeCapital»(«IF useHint»«type» «ENDIF»$«name»«IF init != ''» = «init»«ENDIF»)
        {
            «IF customImpl !== null && customImpl != ''»
                «customImpl»
            «ELSE»
                «setterMethodImpl(name, type)»
            «ENDIF»
        }
        «/* this last line is on purpose */»
    '''

    def private dispatch setterMethodImpl(Object it, String name, String type) '''
        $this->«name» = $«name»;
    '''

    def triggerPropertyChangeListeners(DerivedField it, String name) '''
        «IF entity instanceof Entity && (entity as Entity).hasNotifyPolicy»
            $this->_onPropertyChanged('«name.formatForCode»', $this->«name.formatForCode», $«name»);
        «ENDIF»
    '''

    def private dispatch setterMethodImpl(DerivedField it, String name, String type) '''
        if ($«name» != $this->«name.formatForCode») {
            «triggerPropertyChangeListeners(name)»
            «setterAssignment(name, type)»
        }
    '''

    def private dispatch setterMethodImpl(BooleanField it, String name, String type) '''
        if ($«name» !== $this->«name.formatForCode») {
            «triggerPropertyChangeListeners(name)»
            $this->«name» = (bool)$«name»;
        }
    '''

    def private dispatch setterAssignment(DerivedField it, String name, String type) '''
            $this->«name» = $«name»;
    '''

    def private setterAssignmentNumeric(DerivedField it, String name, String type) '''
        «val aggregators = getAggregatingRelationships»
        «IF !aggregators.empty»
            $diff = abs($this->«name» - $«name»);
        «ENDIF»
        $this->«name» = $«name»;
        «IF !aggregators.empty»
            «FOR aggregator : aggregators»
            $this->«aggregator.sourceAlias.formatForCode»->add«name.formatForCodeCapital»Without«entity.name.formatForCodeCapital»($diff);
            «ENDFOR»
        «ENDIF»
    '''

    def private dispatch setterAssignment(IntegerField it, String name, String type) '''
        «setterAssignmentNumeric(name, type)»
    '''
    def private dispatch setterAssignment(DecimalField it, String name, String type) '''
        «setterAssignmentNumeric(name, type)»
    '''
    def private dispatch setterAssignment(FloatField it, String name, String type) '''
        «setterAssignmentNumeric(name, type)»
    '''

    def private dispatch setterAssignment(AbstractDateField it, String name, String type) '''
            if (is_object($«name») && $«name» instanceOf \DateTime) {
                $this->«name» = $«name»;
            } else {
                $this->«name» = new \DateTime($«name»);
            }
    '''
}
