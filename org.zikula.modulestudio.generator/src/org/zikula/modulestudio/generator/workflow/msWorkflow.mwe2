module org.zikula.modulestudio.generator.workflow.msWorkflow

/**
 * The inner processing workflow.
 */

import org.eclipse.emf.mwe.utils.DirectoryCleaner
import org.eclipse.emf.mwe.utils.FileCopy
import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.emf.mwe.core.container.IfComponent
import org.eclipse.xtend.check.CheckComponent
//import org.eclipse.xtext.generator.GeneratorComponent
import org.zikula.modulestudio.generator.cartridges.MostGeneratorSetup
import org.zikula.modulestudio.generator.cartridges.MostGeneratorSupport
import org.zikula.modulestudio.generator.workflow.components.DirectoryCreator
import org.zikula.modulestudio.generator.workflow.components.Logger
import org.zikula.modulestudio.generator.workflow.components.ModelReader
import org.zikula.modulestudio.generator.workflow.components.ModelWriter
import org.zikula.modulestudio.generator.workflow.components.MostGeneratorComponent
import org.zikula.modulestudio.generator.workflow.components.StopWatch
import org.zikula.modulestudio.generator.workflow.components.Validator

// The model to be processed (file name without extension)
var modelName
// The path where to find the model, without trailing slash
var modelPath
// The generator cartridge to execute (zclassic, zoo, documentation, reporting)
var cartridgeName

// whether to validate the model before processing
var doValidation
// whether to copy the models into the target folder
var doModelCopy

// Destination folder
var targetDir

// Cartridge-specific destination folder
var targetDirCartridge = '${targetDir}${cartridgeName}'

// calculated from input vars
var modelFile = '${modelPath}/${modelName}.mostapp'
var diagramFile = '${modelPath}/${modelName}.mostdiagram'
var modelFileCopy = '${targetDir}/${modelName}.mostapp'
var diagramFileCopy = '${targetDir}/${modelName}.mostdiagram'
var modelFileEnriched = '${modelPath}/${modelName}_enriched.mostapp'
var modelFileEnrichedCopy = '${targetDir}/${modelName}_enriched.mostapp'

var mostSlot = 'mostModel'

Workflow {
    // set up EMF for standalone execution
    bean = StandaloneSetup {
        // URI's starting with 'platform:/resource/' are normalized to the (canonical) path to the platform URI
        //platformUri = '.'
        //registerGeneratedEPackage = 'org.eclipse.emf.ecore.EcorePackage'
        registerGeneratedEPackage = 'de.guite.modulestudio.metamodel.modulestudio.ModulestudioPackage'
    }

    // init time measurement
    component = StopWatch : stopWatch {}

    // create Guice module for generator
    component = MostGeneratorSupport {}

    component = Logger { message = 'Reading input file:' }
    component = Logger { message = modelFile }
    component = ModelReader {
        uri = modelFile
        slot = mostSlot
    }

    component = Validator {
        enabled = doValidation
        slot = mostSlot
    }

    component = Logger { message = 'Creating output directory ${targetDirCartridge}.' }
    component = DirectoryCreator {
       directory = targetDirCartridge
    }

    component = Logger { message = 'Clearing output directory ${targetDirCartridge}.' }
    component = DirectoryCleaner {
       directory = targetDirCartridge
    }

    // start generator component
    component = Logger { message = 'Starting generator cartridge:' }
    component = Logger { message = cartridgeName }
    component = MostGeneratorComponent {
        // create Injector for generator module
        register = MostGeneratorSetup {}
        slot = mostSlot
        cartridge = cartridgeName
        // specify where to put the generated code
        outlet = {
            path = '${targetDirCartridge}/${modelName}/'
        }
    }

    component = Logger { message = 'Writing enriched model file for reference:' }
    component = Logger { message = modelFileEnriched }
    component = ModelWriter {
        uri = modelFileEnriched
        slot = mostSlot
    }


    component = Logger { message = 'Copying model artifacts.' }
    component = IfComponent {
        cond = doModelCopy
        if = {
            cond = doModelCopy
            // copy original domain model into target folder
            component = FileCopy {
                sourceFile = modelFile
                targetFile = modelFileCopy
            }
            // copy enriched domain model into target folder
            component = FileCopy {
                sourceFile = modelFileEnriched
                targetFile = modelFileEnrichedCopy
            }
            // copy diagram model into target folder
            component = FileCopy {
                sourceFile = diagramFile
                targetFile = diagramFileCopy
            }
        }
    }

    // output required generation time
    component = stopWatch
}
