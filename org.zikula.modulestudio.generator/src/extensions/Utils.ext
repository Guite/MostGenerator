
import modulestudio;
extension org::eclipse::xtend::util::stdlib::io;


/* app related functions */
cached String msVersion() :
    "0.5.2";
cached String msUrl() :
    "http://modulestudio.de";



/* not used yet, just for testing */
cached String constantName(Action this) :
	"ACTION_" + name.toUpperCase();

cached String constantName(ActionEvent this) :
	"EVENT_" + name.toUpperCase();

cached String msconcat(String a, String b) :
    a.replaceAll(a, a + b);

/*
 * naming extensions
 */
cached String appName(Application this) :
	name.formatForCode().toFirstUpper();

cached String prefix(Application this) :
    prefix.formatForDB();

cached String formatForCode(String s) :
	JAVA extensions.Utils.formatForCode(java.lang.String);
cached String formatForCodeCapital(String s) :
	s.formatForCode().toFirstUpper();
cached String formatForDB(String s) :
	JAVA extensions.Utils.formatForDB(java.lang.String);
cached String formatForDisplay(String s) :
	JAVA extensions.Utils.formatForDisplay(java.lang.String);
cached String formatForDisplayCapital(String s) :
	JAVA extensions.Utils.formatForDisplayCapital(java.lang.String);

cached String displayBool(Boolean b) :
    ((b) ? 'true' : 'false');


// return all entities with leading = true
cached getLeadingEntity(Application this) :
    getDefaultDataSource().entities.selectFirst(e|e.leading == true);

cached boolean hasImageFields(Application this) :
    models.entities.exists(e|e.hasImageFields());

cached boolean hasColourFields(Application this) :
    models.entities.exists(e|e.hasColourFields());

cached boolean hasCountryFields(Application this) :
    models.entities.exists(e|e.hasCountryFields());

cached getUserFields(Application this) :
    models.entities.fields.typeSelect(UserField);
cached boolean hasUserFields(Application this) :
    !getUserFields().isEmpty;

cached boolean hasUploads(Application this) :
    !models.entities.fields.typeSelect(UploadField).isEmpty;

cached getUploadEntities(Application this) :
    models.entities.select(e|e.fields.typeSelect(UploadField).size > 0);

cached boolean hasLoggable(Application this) :
    !getLoggableEntities().isEmpty;
cached getLoggableEntities(Application this) :
    models.entities.select(e|e.loggable);
cached boolean hasSluggable(Application this) :
    models.entities.exists(e|e.hasSluggableFields());
cached boolean hasSortable(Application this) :
    models.entities.exists(e|e.hasSortableFields());
cached boolean hasTimestampable(Application this) :
    models.entities.exists(e|e.hasTimestampableFields());
cached boolean hasTranslatable(Application this) :
    !getTranslatableEntities().isEmpty;
cached getTranslatableEntities(Application this) :
    models.entities.select(e|e.hasTranslatableFields());
cached boolean hasTrees(Application this) :
    !getTreeEntities().isEmpty;
cached getTreeEntities(Application this) :
    models.entities.select(e|e.tree != EntityTreeType::NONE);
cached boolean hasCategorisableEntities(Application this) :
    !getCategorisableEntities().isEmpty;
cached getCategorisableEntities(Application this) :
    models.entities.select(e|e.categorisable);
cached boolean hasMetaDataEntities(Application this) :
    !getMetaDataEntities().isEmpty;
cached getMetaDataEntities(Application this) :
    models.entities.select(e|e.metaData);
cached boolean hasAttributableEntities(Application this) :
    !getAttributableEntities().isEmpty;
cached getAttributableEntities(Application this) :
    models.entities.select(e|e.attributable);
cached boolean hasStandardFieldEntities(Application this) :
    !getStandardFieldEntities().isEmpty;
cached getStandardFieldEntities(Application this) :
    models.entities.select(e|e.standardFields);


cached boolean hasEditActions(Application this) :
    !getEditActions().isEmpty;

cached getEditActions(Application this) :
    controllers.controllers.actions.typeSelect(EditAction);

cached boolean needsConfig(Application this) :
    !models.variables.vars.isEmpty;

cached boolean hasMultipleConfigSections(Application this) :
    (models.variables.size > 1);

cached getSortedVariableContainers(Application this) :
    models.variables.sortBy(e|e.sortOrder);

cached String configControllerType(Application this) :
    ((!controllers.controllers.typeSelect(AdminController).isEmpty) ? 'modulestudio::AdminController'
        : ((!controllers.controllers.typeSelect(UserController).isEmpty) ? 'modulestudio::UserController'
            : controllers.controllers.get(0).metaType.toString()
    ));
cached String configController(Application this) :
    configControllerType().replaceAll('modulestudio::', '').replaceAll('Controller', '');

// return model container which are default data sources
cached getDefaultDataSource(Application this) :
    models.selectFirst(e|e.defaultDataSource == true);


cached String tableNameWithPrefix(Application this, String inputString) :
    prefix().msconcat('_').msconcat(inputString);

cached String fullEntityTableName(Entity this) :
    tableNameWithPrefix(container.application, name.formatForDB());

cached String fullJoinTableName(JoinRelationship this, Boolean useTarget, Entity joinedEntityForeign) :
    tableNameWithPrefix(container.application,
    ((useTarget && this.metaType == OneToManyRelationship)
        ? sourceAlias.formatForDB().msconcat(targetAlias.formatForDB())
          : (
            (this.metaType == ManyToManyRelationship)
            ? source.name.formatForDB().msconcat('_').msconcat(target.name.formatForDB())
                : joinedEntityForeign.name.formatForDB()
          )
    ));

cached String getEntityNameSingularPlural(Entity this, Boolean usePlural) :
    ((usePlural) ? nameMultiple : name);

cached boolean hasNormalIndexes(Entity this) :
    !getNormalIndexes().isEmpty;
cached getNormalIndexes(Entity this) :
    indexes.select(e|e.type == EntityIndexType::NORMAL);

cached boolean hasUniqueIndexes(Entity this) :
    !getUniqueIndexes().isEmpty;
cached getUniqueIndexes(Entity this) :
    indexes.select(e|e.type == EntityIndexType::UNIQUE);

// return all derived fields (excluding calculated fields)
cached getDerivedFields(Entity this) :
    fields.typeSelect(DerivedField);
cached getUniqueDerivedFields(Entity this) :
    getDerivedFields().select(e|e.unique);
// return all fields with leading = true
cached DerivedField getLeadingField(Entity this) :
    (
        (!getDerivedFields().isEmpty)
        ? getDerivedFields().selectFirst(e|e.leading == true)
        : (
            (isInheriting())
            ? parentType().getLeadingField()
            : null
        )
    );

cached getPrimaryKeyFields(Entity this) :
    getDerivedFields(this).select(e|e.primaryKey == true);
cached getFirstPrimaryKey(Entity this) :
    getDerivedFields(this).selectFirst(e|e.primaryKey == true);
cached boolean hasCompositeKeys(Entity this) :
    getPrimaryKeyFields().size > 1;

cached getEditableFields(Entity this) :
    getDerivedFields().reject(e|e.primaryKey)
                      .reject(e|e.metaType == ArrayField || e.metaType == ObjectField);

cached getFieldsForExampleData(Entity this) :
    getDerivedFields().reject(e|e.primaryKey)
                      .reject(e|e.metaType == UploadField);

cached String modUrlGeneric(Entity this, String func, String ot, String objName, Boolean template) :
    ((template)
        ? "func='" + func + "' ot='" + ot.formatForCode() + "'" + modUrlPrimaryKeyParams(objName, template)
        : "'" + func + "', array('ot' => '" + ot.formatForCode() + "'" + modUrlPrimaryKeyParams(objName, template) + ")"
    );
cached String modUrlGeneric(Entity this, String func, String ot, String objName, Boolean template, String customVarName) :
    ((template)
        ? "func='" + func + "' ot='" + ot.formatForCode() + "'" + modUrlPrimaryKeyParams(objName, template, customVarName)
        : "'" + func + "', array('ot' => '" + ot.formatForCode() + "'" + modUrlPrimaryKeyParams(objName, template, customVarName) + ")"
    );
cached String modUrlDisplayWithFreeOt(Entity this, String objName, Boolean template, String otVar) :
    ((template)
        ? "func='display' ot=" + otVar + modUrlPrimaryKeyParams(objName, template)
        : "'display', array('ot' => " + otVar + modUrlPrimaryKeyParams(objName, template) + ")"
    );
cached String modUrlDisplay(Entity this, String objName, Boolean template) :
    modUrlGeneric('display', name, objName, template);
cached String modUrlEdit(Entity this, String objName, Boolean template) :
    modUrlGeneric('edit', name, objName, template);
cached String modUrlEdit(Entity this, String objName, Boolean template, String customVarName) :
    modUrlGeneric('edit', name, objName, template, customVarName);
cached String modUrlDelete(Entity this, String objName, Boolean template) :
    modUrlGeneric('delete', name, objName, template);


cached String modUrlPrimaryKeyParams(Entity this, String objName, Boolean template) :
    ((template)
        ? getSingleParamForTemplate(getPrimaryKeyFields(), objName)
        : getSingleParamForCode(getPrimaryKeyFields(), objName)
    );
cached String modUrlPrimaryKeyParams(Entity this, String objName, Boolean template, String customVarName) :
    ((template)
        ? getSingleParamForTemplate(getPrimaryKeyFields(), objName, customVarName)
        : getSingleParamForCode(getPrimaryKeyFields(), objName, customVarName)
    );

cached String getSingleParamForCode(List[DerivedField] fields, String objName) :
	if fields.size == 0 then ''
	else ", '" + fields.first().name.formatForDB() + "' => $" + objName + "['" + fields.first().name.formatForDB() + "']"
	 + getSingleParamForCode(fields.withoutFirst(), objName);

cached String getSingleParamForTemplate(List[DerivedField] fields, String objName) :
	if fields.size == 0 then ''
	else ' ' + fields.first().name.formatForDB() + '=$' + objName + '.' + fields.first().name.formatForDB()
	 + fields.withoutFirst().getSingleParamForTemplate(objName);

cached String getSingleParamForCode(List[DerivedField] fields, String objName, String customVarName) :
	if fields.size == 0 then ''
	else ", '" + customVarName + "' => $" + objName + "['" + fields.first().name.formatForDB() + "']"
	 + getSingleParamForCode(fields.withoutFirst(), objName);

cached String getSingleParamForTemplate(List[DerivedField] fields, String objName, String customVarName) :
	if fields.size == 0 then ''
	else ' ' + customVarName + '=$' + objName + '.' + fields.first().name.formatForDB()
	 + fields.withoutFirst().getSingleParamForTemplate(objName);



cached getUserFields(Entity this) :
    fields.typeSelect(UserField);
cached boolean hasUploadFields(Entity this) :
    !getUploadFields().isEmpty;
cached getUploadFields(Entity this) :
    fields.typeSelect(UploadField);

cached boolean hasImageFields(Entity this) :
    !getImageFields().isEmpty;
cached getImageFields(Entity this) :
    getUploadFields().select(e|e.allowedExtensions.split(", ").forAll(ext|ext == 'gif' || ext == 'jpeg' || ext == 'jpg' || ext == 'png'));

cached boolean hasColourFields(Entity this) :
    !getColourFields().isEmpty;
cached getColourFields(Entity this) :
    getDerivedFields().typeSelect(StringField).select(e|e.htmlcolour != null && e.htmlcolour != '');

cached boolean hasCountryFields(Entity this) :
    !getCountryFields().isEmpty;
cached getCountryFields(Entity this) :
    getDerivedFields().typeSelect(StringField).select(e|e.country == true);

cached boolean hasSluggableFields(Entity this) :
    !getSluggableFields().isEmpty;
cached getSluggableFields(Entity this) :
    fields.typeSelect(DerivedField).select(e|e.sluggablePosition > 0);

cached boolean hasSortableFields(Entity this) :
    !getSortableFields().isEmpty;
cached getSortableFields(Entity this) :
    fields.typeSelect(IntegerField).select(e|e.sortablePosition == true);

cached boolean hasTimestampableFields(Entity this) :
    !getTimestampableFields().isEmpty;
cached getTimestampableFields(Entity this) :
    fields.typeSelect(AbstractDateField).select(e|e.timestampable != EntityTimestampableType::NONE);

cached boolean hasTranslatableFields(Entity this) :
    !getTranslatableFields().isEmpty;
cached getTranslatableFields(Entity this) :
    fields.typeSelect(DerivedField).select(e|e.translatable);
cached boolean hasTranslatableSlug(Entity this) :
    !getSluggableFields().select(e|e.translatable).isEmpty;

cached getAggregateFields(Entity this)
    : fields.typeSelect(IntegerField).select(e|e.aggregateFor != null && e.aggregateFor != '');

cached getAggregateRelationship(IntegerField this)
    : let aggregateDetails = aggregateFor.split('#')
    : entity.outgoing.typeSelect(OneToManyRelationship).selectFirst(e|e.bidirectional && e.targetAlias == aggregateDetails.get(0));

cached getAggregateTargetEntity(IntegerField this) :
    getAggregateRelationship().target;

cached getAggregateTargetField(IntegerField this)
    : let aggregateDetails = aggregateFor.split('#')
    : getAggregateTargetEntity().fields.typeSelect(DerivedField).selectFirst(e|e.name == aggregateDetails.get(1));

cached getAggregatingRelationships(DerivedField this)
    : entity.incoming.typeSelect(OneToManyRelationship)
                     .select(e | !e.source.getAggregateFields().isEmpty)
                     .select(e | !e.source.getAggregateFields().select(f|f.getAggregateTargetField() == this).isEmpty);

cached getAggregators(Entity this)
    : getDerivedFields().select(e|!e.getAggregatingRelationships().isEmpty);
cached boolean isAggregated(Entity this)
    : !getAggregators().isEmpty;

cached String subFolderPathSegment(UploadField this) :
    (subFolderName != null && subFolderName != '') ? subFolderName.formatForDB() : name.formatForDB();

cached String namingSchemeAsInt(UploadField this) :
    switch (namingScheme) {
        case UploadNamingScheme::ORIGINALWITHCOUNTER    : '0'
        case UploadNamingScheme::RANDOMCHECKSUM         : '1'
        case UploadNamingScheme::FIELDNAMEWITHCOUNTER   : '2'
        default: '0'
    };

cached String asConstant(EntityIdentifierStrategy strategy) :
    switch (strategy) {
        case EntityIdentifierStrategy::NONE                     : ''
        case EntityIdentifierStrategy::AUTO                     : 'AUTO'
        case EntityIdentifierStrategy::SEQUENCE                 : 'SEQUENCE'
        case EntityIdentifierStrategy::TABLE                    : 'TABLE'
        case EntityIdentifierStrategy::IDENTITY                 : 'IDENTITY'
        default: ''
    };
cached String asConstant(EntityChangeTrackingPolicy policy) :
    switch (policy) {
        case EntityChangeTrackingPolicy::DEFERRED_IMPLICIT      : 'DEFERRED_IMPLICIT'
        case EntityChangeTrackingPolicy::DEFERRED_EXPLICIT      : 'DEFERRED_EXPLICIT'
        case EntityChangeTrackingPolicy::NOTIFY                 : 'NOTIFY'
        default: 'DEFERRED_IMPLICIT'
    };
cached String asConstant(EntityLockType lockType) :
    switch (lockType) {
        case EntityLockType::NONE                       : ''
        case EntityLockType::OPTIMISTIC                 : 'OPTIMISTIC'
        case EntityLockType::PESSIMISTIC_READ           : 'PESSIMISTIC_READ'
        case EntityLockType::PESSIMISTIC_WRITE          : 'PESSIMISTIC_WRITE'
        case EntityLockType::PAGELOCK                   : ''
        case EntityLockType::PAGELOCK_OPTIMISTIC        : 'OPTIMISTIC'
        case EntityLockType::PAGELOCK_PESSIMISTIC_READ  : 'PESSIMISTIC_READ'
        case EntityLockType::PAGELOCK_PESSIMISTIC_WRITE : 'PESSIMISTIC_WRITE'
        default: ''
    };
cached String asConstant(EntitySlugStyle slugStyle) :
    switch (slugStyle) {
        case EntitySlugStyle::LOWERCASE                  : 'default'
        case EntitySlugStyle::CAMEL                      : 'camel'
        default: 'default'
    };
cached String asConstant(EntityTimestampableType tsType) :
    switch (tsType) {
        case EntityTimestampableType::UPDATE             : 'update'
        case EntityTimestampableType::CREATE             : 'create'
        case EntityTimestampableType::CHANGE             : 'change'
        default: 'update'
    };
cached String asConstant(EntityTreeType treeType) :
    switch (treeType) {
        case EntityTreeType::NONE                        : ''
        case EntityTreeType::NESTED                      : 'nested'
        case EntityTreeType::CLOSURE                     : 'closure'
        default: ''
    };
cached String asConstant(RelationFetchType fetchType) :
    switch (fetchType) {
        case RelationFetchType::LAZY                     : 'LAZY'
        case RelationFetchType::EAGER                    : 'EAGER'
        case RelationFetchType::EXTRA_LAZY               : 'EXTRA_LAZY'
        default: 'LAZY'
    };
cached String asConstant(InheritanceStrategyType inheritanceType) :
    switch (inheritanceType) {
        case InheritanceStrategyType::SINGLE_TABLE       : 'SINGLE_TABLE'
        case InheritanceStrategyType::JOINED             : 'JOINED'
        default: ''
    };

cached hasNotifyPolicy(Entity this) :
    (changeTrackingPolicy == EntityChangeTrackingPolicy::NOTIFY);

cached hasOptimisticLock(Entity this) :
    (lockType == EntityLockType::OPTIMISTIC || lockType == EntityLockType::PAGELOCK_OPTIMISTIC);
cached hasPessimisticReadLock(Entity this) :
    (lockType == EntityLockType::PESSIMISTIC_READ || lockType == EntityLockType::PAGELOCK_PESSIMISTIC_READ);
cached hasPessimisticWriteLock(Entity this) :
    (lockType == EntityLockType::PESSIMISTIC_WRITE || lockType == EntityLockType::PAGELOCK_PESSIMISTIC_WRITE);
cached hasPageLockSupport(Entity this) :
    (lockType == EntityLockType::PAGELOCK || lockType == EntityLockType::PAGELOCK_OPTIMISTIC
     || lockType == EntityLockType::PAGELOCK_PESSIMISTIC_READ || lockType == EntityLockType::PAGELOCK_PESSIMISTIC_WRITE);

cached getVersionField(Entity this)
    : let versions = fields.typeSelect(IntegerField).select(e|e.version)
    : (
        (!versions.isEmpty)
        ? versions.get(0)
        : (let versions = fields.typeSelect(DatetimeField).select(e|e.version)
        : (
            (!versions.isEmpty) ? versions.get(0) : false
        ))
    );

// return all join relations (excluding inheritance)
cached getJoinRelations(Models this) :
    relations.typeSelect(JoinRelationship);

cached getOutgoingCollections(Entity this) :
    outgoing.typeSelect(OneToManyRelationship).union(outgoing.typeSelect(ManyToManyRelationship));
cached getIncomingCollections(Entity this) :
    outgoing.typeSelect(ManyToOneRelationship).select(e|e.bidirectional).union(outgoing.typeSelect(ManyToManyRelationship).select(e|e.bidirectional));
cached getCollections(Entity this) :
    getOutgoingCollections().union(getIncomingCollections());

cached hasOutgoingCollections(Entity this) :
	!getOutgoingCollections().isEmpty;
cached hasIncomingCollections(Entity this) :
	!getIncomingCollections().isEmpty;
cached hasCollections(Entity this) :
	!getCollections().isEmpty;

cached isTopSuperClass(Entity this) :
    isInheriter() && !isInheriting();
cached isInheriting(Entity this) :
    !outgoing.typeSelect(InheritanceRelationship).isEmpty;
cached InheritanceRelationship getRelationToParentType(Entity this) :
    outgoing.typeSelect(InheritanceRelationship).get(0);
cached Entity parentType(Entity this) :
    getRelationToParentType().target;

cached isInheriter(Entity this) :
    !getChildRelations().isEmpty;
cached getChildRelations(Entity this) :
    incoming.typeSelect(InheritanceRelationship);

/* if we have id or fooid return foo_id; otherwise return the actual field name of the referenced field */
cached relationFieldName(Entity refEntity, String refField) :
    (isDefaultIdFieldName(refEntity, refField))
     ? refEntity.name.formatForDB() + '_id'
     : refEntity.fields.selectFirst(e|e.name == refField).name.formatForCode();

cached boolean isDefaultIdField(DerivedField this) :
    isDefaultIdFieldName(entity, name.formatForDB());

cached boolean isDefaultIdFieldName(Entity entity, String this) :
    {'id', entity.name.formatForDB() + 'id', entity.name.formatForDB() + '_id'}.contains(this);

cached getSourceFields(JoinRelationship this) :
    sourceField.split(', ');
cached getTargetFields(JoinRelationship this) :
    targetField.split(', ');

cached boolean containsDefaultIdField(List[String] this, Entity entity) :
    isDefaultIdFieldName(entity, this.get(0)) || (this.size > 1 && containsDefaultIdField(this.withoutFirst(), entity));

cached boolean isManySide(JoinRelationship this, boolean useTarget) :
    ((metaType == ManyToManyRelationship
|| (metaType == OneToManyRelationship && useTarget)
|| (metaType == ManyToOneRelationship && !useTarget)
) ? true : false);

cached String getUniqueRelationNameForJs(JoinRelationship this, Application app, Entity targetEntity, Boolean many, Boolean incoming, String relationAliasName) :
    app.prefix()
    .msconcat(targetEntity.name.formatForCodeCapital())
    .msconcat('_')
    .msconcat(relationAliasName);

cached String getTargetMultiplicity(JoinRelationship this) :
    'Many';
cached String getTargetMultiplicity(OneToOneRelationship this) :
    'One';
cached String getTargetMultiplicity(ManyToOneRelationship this) :
    'One';

/* retrieve integer value defining which relation edit type will be implemented
 * this mapping is done to have a more appropriate logic inside the generator
 * possible values:
 *    0    Nothing is being done
 *    1    Select related object
 *    2    Create and edit related object
 *    3    Combination of 1 and 2
 */
cached Integer getEditStageCode(JoinRelationship this, Boolean incoming) :
    switch (editType) {
       case RelationEditType::ACTIVE_NONE_PASSIVE_CHOOSE    : ((incoming) ? 1 : 0)
       case RelationEditType::ACTIVE_NONE_PASSIVE_EDIT      : ((incoming) ? 3 : 0)
       case RelationEditType::ACTIVE_CHOOSE_PASSIVE_NONE    : ((incoming) ? 3 : 2)  // invalid --> default as fallback
       case RelationEditType::ACTIVE_EDIT_PASSIVE_CHOOSE    : ((incoming) ? 1 : 2)
       case RelationEditType::ACTIVE_EDIT_PASSIVE_EDIT      : ((incoming) ? 3 : 2)  // default
       case RelationEditType::ACTIVE_EDIT_PASSIVE_NONE      : ((incoming) ? 3 : 2)  // invalid --> default as fallback
       default: ((incoming) ? 3 : 2)
    };

/* specialisation for many-to-many relations */
cached Integer getEditStageCode(ManyToManyRelationship this, Boolean incoming) :
    switch (editType) {
       case RelationEditType::ACTIVE_NONE_PASSIVE_CHOOSE    : ((incoming) ? 1 : 0)
       case RelationEditType::ACTIVE_NONE_PASSIVE_EDIT      : ((incoming) ? 3 : 0)
       case RelationEditType::ACTIVE_CHOOSE_PASSIVE_NONE    : ((incoming) ? 0 : 1)
       case RelationEditType::ACTIVE_EDIT_PASSIVE_CHOOSE    : ((incoming) ? 1 : 3)
       case RelationEditType::ACTIVE_EDIT_PASSIVE_EDIT      : ((incoming) ? 3 : 3)  // default
       case RelationEditType::ACTIVE_EDIT_PASSIVE_NONE      : ((incoming) ? 0 : 3)
       default: ((incoming) ? 3 : 3)
    };


/* controller related extensions */
cached String name(Controller this) :
    name.formatForDB();

cached getUserControllers(Application this) :
    controllers.controllers.typeSelect(UserController);
cached boolean hasUserController(Application this) :
    !getUserControllers().isEmpty;
cached getUserController(Application this) :
    getUserControllers().get(0);

cached boolean hasActions(Controller controller, String type) :
	switch (type) {
	   case 'main'     : !controller.actions.typeSelect(MainAction).isEmpty 
	   case 'view'     : !controller.actions.typeSelect(ViewAction).isEmpty 
	   case 'display'  : !controller.actions.typeSelect(DisplayAction).isEmpty 
	   case 'edit'     : !controller.actions.typeSelect(EditAction).isEmpty
	   case 'delete'   : !controller.actions.typeSelect(DeleteAction).isEmpty
	   case 'custom'   : !controller.actions.typeSelect(CustomAction).isEmpty 
	   default : false
	};


cached boolean isIndexByTarget(Entity this) :
    !incoming.select(e|e.getIndexByField() != null && e.getIndexByField() != '').isEmpty;

cached boolean isIndexByField(DerivedField this) :
    !entity.incoming.select(e|e.getIndexByField() == name).isEmpty;

cached boolean isIndexed(Relationship this) :
    false;
cached boolean isIndexed(OneToManyRelationship this) :
    indexBy != null && indexBy != '';
cached boolean isIndexed(ManyToManyRelationship this) :
    indexBy != null && indexBy != '';

cached String getIndexByField(Relationship this) :
    '';
cached String getIndexByField(OneToManyRelationship this) :
    indexBy;
cached String getIndexField(ManyToManyRelationship this) :
    indexBy;

/*
 * extensions that are independent of a specific model element,
 */

cached String fieldTypeAsString(DerivedField f) :
    f.metaType.toString().replaceAll("modulestudio::", '').replaceAll('Field', '').toLowerCase();
// required for own sub types like user, email, url, upload
cached String fieldTypeAsString(AbstractIntegerField f) :
    // choose mapping type depending on length
    // a SMALLINT ranges up to 32767 and is therefore not appropriate for 5 digits
    // an INT ranges up to 2147483647 and is therefore good for up to 9 digits
    // maximal length of 18 is enforced in model validation
    (
    	(f.length < 5) ? 'smallint' : (
    		(f.length < 10) ? 'integer' : 'bigint'
    	)
    );
cached String fieldTypeAsString(AbstractStringField f) :
    'string';

cached String templateIdWithSuffix(String name, String suffix)
  : (suffix != null && suffix != '')
  ? '"' + name + '`' + suffix + '`"'
  : "'" + name + "'";

cached String timestamp() :
	JAVA extensions.Utils.timestamp();

cached Boolean isProgressMonitor(Object monitor) :
    JAVA extensions.Utils.isProgressMonitor(java.lang.Object);

cached String subTask(Object monitor, String title) :
    monitor.isProgressMonitor() ? subTaskJava(monitor, title) : '';

cached String subTaskJava(Object monitor, String title) :
	JAVA extensions.Utils.subTask(org.eclipse.core.runtime.IProgressMonitor, java.lang.String);


cached String getAppSourcePath(String appName) :
    'src/modules/'.msconcat(appName).msconcat('/');

cached String getAppSourceLibPath(String appName) :
    getAppSourcePath(appName).msconcat('lib/').msconcat(appName).msconcat('/');

cached String getAppUploadPath(String appName) :
    'src/userdata/'.msconcat(appName).msconcat('/');

cached String getAppTestsPath(String appName) :
    'tests/';

