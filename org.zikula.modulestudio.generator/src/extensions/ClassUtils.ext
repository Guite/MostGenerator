
import modulestudio;
extension org::eclipse::xtend::util::stdlib::io;
extension extensions::Utils;

/*
 * Class naming extensions
 */

cached String classPraefix(Application app)
	: app.appName().msconcat('_');

cached String classSuffix()
	: '.php';

cached String asFile(String className)
    : 'lib/'.msconcat(className.replaceAll('_', '/')).msconcat(classSuffix());


cached String implClassDefault(Application app, String filling, String suffix)
    : classPraefix(app).msconcat(filling).msconcat(suffix);
cached String baseClassDefault(Application app, String filling, String suffix)
    : implClassDefault(app, filling.msconcat('Base_'), suffix);


cached String fillingEntity() : 'Entity_';
cached String fillingController() : 'Controller_';
cached String fillingApi() : 'Api_';
cached String fillingFormHandler() : 'Form_Handler_';

cached String prepClassPart(String str)
    : formatForCode(str).toFirstUpper();

/** Model classes */
cached String baseClassModel(Entity obj, String subfolder, String suffix)
    : (
        (subfolder != '')
        ? baseClassDefault(obj.container.application, fillingEntity().msconcat(subfolder.toFirstUpper()).msconcat('_'), prepClassPart(obj.name.msconcat(suffix.toFirstUpper())))
        : baseClassDefault(obj.container.application, fillingEntity(), prepClassPart(obj.name.msconcat(suffix.toFirstUpper())))
    );
cached String implClassModel(Entity obj, String subfolder, String suffix)
    : (
        (subfolder != '')
	    ? implClassDefault(obj.container.application, fillingEntity().msconcat(subfolder.toFirstUpper()).msconcat('_'), prepClassPart(obj.name.msconcat(suffix.toFirstUpper())))
	    : implClassDefault(obj.container.application, fillingEntity(), prepClassPart(obj.name.msconcat(suffix.toFirstUpper())))
	);

cached String baseClassModelEntity(Entity obj)
    : baseClassModel(obj, '', '');
cached String implClassModelEntity(Entity obj)
	: implClassModel(obj, '', '');

cached String baseClassModelRefEntity(ManyToManyRelationship obj)
    : baseClassDefault(obj.container.application, fillingEntity(), prepClassPart(obj.refClass));
cached String implClassModelRefEntity(ManyToManyRelationship obj)
    : implClassDefault(obj.container.application, fillingEntity(), prepClassPart(obj.refClass));
cached String baseClassModelRefRepository(ManyToManyRelationship obj)
    : baseClassDefault(obj.container.application, fillingEntity().msconcat('Repository_'), prepClassPart(obj.refClass));
cached String implClassModelRefRepository(ManyToManyRelationship obj)
    : implClassDefault(obj.container.application, fillingEntity().msconcat('Repository_'), prepClassPart(obj.refClass));

/** Controller */
cached String baseClassController(Controller obj)
    : baseClassDefault(obj.container.application, fillingController(), prepClassPart(obj.name));
cached String implClassController(Controller obj)
    : implClassDefault(obj.container.application, fillingController(), prepClassPart(obj.name));
cached String baseClassApi(Controller obj)
    : baseClassDefault(obj.container.application, fillingApi(), prepClassPart(obj.name));
cached String implClassApi(Controller obj)
    : implClassDefault(obj.container.application, fillingApi(), prepClassPart(obj.name));
cached String baseClassFormHandler(Controller obj, String actionName)
    : baseClassDefault(obj.container.application, fillingFormHandler().msconcat(prepClassPart(obj.name)).msconcat('_'), prepClassPart(actionName));
cached String baseClassFormHandler(Controller obj, String entityName, String actionName)
    : baseClassDefault(obj.container.application, fillingFormHandler().msconcat(prepClassPart(obj.name)).msconcat('_').msconcat(prepClassPart(entityName)).msconcat('_'), prepClassPart(actionName));
cached String implClassFormHandler(Controller obj, String entityName, String actionName)
    : implClassDefault(obj.container.application, fillingFormHandler().msconcat(prepClassPart(obj.name)).msconcat('_').msconcat(prepClassPart(entityName)).msconcat('_'), prepClassPart(actionName));


cached String tempBaseClassConfigHandler(Application app)
    : baseClassDefault(app, fillingFormHandler().msconcat(app.configController().toFirstUpper()).msconcat('_'), prepClassPart('Config'));
cached String tempImplClassConfigHandler(Application app)
    : implClassDefault(app, fillingFormHandler().msconcat(app.configController().toFirstUpper()).msconcat('_'), prepClassPart('Config'));

/** Templates */
cached String prepTemplatePart(String origin, String addition)
    : origin.msconcat(addition.toLowerCase());

cached String templateSuffix()
    : '.tpl';

cached String templateFileBase(Controller obj, String entityName, String actionName)
    : getAppSourcePath(obj.container.application.appName()).msconcat('templates/').msconcat(obj.name.formatForDB()).msconcat('/').msconcat(formatForCode(entityName)).msconcat('/').msconcat(actionName);

cached String templateFile(Controller obj, String entityName, String actionName)
    : templateFileBase(obj, entityName, actionName).msconcat(templateSuffix());

cached String templateFileWithExtension(Controller obj, String entityName, String actionName, String templateExtension)
    : templateFileBase(obj, entityName, actionName).msconcat('.').msconcat(templateExtension);

cached String editTemplateFile(Controller obj, String entityName, String actionName)
    : templateFile(obj, entityName, actionName);
    

cached String viewPluginFilePath(Application app, String pluginType, String pluginName)
    : getAppSourcePath(app.appName()).msconcat('templates/plugins/').msconcat(pluginType).msconcat('.').msconcat(app.appName().formatForDB()).msconcat(pluginName).msconcat('.php');


cached String getRelationAliasName(JoinRelationship this, Boolean useTarget)
    : ((useTarget)
        ? ((targetAlias != null && targetAlias != '') ? targetAlias : target.implClassModelEntity())
        : ((sourceAlias != null && sourceAlias != '') ? sourceAlias : source.implClassModelEntity())
    ).formatForCode();


