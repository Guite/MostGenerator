«IMPORT modulestudio»
«IMPORT behavior»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::UtilsBO»

«REM»Entry point for DBObject implementations«ENDREM»
«DEFINE Root FOR Module-»
	«FILE "lib/" + modName() + "/DBObject/index.html"»«EXPAND FileHelper::msUrl-»«ENDFILE»
	«FILE "lib/" + modName() + "/DBObject/Base/index.html"»«ENDFILE»
    «FILE "lib/" + moduleClassFileName(this, false)»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND dbObjectModuleClass(false)»«ENDFILE»
    «FILE "lib/" + moduleClassFileName(this, true)»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND dbObjectModuleClass(true)»«ENDFILE»

	«EXPAND ObjectClassWrapper(this, false) FOREACH persistenceContainer.tables-»
	«REM»EXPAND dbObjectClassWrapper(this) FOREACH behaviorContainer.businessObjects-«ENDREM»
	«EXPAND ObjectClassWrapper(this, true) FOREACH persistenceContainer.tables-»
«ENDDEFINE»

«REM»Module specific DBObject base class«ENDREM»
«DEFINE dbObjectModuleClass(Boolean appendArray) FOR Module-»
/**
 * This is a base class encapsulating the generic functionality which is
 * common for all DBObject«IF appendArray»Array«ENDIF» types in the «modName()» module
 */
class «moduleClassName(this, appendArray)» extends DBObject«IF appendArray»Array«ENDIF»
{
}
«ENDDEFINE»


«DEFINE ObjectClassWrapper(modulestudio::Module module, Boolean appendArray) FOR persistence::Table-»
«FILE "lib/" + baseClassFileName(appendArray)»«EXPAND FileHelper::phpFileHeader(module)»

/**
 * This class provides basic functionality of «baseClassName(appendArray)»
 */
abstract class «baseClassName(appendArray)» extends «moduleClassName(this.tableContainer.persistenceModule, appendArray)»
{
«IF appendArray == false-»
«EXPAND ObjectClassImpl(module)-»
«ELSE-»
«EXPAND ObjectArrayClassImpl(module)-»
«ENDIF-»
}
«ENDFILE»

«FILE "lib/" + implClassFileName(appendArray)»«EXPAND FileHelper::phpFileHeader(module)»

/**
 * This class implements the functionality of «baseClassName(appendArray)»
 */
class «implClassName(appendArray)» extends «baseClassName(appendArray)»
{
// feel free to add your logic here by implementing pre and post process methods
«IF appendArray == false-»
«REM»«EXPAND ObjectClassImpl(module)»«ENDREM»«""-»
«ELSE-»
«REM»«EXPAND ObjectArrayClassImpl(module)»«ENDREM»«""-»
«ENDIF-»
}
«ENDFILE»
«ENDDEFINE»


«DEFINE ObjectClassImpl(modulestudio::Module module) FOR persistence::Table-»
    /**
     * Constructor, init everything to sane defaults and handle parameters.
     * It only needs to set the fields which are used to configure
     * the object's specific properties and actions.
     *
     * @param init        Initialization value (can be an object or a string directive) (optional) (default=null)
     *                    If it is an array it is set, otherwise it is interpreted as a string
     *                    specifying the source from where the data should be retrieved from.
     *                    Possible values:
     *                        D (DB), G ($_GET), P ($_POST), R ($_REQUEST), S ($_SESSION), V (failed validation)
     *
     * @param key         The DB key to use to retrieve the object (optional) (default=null)
     * @param field       The field containing the key value (optional) (default=null)
     */
    function «baseClassName(false)»($init = null, $key = 0, $field = null)
    {
        // call base class constructor
        $this->DBObject();

        // set the tablename this object maps to
«REM»        $this->_objType       = '«dbName(module.prefix + '_' + dataSource().name)»';«ENDREM»
        $this->_objType       = '«fullTableName()»';

        // set the ID field for this object
«REM»        $this->_objField      = '«dbName(dataSource().name)»id';«ENDREM»
        $this->_objField      = '«dbName(name)»id';

        // set the access path under which the object's
        // input data can be retrieved upon input
«REM»        $this->_objPath       = '«dbName(dataSource().name)»';«ENDREM»
        $this->_objPath       = '«dbName(name)»';

«EXPAND ObjectJoins-»

«EXPAND ObjectPermissionFilters(module.modName())-»

        // call initialisation routine
        $this->_init($init, $key, $this->_objField);
    }
    
    function selectPostProcess($data = null)
    {
        if (!$data) {
            $data =& $this->_objData;
        }
        
«EXPAND sanitizeForOutput FOREACH columns-»
    }
«REM»	«EXPAND BusinessStateFunction FOREACH businessStates-»«ENDREM»

	«EXPAND BehaviorCommon::ClassToString(baseClassName(false))-»
«ENDDEFINE»

«DEFINE SelectJoinFieldTableNames(String exludedIdField) FOR persistence::Table-»
«EXPAND ArrayListEntry('') FOREACH columns.reject(e|e.name == exludedIdField || e.isPrimaryKey) SEPARATOR ', '-»
«ENDDEFINE»

«DEFINE SelectJoinFieldObjNames(String exludedIdField) FOR persistence::Table-»
«EXPAND ArrayListEntry(dbName(name) + '_') FOREACH columns.reject(e|e.name == exludedIdField || e.isPrimaryKey) SEPARATOR ', '-»
«ENDDEFINE»

«DEFINE ArrayListEntry(String entryPrefix) FOR persistence::TableColumn-»
'«entryPrefix»«dbName(name)»'«ENDDEFINE»

«DEFINE ObjectJoins FOR persistence::Table-»
«FOREACH incoming AS relation-»
        $this->_objJoin[]     = array ('join_table'          => '«fullTableName(relation.source)»',
                                       'join_field'          => array(«EXPAND SelectJoinFieldTableNames(dbName(name)+"id") FOR relation.source-»),
                                       'object_field_name'   => array(«EXPAND SelectJoinFieldObjNames(dbName(name)+"id") FOR relation.source-»),
                                       'compare_field_table' => '«dbName(relation.source.name)»id',
                                       'compare_field_join'  => '«dbName(relation.source.name)»id');
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE ObjectPermissionFilters(String modName) FOR persistence::Table-»
        // apply object permission filters
        $this->_objPermissionFilter[] = array('component_left'   => '«modName»',
                                              'component_middle' => '«capitalName(name)»',
                                              'component_right'  => '',
                                              'instance_left'    => '«dbName(name)»id',
                                              'instance_middle'  => '',
                                              'instance_right'   => '',
                                              'level'            => ACCESS_READ);

«FOREACH incoming AS join-»
        $this->_objPermissionFilter[] = array('component_left'   => '«modName»',
                                              'component_middle' => '«capitalName(join.source.name)»',
                                              'component_right'  => '«capitalName(name)»',
                                              'instance_left'    => '«dbName(join.source.name)»id',
                                              'instance_middle'  => '«dbName(name)»id',
                                              'instance_right'   => '',
                                              'level'            => ACCESS_READ);

«ENDFOREACH-»
«ENDDEFINE»


«DEFINE BusinessStateFunction FOR BusinessState-»
//TODO: Undefined State Type
«ENDDEFINE»
«DEFINE BusinessStateFunction FOR PreProcess-»
//TODO: Undefined PreProcess
«ENDDEFINE»
«DEFINE BusinessStateFunction FOR PostProcess-»
//TODO: Undefined PostProcess
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR getDataFromInputPostProcess-»
    /**
     * Post-Process the data after getting it from input.
     * This method is used to process retrieved array fields which are then stored in the 'data' field/column.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function getDataFromInputPostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        // serialize the datafields array in the 'data' field
        $obj['data'] = serialize($obj['datafields']);

        // we return the data so that this method can be invoked 
        // with explicit parameters and the return this result.
        return $obj;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR getDataFromSessionPostProcess-»
    /**
     * Post-Process the data after getting it from Session.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function getDataFromSessionPostProcess($obj = null)
    {
«EXPAND GetObjectReference-»
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR setDataToSessionPreProcess-»
    /**
     * Pre-Process the data before writing it to Session.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function setDataToSessionPreProcess($obj = null)
    {
«EXPAND GetObjectReference-»
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR selectPostProcess-»
    /**
     * Post-Process the newly selected object.
     * This method is used to expand the serialized data stored in $obj['data'].
     *
     * @param $obj         Override object (optional) (default=null)
     *
     * @return The object's data value
     */
    function selectPostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        // serialize the datafields array in the 'data' field
        $obj['datafields'] = unserialize($obj['data']);

        // we return the data so that this method can be invoked 
        // with explicit parameters and the return this result.
        return $obj;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR insertPreProcess-»
    /**
     * Pre-Process the data prior to an insert.
     * This method is used to serialize the array fields which are then stored in the 'data' field/column.
     * For added consistency, we reuse the getDataFromInputPostProcess method.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function insertPreProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR insertPostProcess-»
    /**
     * Post-Process the data after an insert.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function insertPostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

    	return;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR updatePreProcess-»
    /**
     * Pre-Process the data prior to an update.
     * This method is used to serialize the array fields which are then stored in the 'data' field/column.
     * For added consistency, we reuse the getDataFromInputPostProcess method.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function updatePreProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR updatePostProcess-»
    /**
     * Post-Process the data after an update.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function updatePostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

    	return;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR deletePreProcess-»
    /**
     * Pre-Process the data prior a delete.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function deletePreProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR deletePostProcess-»
    /**
     * Post-Process the data after a delete.
     *
     * @param $obj         Override object (optional) (default=null)
     */
    function deletePostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return;
    }
«ENDDEFINE»

«DEFINE BusinessStateFunction FOR validatePostProcess-»
    /**
     * Post-Process the basic object validation with class specific logic.
     *
     * @param $type
     */
    function validatePostProcess($obj = null)
    {
«EXPAND GetObjectReference-»

        return true;
    }
«ENDDEFINE»

«DEFINE GetObjectReference FOR BusinessState-»
        // in case we don't get any explicit data array assigned we default to the data the object acquired.
        // Typically this data is acquired from the getDataFromInput() method. 
        if (!$obj)
            $obj = &$this->_objData;
«ENDDEFINE»








«DEFINE ObjectArrayClassImpl(modulestudio::Module module) FOR persistence::Table-»
    /**
     * Constructor, init everything to sane defaults and handle parameters.
     * It only needs to set the fields which are used to configure
     * the object's specific properties and actions.
     *
     * @param init        Initialization value (can be an object or a string directive) (optional) (default=null)
     *                    If it is an array it is set, otherwise it is interpreted as a string
     *                    specifying the source from where the data should be retrieved from.
     *                    Possible values:
     *                        D (DB), G ($_GET), P ($_POST), R ($_REQUEST), S ($_SESSION), V (failed validation)
     *
     * @param where       The where clause to use when retrieving the object array (optional) (default='')
     * @param orderBy     The order-by clause to use when retrieving the object array (optional) (default='')
     * @param assocKey    Key field to use for building an associative array (optional) (default=null)
     */
    function «baseClassName(true)»($init = null, $where = '', $orderBy = '', $assocKey = null)
    {
        // call base class constructor
        $this->DBObjectArray();

        // set the tablename this object maps to
        $this->_objType       = '«fullTableName()»';
«REM»        $this->_objType       = '«dbName(module.prefix + '_' + dataSource().name)»';«ENDREM»

        // set the ID field for this object
        $this->_objField      = '«dbName(name)»id';
«REM»        $this->_objField      = '«dbName(dataSource().name)»id';«ENDREM»
«REM»TODO«ENDREM»

        // set the access path under which the object's
        // input data can be retrieved upon input
        $this->_objPath       = '«dbName(name)»_array';

«EXPAND ObjectJoins-»

«EXPAND ObjectPermissionFilters(module.modName())-»

        // call initialization routine
        $this->_init($init, $where, $orderBy, $assocKey);
    }

    /**
     * Retrieves an array with all fields which can be used for sorting instances
     */
    function getAllowedSortingFields()
    {
        return array(«EXPAND singleSortingField FOREACH columns SEPARATOR ','»«EXPAND standardSortingFields FOR this-»);
    }

    /**
     * Retrieves the default sorting field/expression
     */
    function getDefaultSortingField()
    {
        return '«columns.select(e|e.isLeading == true).get(0).name.dbName()»';
    }
    
    function selectPostProcess($all = null)
    {
        foreach ($this->_objData as $k => $data) {
    «EXPAND sanitizeForOutput FOREACH columns»
            $this->_objData[$k] = $data;
        }
    }

«EXPAND BehaviorCommon::ClassToString(baseClassName(true))-»
«ENDDEFINE»

«DEFINE singleSortingField FOR persistence::TableColumn»
«LET columnTable.incoming.select(e|dbName(e.source.name + "id") == dbName(name)) AS joins-»
«IF joins.size > 0-»
                     '«joins.get(0).source.name.dbName()»_«joins.get(0).source.columns.select(e|e.isLeading == true).get(0).name.dbName()»'«""-»
«ELSE-»
                     '«name.dbName()»'«""-»
«ENDIF-»
«ENDLET-»«ENDDEFINE»

«DEFINE standardSortingFields FOR persistence::Table»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR persistence::TableColumn-»
        $data['«dbName(name)»'] = ((isset($data['«dbName(name)»']) && !empty($data['«dbName(name)»'])) ? DataUtil::formatForDisplay($data['«dbName(name)»']) : '');
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR persistence::TextField-»
        $data['«dbName(name)»'] = ((isset($data['«dbName(name)»']) && !empty($data['«dbName(name)»'])) ? DataUtil::formatForDisplayHTML($data['«dbName(name)»']) : '');
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR persistence::BooleanField-»
        $data['«dbName(name)»'] = (bool) $data['«dbName(name)»'];
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR persistence::BlobField-»
«ENDDEFINE»

