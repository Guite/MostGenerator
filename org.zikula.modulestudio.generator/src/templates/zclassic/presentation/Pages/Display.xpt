«IMPORT processing»
«EXTENSION extensions::Utils»

«DEFINE Impl(String modName, Processor processor) FOR persistence::Table»
«LET dbName(processor.name) AS procName-»
«LET moduleName(name) AS objName-»
«FILE "templates/" + modName + "_" + procName + "_" + objName + "_display.htm"-»
{* purpose of this template: «formattedName(nameMultiple)» display view in «procName» area *}

{include file="«modName»_«procName»_header.htm"}

«IF processor.type == ProcessorType::ADMIN-»
<div class="z-admincontainer">
<div class="z-adminpageicon">{img modname="core" src="demo.gif" set="icons/large" __alt='Details'}</div>
«ELSE-»
<div class="z-frontendcontainer">
«ENDIF-»

«LET dbName(columns.select(e|e.isLeading == true).get(0).name) AS titleField-»
{pagesetvar name="title" value=$«objName».«titleField»}
<h2>{$«objName».«titleField»|modcallhooks}</h2>
«ENDLET-»

«LET outgoing.select(e|e.type == persistence::RelationshipType::ONETOMANY) AS refedElems-»
«IF refedElems.size > 0-»
<div class="«modName.dbName()»RightBox">
«EXPAND DisplaySubsets(modName, procName, this) FOREACH refedElems.target-»
</div>
«ENDIF-»

<dl id="«modName»_body">
«FOREACH columns.reject(e|e.isLeading || e.isPrimaryKey) AS column-»
«LET incoming.select(e|dbName(e.source.name + "id") == dbName(column.name)) AS joins-»
«IF joins.size > 0-»
    <dt>{gt text='«formattedNameCapitalized(joins.get(0).source.name)»'}</dt>
<dd>«FOREACH joins AS join SEPARATOR ', '-»{$«objName».«join.source.name.dbName()»_«join.source.idField()»«REM»|nl2br«ENDREM»|default:""}«ENDFOREACH-»</dd>
«ELSE-»
    <dt>{gt text='«formattedNameCapitalized(column.name)»'}</dt>
    <dd>«EXPAND DisplayColumnField(objName) FOR column»</dd>
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«IF usesStandardFields == true-»
    {include file="«modName»_«procName»_include_metadata_display.htm" obj=$«objName»}
«ENDIF-»
</dl>

<p>
«IF processor.hasPStates('edit')-»
    {securityutil_checkpermission_block component="«modName»::" instance=".*" level="ACCESS_EDIT"}
        <a href="{modurl modname="«modName»" type="«procName»" func="edit" ot="«objName»" «idField()»=$«objName».«idField()»}" title="{gt text='Edit'}">
            {img src="xedit.gif" modname="core" set="icons/extrasmall" __alt='Edit' __title='Edit'}
            {gt text='Edit'}
        </a>
    {/securityutil_checkpermission_block}
«ENDIF-»
«IF processor.hasPStates('delete')-»
    {securityutil_checkpermission_block component="«modName»::" instance=".*" level="ACCESS_DELETE"}
        <a href="{modurl modname="«modName»" type="«procName»" func="delete" ot="«objName»" «idField()»=$«objName».«idField()»}" title="{gt text='Delete'}">
            {img src="14_layer_deletelayer.gif" modname="core" set="icons/extrasmall" __alt='Delete' __title='Delete'}
            {gt text='Delete'}
        </a>
    {/securityutil_checkpermission_block}
«ENDIF-»
«IF processor.hasPStates('view')-»
    <a href="{modurl modname="«modName»" type="«procName»" func="view" ot="«objName»"}" title="{gt text='Back to overview'}">
        {img src="agt_back.gif" modname="core" set="icons/extrasmall" __alt='Back' __title='Back to overview'}
        {gt text='Back to overview'}
    </a>
«ENDIF-»
</p>

{modurl modname="«modName»" type="«procName»" func="display" ot="«objName»" «idField()»=$«objName».«idField()» assign="returnurl"}
{modcallhooks hookobject="item" hookaction="display" module="«modName»" hookid="«dbName(name)»`$«objName».«idField()»`" returnurl=$returnurl}

«IF processor.type == ProcessorType::ADMIN-»
</div>
«ELSE-»
</div>
«ENDIF-»

«IF refedElems.size > 0-»
<br style="clear: right" />
«ENDIF-»
«ENDLET-»

{include file="«modName»_«procName»_footer.htm"}
«ENDFILE»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE DisplayColumnField(String objName) FOR persistence::TableColumn-»
{$«objName».«dbName(name)»}
«ENDDEFINE»

«DEFINE DisplayColumnField(String objName) FOR persistence::DateField-»
{$«objName».«dbName(name)»|dateformat:"datebrief"}
«ENDDEFINE»
«DEFINE DisplayColumnField(String objName) FOR persistence::TimestampField-»
{$«objName».«dbName(name)»|dateformat:"datetimebrief"}
«ENDDEFINE»
«DEFINE DisplayColumnField(String objName) FOR persistence::BooleanField-»
{$«objName».«dbName(name)»|yesno:true}
«ENDDEFINE»
«DEFINE DisplayColumnField(String objName) FOR persistence::DecimalField-»
{$«objName».«dbName(name)»|formatnumber}
«ENDDEFINE»
«DEFINE DisplayColumnField(String objName) FOR persistence::FloatField-»
{$«objName».«dbName(name)»|formatnumber}
«ENDDEFINE»

«DEFINE DisplaySubsets(String modName, String procName, persistence::Table objTable) FOR persistence::Table-»
<h3>«nameMultiple.formattedNameCapitalized()»</h3>
{securityutil_checkpermission component="«modName»::" instance=".*" level="ACCESS_ADMIN" assign="authAdmin"}
{if $authAdmin || $«objTable.name.moduleName()».cr_uid eq $uid}
<p class="manageLink">
    {gt text='Create «formattedName(name)»' assign="createTitle"}
    <a href="{modurl modname="«modName»" type="«procName»" func="edit" ot="«moduleName(name)»" «objTable.idField()»=$«objTable.name.moduleName()».«objTable.idField()»}" title="{$createTitle}">
        {img src="insert_table_row.gif" modname="core" set="icons/extrasmall" __alt='Create'}
        {$createTitle}
    </a>
</p>
{/if}

<ul>
<li>«name.capitalName()» 1</li>
<li>«name.capitalName()» 2</li>
<li>«name.capitalName()» 3</li>
<li>...</li>
</ul>
«ENDDEFINE»

