«IMPORT modulestudio»
«IMPORT processing»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«DEFINE Root FOR Module-»
«IF processingContainer.processors.processorStates.select(e|e.type == ProcessorStateType::EDIT).size > 0-»
«LET "pntemplates/plugins/" AS pluginDir-»
«FILE pluginDir + "index.html"-»«EXPAND FileHelper::msUrl-»«ENDFILE»
«FILE pluginDir + "block." + dbName(modName()) + "FormFrame.php"-»«EXPAND FileHelper::phpFileHeader(this)-»
«EXPAND FormFrameBlock-»
«ENDFILE»
«ENDLET-»
«ENDIF-»
«ENDDEFINE»

«DEFINE FormFrameBlock FOR Module-»
require_once 'system/pnForm/plugins/function.pnformvalidationsummary.php';

class «dbName(modName())»FormFrame extends pnFormPlugin
{
    var $useTabs;
    var $cssClass = 'tabs';

    // Plugins MUST implement this function as it is stated here.
    // The information is used to re-establish the plugins on postback.
    function getFilename()
    {
        return __FILE__;
    }

    function create(&$render, &$params)
    {
        $this->useTabs = (array_key_exists('useTabs', $params) ? $params['useTabs'] : false);
    }


    // This is called by the framework before the content of the block is rendered
    function renderBegin(&$render)
    {
        $tabClass = $this->useTabs ? ' '.$this->cssClass : '';
        return "<div class=\"«dbName(modName())»Form{$tabClass}\">\n";
    }

    // This is called by the framework after the content of the block is rendered
    function renderEnd(&$render)
    {
        return "</div>\n";
    }
}

/**
 * The «dbName(modName())»FormFrame plugin adds styling <div> elements and a validation summary.
 *
 * Available parameters:
 *   - assign:   If set, the results are assigned to the corresponding variable instead of printed out
 *
 * @param        array       $params       All attributes passed to this function from the template
 * @param        string      $content      The content of the block
 * @param        object      &$render     Reference to the Smarty object
 * @return       string      The output of the plugin
 */
function smarty_block_«dbName(modName())»FormFrame($params, $content, &$render)
{
    // As with all pnForms plugins, we must remember to register our plugin.
    // In this case we also register a validation summary so we don't have to
    // do that explicitively in the templates.

    // We need to concatenate the output of boths plugins.
    $result = $render->pnFormRegisterPlugin('pnFormValidationSummary', $params);
    $result .= $render->pnFormRegisterBlock('«dbName(modName())»FormFrame', $params, $content);

    return $result;
}
«ENDDEFINE»
