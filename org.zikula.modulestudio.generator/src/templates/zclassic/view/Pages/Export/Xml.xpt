«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE Root(String appName, Controller controller) FOR Entity»
«info("Generating " + controller.name() + " xml view templates for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«LET name.formatForCode() AS objName-»
«IF controller.hasActions('view')-»
«FILE templateFileWithExtension(controller, name, 'view', 'xml')-»
{* purpose of this template: «nameMultiple.formatForDisplay()» view xml view in «controller.name()» area *}
{«appName.formatForDB()»TemplateHeaders contentType='text/xml'}<?xml version="1.0" encoding="{charset}" ?>
<«nameMultiple.formatForCode()»>
{foreach item='item' from=$items}
    {include file='«controller.name()»/«objName»/include.xml'}
{foreachelse}
    <no«name.formatForCodeCapital()» />
{/foreach}
</«nameMultiple.formatForCode()»>
«ENDFILE»
«ENDIF-»

«IF controller.hasActions('display')-»
«FILE templateFileWithExtension(controller, name, 'display', 'xml')-»
{* purpose of this template: «nameMultiple.formatForDisplay()» display xml view in «controller.name()» area *}
{«appName.formatForDB()»TemplateHeaders contentType='text/xml'}<?xml version="1.0" encoding="{charset}" ?>
{getbaseurl assign='baseurl'}
{include file='«controller.name()»/«objName»/include.xml' item=$«objName»}
«ENDFILE»
«ENDIF-»

«FILE templateFileWithExtension(controller, name, 'include', 'xml')-»
{* purpose of this template: «nameMultiple.formatForDisplay()» xml inclusion template in «controller.name()» area *}
<«name.formatForDB()»«FOREACH getPrimaryKeyFields() AS pkField-» «pkField.name.formatForCode()»="{$item.«pkField.name.formatForCode()»}"«ENDFOREACH-»«IF standardFields-» createdon="{$item.createdDate|dateformat}" updatedon="{$item.updatedDate|dateformat}"«ENDIF»>
«EXPAND DisplayEntry(controller) FOREACH getDerivedFields().select(e|e.primaryKey)-»
«EXPAND DisplayEntry(controller) FOREACH getDerivedFields().reject(e|e.primaryKey)-»
«IF geographical-»
«FOREACH {'latitude', 'longitude'} AS geoFieldName-»
    <«geoFieldName»>{$item.«geoFieldName»|formatnumber:7}</«geoFieldName»>
«ENDFOREACH-»
«ENDIF-»
«EXPAND DisplayEntry(controller, false) FOREACH incoming.typeSelect(OneToManyRelationship).select(e|e.bidirectional)-»
«EXPAND DisplayEntry(controller, true) FOREACH outgoing.typeSelect(OneToOneRelationship)-»
</«name.formatForDB()»>
«ENDFILE»
«ENDLET-»
«ENDDEFINE»

«DEFINE DisplayEntry(Controller controller) FOR EntityField-»
«error("Error: undefined entity field type " + metaType.toString() + " (code 9242637)") -> ""-»
«ENDDEFINE»

«DEFINE DisplayEntry(Controller controller) FOR DerivedField-»
    <«name.formatForCode()»>«EXPAND templates::zclassic::view::PageComponents::SimpleFields::DisplayField('item', 'viewxml', '')»</«name.formatForCode()»>
«ENDDEFINE»

«DEFINE DisplayEntry(Controller controller) FOR CalculatedField-»
«error("Error: undefined calculated field type " + metaType.toString() + " (code 9242638)") -> ""-»
«ENDDEFINE»

«DEFINE DisplayEntry(Controller controller) FOR BooleanField-»
    <«name.formatForCode()»>{if !$item.«name»}0{else}1{/if}</«name.formatForCode()»>
«ENDDEFINE»

«DEFINE DisplayEntryCdata(Controller controller) FOR DerivedField-»
    <«name.formatForCode()»><![CDATA[«EXPAND templates::zclassic::view::PageComponents::SimpleFields::DisplayField('item', 'viewxml', '')»]]></«name.formatForCode()»>
«ENDDEFINE»

«DEFINE DisplayEntry(Controller controller) FOR StringField-»
«EXPAND DisplayEntryCdata(controller)-»
«ENDDEFINE»
«DEFINE DisplayEntry(Controller controller) FOR TextField-»
«EXPAND DisplayEntryCdata(controller)-»
«ENDDEFINE»

«DEFINE DisplayEntry(Controller controller) FOR UploadField-»
    <«name.formatForCode()»«EXPAND templates::zclassic::view::PageComponents::SimpleFields::DisplayField('item', 'viewxml', '')»</«name.formatForCode()»>
«ENDDEFINE»

«DEFINE DisplayEntry(Controller controller, Boolean useTarget) FOR JoinRelationship-»
«LET getRelationAliasName(useTarget).formatForCodeCapital() AS relationAliasName-»
«LET ((!useTarget) ? target : source) AS mainEntity-»
«LET ((useTarget) ? target : source) AS linkEntity-»
«LET 'item'.msconcat('.').msconcat(relationAliasName) AS relObjName-»
«LET linkEntity.getLeadingField() AS leadingField-»
«IF leadingField != null-»
    <«relationAliasName.toFirstLower()»>{if isset($«relObjName») && $«relObjName» ne null}{$«relObjName».«leadingField.name.formatForCode()»«REM»|nl2br«ENDREM»|default:""}{/if}</«relationAliasName.toFirstLower()»>
«ELSE-»
«REM»TODO«ENDREM»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»
