«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«DEFINE Root FOR Application-»
«FILE getAppSourcePath(appName()).msconcat('lib/').msconcat(appName()).msconcat('/Form/Plugin/ColourInput.php')-»«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Colour field plugin including colour picker.
 *
 * The allowed formats are '#RRGGBB' and '#RGB'.
 *
 * You can also use all of the features from the Zikula_Form_Plugin_TextInput plugin since the date input
 * inherits from it.
 */
class «appName()»_Form_Plugin_ColourInput extends Zikula_Form_Plugin_TextInput
{
    /**
     * Get filename of this file.
     *
     * @return string
     */
    function getFilename()
    {
        return __FILE__;
    }

    /**
     * Create event handler.
     *
     * @param Zikula_Form_View $view    Reference to Zikula_Form_View object.
     * @param array            &$params Parameters passed from the Smarty plugin function.
     *
     * @see    Zikula_Form_AbstractPlugin
     * @return void
     */
    function create(Zikula_Form_View $view, &$params)
    {
        $params['maxLength'] = 7;
        $params['width'] = '8em';

        // let parent plugin do the work in detail
        parent::create($view, $params);
    }

    /**
     * Helper method to determine css class.
     *
     * @see    Zikula_Form_Plugin_TextInput
     *
     * @return string the list of css classes to apply
     */
    protected function getStyleClass()
    {
        $class = parent::getStyleClass();
        return str_replace('z-form-text', 'z-form-colour', $class);
    }

    /**
     * Render event handler.
     *
     * @param Zikula_Form_View $view Reference to Zikula_Form_View object.
     *
     * @return string The rendered output
     */
    function render(Zikula_Form_View $view)
    {
        static $firstTime = true;
        if ($firstTime) {
            PageUtil::addVar('stylesheet', 'javascript/picky_color/picky_color.css');
            PageUtil::addVar('javascript', 'javascript/picky_color/picky_color.js');
        }
        $firstTime = false;

        $dom = ZLanguage::getModuleDomain('«appName()»');

        $result = parent::render($view);

        if ($this->readOnly) {
            return $result;
        }

        $result .= "<script type=\"text/javascript\" charset=\"utf-8\">
            /* <![CDATA[ */
                var namePicky = new PickyColor({
                    field: '" . $this->id . "',
                    color: '" . DataUtil::formatForDisplay($this->text) . "',
                    colorWell: '" . $this->id . "',
                    closeText: '" . __('Close', $dom) . "'
                })
            /* ]]> */
            </script>";

        return $result;
    }

    /**
     * Parses a value.
     *
     * @param Zikula_Form_View $view Reference to Zikula_Form_View object.
     * @param string           $text Text.
     *
     * @return string Parsed Text.
     */
    function parseValue(Zikula_Form_View $view, $text)
    {
        if (empty($text)) {
            return null;
        }

        return $text;
    }

    /**
     * Helper method to determine css class.
     *
     * @see    Zikula_Form_Plugin_TextInput
     *
     * @return string the list of css classes to apply
     */
    protected function getStyleClass()
    {
        $class = parent::getStyleClass();
        return str_replace('z-form-text', 'z-form-colour', $class);
    }

    /**
     * Validates the input string.
     *
     * @param Zikula_Form_View $view Reference to Zikula_Form_View object.
     *
     * @return void
     */
    function validate(Zikula_Form_View $view)
    {
        parent::validate($view);

        if (!$this->isValid) {
            return false;
        }

        if (strlen($this->text) > 0) {
            $regex = '/^#?(([a-fA-F0-9]{3}){1,2})$/';
            $result = preg_match($regex, $this->entity[$fieldName]);
            if (!$result) {
                $this->setError(__('Error! Invalid colour.'));
                return false;
            }
        }
    }
}
«ENDFILE»

«FILE viewPluginFilePath(this, 'function', 'ColourInput')-»«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * The «appName().formatForDB()»ColourInput plugin handles fields carrying a html colour code.
 * It provides a colour picker for convenient editing.
 *
 * @param  array            $params  All attributes passed to this function from the template.
 * @param  Zikula_Form_View $view    Reference to the view object.
 *
 * @return string The output of the plugin.
 */
function smarty_function_«appName().formatForDB()»ColourInput($params, $view)
{
    return $view->registerPlugin('«appName()»_Form_Plugin_ColourInput', $params);
}
«ENDFILE»
«ENDDEFINE»

