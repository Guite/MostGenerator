«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«DEFINE Root FOR Application-»
«IF hasTrees()-»
«FILE getAppSourcePath(appName()).msconcat('lib/').msconcat(appName()).msconcat('/Form/Plugin/TreeSelector.php')-»«EXPAND FileHelper::phpFileHeader(this)-»
«EXPAND TreeSelectorPluginImpl-»
«ENDFILE»
«FILE viewPluginFilePath(this, 'function', 'TreeSelector')-»«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * The «appName().formatForDB()»TreeSelector plugin cares for handling a dropdown list
 * for an entity with tree structure.
 *
 * @param array            $params Parameters passed to this function from the template.
 * @param Zikula_Form_View $view   Reference to Form render object.
 *
 * @return string The rendered output.
 */
function smarty_function_«appName().formatForDB()»TreeSelector($params, $view)
{
    return $view->registerPlugin('«appName()»_Form_Plugin_TreeSelector', $params);
}
«ENDFILE»
«ENDIF-»
«ENDDEFINE»

«DEFINE TreeSelectorPluginImpl FOR Application-»
/**
 * Tree selector
 *
 * This plugin creates a nested tree selector using a dropdown list.
 * The selected value of the base dropdown list will be set to ID of the selected tree node.
 */
class «appName()»_Form_Plugin_TreeSelector extends Zikula_Form_Plugin_DropdownList
{
    /**
     * The treated object type.
     *
     * @var string
     */
    public $objectType;

    /**
     * Root node id (when using multiple roots).
     *
     * @var integer
     */
    public $root;

    /**
     * Name of the field to display.
     *
     * @var string
     */
    public $displayField = '';

    /**
     * Name of optional second field to display.
     *
     * @var string
     */
    public $displayFieldTwo = '';

    /**
     * Whether to display an empty value to select nothing.
     *
     * @var boolean
     */
    public $showEmptyValue = 0;

    /**
     * Get filename of this file.
     *
     * @return string
     */
    function getFilename()
    {
        return __FILE__;
    }

    /**
     * Create event handler.
     *
     * @param Zikula_Form_View $view    Reference to Zikula_Form_View object.
     * @param array            &$params Parameters passed from the Smarty plugin function.
     *
     * @see    Zikula_Form_Plugin
     * @return void
     */
    function create($view, &$params)
    {
        if (!isset($params['objectType']) || empty($params['objectType'])) {
            $view->trigger_error(__f('Error! in %1$s: the %2$s parameter must be specified.',
                                     array('«prefix()»TreeSelector', 'objectType')));
        }
        $this->objectType = $params['objectType'];
        unset($params['objectType']);

        $this->root = (isset($params['root']) && is_numeric($params['root']) && $params['root'] > 0) ? $params['root'] : 1;

        if (!isset($params['displayField']) || empty($params['displayField'])) {
            $view->trigger_error(__f('Error! in %1$s: the %2$s parameter must be specified.',
                                     array('«prefix()»TreeSelector', 'displayField')));
        }
        $this->displayField = $params['displayField'];
        unset($params['displayField']);

        $this->displayFieldTwo = '';
        if (isset($params['displayField2'])) {
            $this->displayFieldTwo = $params['displayField2'];
            unset($params['displayField2']);
        }

        if (isset($params['showEmptyValue'])) {
            $this->showEmptyValue = $params['showEmptyValue'];
            unset($params['showEmptyValue']);
        }

        parent::create($view, $params);

        $this->cssClass .= ' z-form-nestedsetlist';
    }

    /**
     * Load event handler.
     *
     * @param Zikula_Form_View $view    Reference to Form render object.
     * @param array            &$params Parameters passed from the Smarty plugin function.
     *
     * @return void
     */
    function load($view, &$params)
    {
        if ($this->showEmptyValue != 0) {
            $this->addItem('- - -', 0);
        }

        $includeLeaf = isset($params['includeLeaf']) ? $params['includeLeaf'] : true;
        $includeRoot = isset($params['includeRoot']) ? $params['includeRoot'] : false;

        $treeNodes = array();

        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository('«appName()»_Entity_' . ucfirst($this->objectType));

        $apiArgs = array('ot' => $this->objectType);
        $idFields = ModUtil::apiFunc('«appName()»', 'selection', 'getIdFields', $apiArgs);

        $apiArgs['rootId'] = $this->root;
        $treeNodes = ModUtil::apiFunc('«appName()»', 'selection', 'getTree', $apiArgs);
        if (!$treeNodes) {
            $treeNodes = array();
        }

        foreach ($treeNodes as $node) {
            $nodeLevel = $node->getLvl();
            if (!$includeRoot && $nodeLevel == 0) {
                // if we do not include the root node skip it
                continue;
            }
            if (!$includeLeaf && $repository->childCount($node) == 0) {
                // if we do not include leaf nodes skip them
                continue;
            }

            // determine current list hierarchy level depending on root node inclusion
            $shownLevel = (($includeRoot) ? $nodeLevel : $nodeLevel - 1);

            // create the visible text for this entry
            $itemLabel = str_repeat('- - ', $shownLevel) . $node[$this->displayField];
            if (!empty($this->displayFieldTwo)) {
                $itemLabel .= ' (' . $node[$this->displayFieldTwo] . ')';
            }

            // create concatenated list of identifiers (for composite keys)
            $itemId = '';
            foreach ($idFields as $idField) {
                $itemId .= ((!empty($itemId)) ? '_' : '') . $node[$idField];
            }

            // add entity to selector list entries
            $this->addItem($itemLabel, $itemId);
        }

        parent::load($view, $params);
    }
}

«ENDDEFINE»
