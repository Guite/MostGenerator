«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«DEFINE Root FOR Application-»
«FILE viewPluginFilePath(this, 'function', 'TreeJS')-»«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * The «appName().formatForDB()»TreeJS plugin delivers the html output for a JS tree
 * based on given tree entities.
 *
 * Available parameters:
 *   - objectType: Name of treated object type.
 *   - tree:       Object collection with tree items.
 *   - controller: Optional name of controller, defaults to 'user'.
 *   - root:       Optional id of root node, defaults to 1.
 *   - assign:     If set, the results are assigned to the corresponding variable instead of printed out.
 *
 * @param  array       $params  All attributes passed to this function from the template.
 * @param  Zikula_View $view    Reference to the view object.
 *
 * @return string The output of the plugin.
 */
function smarty_function_«appName().formatForDB()»TreeJS($params, $view)
{
    if (!isset($params['objectType']) || empty($params['objectType'])) {
        $view->trigger_error(__f('Error! in %1$s: the %2$s parameter must be specified.', array('«appName().formatForDB()»TreeJS', 'objectType')));
        return false;
    }

    if (!isset($params['tree']) || empty($params['tree'])) {
        $view->trigger_error(__f('Error! in %1$s: the %2$s parameter must be specified.', array('«appName().formatForDB()»TreeJS', 'tree')));
        return false;
    }

    if (!isset($params['controller']) || empty($params['controller'])) {
        $params['controller'] = 'user';
    }

    if (!isset($params['root']) || empty($params['root'])) {
        $params['root'] = 1;
    }

    // check whether an edit action is available
    $controllerHasEditAction = false;
    switch ($params['controller']) {
«FOREACH controllers.controllers AS controller-»
«IF controller.hasActions('edit')-»
        case '«controller.name()»': $controllerHasEditAction = true; break;
«ENDIF-»
«ENDFOREACH-»
    }

    $serviceManager = ServiceUtil::getManager();
    $entityManager = $serviceManager->getService('doctrine.entitymanager');
    $repository = $entityManager->getRepository('«appName()»_Entity_' . ucfirst($params['objectType']));
    $titleFieldName = $repository->getTitleFieldName();
    $descriptionFieldName = $repository->getDescriptionFieldName();

«REM»TODO improve identifier handling in treejs plugin«ENDREM»
    $idField = 'id';
    $result = array();

    foreach ($params['tree'] as $item) {
        $url = (($controllerHasEditAction) ? ModUtil::url('«appName()»', $params['controller'], 'edit', array('ot' => $params['objectType'], $idField => $item[$idField])) : '');

        $parentItem = $item->getParent();

        $result[] = array('id' => $item[$idField],
                          'parent_id' => $parentItem[$idField],
                          'name' => $item[$titleFieldName],
                          'title' => strip_tags($item[$descriptionFieldName]),
                        //'icon' => '',
                        //'class' => '',
                          'active' => true,
                        //'expanded' => null,
                          'href' => $url);
    }

    // instantiate and initialise the output tree object
    $tree = new Zikula_Tree();
    $tree->setOption('id', 'itemtree' . $params['root']);
    //$tree->setOption('objid', $idField);
    $tree->setOption('treeClass', 'z-nestedsetlist');
    $tree->setOption('nodePrefix', 'tree' . $params['root'] . 'node_');
    $tree->setOption('sortable', ((isset($params['sortable']) && $params['sortable']) ? true : false));
    $tree->setOption('withWraper', true);

    // disable drag and drop for root category
    $tree->setOption('disabled', array(1));

    // put data into output tree
    $tree->loadArrayData($result);

    // get output result
    $result = $tree->getHTML();

    if (array_key_exists('assign', $params)) {
        $view->assign($params['assign'], $result);
        return;
    }
    return $result;
}
«ENDFILE»
«ENDDEFINE»

