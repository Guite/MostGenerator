«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE Root FOR Application-»
«LET controllers.controllers.actions.typeSelect(EditAction) AS editActions-»
«IF !editActions.isEmpty-»
    «EXPAND Root(this) FOREACH editActions-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Application app) FOR Action-»
    «EXPAND Root(app, controller, 'edit') FOREACH app.models.entities-»
    «EXPAND InlineRedirectHandler(app) FOR controller-»
«ENDDEFINE»

«REM»Entry point for Form templates«ENDREM»
«DEFINE Root(Application app, Controller controller, String actionName) FOR Entity-»
«info("Generating edit form templates for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«FILE editTemplateFile(controller, name, actionName)-»
«EXPAND FormTemplateHeader(app, controller, actionName)-»
«EXPAND FormTemplateBody(app, controller, actionName)-»
«ENDFILE»
«EXPAND templates::zclassic::view::FormComponents::Relations::Root(app, controller, false, true) FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)-»
«EXPAND templates::zclassic::view::FormComponents::Relations::Root(app, controller, false, false) FOREACH outgoing.typeSelect(JoinRelationship)-»
«ENDDEFINE»

«DEFINE FormTemplateHeader(Application app, Controller controller, String actionName) FOR Entity-»
{* purpose of this template: build the Form to «actionName.formatForDisplay()» an instance of «name.formatForDisplay()» *}
{include file='«controller.name()»/header.tpl'}
{pageaddvar name='javascript' value='modules/«app.appName()»/javascript/«app.appName()»_editFunctions.js'}
{pageaddvar name='javascript' value='modules/«app.appName()»/javascript/«app.appName()»_validation.js'}

{if $mode eq 'edit'}
    {gt text='Edit «name.formatForDisplay()»' assign='templateTitle'}
«IF controller.metaType == AdminController-»
    {assign var='adminPageIcon' value='edit'}
«ENDIF-»
{elseif $mode eq 'create'}
    {gt text='Create «name.formatForDisplay()»' assign='templateTitle'}
«IF controller.metaType == AdminController-»
    {assign var='adminPageIcon' value='new'}
«ENDIF-»
{else}
    {gt text='Edit «name.formatForDisplay()»' assign='templateTitle'}
«IF controller.metaType == AdminController-»
    {assign var='adminPageIcon' value='edit'}«REM»TODO«ENDREM»
«ENDIF-»
{/if}
<div class="«app.appName().toLowerCase()»-«name.formatForDB()» «app.appName().toLowerCase()»-edit">
{pagesetvar name='title' value=$templateTitle}
«IF controller.metaType == AdminController-»
<div class="z-admin-content-pagetitle">
    {icon type=$adminPageIcon size='small' alt=$templateTitle}
    <h3>{$templateTitle}</h3>
</div>
«ELSE-»
<div class="z-frontendcontainer">
    <h2>{$templateTitle}</h2>
«ENDIF-»
«ENDDEFINE»

«DEFINE FormTemplateBody(Application app, Controller controller, String actionName) FOR Entity-»
{form «IF hasUploadFields()»enctype='multipart/form-data' «ENDIF»cssClass='z-form'}
    {* add validation summary and a <div> element for styling the form *}
    {«app.appName().formatForDB()»FormFrame}
«REM»    {*formvalidationsummary*}
    {*formerrormessage id='error'*}«ENDREM»«''-»
«IF !getEditableFields().isEmpty-»
    {formsetinitialfocus inputId='«getEditableFields().get(0).name.formatForCode()»'}
«REM»{formsetinitialfocus inputId='PluginId' doSelect=true} <-- for dropdown lists (performs input.select())«ENDREM»«""-»
«ENDIF-»

«IF hasTranslatableFields()-»
    {formvolatile}
        {assign var='useOnlyCurrentLocale' value=true}
        {if $modvars.ZConfig.multilingual}
            {if $supportedLocales ne '' && is_array($supportedLocales) && count($supportedLocales) > 1}
                {assign var='useOnlyCurrentLocale' value=false}
                {nocache}
                {lang assign='currentLanguage'}
                {foreach item='locale' from=$supportedLocales}
                {if $locale eq $currentLanguage}
                    <fieldset>
                        <legend>{$locale|getlanguagename|safehtml}</legend>
«EXPAND FieldWrapper('', '') FOREACH getEditableFields().select(e|e.translatable)-»
«IF hasTranslatableSlug()-»
«EXPAND SlugField('', '')-»
«ENDIF-»
                    </fieldset>
                    {/if}
                    {/foreach}
                    {foreach item='locale' from=$supportedLocales}
                    {if $locale ne $currentLanguage}
                    <fieldset>
                        <legend>{$locale|getlanguagename|safehtml}</legend>
«EXPAND FieldWrapper('$locale', '$locale') FOREACH getEditableFields().select(e|e.translatable)-»
«IF hasTranslatableSlug()-»
«EXPAND SlugField('$locale', '$locale')-»
«ENDIF-»
                    </fieldset>
                {/if}
                {/foreach}
                {/nocache}
            {/if}
        {/if}
        {if $useOnlyCurrentLocale eq true}
        <fieldset>
            {lang assign='locale'}
            <legend>{$locale|getlanguagename|safehtml}</legend>
«EXPAND FieldWrapper('', '') FOREACH getEditableFields().select(e|e.translatable)-»
«IF hasTranslatableSlug()-»
«EXPAND SlugField('', '')-»
«ENDIF-»
        </fieldset>
        {/if}
    {/formvolatile}
«ENDIF-»
«IF !hasTranslatableFields()
  || (hasTranslatableFields() && !getEditableFields().reject(e|e.translatable).isEmpty || !hasTranslatableSlug())-»
    <fieldset>
        <legend>{gt text='«IF hasTranslatableFields()-»Further properties«ELSE-»Content«ENDIF-»'}</legend>
«IF hasTranslatableFields()-»
«EXPAND FieldWrapper('', '') FOREACH getEditableFields().reject(e|e.translatable)-»
«ELSE-»
«EXPAND FieldWrapper('', '') FOREACH getEditableFields()-»
«ENDIF-»
«IF !hasTranslatableFields() || !hasTranslatableSlug()-»
«EXPAND SlugField('', '')-»
«ENDIF-»
«ENDIF-»
«IF geographical-»
«FOREACH {'latitude', 'longitude'} AS geoFieldName-»
        <div class="z-formrow">
            {formlabel for='«geoFieldName»' __text='«geoFieldName.toFirstUpper()»'}
            {«app.appName().formatForDB()»GeoInput group='«name.formatForDB()»' id='«geoFieldName»' mandatory=false __title='Enter the «geoFieldName» of the «name.formatForDisplay()»' cssClass='validate-number'}
            {«app.appName().formatForDB()»ValidationError id='«geoFieldName»' class='validate-number'}
        </div>
«ENDFOREACH-»
«ENDIF-»
    </fieldset>
    
«IF geographical-»
    <fieldset>
        <legend>{gt text='Map'}</legend>
        {pageaddvarblock name='header'}
        <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
        <script type="text/javascript" src="{$baseurl}plugins/Mapstraction/lib/vendor/mxn/mxn.js?(googlev3)"></script>
        <script type="text/javascript" charset="utf-8">
        /* <![CDATA[ */
            var mapstraction;
            var marker;
            Event.observe(window, 'load', function() {
                mapstraction = new mxn.Mapstraction('mapContainer', 'googlev3');
                mapstraction.addControls({
                    pan: true,
                    zoom: 'small',
                    map_type: true
                });

                var latlon = new mxn.LatLonPoint({{$«name.formatForDB()».latitude|formatnumber:7}}, {{$«name.formatForDB()».longitude|formatnumber:7}});

                mapstraction.setMapType(mxn.Mapstraction.SATELLITE);
                mapstraction.setCenterAndZoom(latlon, 16);
                mapstraction.mousePosition('position');

                // add a marker
                marker = new mxn.Marker(latlon);
                mapstraction.addMarker(marker,true);

                $('latitude').observe('change', function() {
                    var newLatLon = new mxn.LatLonPoint($F('latitude'), $F('longitude'));
                    marker.hide();
                    mapstraction.removeMarker(marker);
                    marker = new mxn.Marker(newLatLon);
                    mapstraction.addMarker(marker,true);
                    mapstraction.setCenter(newLatLon);
                });

                $('longitude').observe('change', function() {
                    var newLatLon = new mxn.LatLonPoint($F('latitude'), $F('longitude'));
                    marker.hide();
                    mapstraction.removeMarker(marker);
                    marker = new mxn.Marker(newLatLon);
                    mapstraction.addMarker(marker,true);
                    mapstraction.setCenter(newLatLon);
                });
            });
        /* ]]> */
        </script>
        {/pageaddvarblock}
        <div id="mapContainer" class="«app.appName().formatForDB()»MapContainer">
        </div>
    </fieldset>
«ENDIF-»

«EXPAND templates::zclassic::view::FormComponents::Section::Root(app, controller)-»
  {/«app.appName().formatForDB()»FormFrame}
{/form}

«IF controller.metaType == AdminController-»
«ELSE-»
</div>
«ENDIF-»
</div>
{include file='«controller.name()»/footer.tpl'}

«EXPAND FormTemplateJS(app, controller, actionName)-»
«ENDDEFINE»

«DEFINE SlugField(String groupSuffix, String idSuffix) FOR Entity-»
«REM»no slug input element yet, see https://github.com/l3pp4rd/DoctrineExtensions/issues/140
«IF hasSluggableFields() && slugUpdatable-»
        <div class="z-formrow">
            {formlabel for=«templateIdWithSuffix('slug', idSuffix)» __text='Permalink'«IF slugUnique-» mandatorysym='1'«ENDIF-»}
            {formtextinput group=«templateIdWithSuffix(name.formatForDB(), groupSuffix)» id=«templateIdWithSuffix('slug', idSuffix)» mandatory=«IF slugUnique-»true«ELSE-»false«ENDIF-» readOnly=false __title='You can input a custom permalink for the «name.formatForDisplay()»«IF !slugUnique-» or let this field free to create one automatically«ENDIF-»' textMode='singleline' maxLength=255«IF slugUnique-» cssClass='required validate-unique'«ENDIF-»}
«IF slugUnique-»
            {«container.application.appName().formatForDB()»ValidationError id=«templateIdWithSuffix('slug', idSuffix)» class='required'}
            {«container.application.appName().formatForDB()»ValidationError id=«templateIdWithSuffix('slug', idSuffix)» class='validate-unique'}
«ENDIF-»
        </div>
«ENDIF-»
«ENDREM»«''-»
«ENDDEFINE»

«DEFINE FormTemplateJS(Application app, Controller controller, String actionName) FOR Entity-»
{icon type='edit' size='extrasmall' assign='editImageArray'}
{icon type='delete' size='extrasmall' assign='deleteImageArray'}

<script type="text/javascript" charset="utf-8">
/* <![CDATA[ */
    var editImage = '<img src="{{$editImageArray.src}}" width="16" height="16" alt="" />';
    var removeImage = '<img src="{{$deleteImageArray.src}}" width="16" height="16" alt="" />';
«LET incoming.typeSelect(JoinRelationship).select(e|e.bidirectional) AS incomingJoins-»
«LET outgoing.typeSelect(JoinRelationship) AS outgoingJoins-»
«IF !incomingJoins.isEmpty || !outgoingJoins.isEmpty-»
    var relationHandler = new Array();
«EXPAND FormComponents::Relations::InitJs(app, this, true, false) FOREACH incomingJoins-»
«EXPAND FormComponents::Relations::InitJs(app, this, false, false) FOREACH outgoingJoins-»
«ENDIF-»
«IF geographical-»

    function setDefaultCoordinates(position) {
        $('latitude').value = position.coords.latitude;
        $('longitude').value = position.coords.longitude;
    }

    function handlePositionError(evt) {
        Zikula.UI.Alert(evt.message, Zikula.__('Error during geolocation', 'module_«app.name.formatForDB()»'));
    }
«ENDIF-»

    document.observe('dom:loaded', function() {
«LET getUserFields() AS userFields-»
«IF !userFields.isEmpty-»
        // initialise auto completion for user fields
«FOREACH userFields AS userField-»
«LET userField.name.formatForCode() AS realName»
        {{if isset($«realName») && $«realName» gt 0}}
            $('«realName»Selector').value = '{{usergetvar name='uname' uid=$«realName»}}';
        {{/if}}
        «app.prefix()»InitUserField('«realName»', 'get«name.formatForCodeCapital()»«realName.formatForCodeCapital()»Users');
«ENDLET-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«IF geographical-»
        {{if $mode eq 'create'}}
            // derive default coordinates from users position with html5 geolocation feature
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(setDefaultCoordinates, handlePositionError);
            }
        {{/if}}
«ENDIF-»
«EXPAND FormComponents::Relations::InitJs(app, this, true, true) FOREACH incomingJoins-»
«EXPAND FormComponents::Relations::InitJs(app, this, false, true) FOREACH outgoingJoins-»
«ENDLET-»
«ENDLET-»

        «container.application.prefix()»AddCommonValidationRules('«name.formatForCode()»', '{{if $mode eq 'create'}}{{else}}«FOREACH getPrimaryKeyFields() AS pkField-»{{$«name.formatForDB()».«pkField.name.formatForCode()»}}«ENDFOREACH-»{{/if}}');

        // observe button events instead of form submit
        var valid = new Validation('{{$__formid}}', {onSubmit: false, immediate: true, focusOnError: false});
        {{if $mode ne 'create'}}
            var result = valid.validate();
        {{/if}}

        $('{{if $mode eq 'create'}}btnCreate{{else}}btnUpdate{{/if}}').observe('click', function(event) {
            var result = valid.validate();
            if (!result) {
                // validation error, abort form submit
                Event.stop(event);
            } else {
                // hide form buttons to prevent double submits by accident
                $$('div.z-formbuttons input').each(function(btn) {
                    btn.hide();
                });
            }
            return result;
        });

        Zikula.UI.Tooltips($$('.«app.appName().formatForDB()»FormTooltips'));
«EXPAND AdditionalInitScript FOREACH getDerivedFields()-»
    });

/* ]]> */
</script>
«ENDDEFINE»

«DEFINE FieldWrapper(String groupSuffix, String idSuffix) FOR DerivedField-»
«REM»No input fields for foreign keys, relations are processed further down«ENDREM»«""-»
«IF entity.incoming.typeSelect(JoinRelationship).select(e|e.getSourceFields().get(0) == name.formatForDB()).isEmpty-»
        <div class="z-formrow">
            «EXPAND FormComponents::SimpleFields::FormRow(groupSuffix, idSuffix)-»
        </div>
«ENDIF-»
«ENDDEFINE»

«DEFINE AdditionalInitScript FOR DerivedField-»
«ENDDEFINE»
«DEFINE AdditionalInitScriptCalendar FOR AbstractDateField-»
«IF !mandatory-»
        $('reset«name.formatForCodeCapital()»Val').observe('click', function() { $('«name.formatForCode()»').value = ''; $('«name.formatForCode()»cal').update(Zikula.__('No date set.', 'module_«entity.container.application.appName()»')); }).show();
«ENDIF-»
«ENDDEFINE»
«DEFINE AdditionalInitScript FOR DatetimeField-»
«EXPAND AdditionalInitScriptCalendar-»
«ENDDEFINE»
«DEFINE AdditionalInitScript FOR DateField-»
«EXPAND AdditionalInitScriptCalendar-»
«ENDDEFINE»

«DEFINE InlineRedirectHandler(Application app) FOR Controller-»
«FILE getAppSourcePath(app.appName()).msconcat("templates/").msconcat(name()).msconcat("/inlineRedirectHandler.tpl")-»
{* purpose of this template: close an iframe from within this iframe *}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        {$jcssConfig}
        <script type="text/javascript" src="{getbaseurl}javascript/ajax/proto_scriptaculous.combined.min.js"></script>
        <script type="text/javascript" src="{getbaseurl}javascript/helpers/Zikula.js"></script>
        <script type="text/javascript" src="{getbaseurl}javascript/livepipe/livepipe.combined.min.js"></script>
        <script type="text/javascript" src="{getbaseurl}javascript/helpers/Zikula.UI.js"></script>
        <script type="text/javascript" src="{getbaseurl}modules/«app.appName()»/javascript/«app.appName()»_editFunctions.js"></script>
    </head>
    <body>
        <script type="text/javascript" charset="utf-8">
        /* <![CDATA[ */
            // close window from parent document
            document.observe('dom:loaded', function() {
                «app.prefix()»CloseWindowFromInside('{{$idPrefix}}', {{if $commandName eq 'create'}}{{$itemId}}{{else}}0{{/if}});«REM»value > 0 causes the auto completion being activated«ENDREM»
            });
        /* ]]> */
        </script>
    </body>
</html>

«ENDFILE»
«ENDDEFINE»

«REM»
A 'zparameters' parameter was added as a direct way to assign the values of
the form plugins attributes. For instance:
$attributes = {class:z-bt-ok; confirmMessage:Are you sure?}
{formbutton commandName='delete' __text='Delete' zparameters=$attributes}
«ENDREM»
