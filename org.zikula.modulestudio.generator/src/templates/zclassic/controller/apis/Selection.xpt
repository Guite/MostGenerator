«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«DEFINE Root FOR Application-»
«FILE getAppSourceLibPath(appName()).msconcat('Api/Base/Selection.php')-»
«EXPAND FileHelper::phpFileHeader(this)»
/**
 * Selection api base class
 */
class «appName()»_Api_Base_Selection extends Zikula_AbstractApi
{
«EXPAND SelectionImpl-»
}
«ENDFILE»

«FILE getAppSourceLibPath(appName()).msconcat('Api/Selection.php')-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Selection api implementation class
 */
class «appName()»_Api_Selection extends «appName()»_Api_Base_Selection
{
    // feel free to extend the selection api here
}
«ENDFILE»
«ENDDEFINE»

«DEFINE SelectionImpl FOR Application-»
    /**
     * Get list of identifier fields for a given object type.
     *
     * @param string  $args['ot'] The object type to be treated (optional)
     *
     * @return array List of identifier field names.
     */
    public function getIdFields($args)
    {
        $objectType = $this->determineObjectType($args, 'getIdFields');
        $entityClass = '«appName()»_Entity_' . ucfirst($objectType);
        $objectTemp = new $entityClass(); 
        $idFields = $objectTemp->get_idFields();
        return $idFields;
    }

    /**
     * Select a single entity.
     *
     * @param string  $args['ot']       The object type to retrieve (optional)
     * @param mixed   $args['id']       The id (or array of ids) to use to retrieve the object (default=null).
«IF hasSluggable()-»
     * @param string  $args['slug']     Slug to use as selection criteria instead of id (optional) (default=null).
«ENDIF-»
     * @param boolean $args['useJoins'] Whether to include joining related objects (optional) (default=true).
     *
     * @return mixed Desired entity object or null.
     */
    public function getEntity($args)
    {
        if (!isset($args['id'])«IF hasSluggable()-» && !isset($args['slug'])«ENDIF-») {
            return LogUtil::registerArgsError();
        }
        $objectType = $this->determineObjectType($args, 'getEntity');
        $repository = $this->getRepository($objectType);

        $idValues = $args['id'];
«IF hasSluggable()-»
        $slug = isset($args['slug']) ? $args['slug'] : null;
«ENDIF-»
        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins'] : true;

        $idFields = $this->getIdFields('ot' => $objectType);

«IF hasSluggable()-»
        $entity = null;
        if ($slug != null) {
            $entity = $repository->selectBySlug($slug, $useJoins);
        } else {
            $entity = $repository->selectById($idValues, $useJoins);
        }
«ELSE-»
        $entity = $repository->selectById($idValues, $useJoins);
«ENDIF-»

        return $entity;
    }

    /**
     * Select a list of entities by different criteria.
     *
     * @param string  $args['ot']       The object type to retrieve (optional)
     * @param string  $args['where']    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $args['orderBy']  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $args['useJoins'] Whether to include joining related objects (optional) (default=true).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function getEntities($args)
    {
        $objectType = $this->determineObjectType($args, 'getEntities');
        $repository = $this->getRepository($objectType);

        $where = isset($args['where']) ? $args['where'] : '';
        $orderBy = isset($args['orderBy']) ? $args['orderBy'] : '';
        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins'] : true;

        return $repository->selectWhere($where, $orderBy, $useJoins);
    }

    /**
     * Select a list of entities by different criteria.
     *
     * @param string  $args['ot']             The object type to retrieve (optional)
     * @param string  $args['where']          The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $args['orderBy']        The order-by clause to use when retrieving the collection (optional) (default='').
     * @param integer $args['currentPage']    Where to start selection
     * @param integer $args['resultsPerPage'] Amount of items to select
     * @param boolean $args['useJoins']       Whether to include joining related objects (optional) (default=true).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function getEntitiesPaginated($args)
    {
        $objectType = $this->determineObjectType($args, 'getEntitiesPaginated');
        $repository = $this->getRepository($objectType);

        $where = isset($args['where']) ? $args['where'] : '';
        $orderBy = isset($args['orderBy']) ? $args['orderBy'] : '';
        $currentPage = isset($args['currentPage']) ? $args['currentPage'] : 1;
        $resultsPerPage = isset($args['resultsPerPage']) ? $args['resultsPerPage'] : 25;
        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins'] : true;

        return $repository->selectWherePaginated($where, $orderBy, $currentPage, $resultsPerPage, $useJoins);
    }

    /**
     * Select tree of given object type.
     *
     * @param string $args['ot'] The object type to retrieve (optional)
     * @param string $methodName Name of calling method
     */
    protected function determineObjectType($args, $methodName = '')
    {
        $objectType = isset($args['ot']) ? $args['ot'] : '';
        $utilArgs = array('api' => 'selection', 'action' => $methodName);
        if (!in_array($objectType, «appName()»_Util_Controller::getObjectTypes('api', $utilArgs))) {
            $objectType = «appName()»_Util_Controller::getDefaultObjectType('api', $utilArgs);
        }
        return $objectType;
    }

    /**
     * Return repository instance for a certain object type.
     *
     * @param string $objectType The desired object type.
     *
     * @return mixed Repository class instance or null.
     */
    protected function getRepository($objectType = '')
    {
        if (empty($objectType)) {
            return LogUtil::registerArgsError();
        }
        return $this->entityManager->getRepository('«appName()»_Entity_' . ucfirst($objectType));
    }
«IF hasTrees()-»

    /**
     * Select tree of given object type.
     *
     * @param string  $args['ot']       The object type to retrieve (optional)
     * @param integer $args['rootId']   Optional id of root node to use as a branch, defaults to 0 which corresponds to the whole tree.
     * @param boolean $args['useJoins'] Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function getTree($args)
    {
        if (!isset($args['rootId'])) {
            return LogUtil::registerArgsError();
        }
        $rootId = $args['rootId'];

        $objectType = $this->determineObjectType($args, 'getTree');
        $repository = $this->getRepository($objectType);

        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins'] : true;

        return $repository->selectTree($rootId, $useJoins);
    }

    /**
     * Get all trees at once.
     *
     * @param string  $args['ot']       The object type to retrieve (optional)
     * @param boolean $args['useJoins'] Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function getAllTrees($args)
    {
        $objectType = $this->determineObjectType($args, 'getTree');
        $repository = $this->getRepository($objectType);

        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins'] : true;

        return $repository->selectAllTrees($useJoins);
    }
«ENDIF-»

«ENDDEFINE»
