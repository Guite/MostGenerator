«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«DEFINE Root FOR Application-»
«FILE getAppSourceLibPath(appName()).msconcat('Api/Base/Mailz.php')-»
«EXPAND FileHelper::phpFileHeader(this)»
/**
 * Mailz api base class
 */
class «appName()»_Api_Base_Mailz extends Zikula_AbstractApi
{
«EXPAND MailzImpl-»
}
«ENDFILE»

«FILE getAppSourceLibPath(appName()).msconcat('Api/Mailz.php')-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Mailz api implementation class
 */
class «appName()»_Api_Mailz extends «appName()»_Api_Base_Mailz
{
    // feel free to extend the mailz api here
}
«ENDFILE»

«EXPAND templates::zclassic::view::Additions::Mailz::Root»
«ENDDEFINE»

«DEFINE MailzImpl FOR Application-»
    /**
     * Get mailz plugins with type / title
     *
     * @return array List of provided plugin functions.
     */
    public function getPlugins($args)
    {
«LET getLeadingEntity().nameMultiple.formatForDisplay() AS itemDesc-»
        $plugins = array();
        $plugins[] = array(
            'pluginid'      => 1,
            'module'        => '«appName()»',
            'title'         => $this->__('3 newest «itemDesc»'),
            'description'   => $this->__('A list of the three newest «itemDesc».')
        );
        $plugins[] = array(
            'pluginid'      => 2,
            'module'        => '«appName()»',
            'title'         => $this->__('3 random «itemDesc»'),
            'description'   => $this->__('A list of three random «itemDesc».')
        );
«ENDLET-»
        return $plugins;
    }

    /**
     * Get content for plugins
     *
     * @param int      $args['pluginid']    id number of plugin (internal id for this module, see getPlugins method)
     * @param string   $args['params']      optional, show specific one or all otherwise
     * @param int      $args['uid']         optional, user id for user specific content
     * @param string   $args['contenttype'] h or t for html or text
     * @param datetime $args['last']        timestamp of last newsletter
     * @return string output of plugin template.
     */
    public function getContent($args)
    {
        ModUtil::initOOModule('«appName()»');
// $args is something like:
// Array ( [uid] => 5 [contenttype] => h [pluginid] => 1 [nid] => 1 [last] => 0000-00-00 00:00:00 [params] => Array ( [] => ) ) 1
«LET getLeadingEntity() AS leadingEntity-»
        $objectType = '«leadingEntity.name.formatForCode()»';

        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository('«appName()»_Entity_' . ucfirst($objectType));

        $idFields = ModUtil::apiFunc('«appName()»', 'selection', 'getIdFields', array('ot' => $objectType));

        $sortParam = '';
        if ($args['pluginid'] == 2) {
            $sortParam = 'RAND()';
        } elseif ($args['pluginid'] == 1) {
            if (count($idFields) == 1) {
                $sortParam = $idFields[0] . ' DESC';
            } else {
                foreach ($idFields as $idField) {
                    if (!empty($sortParam)) {
                        $sortParam .= ', ';
                    }
                    $sortParam .= $idField . ' ASC';
                }
            }
        }

        $where = ''/*$this->filter*/;
        $resultsPerPage = 3;

        // get objects from database
        $selectionArgs = array(
            'ot' => $objectType,
            'where' => $where,
            'orderBy' => $sortParam,
            'currentPage' => 1,
            'resultsPerPage' => $resultsPerPage
        );
        list($entities, $objectCount) = ModUtil::apiFunc('«appName()»', 'selection', 'getEntitiesPaginated', $selectionArgs);

        $view = Zikula_View::getInstance('«appName()»', true);

        //$data = array('sorting' => $this->sorting, 'amount' => $this->amount, 'filter' => $this->filter, 'template' => $this->template);
        //$view->assign('vars', $data);

        $view->assign('objectType', '«leadingEntity.name.formatForCode()»')
             ->assign('items', $entities)
             ->assign($repository->getAdditionalTemplateParameters('api', array('name' => 'mailz')));

        if ($args['contenttype'] == 't') { /* text */
            return $view->fetch('mailz/itemlist_«leadingEntity.name.formatForCodeCapital()»_text.tpl');
        } else {
            //return $view->fetch('contenttype/itemlist_display.html');
            return $view->fetch('mailz/itemlist_«leadingEntity.name.formatForCodeCapital()»_html.tpl');
        }
    }
«ENDLET-»

«ENDDEFINE»

