«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«REM»start point for the javascript file with display functionality«ENDREM»
«DEFINE Root FOR Application-»
«FILE getAppSourcePath(appName()).msconcat('javascript/').msconcat(appName()).msconcat('_tree.js')-»

var currentNodeId = 0;

«EXPAND InitTreeView-»
«EXPAND InitTreeNodes-»
«EXPAND PerformTreeOperation-»
«EXPAND TreeSave-»

«ENDFILE»
«ENDDEFINE»

«DEFINE InitTreeView FOR Application-»
/**
 * Initialise tree view.
 */
function «prefix()»InitTreeView(objectType, hasNodes)
{
    if (!hasNodes || $('z-tree-addroot')) {
        $('z-tree-addroot').observe('click', function(event) {
            «prefix()»PerformTreeOperation(objectType, 1, 'addRootNode');
            Event.stop(event);
        }).show();
    }
}

«ENDDEFINE»

«DEFINE InitTreeNodes FOR Application-»
/**
 * Initialise event handlers for all nodes of a given tree root.
 */
function «prefix()»InitTreeNodes(objectType, controller, rootId, readOnly)
{
    $$('#itemtree' + rootId + ' a').each(function(elem) {
        // get reference to list item
        var liRef = elem.up();
        var isRoot = (liRef.id == 'tree' + rootId + 'node_' + rootId);

        // define a link id
        elem.id = liRef.id + 'link';

        // and use it to attach a context menu
        var contextMenu = new Control.ContextMenu(elem.id, { leftClick: true, animation: false });
        if (readOnly != true) {
            contextMenu.addItem({
                label: Zikula.__('Edit', 'module_«appName().formatForDB()»_js'),
                callback: function() {
                    currentNodeId = liRef.id.replace('tree' + rootId + 'node_', '');
                    window.location = Zikula.Config.baseURL + 'index.php?module=«appName()»&type=' + controller + '&func=edit&ot=' + objectType + '&id=' + currentNodeId;
                }
            });
        }
        contextMenu.addItem({
            label: Zikula.__('Add child node', 'module_«appName().formatForDB()»_js'),
            callback: function() {
                currentNodeId = liRef.id.replace('tree' + rootId + 'node_', '');
                «prefix()»PerformTreeOperation(objectType, rootId, 'addChildNode');
            }
        });
        contextMenu.addItem({
            label: Zikula.__('Delete node', 'module_«appName().formatForDB()»_js'),
            callback: function() {
                var confirmQuestion = Zikula.__('Do you really want to remove this node?', 'module_«appName().formatForDB()»_js');
                if (!liRef.hasClassName('z-tree-leaf')) {
                    confirmQuestion = Zikula.__('Do you really want to remove this node including all child nodes?', 'module_«appName().formatForDB()»_js');
                }
                if (window.confirm(confirmQuestion) != false) {
                    currentNodeId = liRef.id.replace('tree' + rootId + 'node_', '');
                    «prefix()»PerformTreeOperation(objectType, rootId, 'deleteNode');
                }
            }
        });
        contextMenu.addItem({
            label: Zikula.__('Move up', 'module_«appName().formatForDB()»_js'),
            condition: function() {
                return !isRoot && !liRef.hasClassName('z-tree-first'); // has previous sibling
            },
            callback: function() {
                currentNodeId = liRef.id.replace('tree' + rootId + 'node_', '');
                «prefix()»PerformTreeOperation(objectType, rootId, 'moveNodeUp');
            }
        });
        contextMenu.addItem({
            label: Zikula.__('Move down', 'module_«appName().formatForDB()»_js'),
            condition: function() {
                return !isRoot && !liRef.hasClassName('z-tree-last'); // has next sibling
            },
            callback: function() {
                currentNodeId = liRef.id.replace('tree' + rootId + 'node_', '');
                «prefix()»PerformTreeOperation(objectType, rootId, 'moveNodeDown');
            }
        });
    });
}

«ENDDEFINE»

«DEFINE PerformTreeOperation FOR Application-»
/**
 * Helper function to start several different ajax actions
 * performing tree related amendments and operations.
 */
function «prefix()»PerformTreeOperation(objectType, rootId, op)
{
    var opParam = ((op == 'moveNodeUp' || op == 'moveNodeDown') ? 'moveNode' : op);
    var pars = 'ot=' + objectType + '&op=' + opParam;

    if (op != 'addRootNode') {
        pars += '&root=' + rootId;

        if (!currentNodeId) {
            Zikula.UI.Alert('Invalid node id', Zikula.__('Error', 'module_«appName().formatForDB()»_js'));
        }
        pars += '&' + ((op == 'addChildNode') ? 'pid' : 'id') + '=' + currentNodeId;

        if (op == 'moveNodeUp') {
            pars += '&direction=up';
        }
        else if (op == 'moveNodeDown') {
            pars += '&direction=down';
        }
    }

    new Zikula.Ajax.Request(
        Zikula.Config.baseURL + 'ajax.php?module=«appName()»&func=handleTreeOperation',
        {
            method: 'post',
            parameters: pars,
            onComplete: function(req) {
                if (!req.isSuccess()) {
                    Zikula.UI.Alert(req.getMessage(), Zikula.__('Error', 'module_«appName().formatForDB()»_js'));
                    return;
                }
                var data = req.getData();
                /*if (data.message) {
                    Zikula.UI.Alert(data.message, Zikula.__('Success', 'module_«appName().formatForDB()»_js'));
                }*/
                window.location.reload();
            }
        }
    );
}

«ENDDEFINE»

«DEFINE TreeSave FOR Application-»
/**
 * Callback function for config.onSave. This function is called after each tree change.
 *
 * @param node - the node which is currently being moved
 * @param params - array with insertion params, which are [relativenode, dir];
 *     - "dir" is a string with value "after', "before" or "bottom" and defines
 *       whether the affected node is inserted after, before or as last child of "relativenode"
 * @param tree data - serialized to JSON tree data
 *
 * @return true on success, otherwise the change will be reverted
 */
function «prefix()»TreeSave(node, params, data) {
    // do not allow inserts on root level
    if (node.up('li') == undefined) {
        return false;
    }

    var nodeParts = node.id.split('node_');
    var rootId = nodeParts[0].replace('tree', '');
    var nodeId = nodeParts[1];
    var destId = params[1].id.replace('tree' + rootId + 'node_', '');

    var pars = {
        'op': 'moveNodeTo',
        'direction': params[0],
        'root': rootId,
        'id': nodeId,
        'destid': destId
    }

    var request = new Zikula.Ajax.Request(
        Zikula.Config.baseURL + 'ajax.php?module=«appName()»&func=handleTreeOperation',
        {
            method: 'post',
            parameters: pars,
            onComplete: function(req) {
                if (!req.isSuccess()) {
                    Zikula.UI.Alert(req.getMessage(), Zikula.__('Error', 'module_«appName().formatForDB()»_js'));
                    return Zikula.TreeSortable.categoriesTree.revertInsertion();
                }
                return true;
            }
        });
    return request.success();
}

«ENDDEFINE»
