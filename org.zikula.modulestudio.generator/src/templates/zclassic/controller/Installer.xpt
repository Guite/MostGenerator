«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for application installer«ENDREM»
«DEFINE Root FOR Application»
«FILE getAppSourceLibPath(appName()).msconcat("Base/Installer.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Installer base class
 */
class «appName()»_Base_Installer extends Zikula_AbstractInstaller
{
«EXPAND NormalInstall-»
}
«ENDFILE»

«FILE getAppSourceLibPath(appName()).msconcat("Installer.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Installer implementation class
 */
class «appName()»_Installer extends «appName()»_Base_Installer
{
    // feel free to extend the installer here
}
«ENDFILE»

«IF interactiveInstallation == true»
«FILE getAppSourceLibPath(appName()).msconcat("Controller/Base/InteractiveInstaller.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Interactive installer base class
 */
class «appName()»_Controller_Base_Interactiveinstaller extends Zikula_Controller_AbstractInteractiveInstaller
{
«EXPAND installer::Interactive::Root-»
}
«ENDFILE»
«FILE getAppSourceLibPath(appName()).msconcat("Controller/InteractiveInstaller.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Interactive installer implementation class
 */
class «appName()»_Controller_Interactiveinstaller extends «appName()»_Controller_Base_Interactiveinstaller
{
    // feel free to extend the installer here
}
«ENDFILE»
«EXPAND templates::zclassic::view::Installer::Root»
«ENDIF»
«ENDDEFINE»

«DEFINE NormalInstall FOR Application-»
«EXPAND FuncInit-»
«EXPAND FuncUpdate-»
«EXPAND FuncDelete-»
«EXPAND FuncListEntityClasses-»
«EXPAND installer::ExampleData::Root-»
«EXPAND installer::EventListener::Root-»
«ENDDEFINE»


«DEFINE FuncInit FOR Application-»
    /**
     * Install the «appName()» application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
«EXPAND CheckIfUploadFoldersAreWritable-»
        // create all tables from according entity definitions
        try {
            DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %s module.', array($this->getName())));
        }
«IF !models.variables.isEmpty-»

        // set up all our vars with initial values
«FOREACH models.variables.vars AS modvar-»
«IF interactiveInstallation == true-»
        $sessionValue = SessionUtil::getVar('«formatForCode(name + '_' + modvar.name)»');
        $this->setVar('«modvar.name.formatForCode()»', (($sessionValue <> false) ? «EXPAND installer::ModVars::ValFromSession FOR modvar» : «EXPAND installer::ModVars::ValSession2Mod FOR modvar»));
        SessionUtil::delVar(«formatForCode(name + '_' + modvar.name)»);
«ELSE-»
        $this->setVar('«modvar.name.formatForCode()»', «EXPAND installer::ModVars::ValDirect2Mod FOR modvar»);
«ENDIF-»
«ENDFOREACH-»
«ENDIF-»

        // create the default data for «appName()»
        $this->createDefaultData();
«IF hasCategorisableEntities()-»

        // add entries to category registry
        $rootcat = CategoryUtil::getCategoryByPath('/__SYSTEM__/Modules/Global');
«FOREACH getCategorisableEntities() AS entity-»
        CategoryRegistryUtil::insertEntry('«appName()»', '«entity.name.formatForCodeCapital()»', 'Main', $rootcat['id']);
«ENDFOREACH-»
«ENDIF-»

        // register persistent event handlers
        $this->registerPersistentEventHandlers();

        // register hook subscriber bundles
        HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());
«REM»TODO see #15
        // register hook provider bundles
        HookUtil::registerProviderBundles($this->version->getHookProviderBundles());
«ENDREM»

        // initialisation successful
        return true;
    }
«ENDDEFINE»

«DEFINE CheckIfUploadFoldersAreWritable FOR Application-»
«LET getUploadEntities() AS uploadEntities-»
«IF !uploadEntities.isEmpty-»
«FOREACH uploadEntities.getUploadFields() AS uploadField-»
        $basePath = «appName()»_Util_Controller::getFileBaseFolder('«uploadField.entity.name.formatForCode()»', '«uploadField.name.formatForCode()»');
        if (!is_dir($basePath)) {
            return LogUtil::registerError($this->__f('The upload folder "%s" does not exist. Please create it before installing this application.', array($basePath)));
        }
        if (!is_writable($basePath)) {
            return LogUtil::registerError($this->__f('The upload folder "%s" is not writable. Please change permissions accordingly before installing this application.', array($basePath)));
        }
«ENDFOREACH-»

«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE FuncUpdate FOR Application»
    /**
     * Upgrade the «appName()» application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldversion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldversion)
    {
    /*
        // Upgrade dependent on old version number
        switch ($oldversion) {
            case 1.0.0:
                // do something
                // ...
                // update the database schema
                try {
                    DoctrineHelper::updateSchema($this->entityManager, $this->listEntityClasses());
                } catch (Exception $e) {
                    if (System::isDevelopmentMode()) {
                        LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                    }
                    return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s module.', array($this->getName())));
                }
        }
    */

        // update successful
        return true;
    }
«ENDDEFINE»

«DEFINE FuncDelete FOR Application»
    /**
     * Uninstall «appName()».
     *
     * @return boolean True on success, false otherwise.
     */
    public function uninstall()
    {
        // delete stored object workflows
        $result = Zikula_Workflow_Util::deleteWorkflowsForModule($this->getName());
        if ($result === false) {
            return LogUtil::registerError($this->__f('An error was encountered while removing stored object workflows for the %s module.', array($this->getName())));
        }

        try {
            DoctrineHelper::dropSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s module.', array($this->getName())));
        }

        // unregister persistent event handlers
        EventUtil::unregisterPersistentModuleHandlers('«appName()»');

        // unregister hook subscriber bundles
        HookUtil::unregisterSubscriberBundles($this->version->getHookSubscriberBundles());
«REM»TODO see #15
        // unregister hook provider bundles
        HookUtil::unregisterProviderBundles($this->version->getHookProviderBundles());
«ENDREM»
«IF !models.variables.isEmpty-»

        // remove all module vars
        $this->delVars();
«ENDIF-»
«IF hasCategorisableEntities()-»

        // remove category registry entries
        ModUtil::dbInfoLoad('Categories');
        DBUtil::deleteWhere('categories_registry', "modname = '«appName()»'");
«ENDIF-»

        // deletion successful
        return true;
    }
«ENDDEFINE»

«DEFINE FuncListEntityClasses FOR Application»
    /**
     * Build array with all entity classes for «appName()».
     *
     * @return array list of class names.
     */
    protected function listEntityClasses()
    {
        $classNames = array();
«FOREACH models.entities AS entity-»
        $classNames[] = '«entity.implClassModelEntity()»';
«IF entity.loggable-»
        $classNames[] = '«entity.implClassModel('', 'logEntry')»';
«ENDIF-»
«IF entity.tree == EntityTreeType::CLOSURE-»
        $classNames[] = '«entity.implClassModel('', 'closure')»';
«ENDIF-»
«IF entity.hasTranslatableFields()-»
        $classNames[] = '«entity.implClassModel('', 'translation')»';
«ENDIF-»
«IF entity.metaData-»
        $classNames[] = '«entity.implClassModel('', 'metaData')»';
«ENDIF-»
«IF entity.attributable-»
        $classNames[] = '«entity.implClassModel('', 'attribute')»';
«ENDIF-»
«IF entity.categorisable-»
        $classNames[] = '«entity.implClassModel('', 'category')»';
«ENDIF-»
«ENDFOREACH-»

        return $classNames;
    }
«ENDDEFINE»

