«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE AdditionalAjaxFunctions(Application app) FOR Controller-»«ENDDEFINE»
«DEFINE AdditionalAjaxFunctions(Application app) FOR AjaxController-»
«LET app.getUserFields() AS userFields-»
«IF !userFields.isEmpty-»
«FOREACH userFields AS userField-»

    public function get«userField.entity.name.formatForCodeCapital()»«userField.name.formatForCodeCapital()»Users()
    {
        return $this->getCommonUsersList();
    }
«ENDFOREACH-»

    /**
     * Retrieve a general purpose list of users.
     */ 
    public function getCommonUsersList()
    {
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_EDIT)) {
            return true;
        }

        $fragment = '';
        if ($this->request->isPost() && $this->request->getPost()->has('fragment')) {
            $fragment = $this->request->getPost()->get('fragment', '');
        }
        elseif ($this->request->isGet() && $this->request->getGet()->has('fragment')) {
            $fragment = $this->request->getGet()->get('fragment', '');
        }

        ModUtil::dbInfoLoad('Users');
        $tables = DBUtil::getTables();

        $usersColumn = $tables['users_column'];

        $where = 'WHERE ' . $usersColumn['uname'] . ' REGEXP \'(' . DataUtil::formatForStore($fragment) . ')\'';
        $results = DBUtil::selectObjectArray('users', $where);

        $out = '<ul>';
        if (is_array($results) && count($results) > 0) {
            foreach($results as $result) {
                $out .= '<li>' . DataUtil::formatForDisplay($result['uname']) . '<input type="hidden" id="' . DataUtil::formatForDisplay($result['uname']) . '" value="' . $result['uid'] . '" /></li>';
            }
        }
        $out .= '</ul>';
        return new Zikula_Response_Ajax_Plain($out);
    }
«ENDIF-»
«ENDLET-»

«LET app.models.getJoinRelations() AS joinRelations-»
«IF !joinRelations.isEmpty-»

    /**
     * Searches for entities for auto completion usage.
     *
     * @param string $ot       Treated object type.
     * @param string $fragment The fragment of the entered item name.
     * @param string $exclude  Comma separated list with ids of other items (to be excluded from search).
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function getItemList()
    {
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_EDIT)) {
            return true;
        }

        $objectType = '«app.getLeadingEntity().name.formatForCode()»';
        if ($this->request->isPost() && $this->request->getPost()->has('ot')) {
            $objectType = $this->request->getPost()->filter('ot', '«app.getLeadingEntity().name.formatForCode()»', FILTER_SANITIZE_STRING);
        } elseif ($this->request->isGet() && $this->request->getGet()->has('ot')) {
            $objectType = $this->request->getGet()->filter('ot', '«app.getLeadingEntity().name.formatForCode()»', FILTER_SANITIZE_STRING);
        }
        if (!in_array($objectType, «app.appName()»_Util_Controller::getObjectTypes('controllerAction', array('controller' => '«name()»', 'action' => 'getItemList')))) {
            $objectType = «app.appName()»_Util_Controller::getDefaultObjectType('controllerAction', array('controller' => '«name()»', 'action' => 'getItemList'));
        }

        $repository = $this->entityManager->getRepository('«app.appName()»_Entity_' . ucfirst($objectType));
        $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));

        $fragment = '';
        $exclude = '';
        if ($this->request->isPost() && $this->request->getPost()->has('fragment')) {
            $fragment = $this->request->getPost()->get('fragment', '');
            $exclude = $this->request->getPost()->get('exclude', '');
        } elseif ($this->request->isGet() && $this->request->getGet()->has('fragment')) {
            $fragment = $this->request->getGet()->get('fragment', '');
            $exclude = $this->request->getGet()->get('exclude', '');
        }
        $exclude = ((!empty($exclude)) ? array($exclude) : array());

        // parameter for used sorting field
        $sort = $this->request->getGet()->get('sort', '');
«EXPAND templates::zclassic::controller::ControllerHelper::DefaultSorting-»
        $sortParam = $sort . ' asc';

        $currentPage = 1;
        $resultsPerPage = 20;

        // get objects from database
        list($entities, $objectCount) = $repository->selectSearch($fragment, $exclude, $sortParam, $currentPage, $resultsPerPage);

        $out = '<ul>';
        if ((is_array($entities) || is_object($entities)) && count($entities) > 0) {
            $titleFieldName = $repository->getTitleFieldName();
            $descriptionFieldName = $repository->getDescriptionFieldName();
            $previewFieldName = $repository->getPreviewFieldName();

«IF app.models.entities.exists(e|e.hasImageFields())-»
            $thumbWidth = 100;
            $thumbHeight = 80;
«ENDIF-»
            foreach ($entities as $item) {
                // class="informal" --> show in dropdown, but do not copy in the input field after selection
                $itemTitle = ((!empty($titleFieldName)) ? $item[$titleFieldName] : $this->__('Item'));
                $itemTitleStripped = str_replace('"', '', $itemTitle);
                $itemDescription = ((isset($item[$descriptionFieldName]) && !empty($item[$descriptionFieldName])) ? $item[$descriptionFieldName] : '');//$this->__('No description yet.'));
                $itemId = '';
                foreach ($idFields as $idField) {
                    $itemId .= ((!empty($itemId)) ? '_' : '') . $item[$idField];
                }
                $out .= '<li id="' . $itemId . '" title="' . $itemTitleStripped . '">';
                $out .= '<div class="itemtitle">' . $itemTitle . '</div>';
                if (!empty($itemDescription)) {
                    $out .= '<div class="itemdesc informal">' . $itemDescription . '</div>';
                }
«IF app.models.entities.exists(e|e.hasImageFields())-»
                // check for preview image
                if (!empty($previewFieldName) && !empty($item[$previewFieldName]) && isset($item[$previewFieldName . 'FullPath'])) {
                    $thumbImagePath = «app.appName()»_Util_Image::getThumb($item[$previewFieldName], $item[$previewFieldName . 'FullPath'], $thumbWidth, $thumbHeight);
                    $preview = '<img src="' . $thumbImagePath . '" width="' . $thumbWidth . '" height="' . $thumbHeight . '" alt="' . $itemTitleStripped . '" />';
                    $out .= '<div class="itempreview informal" id="itempreview' . $itemId . '">' . $preview . '</div>';
                }
«ENDIF-»
                $out .= '</li>';
            }
        }
        $out .= '</ul>';
        return new Zikula_Response_Ajax_Plain($out);
    }
«ENDIF-»
«ENDLET-»
«IF app.models.entities.exists(e|e.getUniqueDerivedFields().reject(e|e.primaryKey).size > 0)
|| (app.hasSluggable() && !app.models.entities.select(e|e.hasSluggableFields() && e.slugUnique).isEmpty)-»

    /**
     * Checks whether a field value is a duplicate or not.
     *
     * @param string $ot       Treated object type.
     * @param string $fragment The fragment of the entered item name.
     * @param string $exclude  Comma separated list with ids of other items (to be excluded from search).
     *
     * @throws Zikula_Exception If something fatal occurs.
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function checkForDuplicate()
    {
        $this->checkAjaxToken();
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_EDIT));

        $objectType = $this->request->getPost()->filter('ot', '«app.getLeadingEntity().name.formatForCode()»', FILTER_SANITIZE_STRING);
        if (!in_array($objectType, «app.appName()»_Util_Controller::getObjectTypes('controllerAction', array('controller' => '«name()»', 'action' => 'checkForDuplicate')))) {
            $objectType = «app.appName()»_Util_Controller::getDefaultObjectType('controllerAction', array('controller' => '«name()»', 'action' => 'checkForDuplicate'));
        }

        $fieldName = $this->request->getPost()->filter('fn', '', FILTER_SANITIZE_STRING);
        $value = $this->request->getPost()->get('v', '');

        if (empty($fieldName) || empty($value)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }

        // check if the given field is existing and unique
        $uniqueFields = array();
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«LET entity.getUniqueDerivedFields().reject(e|e.primaryKey) AS uniqueFields-»
«IF !uniqueFields.isEmpty || (entity.hasSluggableFields() && entity.slugUnique)-»
            case '«entity.name.formatForCode()»':
                    $uniqueFields = array(«FOREACH uniqueFields AS uniqueField SEPARATOR ', '»'«uniqueField.name.formatForCode()»'«ENDFOREACH»«IF entity.hasSluggableFields() && entity.slugUnique-»«IF !uniqueFields.isEmpty-», «ENDIF-»'slug'«ENDIF-»);
                    break;
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        }
        if (!count($uniqueFields) || !in_array($fieldName, $uniqueFields)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }

        $exclude = (int) $this->request->getPost()->filter('ex', 0, FILTER_VALIDATE_INT);

        $entityClass = '«app.appName()»_Entity_' . ucfirst($objectType);
        $object = new $entityClass(); 

        $result = false;
        switch ($objectType) {
«FOREACH app.models.entities AS entity-»
«LET entity.getUniqueDerivedFields().reject(e|e.primaryKey) AS uniqueFields-»
«IF !uniqueFields.isEmpty || (entity.hasSluggableFields() && entity.slugUnique)-»
            case '«entity.name.formatForCode()»':
                    switch ($fieldName) {
«FOREACH uniqueFields AS uniqueField-»
                        case '«uniqueField.name.formatForCode()»':
                                $result = $object->get_validator()->checkIf«uniqueField.name.formatForCodeCapital()»Exists($value, $exclude);
                                break;
«ENDFOREACH-»
«IF entity.hasSluggableFields() && entity.slugUnique-»
                        case 'slug':
                                $repository = $this->entityManager->getRepository($entityClass);
                                $entity = $repository->selectBySlug($slugTitle, false, $exclude);
                                $result = ($entity != null && isset($entity['slug']));
                                break;
«ENDIF-»
                    }
                    break;
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        }

        // return response
        return new Zikula_Response_Ajax(array('isDuplicate' => $result));
    }
«ENDIF-»
«IF app.hasBooleansWithAjaxToggle()-»

    /**
     * Changes a given flag (boolean field) by switching between true and false.
     *
     * @param string $ot    Treated object type.
     * @param string $field The field to be toggled.
     * @param int    $id    Identifier of treated entity.
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function toggleFlag()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name. '::', '::', ACCESS_EDIT));

        $objectType = $this->request->getPost()->filter('ot', '', FILTER_SANITIZE_STRING);
        $field = $this->request->getPost()->filter('field', '', FILTER_SANITIZE_STRING);
        $id = (int) $this->request->getPost()->filter('id', 0, FILTER_VALIDATE_INT);

        if ($id == 0
«LET app.getEntitiesHavingBooleansWithAjaxToggle() AS entities-»
            || («FOREACH entities AS entity SEPARATOR ' && '-»$objectType != '«entity.name.formatForCode()»'«ENDFOREACH-»)
«FOREACH entities AS entity-»
            || ($objectType == '«entity.name.formatForCode()»' && !in_array($field, array(«FOREACH entity.getBooleansWithAjaxToggle() AS field SEPARATOR ', '-»'«field.name.formatForCode()»'«ENDFOREACH-»)))
«ENDFOREACH-»
«ENDLET-»
        ) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }

        // select data from data source
        $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $id));
        if ($entity == null) {
            return new Zikula_Response_Ajax_NotFound($this->__('No such item.'));
        }

        // toggle the flag
        $entity[$field] = !$entity[$field];

        // save entity back to database
        $this->entityManager->flush();

        // return response
        return new Zikula_Response_Ajax(array('id' => $id,
                                              'state' => $entity[$field]));
    }
«ENDIF-»
«IF app.hasTrees()-»

    /**
     * Performs different operations on tree hierarchies.
     *
     * @param string $ot Treated object type.
     * @param string $op The operation which should be performed.
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function handleTreeOperation()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_EDIT));

«LET app.getTreeEntities() AS treeEntities-»
        // parameter specifying which type of objects we are treating
        $objectType = DataUtil::convertFromUTF8($this->request->getPost()->filter('ot', '«treeEntities.get(0).name.formatForCode()»', FILTER_SANITIZE_STRING));
        // ensure that we use only object types with tree extension enabled
        if (!in_array($objectType, array(«FOREACH treeEntities AS treeEntity SEPARATOR ", "»'«treeEntity.name.formatForCode()»'«ENDFOREACH»))) {
            $objectType = '«treeEntities.get(0).name.formatForCode()»';
        }
«ENDLET-»

        $returnValue = array(
            'data'    => array(),
            'message' => ''
        );

        $op = DataUtil::convertFromUTF8($this->request->getPost()->filter('op', '', FILTER_SANITIZE_STRING));
        if (!in_array($op, array('addRootNode', 'addChildNode', 'deleteNode', 'moveNode', 'moveNodeTo'))) {
            LogUtil::registerError($this->__('Error: invalid operation.'));
            throw new Zikula_Exception_Ajax_Fatal();
        }

        // Get id of treated node
        $id = 0;
        if (!in_array($op, array('addRootNode', 'addChildNode'))) {
            $id = (int) $this->request->getPost()->filter('id', 0, FILTER_VALIDATE_INT);
            if (!$id) {
                LogUtil::registerError($this->__('Error: invalid node.'));
                throw new Zikula_Exception_Ajax_Fatal();
            }
        }

        $entityClass = '«app.appName()»_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $rootId = 1;
        if (!in_array($op, array('addRootNode'))) {
            $rootId = (int) $this->request->getPost()->filter('root', 0, FILTER_VALIDATE_INT);
            if (!$rootId) {
                LogUtil::registerError($this->__('Error: invalid root node.'));
                throw new Zikula_Exception_Ajax_Fatal();
            }
        }

        // Select tree
        $tree = null;
        if (!in_array($op, array('addRootNode'))) {
            $tree = ModUtil::apiFunc($this->name, 'selection', 'getTree', array('ot' => $objectType, 'rootId' => $rootId));
        }

        // verification and recovery of tree
        $verificationResult = $repository->verify();
        if (is_array($verificationResult)) {
            foreach ($verificationResult as $errorMsg) {
                LogUtil::registerError($errorMsg);
            }
        }
        $repository->recover();
        $this->entityManager->clear(); // clear cached nodes

        $titleFieldName = $descriptionFieldName = '';

        switch ($objectType) {
«FOREACH app.getTreeEntities() AS entity-»
                case '«entity.name.formatForCode()»':
«LET entity.fields.typeSelect(StringField).reject(e|e.length < 20 || e.nospace || e.country || e.htmlcolour || e.language) AS textFields-»
                        $titleFieldName = '«IF !textFields.isEmpty-»«textFields.get(0).name.formatForCode()»«ENDIF-»';
«LET entity.fields.typeSelect(TextField).reject(e|e.leading || e.length < 50) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).name.formatForCode()»';
«ELSE-»
«LET entity.fields.typeSelect(StringField).reject(e|e.leading || e.length < 50 || e.nospace || e.country || e.htmlcolour || e.language) AS textFields-»
«IF !textFields.isEmpty-»
                        $descriptionFieldName = '«textFields.get(0).name.formatForCode()»';
«ENDIF-»
«ENDLET-»
«ENDIF-»
«ENDLET-»
«ENDLET-»
                        break;
«ENDFOREACH-»
        }

        switch ($op) {
            case 'addRootNode':
                            //$this->entityManager->transactional(function($entityManager) {
                                $object = new $entityClass();
                                $objectData = array();
                                if (!empty($titleFieldName)) {
                                    $objectData[$titleFieldName] = $this->__('New root node');
                                }
                                if (!empty($descriptionFieldName)) {
                                    $objectData[$descriptionFieldName] = $this->__('This is a new root node');
                                }
                                $object->merge($objectData);
«REM»«IF hasTranslatableFields()-»
                                $object->setLocale(ZLanguage::getLanguageCode());
«ENDIF-»«ENDREM»
                                // save new object to set the root id
                                $this->entityManager->persist($object);
                                $this->entityManager->flush();
                            //});
                            break;
            case 'addChildNode':
                            $parentId = (int) $this->request->getPost()->filter('pid', 0, FILTER_VALIDATE_INT);
                            if (!$parentId) {
                                LogUtil::registerError($this->__('Error: invalid parent node.'));
                                throw new Zikula_Exception_Ajax_Fatal();
                            }

                            //$this->entityManager->transactional(function($entityManager) {
                                $childEntity = new $entityClass();
                                $objectData = array();
                                $objectData[$titleFieldName] = $this->__('New child node');
                                if (!empty($descriptionFieldName)) {
                                    $objectData[$descriptionFieldName] = $this->__('This is a new child node');
                                }
                                $childEntity->merge($objectData);

                                //$childEntity->setParent($parentEntity);
                                $parentEntity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $parentId, 'useJoins' => false));
                                if ($parentEntity == null) {
                                    return new Zikula_Response_Ajax_NotFound($this->__('No such item.'));
                                }
                                $repository->persistAsLastChildOf($childEntity, $parentEntity);
                            //});
                            $this->entityManager->flush();
                            break;
            case 'deleteNode':
                            // remove node from tree and reparent all children
                            $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $id, 'useJoins' => false));
                            if ($entity == null) {
                                return new Zikula_Response_Ajax_NotFound($this->__('No such item.'));
                            }
                            $repository->removeFromTree($entity);
                            $this->entityManager->clear(); // clear cached nodes
                            break;
            case 'moveNode':
                            $moveDirection = $this->request->getPost()->filter('direction', '', FILTER_SANITIZE_STRING);
                            if (!in_array($moveDirection, array('up', 'down'))) {
                                LogUtil::registerError($this->__('Error: invalid direction.'));
                                throw new Zikula_Exception_Ajax_Fatal();
                            }

                            $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $id, 'useJoins' => false));
                            if ($entity == null) {
                                return new Zikula_Response_Ajax_NotFound($this->__('No such item.'));
                            }

                            if ($moveDirection == 'up') {
                                $repository->moveUp($entity, 1);
                            } else if ($moveDirection == 'down') {
                                $repository->moveDown($entity, 1);
                            }
                            $this->entityManager->flush();

                            break;
            case 'moveNodeTo':
                            $moveDirection = $this->request->getPost()->filter('direction', '', FILTER_SANITIZE_STRING);
                            if (!in_array($moveDirection, array('after', 'before', 'bottom'))) {
                                LogUtil::registerError($this->__('Error: invalid direction.'));
                                throw new Zikula_Exception_Ajax_Fatal();
                            }

                            $destId = (int) $this->request->getPost()->filter('destid', 0, FILTER_VALIDATE_INT);
                            if (!$destId) {
                                LogUtil::registerError($this->__('Error: invalid destination node.'));
                                throw new Zikula_Exception_Ajax_Fatal();
                            }

                            //$this->entityManager->transactional(function($entityManager) {
                                $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $id, 'useJoins' => false));
                                $destEntity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $destId, 'useJoins' => false));
                                if ($entity == null || $destEntity == null) {
                                    return new Zikula_Response_Ajax_NotFound($this->__('No such item.'));
                                }

                                if ($moveDirection == 'after') {
                                    $repository->persistAsNextSiblingOf($entity, $destEntity);
                                } elseif ($moveDirection == 'before') {
                                    $repository->persistAsPrevSiblingOf($entity, $destEntity);
                                } elseif ($moveDirection == 'bottom') {
                                    $repository->persistAsLastChildOf($entity, $destEntity);
                                }
                                $this->entityManager->flush();
                            //});
                            break;
        }

        $returnValue['message'] = $this->__('The operation was successful.');

        // Renew tree
        /** postponed, for now we do a page reload
        $returnValue['data'] = ModUtil::apiFunc($this->name, 'selection', 'getTree', array('ot' => $objectType, 'rootId' => $rootId));
        */

        return new Zikula_Response_Ajax($returnValue);
    }
«ENDIF-»
«ENDDEFINE»

