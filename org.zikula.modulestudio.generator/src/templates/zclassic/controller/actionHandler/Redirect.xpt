«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«REM»Redirect processing functions for edit form handlers«ENDREM»

«DEFINE GetRedirectCodes(Application app, String actionName) FOR Controller-»
    /**
     * Get list of allowed redirect codes.
     */
    protected function getRedirectCodes()
    {
        $codes = array();
«FOREACH app.controllers.controllers AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('main')-»
        // main page of «controllerName» area
        $codes[] = '«controllerName»';
«ENDIF-»
«IF someController.hasActions('view')-»
        // «controllerName» list of entities
        $codes[] = '«controllerName»View';
«ENDIF-»
«IF someController.hasActions('display')-»
        // «controllerName» display page of treated entity
        $codes[] = '«controllerName»Display';
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        return $codes;
    }
«ENDDEFINE»

«DEFINE GetRedirectCodes(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Get list of allowed redirect codes.
     */
    protected function getRedirectCodes()
    {
        $codes = parent::getRedirectCodes();
«FOREACH incoming.select(e|e.metaType == OneToOneRelationship || e.metaType == OneToManyRelationship) AS incomingRelation-»
«LET incomingRelation.source AS sourceEntity-»
«IF sourceEntity.name != this.name-»
«FOREACH app.controllers.controllers AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('view')-»
        // «controllerName» list of «sourceEntity.nameMultiple.formatForDisplay()»
        $codes[] = '«controllerName»View«sourceEntity.name.formatForCodeCapital()»';
«ENDIF-»
«IF someController.hasActions('display')-»
        // «controllerName» display page of treated «sourceEntity.name.formatForDisplay()»
        $codes[] = '«controllerName»Display«sourceEntity.name.formatForCodeCapital()»';
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
        return $codes;
    }
«ENDDEFINE»

«DEFINE GetDefaultReturnUrl(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Get the default redirect url. Required if no returnTo parameter has been supplied.
     * This method is called in handleCommand so we know which command has been performed.
     */
    protected function getDefaultReturnUrl($args, $obj)
    {
«IF controller.hasActions('view')-»
        // redirect to the list of «nameMultiple.formatForCode()»
        $viewArgs = array('ot' => $this->objectType);
«IF tree != EntityTreeType::NONE-»
        $viewArgs['tpl'] = 'tree';
«ENDIF-»
        $url = ModUtil::url($this->name, '«controller.name()»', 'view', $viewArgs);
«ELSEIF controller.hasActions('main')-»
        // redirect to the main page
        $url = ModUtil::url($this->name, '«controller.name()»', 'main');
«ELSE-»
        $url = System::getHomepageUrl();
«ENDIF-»

«IF controller.hasActions('display')-»
«IF tree != EntityTreeType::NONE-»
    /*
«ENDIF-»
        if ($args['commandName'] != 'delete' && !($this->mode == 'create' && $args['commandName'] == 'cancel')) {
            // redirect to the detail page of treated «name.formatForCode()»
            $url = ModUtil::url($this->name, '«controller.name()»', «modUrlDisplay('this->idValues', false)»);
        }
«IF tree != EntityTreeType::NONE-»
    */
«ENDIF-»
«ENDIF-»
        return $url;
    }
«ENDDEFINE»

«DEFINE GetRedirectUrl(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Get url to redirect to.
     */
    protected function getRedirectUrl($args, $obj)
    {
        if ($this->inlineUsage == true) {
            $urlArgs = array('idp' => $this->idPrefix,
                             'com' => $args['commandName']);
            $urlArgs = $this->addIdentifiersToUrlArgs($urlArgs);
            // inline usage, return to special function for closing the Zikula.UI.Window instance
            return ModUtil::url($this->name, '«controller.name()»', 'handleInlineRedirect', $urlArgs);
        }

        if ($this->repeatCreateAction) {
            return $this->repeatReturnUrl;
        }

        // normal usage, compute return url from given redirect code
        if (!in_array($this->returnTo, $this->getRedirectCodes())) {
            // invalid return code, so return the default url
            return $this->getDefaultReturnUrl($args, $obj);
        }

        // parse given redirect code and return corresponding url
        switch ($this->returnTo) {
«FOREACH app.controllers.controllers.reject(e|e.metaType == AjaxController) AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('main')-»
            case '«controllerName»':
                                    return ModUtil::url($this->name, '«controllerName»', 'main');
«ENDIF-»
«IF someController.hasActions('view')-»
            case '«controllerName»View':
                                    return ModUtil::url($this->name, '«controllerName»', 'view',
                                                             array('ot' => $this->objectType));
«ENDIF-»
«IF someController.hasActions('display')-»
            case '«controllerName»Display':
                                    if ($args['commandName'] != 'delete' && !($this->mode == 'create' && $args['commandName'] == 'cancel')) {
                                        return ModUtil::url($this->name, '«controllerName»', $this->addIdentifiersToUrlArgs());
                                    }
                                    return $this->getDefaultReturnUrl($args, $obj);
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«FOREACH incoming.typeSelect(JoinRelationship).select(e|e.metaType == OneToOneRelationship || e.metaType == OneToManyRelationship) AS incomingRelation-»
«LET incomingRelation.source AS sourceEntity-»
«IF sourceEntity.name != this.name-»
«FOREACH app.controllers.controllers.reject(e|e.metaType == AjaxController) AS someController-»
«LET someController.name() AS controllerName-»
«IF someController.hasActions('view')-»
            case '«controllerName»View«sourceEntity.name.formatForCodeCapital()»':
                                    return ModUtil::url($this->name, '«controllerName»', 'view',
                                                             array('ot' => '«sourceEntity.name.formatForCode()»'));
«ENDIF-»
«IF someController.hasActions('display')-»
            case '«controllerName»Display«sourceEntity.name.formatForCodeCapital()»':
                                    if (!empty($this->«incomingRelation.getRelationAliasName(false)»)) {
                                        return ModUtil::url($this->name, '«controllerName»', 'display', array('ot' => '«sourceEntity.name.formatForCode()»', 'id' => $this->«incomingRelation.getRelationAliasName(false)»));
                                    }
                                    return $this->getDefaultReturnUrl($args, $obj);
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
            default:
                                    return $this->getDefaultReturnUrl($args, $obj);
        }
    }
«ENDDEFINE»
