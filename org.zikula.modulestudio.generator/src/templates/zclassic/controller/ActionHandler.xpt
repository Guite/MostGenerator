«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Form handler classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH getEditActions()-»
«EXPAND templates::zclassic::controller::actionHandler::Config::Root-»
«ENDDEFINE»

«DEFINE Root(Application app) FOR Action-»
    «EXPAND Root(app, controller, 'edit') FOREACH app.models.entities-»
«ENDDEFINE»


«DEFINE FormCreate(String appName, Controller controller, String actionName) FOR Action-»
    // Create new Form reference
    $view = FormUtil::newForm('«appName.formatForCode()»', $this);

«LET formatForCode(appName.msconcat("_Form_Handler_").msconcat(prepClassPart(controller.name)).msconcat(prepClassPart(actionName))) AS controllerPraefix-»

    // Execute form using supplied template and page event handler
    return $view->execute('«controllerPraefix».tpl', new «controllerPraefix»());
«ENDLET-»
«ENDDEFINE»


«REM»Entry point for Form handler classes«ENDREM»
«DEFINE Root(Application app, Controller controller, String actionName) FOR Entity-»
«info("Generating \"" + controller.name + "\" form handler classes for \"" + name + "_" + actionName + "\"") -> ""-»
«FILE getAppSourcePath(app.appName()).msconcat(baseClassFormHandler(controller, name, actionName).asFile())-»
«EXPAND FileHelper::phpFileHeader(app)-»
«EXPAND FormHandlerBaseImpl(app, controller, actionName)-»
«ENDFILE»
«FILE getAppSourcePath(app.appName()).msconcat(implClassFormHandler(controller, name, actionName).asFile())-»
«EXPAND FileHelper::phpFileHeader(app)-»
«EXPAND FormHandlerImpl(app, controller, actionName)-»
«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE FormHandlerBaseImpl(Application app, Controller controller, String actionName) FOR Entity-»
«IF hasOptimisticLock() || hasPessimisticReadLock() || hasPessimisticWriteLock()-»
use Doctrine\DBAL\LockMode;
«IF hasOptimisticLock()-»
use Doctrine\ORM\OptimisticLockException;
«ENDIF-»

«ENDIF-»
/**
 * This handler class handles the page events of the Form called by the «formatForCode(app.appName().msconcat("_").msconcat(controller.name()).msconcat("_").msconcat(actionName))»() function.
 * It aims on the «name.formatForDisplay()» object type.
 *
 * Member variables in a form handler object are persisted accross different page requests. This means
 * a member variable $this->X can be set on one request and on the next request it will still contain
 * the same value.
 *
 * A form handler will be notified of various events that happens during it's life-cycle.
 * When a specific event occurs then the corresponding event handler (class method) will be executed. Handlers
 * are named exactly like their events - this is how the framework knows which methods to call.
 *
 * The list of events is:
 *
 * - <b>initialize</b>: this event fires before any of the events for the plugins and can be used to setup
 *   the form handler. The event handler typically takes care of reading URL variables, access control
 *   and reading of data from the database.
 *
 * - <b>handleCommand</b>: this event is fired by various plugins on the page. Typically it is done by the
 *   Zikula_Form_Plugin_Button plugin to signal that the user activated a button.
 */
class «baseClassFormHandler(controller, name, actionName)» extends Zikula_Form_AbstractHandler
{
    /**
     * Persistent member vars
     */

    /**
     * @var string Name of treated object type.
     */
    protected $objectType;

    /**
     * @var «implClassModelEntity()» Reference to treated «name.formatForDisplay()» instance.
     */
    protected $«name.formatForCode()»Ref = false;

    /**
     * @var array List of identifiers of treated «name.formatForDisplay()».
     */
    protected $idValues = array();
«EXPAND actionHandler::Relations::IncomingMemberVar FOREACH incoming.typeSelect(JoinRelationship).select(e|!e.bidirectional)-»

    /**
     * @var string One of "create" or "edit".
     */
    protected $mode;

    /**
     * @var string Code defining the redirect goal after command handling.
     */
    protected $returnTo = null;

    /**
     * @var string Url of current form with all parameters for multiple creations.
     */
    protected $repeatReturnUrl = null;

    /**
     * @var string Whether this form is being used inline within a window.
     */
    protected $inlineUsage = false;

    /**
     * @var string Full prefix for related items.
     */
    protected $idPrefix = '';

    /**
     * Post construction hook.
     *
     * @return mixed
     */
    public function setup()
    {
    }

«EXPAND initialize(app, controller, actionName)-»

    /**
     * Method stub for own additions in subclasses.
     */
    protected function initializeAdditions()
    {
    }

    /**
     * Pre-initialise hook.
     *
     * @return void
     */
    public function preInitialize()
    {
    }

    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
    }

«EXPAND actionHandler::Redirect::GetRedirectCodes(app, controller, actionName)-»

«EXPAND actionHandler::Redirect::GetDefaultReturnUrl(app, controller, actionName)-»

«EXPAND handleCommand(app, controller, actionName)-»

«EXPAND actionHandler::Redirect::GetRedirectUrl(app, controller, actionName)-»

«EXPAND actionHandler::Relations::RetrieveRelatedObjects(app, controller)-»

«EXPAND actionHandler::Relations::UpdateRelationLinks-»
«EXPAND actionHandler::Uploads::Root-»
}
«ENDDEFINE»


«REM»concrete implementation stub«ENDREM»
«DEFINE FormHandlerImpl(Application app, Controller controller, String actionName) FOR Entity-»
/**
 * This handler class handles the page events of the Form called by the «formatForCode(app.appName().msconcat("_").msconcat(controller.name()).msconcat("_").msconcat(actionName))»() function.
 * It aims on the «name.formatForDisplay()» object type.
 */
class «implClassFormHandler(controller, name, actionName)» extends «baseClassFormHandler(controller, name, actionName)»
{
    // feel free to extend the base handler class here
}
«ENDDEFINE»

«DEFINE initialize(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize(Zikula_Form_View $view)
    {
        $this->inlineUsage = ((UserUtil::getTheme() == 'Printer') ? true : false);
        $this->idPrefix = $this->request->getGet()->filter('idp', '', FILTER_SANITIZE_STRING);

        // initialise redirect goal
        $this->returnTo = $this->request->getGet()->filter('returnTo', null, FILTER_SANITIZE_STRING);
        // store current uri for repeated creations
        $this->repeatReturnUrl = System::getCurrentURI();

        $this->objectType = '«name.formatForCode()»';

        $entityClass = '«app.appName()»_Entity_' . ucfirst($this->objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass();
        $idFields = $objectTemp->get_idFields();

        // retrieve identifier of the object we wish to view
        $this->idValues = «app.appName()»_Util_Controller::retrieveIdentifier($this->request, array(), $this->objectType, $idFields);
        $hasIdentifier = «app.appName()»_Util_Controller::isValidIdentifier($this->idValues);

        $entity = null;
        $this->mode = ($hasIdentifier) ? 'edit' : 'create';

        if ($this->mode == 'edit') {
            if (!SecurityUtil::checkPermission('«app.appName()»:«name.formatForCodeCapital()»:', '::', ACCESS_EDIT)) {
                // set an error message and return false
                return LogUtil::registerPermissionError();
            }

            $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $this->objectType, 'id' => $this->idValues));
            if ($entity == null) {
                return LogUtil::registerError($this->__('No such item.'));
            }

«IF hasPageLockSupport()-»

            // try to guarantee that only one person at a time can be editing this «name.formatForDisplay()»
            $itemID = '';
            foreach ($idFields as $idField) {
                if (!empty($itemID)) {
                    $itemID .= '_';
                }
                $itemID .= $this->idValues[$idField];
            }
            $returnUrl = ModUtil::url('«app.appName()»', '«controller.name()»', «modUrlDisplay('this->idValues', false)»);
            ModUtil::apiFunc('PageLock', 'user', 'pageLock',
                                 array('lockName' => '«app.appName()»«name.formatForCodeCapital()»' . $itemID,
                                       'returnUrl' => $returnUrl));
«ENDIF-»
«IF hasOptimisticLock()-»

            SessionUtil::setVar('«app.appName()»EntityVersion', $entity->get«getVersionField().name.formatForCodeCapital()»());
«ENDIF-»
        }
        else {
            if (!SecurityUtil::checkPermission('«app.appName()»:«name.formatForCodeCapital()»:', '::', ACCESS_ADD)) {
                return LogUtil::registerPermissionError();
            }

            $hasTemplateId = false;
            $templateId = $this->request->getGet()->get('astemplate', '');
            if (!empty($templateId)) {
                $templateIdValueParts = explode('_', $templateId);
                $hasTemplateId = (count($templateIdValueParts) == count($idFields));
            }
            if ($hasTemplateId === true) {
                $templateIdValues = array();
                $i = 0;
                foreach ($idFields as $idField) {
                    $templateIdValues[$idField] = $templateIdValueParts[$i];
                    $i++;
                }
                // reuse existing «name.formatForDisplay()»
                $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $this->objectType, 'id' => $templateIdValues));
                if ($entity == null) {
                    return LogUtil::registerError($this->__('No such item.'));
                }
                foreach ($idFields as $idField) {
                     $entity[$idField] = null;
                }
            }
            else {
                $entity = new $entityClass();

«EXPAND actionHandler::Relations::InitRelatedObjectDefault(true) FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)-»
«EXPAND actionHandler::Relations::InitRelatedObjectDefault(false) FOREACH outgoing.typeSelect(JoinRelationship)-»
            }
        }
«REM»obsolete«FOREACH fields.typeSelect(AbstractDateField) AS dateField-»

        if ($entity['«dateField.name.formatForCode()»'] == '1900-01-01 00:00:00') {
            $entity['«dateField.name.formatForCode()»'] = null;
        }
«ENDFOREACH-»«ENDREM»«''-»

        $entityData = $entity->toArray();
«IF hasTranslatableFields()-»
        // retrieve translated fields
        $translations = «app.appName()»_Util_Translatable::prepareEntityForEdit($this->objectType, $entity);
«ENDIF-»
«EXPAND actionHandler::Relations::IncomingInitialisation-»

        // assign data to template as array for easy translatable support
        $this->view->assign('«name.formatForDB()»', $entityData)
«IF categorisable-»
                   // assign also the actual object for categories listener
                   ->assign('«name.formatForDB()»Obj', $entity)
«ENDIF-»
                   ->assign('mode', $this->mode)
                   ->assign('inlineUsage', $this->inlineUsage);

        // save entity reference for reuse in handleCommand method
        $this->«name.formatForCode()»Ref = $entity;

«IF hasTranslatableFields()-»
        // assign translations
        foreach ($translations as $locale => $translationData) {
            $this->view->assign('«name.formatForDB()»' . $locale, $translationData);
        }
        // assign list of installed languages for translatable extension
        $this->view->assign('supportedLocales', ZLanguage::getInstalledLanguages());

«ENDIF-»
«IF categorisable-»
        // load and assign registered categories
        $categories = CategoryRegistryUtil::getRegisteredModuleCategories('«app.appName()»', '«name.formatForCodeCapital()»', '«getPrimaryKeyFields().get(0).name.formatForCode()»');
        $this->view->assign('registries', $categories);

«ENDIF-»
«IF attributable-»
        $objectData = array();«REM»$entity->toArray(); not required probably«ENDREM»«''-»

        // overwrite attributes array entry with a form compatible format
        $attributes = array();
        foreach (array('field1', 'field2', 'field3') as $fieldName) {
            $attributes[$fieldName] = $entity->getAttributes()->get($fieldName)? $entity->getAttributes()->get($fieldName)->getValue() : '';
        }
        $objectData['attributes'] = $attributes;

        $this->view->assign($objectData);

«ENDIF-»
«IF metaData-»
        $this->view->assign('meta', $entity->getMetadata() != null? $entity->getMetadata()->toArray() : array());

«ENDIF-»
        $utilArgs = array('controller' => '«controller.name()»', 'action' => '«actionName.formatForCode().toFirstLower()»', 'mode' => $this->mode);
        $this->view->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
        $this->initializeAdditions();

        // everything okay, no initialization errors occured
        return true;
    }
«ENDDEFINE»


«DEFINE handleCommand(Application app, Controller controller, String actionName) FOR Entity-»
    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Zikula_Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Zikula_Form_Plugin_Button
     * @see Zikula_Form_Plugin_ImageButton
     */
    public function handleCommand(Zikula_Form_View $view, &$args)
    {
        if ($args['commandName'] == 'delete') {
            if (!SecurityUtil::checkPermission('«app.appName()»:«name.formatForCodeCapital()»:', '::', ACCESS_DELETE)) {
                return LogUtil::registerPermissionError();
            }
        }

«EXPAND actionHandler::Relations::ReassignRelatedObjects-»

        if (!in_array($args['commandName'], array('delete', 'cancel'))) {
            // do forms validation including checking all validators on the page to validate their input
            if (!$this->view->isValid()) {
                return false;
            }
        }

        $this->objectType = '«name.formatForCode()»';

        $entityClass = '«app.appName()»_Entity_' . ucfirst($this->objectType);
        $repository = $this->entityManager->getRepository($entityClass);
«IF hasTranslatableFields()-»
        $transRepository = $this->entityManager->getRepository($entityClass . 'Translation');
«ENDIF-»

        // get treated entity reference from persisted member var
        $«name.formatForCode()» = $this->«name.formatForCode()»Ref;

«EXPAND FetchInputData(name.formatForCode())-»

        if (in_array($args['commandName'], array('create', 'update'))) {
            // event handling if user clicks on create or update

            // Let any hooks perform additional validation actions
            $hook = new Zikula_ValidationHook('«app.name.formatForDB()».ui_hooks.«nameMultiple.formatForDB()».validate_edit', new Zikula_Hook_ValidationProviders());
            $validators = $this->notifyHooks($hook)->getValidators();
            if ($validators->hasErrors()) {
                return false;
            }

«IF hasTranslatableFields()-»
            // add translated values
            //$«name.formatForCode()»->setLocale(ZLanguage::getLanguageCode());
            foreach ($translations as $translation) {
                foreach ($translation['fields'] as $fieldName => $value) {
                    $transRepository->translate($«name.formatForCode()», $fieldName, $translation['locale'], $value);
                }
            }

«ENDIF-»
            // save «name.formatForDisplay()»
            $successMessage = '';
«IF hasOptimisticLock()-»
            $expectedVersion = SessionUtil::getVar('«app.appName()»EntityVersion', 1);
        try {
            // assert version
            $entityManager->lock($«name.formatForCode()», LockMode::OPTIMISTIC, $expectedVersion);
«ENDIF-»
            $this->updateRelationLinks($«name.formatForCode()»);
            //$this->entityManager->transactional(function($entityManager) {
«IF hasPessimisticWriteLock()-»
                $this->entityManager->lock($«name.formatForCode()», LockMode::«lockType.asConstant()»);
«ENDIF-»
                $this->entityManager->persist($«name.formatForCode()»);
                $this->entityManager->flush();
            //});
«IF hasOptimisticLock()-»
        } catch(OptimisticLockException $e) {
            echo $this->__('Sorry, but someone else has already changed this «name.formatForCode()». Please apply the changes again!');
        }
«ENDIF-»
«LET incoming.typeSelect(JoinRelationship).select(e|!e.bidirectional) AS uniOwningAssociations-»
«IF !uniOwningAssociations.isEmpty-»

            // save incoming relationship from parent entity
            if ($args['commandName'] == 'create') {
«FOREACH uniOwningAssociations AS uniOwningAssociation-»
                if (!empty($this->«uniOwningAssociation.getRelationAliasName(false)»)) {
                    $relObj = ModUtil::apiFunc('«app.appName()»', 'selection', 'getEntity', array('ot' => '«uniOwningAssociation.source.name.formatForCode()»', 'id' => $this->«uniOwningAssociation.getRelationAliasName(false)»));
                    if ($relObj != null) {
                        $relObj->add«uniOwningAssociation.getRelationAliasName(true).toFirstUpper()»($«name.formatForCode()»);
                    }
                }
«ENDFOREACH-»
                $this->entityManager->flush();
            }
«ENDIF-»
«ENDLET-»

            if ($args['commandName'] == 'create') {
                $successMessage = $this->__('Done! «name.formatForDisplayCapital()» created.');
            } else if ($args['commandName'] == 'update') {
                $successMessage = $this->__('Done! «name.formatForDisplayCapital()» updated.');
            }

            if ($args['commandName'] == 'create') {
                // store new identifier
«FOREACH getPrimaryKeyFields() AS pkField-»
                $this->idValues['«pkField.name.formatForCode()»'] = $«name.formatForCode()»->get«pkField.name.formatForCodeCapital()»();
                // check if the insert has worked, might become obsolete due to exception usage
                if (!$this->idValues['«pkField.name.formatForCode()»']) {
                    return LogUtil::registerError($this->__('Error! Creation attempt failed.'));
                }
«ENDFOREACH-»
            } else if ($args['commandName'] == 'update') {
«REM»                $updateResult = true/false;
                // check if the update has worked, might become obsolete due to exception usage
                if ($updateResult === false) {
                    return LogUtil::registerError($this->__('Error! Update attempt failed.'));
                }«ENDREM»«''-»
            }

            LogUtil::registerStatus($successMessage);

            // Let any hooks know that we have created or updated an item
            $url = new Zikula_ModUrl('«app.appName()»', '«controller.name()»', 'display', ZLanguage::getLanguageCode(), array('ot' => $this->objectType,«FOREACH getPrimaryKeyFields() AS pkField SEPARATOR ', '-» '«pkField.name.formatForCode()»' => $this->idValues['«pkField.name.formatForCode()»']«ENDFOREACH-»));
            $hook = new Zikula_ProcessHook('«app.name.formatForDB()».ui_hooks.«nameMultiple.formatForDB()».process_edit', «FOREACH getPrimaryKeyFields() AS pkField SEPARATOR ' . "_" . '-»$this->idValues['«pkField.name.formatForCode()»']«ENDFOREACH-», $url);
            $this->notifyHooks($hook);
        } else if ($args['commandName'] == 'delete') {
            // event handling if user clicks on delete

            // Let any hooks perform additional validation actions
            $hook = new Zikula_ValidationHook('«app.name.formatForDB()».ui_hooks.«nameMultiple.formatForDB()».validate_delete', new Zikula_Hook_ValidationProviders());
            $validators = $this->notifyHooks($hook)->getValidators();
            if ($validators->hasErrors()) {
                return false;
            }

            // delete «name.formatForDisplay()»
            $this->entityManager->remove($«name.formatForCode()»);
            $this->entityManager->flush();
«REM»            if ($«name.formatForCode()»->delete() === false) {
                return LogUtil::registerError($this->__('Error! Deletion attempt failed.'));
            }«ENDREM»

            LogUtil::registerStatus($this->__('Done! «name.formatForDisplayCapital()» deleted.'));

            // Let any hooks know that we have deleted an item
            $hook = new Zikula_ProcessHook('«app.name.formatForDB()».ui_hooks.«nameMultiple.formatForDB()».process_delete', «FOREACH getPrimaryKeyFields() AS pkField SEPARATOR ' . "_" . '-»$this->idValues['«pkField.name.formatForCode()»']«ENDFOREACH-»);
            $this->notifyHooks($hook);
        } else if ($args['commandName'] == 'cancel') {
            // event handling if user clicks on cancel
        }

        if ($args['commandName'] != 'cancel') {
            // clear view cache to reflect our changes
            $this->view->clear_cache();
        }
«IF hasPageLockSupport()-»

        if ($this->mode == 'edit') {
            ModUtil::apiFunc('PageLock', 'user', 'releaseLock',
                             array('lockName' => '«app.appName()»«name.formatForCodeCapital()»'«FOREACH getPrimaryKeyFields() AS pkField SEPARATOR " . '_'"-» . $this->idValues['«pkField.name.formatForCode()»']«ENDFOREACH-»));
        }
«ENDIF-»
        return $this->view->redirect($this->getRedirectUrl($args, $«name.formatForCode()», $repeatCreateAction));

        // We should in principle not end here at all, since the above command handlers should
        // match all possible commands, but we return "ok" (true) for all cases.
        return true;
    }
«ENDDEFINE»



«DEFINE FetchInputData(String obj) FOR Entity-»
        // fetch posted data input values as an associative array
        $formData = $this->view->getValues();
        // we want the array with our field values
        $«obj»Data = $formData['«name.formatForDB()»'];
        unset($formData['«name.formatForDB()»']);

«EXPAND actionHandler::Relations::FetchRelationValue(obj, true) FOREACH incoming.typeSelect(JoinRelationship).reject(e|e.metaType == ManyToManyRelationship)-»
«LET getUserFields() AS userFields-»
«LET getUploadFields() AS uploadFields-»
«IF !(userFields.isEmpty && uploadFields.isEmpty) || (hasSluggableFields() && slugUpdatable)-»

        if (in_array($args['commandName'], array('create', 'update'))) {
«FOREACH userFields AS userField-»
            $«obj»Data['«userField.name.formatForCode()»'] = (int) $this->request->getPost()->filter('«userField.name.formatForCode()»', 0, FILTER_VALIDATE_INT);
            unset($«obj»Data['«userField.name.formatForCode()»Selector']);
«ENDFOREACH-»
«IF !uploadFields.isEmpty-»
            $«obj»Data = $this->handleUploads($«obj»Data, $«name.formatForCode()»);
            if ($«obj»Data == false) {
                return false;
            }
«ENDIF-»
«REM»no slug input element yet, see https://github.com/l3pp4rd/DoctrineExtensions/issues/140
«IF hasSluggableFields() && slugUpdatable-»
            $«obj»Data['slug'] = «container.application.appName()»_Util_Controller::formatPermalink($«obj»Data['slug']);
«ENDIF-»
«ENDREM»«''-»
        }
«ENDIF-»
«ENDLET-»
«ENDLET-»

        $repeatCreateAction = false;
        if (isset($«obj»Data['repeatcreation'])) {
            if ($args['commandName'] == 'create') {
                $repeatCreateAction = $«obj»Data['repeatcreation'];
            }
            unset($«obj»Data['repeatcreation']);
        }
«IF hasTranslatableFields()-»

        // process translated fields
        $translations = «container.application.appName()»_Util_Translatable::processEntityAfterEdit($this->objectType, $«obj», $«obj»Data, $formData);
«ENDIF-»
«IF attributable-»

        // merge attributes
        if (isset($«obj»Data['attributes'])) {
            foreach($«obj»Data['attributes'] as $name => $value) {
                $«obj»->setAttribute($name, $value);
            }
«REM»
            $«obj»->setAttribute('url', 'http://www.example.com');
            $«obj»->setAttribute('url', null); // remove
«ENDREM»«''-»
            unset($«obj»Data['attributes']);
        }
«ENDIF-»
«IF metaData-»

        // merge metadata
        $metaData = $«obj»->getMetadata();

        if (is_null($metaData)) {
            $metaData = new «implClassModel('', 'metaData')»($«obj»);
            $«obj»->setMetadata($metaData);
        }
        $metaData->merge($«obj»Data['meta']);
«REM»
        $metaData->setKeywords('a,b,c');
«ENDREM»«''-»
        unset($«obj»Data['meta']);
«ENDIF-»

        // assign fetched data
        $«obj»->merge($«obj»Data);
«ENDDEFINE»



