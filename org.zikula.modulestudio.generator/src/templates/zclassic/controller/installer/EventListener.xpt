«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for event listeners registered by the installer«ENDREM»
«DEFINE Root FOR Application»
    /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
«LET appName() AS appName-»
    protected function registerPersistentEventHandlers()
    {
        // core
«LET appName.msconcat('_Listener_Core') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'api.method_not_found', array('«callableClass»', 'apiMethodNotFound'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.preinit', array('«callableClass»', 'preInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.postinit', array('«callableClass»', 'postInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'controller.method_not_found', array('«callableClass»', 'controllerMethodNotFound'));
«ENDLET-»

        // installer
«LET appName.msconcat('_Listener_Installer') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.installed', array('«callableClass»', 'moduleInstalled'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.upgraded', array('«callableClass»', 'moduleUpgraded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.uninstalled', array('«callableClass»', 'moduleUninstalled'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.subscriberarea.uninstalled', array('«callableClass»', 'subscriberAreaUninstalled'));
«ENDLET-»

        // modules
«LET appName.msconcat('_Listener_ModuleDispatch') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.postloadgeneric', array('«callableClass»', 'postLoadGeneric'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.preexecute', array('«callableClass»', 'preExecute'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.postexecute', array('«callableClass»', 'postExecute'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.custom_classname', array('«callableClass»', 'customClassname'));
«ENDLET-»

        // mailer
«LET appName.msconcat('_Listener_Mailer') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.mailer.api.sendmessage', array('«callableClass»', 'sendMessage'));
«ENDLET-»

        // page
«LET appName.msconcat('_Listener_Page') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'pageutil.addvar_filter', array('«callableClass»', 'pageutilAddvarFilter'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'system.outputfilter', array('«callableClass»', 'systemOutputfilter'));
«ENDLET-»

        // errors
«LET appName.msconcat('_Listener_Errors') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'setup.errorreporting', array('«callableClass»', 'setupErrorReporting'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'systemerror', array('«callableClass»', 'systemError'));
«ENDLET-»

        // theme
«LET appName.msconcat('_Listener_Theme') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.preinit', array('«callableClass»', 'preInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.load_config', array('«callableClass»', 'loadConfig'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.prefetch', array('«callableClass»', 'preFetch'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.postfetch', array('«callableClass»', 'postFetch'));
«ENDLET-»

        // view
«LET appName.msconcat('_Listener_View') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'view.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'view.postfetch', array('«callableClass»', 'postFetch'));
«ENDLET-»

        // user login
«LET appName.msconcat('_Listener_UserLogin') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.started', array('«callableClass»', 'started'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.veto', array('«callableClass»', 'veto'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.succeeded', array('«callableClass»', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.failed', array('«callableClass»', 'failed'));
«ENDLET-»

        // user logout
«LET appName.msconcat('_Listener_UserLogout') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.logout.succeeded', array('«callableClass»', 'succeeded'));
«ENDLET-»

        // user
«LET appName.msconcat('_Listener_User') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.gettheme', array('«callableClass»', 'getTheme'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.delete', array('«callableClass»', 'delete'));
«ENDLET-»

        // registration
«LET appName.msconcat('_Listener_UserRegistration') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.started', array('«callableClass»', 'started'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.succeeded', array('«callableClass»', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.failed', array('«callableClass»', 'failed'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.delete', array('«callableClass»', 'delete'));
«ENDLET-»

        // users module
«LET appName.msconcat('_Listener_Users') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.config.updated', array('«callableClass»', 'configUpdated'));
«ENDLET-»

        // group
«LET appName.msconcat('_Listener_Group') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.delete', array('«callableClass»', 'delete'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.adduser', array('«callableClass»', 'addUser'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.removeuser', array('«callableClass»', 'removeUser'));
«ENDLET-»

        // special purposes and 3rd party api support
«LET appName.msconcat('_Listener_ThirdParty') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'get.pending_content', array('«callableClass»', 'pendingContentListener'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.content.gettypes', array('«callableClass»', 'contentGetTypes'));
«ENDLET-»
«ENDLET-»
    }
«ENDDEFINE»
