«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»start point for the Util class creation«ENDREM»
«DEFINE Root FOR Application»
    «FILE getAppSourceLibPath(appName()).msconcat("Util/Base/Translatable.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND TranslatableFunctionsBase-»«ENDFILE»
    «FILE getAppSourceLibPath(appName()).msconcat("Util/Translatable.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND TranslatableFunctionsImpl-»«ENDFILE»
«ENDDEFINE»

«DEFINE TranslatableFunctionsBase FOR Application-»
/**
 * Utility base class for translatable helper methods.
 */
class «appName()»_Util_Base_Translatable extends Zikula_AbstractBase
{
    /**
     * Return list of translatable fields per entity.
     * These are required to be determined to recognize
     * that they have to be selected from according translation tables.
     */
    public static function getTranslatableFields($objectType)
    {
        $dom = ZLanguage::getModuleDomain('«appName()»');
        $fields = array();
        switch ($objectType) {
«EXPAND TranslatableFieldList FOREACH getTranslatableEntities()-»
        }
        return $fields;
    }

    /**
     * Post-processing method copying all translations to corresponding arrays.
     * This ensures easy compatibility to the Forms plugins where it
     * it is not possible yet to define sub arrays in the group attribute.
     *
     * @param string              $objectType Treated object type.
     * @param Zikula_EntityAccess $entity     The entity being edited.
     * @return array collected translations having the locales as keys
     */
    public static function prepareEntityForEdit($objectType, $entity)
    {
        $translations = array();

        // check arguments
        if (!$objectType || !$entity) {
            return $translations;
        }

        // check if we have translated fields registered for the given object type
        $fields = self::getTranslatableFields($objectType);
        if (!count($fields)) {
            return $translations;
        }

        if (System::getVar('multilingual') != 1) {
            // Translatable extension did already fetch current translation
            return $translations;
        }

        // prepare form data to edit multiple translations at once
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');

        // get translations
        $entityClass = '«appName()»_Entity_' . ucwords($objectType) . 'Translation';
        $repository = $entityManager->getRepository($entityClass);
        $entityTranslations = $repository->findTranslations($entity);

        $supportedLocales = ZLanguage::getInstalledLanguages();
        $currentLanguage = ZLanguage::getLanguageCode();
        foreach ($supportedLocales as $locale) {
            if ($locale == $currentLanguage) {
                // Translatable extension did already fetch current translation
                continue;
            }
            $translationData = array();
            foreach ($fields as $field) {
                $translationData[$field['name'] . $locale] = isset($entityTranslations[$locale]) ? $entityTranslations[$locale][$field['name']] : '';
            }
            // add data to collected translations
            $translations[$locale] = $translationData;
        }

        return $translations;
    }

    /**
     * Post-editing method copying all translated fields back to their subarrays.
     * This ensures easy compatibility to the Forms plugins where it
     * it is not possible yet to define sub arrays in the group attribute.
     *
     * @param string              $objectType     Treated object type.
     * @param Zikula_EntityAccess $entity         The entity being edited.
     * @param array               $formDataEntity Entity form data, can be used for default values.
     * @param array               $formDataOther  Other form data containing translations for example.
     * @return array collected translations having the locales as keys
     */
    public static function processEntityAfterEdit($objectType, $entity, $formDataEntity, $formDataOther)
    {
        $translations = array();
        // check arguments
        if (!$objectType || !$entity || !is_array($formDataEntity) || !is_array($formDataOther)) {
            return $translations;
        }

        $fields = self::getTranslatableFields($objectType);
        if (!count($fields)) {
            return $translations;
        }

        $supportedLocales = ZLanguage::getInstalledLanguages();
        $useOnlyCurrentLocale = true;
        if (System::getVar('multilingual') == 1) {
            $useOnlyCurrentLocale = false;
            $currentLanguage = ZLanguage::getLanguageCode();
            foreach ($supportedLocales as $locale) {
                if ($locale == $currentLanguage) {
                    // skip current language as this is not treated as translation on controller level
                    continue;
                }
                $translations[$locale] = array('locale' => $locale, 'fields' => array());
                $translationData = $formDataOther[strtolower($objectType) . $locale];
                foreach ($fields as $field) {
                    $translations[$locale]['fields'][$field['name']] = isset($translationData[$field['name'] . $locale]) ? $translationData[$field['name'] . $locale] : '';
                    unset($formData[$field['name'] . $locale]);
                }
            }
        }
        if ($useOnlyCurrentLocale === true) {
            $locale = ZLanguage::getLanguageCode();
            $translations[$locale] = array('locale' => $locale, 'fields' => array());
            $translationData = $formDataOther[strtolower($objectType) . $locale];
            foreach ($fields as $field) {
                $translations[$locale]['fields'][$field['name']] = isset($translationData[$field['name'] . $locale]) ? $translationData[$field['name'] . $locale] : '';
                unset($formData[$field['name'] . $locale]);
            }
        }
        return $translations;
    }
}
«ENDDEFINE»

«DEFINE TranslatableFieldList FOR Entity-»
            case '«name.formatForCode()»':
                $fields = array(«''-»
«EXPAND TranslatableFieldDefinition-»
                );
                break;
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR Entity-»
«EXPAND TranslatableFieldDefinition FOREACH getTranslatableFields() SEPARATOR ','»
«REM»no slug input element yet, see https://github.com/l3pp4rd/DoctrineExtensions/issues/140
«IF hasTranslatableSlug()-»,
                    array('name' => 'slug',
                          'default' => '')«''-»
«ENDIF-»«ENDREM»«''-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR EntityField-»
«REM»error("Error: undefined entity field type " + metaType.toString() + " (code 542324)") -> ""-»«ENDREM»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR DerivedField»
                    array('name' => '«name»',
                          'default' => __('«IF defaultValue != null && defaultValue != ''-»«defaultValue»«ELSE-»«name.formatForDisplayCapital()»«ENDIF-»', $dom))«''-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR BooleanField»
                    array('name' => '«name»',
                          'default' => «IF defaultValue != null && defaultValue != ''-»«(defaultValue == 'true').displayBool()»«ELSE-»false«ENDIF-»)«''-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinitionNumeric FOR DerivedField»
                    array('name' => '«name»',
                          'default' => 0)«''-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR CalculatedField»
                    array('name'    => '«name»',
                          'default' => __('«name.formatForDisplayCapital()»', $dom))«''-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR AbstractIntegerField-»
«EXPAND TranslatableFieldDefinitionNumeric-»
«ENDDEFINE»
«DEFINE TranslatableFieldDefinition FOR DecimalField-»
«EXPAND TranslatableFieldDefinitionNumeric-»
«ENDDEFINE»
«DEFINE TranslatableFieldDefinition FOR FloatField-»
«EXPAND TranslatableFieldDefinitionNumeric-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinitionNoDefault FOR DerivedField»
                    array('name' => '«name»',
                          'default' => '')«''-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR UploadField-»
«EXPAND TranslatableFieldDefinitionNoDefault-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR ArrayField-»
«EXPAND TranslatableFieldDefinitionNoDefault-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR ObjectField-»
«EXPAND TranslatableFieldDefinitionNoDefault-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR AbstractDateField-»
«EXPAND TranslatableFieldDefinitionNoDefault-»
«ENDDEFINE»

«DEFINE TranslatableFunctionsImpl FOR Application-»
/**
 * Utility implementation class for translatable helper methods.
 */
class «appName()»_Util_Translatable extends «appName()»_Util_Base_Translatable
{
    // feel free to add your own convenience methods here
}
«ENDDEFINE»
