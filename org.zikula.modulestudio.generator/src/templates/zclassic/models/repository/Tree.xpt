«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE TreeMethods(Application app) FOR Entity-»
«IF tree != EntityTreeType::NONE-»

    /**
     * Select tree of «nameMultiple.formatForCode()».
     *
     * @param integer $rootId   Optional id of root node to use as a branch, defaults to 0 which corresponds to the whole tree.
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function selectTree($rootId = 0, $useJoins = true)
    {
        if ($rootId == 0) {
            // return all trees if no specific one has been asked for
            return $this->selectAllTrees($useJoins);
        }

        $result = null;

        // fetch root node
        $rootNode = $this->selectById($rootId, $useJoins);

        // fetch children
        $children = $this->children($rootNode);

        // alternatively we could probably select all nodes with root = $rootId

        return array_merge(array($rootNode), $children);
    }

    /**
     * Select all trees at once.
     *
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function selectAllTrees($useJoins = true)
    {
        $trees = array();

        // get all root nodes
        $rootNodes = $this->_intBaseQuery('tbl.lvl = 0', '', $useJoins)->getResult();

        foreach ($rootNodes as $rootNode) {
            // fetch children
            $children = $this->children($rootNode);
            $trees[$rootNode->getId()] = array_merge(array($rootNode), $children);
        }

        return $trees;
    }
«ENDIF-»
«ENDDEFINE»
