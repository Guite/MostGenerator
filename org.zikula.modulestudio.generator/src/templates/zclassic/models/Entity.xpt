«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine entity classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
    «EXPAND business::Validator::BaseValidator-»
    «EXPAND business::Validator::ValidatorWrapper(this) FOREACH models.entities-»
«EXPAND entity::Extensions::ExtensionClasses-»
«ENDDEFINE»

«REM»creates a entity class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating entity classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelEntityBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelEntityImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelEntityBaseImpl(Application app) FOR Entity-»
«EXPAND Imports-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for «name.formatForDisplay()» entities.
 *
 * @abstract
 */
abstract class «baseClassModelEntity()» extends Zikula_EntityAccess«IF hasNotifyPolicy()-» implements NotifyPropertyChanged«ENDIF»
{
«EXPAND EntityInfo(app)-»

«EXPAND EventListener::RootBaseImpl-»
}
«ENDDEFINE»

«DEFINE Imports FOR Entity-»
use Doctrine\ORM\Mapping as ORM;
«IF hasCollections() || attributable || categorisable-»
use Doctrine\Common\Collections\ArrayCollection;
«ENDIF-»
«EXPAND entity::Extensions::Imports-»
«IF hasNotifyPolicy()-»
use Doctrine\Common\NotifyPropertyChanged,
    Doctrine\Common\PropertyChangedListener;
«ENDIF-»
«IF standardFields-»
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;
«ENDIF-»
«ENDDEFINE»

«DEFINE Index(String indexType) FOR EntityIndex-»
 *         @ORM\«indexType.toFirstUpper()»(name="«name.formatForDB()»", columns={«EXPAND IndexField FOREACH items SEPARATOR ','»})
«ENDDEFINE»
«DEFINE IndexField FOR EntityIndexItem-»"«name.formatForCode()»"«ENDDEFINE»

«DEFINE DiscriminatorInfo FOR InheritanceRelationship-»
, "«source.name.formatForCode()»" = "«source.implClassModelEntity()»"«''-»
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelEntityImpl(Application app) FOR Entity-»
«EXPAND Imports-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for «name.formatForDisplay()» entities.
«EXPAND entity::Extensions::ClassExtensions-»
«IF mappedSuperClass-»
 * @ORM\MappedSuperclass
«ELSE-»
 * @ORM\Entity(repositoryClass="«implClassModel('repository', '')»"«IF readOnly-», readOnly=true«ENDIF-»)
«ENDIF-»
«IF indexes.isEmpty-»
 * @ORM\Table(name="«fullEntityTableName()»")
«ELSE-»
 * @ORM\Table(name="«fullEntityTableName()»",
«IF hasNormalIndexes()-»
 *     indexes={
«EXPAND Index('Index') FOREACH getNormalIndexes() SEPARATOR ','-»
 *     }«IF hasUniqueIndexes()-»,«ENDIF»
«ENDIF-»
«IF hasUniqueIndexes()-»
 *     uniqueConstraints={
«EXPAND Index('UniqueConstraint') FOREACH getUniqueIndexes() SEPARATOR ','-»
 *     }
«ENDIF-»
 * )
«ENDIF-»
«IF isTopSuperClass()-»
 * @ORM\InheritanceType("«getChildRelations().get(0).strategy.asConstant()»")
 * @ORM\DiscriminatorColumn(name="«getChildRelations().get(0).discriminatorColumn.formatForCode()»"«REM», type="string"«ENDREM»)
 * @ORM\DiscriminatorMap({"«name.formatForCode()»" = "«implClassModelEntity()»"«EXPAND DiscriminatorInfo FOREACH getChildRelations()-»})
«ENDIF-»
«IF changeTrackingPolicy != EntityChangeTrackingPolicy::DEFERRED_IMPLICIT-»
 * @ORM\ChangeTrackingPolicy("«changeTrackingPolicy.asConstant()»")
«ENDIF-»
 * @ORM\HasLifecycleCallbacks
 */
class «implClassModelEntity()» extends «IF isInheriting()»«parentType().implClassModelEntity()»«ELSE»«baseClassModelEntity()»«ENDIF»
{
    // feel free to add your own methods here
«IF isInheriting()-»

«EXPAND entity::Property::PersistentProperty FOREACH fields.typeSelect(DerivedField)»
«EXPAND entity::Extensions::AdditionalProperties»
«EXPAND entity::Association::Root(false) FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)»
«EXPAND entity::Association::Root(true) FOREACH outgoing.typeSelect(JoinRelationship)»
«EXPAND Constructor(true)-»

«EXPAND entity::Property::FieldAccessor FOREACH fields.typeSelect(DerivedField)»
«EXPAND entity::Extensions::AdditionalAccessors-»
«EXPAND entity::Association::RelationAccessor(false) FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)»
«EXPAND entity::Association::RelationAccessor(true) FOREACH outgoing.typeSelect(JoinRelationship)»
«ENDIF-»

«EXPAND EventListener::RootImpl-»
}
«ENDDEFINE»


«DEFINE EntityInfo(Application app) FOR Entity»
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = '«name.formatForCode()-»';

    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();

    /**
     * @var «implClassModel('validator', '')» The validator for this entity
     */
    protected $_validator = null;

    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;
«IF hasNotifyPolicy()-»

    /**
     * @var array List of change notification listeners
     */
    protected $_propertyChangedListeners = array();
«ENDIF-»

    /**
     * @var array List of available item actions
     */
    protected $_actions = array();

«EXPAND entity::Property::PersistentProperty FOREACH fields.typeSelect(DerivedField)»
«EXPAND entity::Extensions::AdditionalProperties»
«EXPAND entity::Association::Root(false) FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)»
«EXPAND entity::Association::Root(true) FOREACH outgoing.typeSelect(JoinRelationship)»
«EXPAND Constructor(false)-»

«EXPAND FileHelper::GetterAndSetterMethods('_objectType', 'string', false, false, '')»
«EXPAND FileHelper::GetterAndSetterMethods('_idFields', 'array', false, true, 'Array()')»
«EXPAND FileHelper::GetterAndSetterMethods('_validator', implClassModel('validator', ''), false, true, 'null')»
«EXPAND FileHelper::GetterAndSetterMethods('_hasUniqueSlug', 'boolean', false, false, '')»
«EXPAND FileHelper::GetterAndSetterMethods('_actions', 'array', false, true, 'Array()')»
«EXPAND PropertyChangedListener-»

«EXPAND entity::Property::FieldAccessor FOREACH fields.typeSelect(DerivedField)»
«EXPAND entity::Extensions::AdditionalAccessors-»
«EXPAND entity::Association::RelationAccessor(false) FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)»
«EXPAND entity::Association::RelationAccessor(true) FOREACH outgoing.typeSelect(JoinRelationship)»

    /**
     * Initialise validator and return it's instance.
     *
     * @return «implClassModel('validator', '')» The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new «implClassModel('validator', '')»($this);
        return $this->_validator;
    }

    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }

    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
«LET app.appName() AS appName-»
        $dom = ZLanguage::getModuleDomain('«appName»');
«LET name.formatForCode() AS objName-»
«FOREACH app.controllers.controllers AS controller-»
«IF controller.metaType == UserController || controller.metaType == AdminController-»
        if ($currentType == '«controller.name()»') {
«IF controller.hasActions('view')-»
            if (in_array($currentFunc, array('main', 'view'))) {
«IF controller.metaType == AdminController && container.application.hasUserController() && container.application.getUserController().hasActions('display')-»
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => '«name.formatForCode()»«modUrlPrimaryKeyParams('this', false)»)),
                        'icon' => 'preview',
                        'linkTitle' => __('Open preview page', $dom),
                        'linkText' => __('Preview', $dom)
                    );
«ENDIF-»
«IF controller.hasActions('display')-»
«LET getLeadingField() AS leadingField-»
                    $this->_actions[] = array(
                        'url' => array('type' => '«controller.name()»', 'func' => 'display', 'arguments' => array('ot' => '«name.formatForCode()»«modUrlPrimaryKeyParams('this', false)»)),
                        'icon' => 'display',
                        'linkTitle' => «IF leadingField != null-»str_replace('"', '', $this['«leadingField.name.formatForCode()»'])«ELSE-»__('Open detail page', $dom)«ENDIF-»,
                        'linkText' => __('Details', $dom)
                    );
«ENDLET-»
«ENDIF-»
            }
«ENDIF-»            

«IF controller.hasActions('view') || controller.hasActions('display')-»
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
«IF controller.hasActions('edit')-»
                if (SecurityUtil::checkPermission('«appName»::', '.*', ACCESS_EDIT)) {
«IF !readOnly-»«REM»create is allowed, but editing not«ENDREM»
                    $this->_actions[] = array(
                        'url' => array('type' => '«controller.name()»', 'func' => 'edit', 'arguments' => array('ot' => '«name.formatForCode()»«modUrlPrimaryKeyParams('this', false)»)),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
«ENDIF-»
«IF tree != EntityTreeType::NONE-»
                    /*
«ENDIF-»
                    $this->_actions[] = array(
                        'url' => array('type' => '«controller.name()»', 'func' => 'edit', 'arguments' => array('ot' => '«name.formatForCode()»«modUrlPrimaryKeyParams('this', false, 'astemplate')»)),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
«IF tree != EntityTreeType::NONE-»
                    */
«ENDIF-»
                }
«ENDIF-»
«IF controller.hasActions('delete')-»
                if (SecurityUtil::checkPermission('«appName»::', '.*', ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => '«controller.name()»', 'func' => 'delete', 'arguments' => array('ot' => '«name.formatForCode()»«modUrlPrimaryKeyParams('this', false)»)),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
«ENDIF-»
            }
«ENDIF-»
«IF controller.hasActions('display')-»
            if ($currentFunc == 'display') {
«IF controller.hasActions('view')-»
                    $this->_actions[] = array(
                        'url' => array('type' => '«controller.name()»', 'view', array('ot' => '«objName»')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
«ENDIF-»
            }
«ENDIF-»
        }
«ENDIF-»
«ENDFOREACH-»
«ENDLET-»
«ENDLET-»
    }

«ENDDEFINE»

«DEFINE Constructor(Boolean isInheriting) FOR Entity-»
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
«REM»TODO param docs«ENDREM»«''-»
     */
    public function __construct(«EXPAND ConstructorArguments(true)-»)
    {
«EXPAND ConstructorImpl(isInheriting)-»
    }
«ENDDEFINE»

«DEFINE ConstructorArgumentsDefault(Boolean hasPreviousArgs) FOR Entity-»
«IF hasCompositeKeys()-»
«IF hasPreviousArgs-», «ENDIF-»«FOREACH getPrimaryKeyFields() AS pkField SEPARATOR ', '-»$«pkField.name.formatForCode()»«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE»

«DEFINE ConstructorArguments(Boolean withTypeHints) FOR Entity-»
«IF isIndexByTarget()-»
«LET incoming.typeSelect(JoinRelationship).select(e|e.isIndexed()).get(0) AS indexRelation-»
«LET getRelationAliasName(indexRelation, false) AS sourceAlias-»
«LET indexRelation.getIndexByField() AS indexBy-»
$«indexBy.formatForCode()»,«IF withTypeHints-» «indexRelation.source.implClassModelEntity()»«ENDIF-» $«sourceAlias.formatForCode()»«EXPAND ConstructorArgumentsDefault(true)-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ELSEIF isAggregated()-»
«EXPAND ConstructorArgumentsAggregate FOREACH getAggregators().getAggregatingRelationships() SEPARATOR ', '»«EXPAND ConstructorArgumentsDefault(true)-»
«ELSE-»
«EXPAND ConstructorArgumentsDefault(false)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE ConstructorArgumentsAggregate FOR OneToManyRelationship-»
«LET source.getAggregateFields().get(0).getAggregateTargetField() AS targetField-»
$«getRelationAliasName(false)», $«targetField.name.formatForCode()»
«ENDLET-»
«ENDDEFINE»

«DEFINE ConstructorImpl(Boolean isInheriting) FOR Entity-»
«IF isInheriting-»
        parent::__construct(«EXPAND ConstructorArguments(false)-»);
«ENDIF-»
«IF hasCompositeKeys()-»
«FOREACH getPrimaryKeyFields() AS pkField-»
        $this->«pkField.name.formatForCode()» = $«pkField.name.formatForCode()»;
«ENDFOREACH-»
«ENDIF-»
«LET getDerivedFields().select(e|e.mandatory) AS mandatoryFields-»
«FOREACH mandatoryFields.typeSelect(IntegerField).select(e|e.defaultValue == null || e.defaultValue == '' || e.defaultValue == '0') AS mandatoryField-»
        $this->«mandatoryField.name.formatForCode()» = 1;
«ENDFOREACH-»
«FOREACH mandatoryFields.typeSelect(UserField).select(e|e.defaultValue == null || e.defaultValue == '' || e.defaultValue == '0') AS mandatoryField-»
        $this->«mandatoryField.name.formatForCode()» = UserUtil::getVar('uid');
«ENDFOREACH-»
«FOREACH mandatoryFields.typeSelect(DecimalField).select(e|e.defaultValue == null || e.defaultValue == '' || e.defaultValue == '0') AS mandatoryField-»
        $this->«mandatoryField.name.formatForCode()» = 1;
«ENDFOREACH-»
«FOREACH mandatoryFields.typeSelect(AbstractDateField).select(e|e.defaultValue.length == 0) AS mandatoryField-»
        $this->«mandatoryField.name.formatForCode()» = «EXPAND DefaultAssignment FOR mandatoryField-»;
«ENDFOREACH-»
«FOREACH mandatoryFields.typeSelect(FloatField).select(e|e.defaultValue == null || e.defaultValue == '' || e.defaultValue == '0') AS mandatoryField-»
        $this->«mandatoryField.name.formatForCode()» = 1;
«ENDFOREACH-»
«ENDLET-»
«IF isIndexByTarget()-»
«LET incoming.typeSelect(JoinRelationship).select(e|e.isIndexed()).get(0) AS indexRelation-»
«LET getRelationAliasName(indexRelation, false) AS sourceAlias-»
«LET getRelationAliasName(indexRelation, true) AS targetAlias-»
«LET indexRelation.getIndexByField() AS indexBy-»
        $this->«indexBy.formatForCode()» = $«indexBy.formatForCode()»;
        $this->«sourceAlias.formatForCode()» = $«sourceAlias.formatForCode()»;
        $«sourceAlias.formatForCode()»->add«targetAlias.formatForCodeCapital()»($this);
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ELSEIF isAggregated()-»
«EXPAND ConstructorAssignmentAggregate FOREACH getAggregators().getAggregatingRelationships()-»
«ELSE-»
«ENDIF-»
        $this->_idFields = array(«FOREACH getPrimaryKeyFields() AS pkField SEPARATOR ', '-»'«pkField.name.formatForCode()»'«ENDFOREACH-»);
        $this->initValidator();
        $this->_hasUniqueSlug = «IF hasSluggableFields() && slugUnique»true«ELSE»false«ENDIF»;
«EXPAND entity::Association::InitCollections-»
«ENDDEFINE»

«DEFINE ConstructorAssignmentAggregate FOR OneToManyRelationship-»
«LET source.getAggregateFields().get(0).getAggregateTargetField() AS targetField-»
        $this->«getRelationAliasName(false)» = $«getRelationAliasName(false)»;
        $this->«targetField.name.formatForCode()» = $«targetField.name.formatForCode()»;
«ENDLET-»
«ENDDEFINE»

«DEFINE DefaultAssignment FOR AbstractDateField-»DateTime::createFromFormat('«EXPAND DefaultFormat-»', date('«EXPAND DefaultFormat-»'))«ENDDEFINE»
«DEFINE DefaultFormat FOR AbstractDateField-»«ENDDEFINE»
«DEFINE DefaultFormat FOR DatetimeField-»Y-m-d H:i:s«ENDDEFINE»
«DEFINE DefaultFormat FOR DateField-»Y-m-d«ENDDEFINE»
«DEFINE DefaultFormat FOR TimeField-»H:i:s«ENDDEFINE»

«DEFINE PropertyChangedListener FOR Entity-»
«IF hasNotifyPolicy()-»

    /**
     * Adds a property change listener.
     *
     * @param PropertyChangedListener $listener The listener to be added
     */
    public function addPropertyChangedListener(PropertyChangedListener $listener)
    {
        $this->_propertyChangedListeners[] = $listener;
    }

    /**
     * Notify all registered listeners about a changed property.
     *
     * @param String $propName Name of property which has been changed
     * @param mixed  $oldValue The old property value
     * @param mixed  $newValue The new property value
     */
    protected function _onPropertyChanged($propName, $oldValue, $newValue)
    {
        if ($this->_propertyChangedListeners) {
            foreach ($this->_propertyChangedListeners as $listener) {
                $listener->propertyChanged($this, $propName, $oldValue, $newValue);
            }
        }
    }
«ENDIF-»
«ENDDEFINE»

«REM»creates a reference entity class file for every many-to-many relationship instance«ENDREM»
«REM»TODO: remove all the redundancies below... maybe with the PersistenceTransformer transformation...«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRefEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefEntityBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRefEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefEntityImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelRefEntityBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the reference entity class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefEntity()» extends Zikula_EntityAccess
{
«REM»
«FOREACH sourceFields() as singleSourceField-»
    /**
     * @ORM\Id
     * @ORM\Column(type="bigint"«IF unique-», unique=true«ENDIF-»«IF nullable-», nullable=true«ENDIF-»)
     * @var «type» $«name».
     */
    protected $«singleSourceField.name.formatForCode()»;

«ENDFOREACH-»
«FOREACH targetFields() as singleTargetField-»
    /**
     * @ORM\Id
     * @ORM\Column(type="bigint"«IF unique-», unique=true«ENDIF-»«IF nullable-», nullable=true«ENDIF-»)
     * @var «type» $«name».
     */
    protected $«singleTargetField.name.formatForCode()»;

«ENDFOREACH-»
    }«ENDREM»«''-»
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefEntityImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the reference entity class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 *
 * @ORM\Entity(repositoryClass="«implClassModelRefRepository()»")
 * @ORM\Table(name="«fullJoinTableName(true, target)»")
 */
class «implClassModelRefEntity()» extends «baseClassModelRefEntity()»
{
    // feel free to add your own methods here
}
«ENDDEFINE»

