«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine repository classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities.reject(e|e.mappedSuperClass)-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
«ENDDEFINE»

«REM»creates a repository class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating repository classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('repository', '').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRepositoryBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('repository', '').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRepositoryImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelRepositoryBaseImpl(Application app) FOR Entity-»

«IF tree != EntityTreeType::NONE-»
use Gedmo\Tree\Entity\Repository\«tree.asConstant().toFirstUpper()»TreeRepository;
«ELSE-»
use Doctrine\ORM\EntityRepository;
«ENDIF-»
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
«IF hasOptimisticLock() || hasPessimisticReadLock() || hasPessimisticWriteLock()-»
use Doctrine\DBAL\LockMode;
«ENDIF-»

use DoctrineExtensions\Paginate\Paginate;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for «name.formatForDisplay()» entities.
 */
class «baseClassModel('repository', '')» extends «IF tree != EntityTreeType::NONE-»«tree.asConstant().toFirstUpper()»TreeRepository«ELSE»EntityRepository«ENDIF»
{
    /**
     * @var string The default sorting field/expression.
     */
    protected $defaultSortingField = '«IF hasSortableFields()-»«getSortableFields().get(0).name.formatForCode()»«ELSE-»«getLeadingField().name.formatForCode()»«ENDIF-»';

    /**
     * Retrieves an array with all fields which can be used for sorting instances.
     *
     * @TODO to be refactored
     * @return array
     */
    public function getAllowedSortingFields()
    {
        return array(«EXPAND singleSortingField FOREACH fields SEPARATOR ','»«EXPAND standardSortingFields-»
        );
    }

«EXPAND FileHelper::GetterAndSetterMethods('defaultSortingField', 'string', false, false, '')»

    /**
     * Helper method for truncating the table.
     * Used during installation when inserting default data.
     */
    public function truncateTable()
    {
        $query = $this->getEntityManager()
                 ->createQuery('DELETE «implClassModelEntity()»');
«IF hasPessimisticWriteLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»
        $query->execute();
    }

    /**
     * Select object from the database.
     *
     * @param mixed   $id       The id (or array of ids) to use to retrieve the object (optional) (default=null).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|«implClassModelEntity()» retrieved data array or «implClassModelEntity()» instance
     */
    public function selectById($id = 0, $useJoins = true)
    {
        // check id parameter
        if ($id == 0) {
            return LogUtil::registerArgsError();
        }

        $where = '';
        if (is_array($id)) {
            foreach ($id as $fieldName => $fieldValue) {
                if (!empty($where)) {
                    $where .= ' AND ';
                }
                $where .= 'tbl.' . DataUtil::formatForStore($fieldName) . ' = \'' . DataUtil::formatForStore($fieldValue) . '\'';
            }
        } else {
            $where .= 'tbl.id = ' . DataUtil::formatForStore($id);
        }

        $query = $this->_intBaseQuery($where, '', $useJoins);

        return $query->getSingleResult();
    }

«IF hasSluggableFields() && slugUnique-»

    /**
     * Select object by slug field
     *
     * @param string  $slugTitle The slug value
     * @param boolean $useJoins  Whether to include joining related objects (optional) (default=true).
     * @param integer $excludeId Optional id to be excluded (used for unique validation).
     *
     * @return «implClassModelEntity()» retrieved instance of «implClassModelEntity()»
     */
    public function selectBySlug($slugTitle = '', $useJoins = true, $excludeId = 0)
    {
        // check input parameter
        if ($slugTitle == '') {
            return LogUtil::registerArgsError();
        }

        $where = 'tbl.slug = \'' . DataUtil::formatForStore($slugTitle) . '\'';
        if ($excludeId > 0) {
            $where .= ' AND tbl.id != ' . DataUtil::formatForStore($excludeId);
        }
        $query = $this->_intBaseQuery($where, '', $useJoins);

        return $query->getSingleResult();
    }
«ENDIF-»

    /**
     * Select with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return ArrayCollection collection containing retrieved «implClassModelEntity()» instances
     */
    public function selectWhere($where = '', $orderBy = '', $useJoins = true)
    {
        $query = $this->_intBaseQuery($where, $orderBy, $useJoins);

        return $query->getResult();
    }

    /**
     * Select with a given where clause and pagination parameters.
     *
     * @param string  $where          The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy        The order-by clause to use when retrieving the collection (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $useJoins       Whether to include joining related objects (optional) (default=true).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $useJoins = true)
    {
        $query = $this->_intBaseQuery($where, $orderBy, $useJoins);
        $offset = ($currentPage-1) * $resultsPerPage;

        // count the total number of affected items
        $count = Paginate::getTotalQueryResults($query);

«IF !(outgoing.typeSelect(OneToManyRelationship).isEmpty
   && outgoing.typeSelect(ManyToManyRelationship).isEmpty
   && incoming.typeSelect(ManyToOneRelationship).isEmpty)-»
        // prefetch unique relationship ids for given pagination frame
        $query = Paginate::getPaginateQuery($query, $offset, $resultsPerPage);
«ELSE-»
        $query->setFirstResult($offset)
              ->setMaxResults($resultsPerPage);
«ENDIF-»

        $result = $query->getResult();

        return array($result, $count);
    }

    /**
     * Select entities by a given search fragment.
     *
     * @param string  $fragment       The fragment to search for.
     * @param string  $exclude        Comma separated list with ids to be excluded from search.
     * @param string  $orderBy        The order-by clause to use when retrieving the collection (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $useJoins       Whether to include joining related objects (optional) (default=true).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function selectSearch($fragment = '', $exclude = array(), $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $useJoins = true)
    {
        $where = '';
        if (count($exclude) > 0) {
            $exclude = DataUtil::formatForStore($exclude);
«REM»            foreach ($idFields as $idField) {
                if (!empty($where)) {
                    $where .= ' AND ';
                }
                $where .= 'tbl.' . $idField . ' NOT IN (' . implode(', ', $exclude) . ')';
            }«ENDREM»«''-»
            $where .= 'tbl.id NOT IN (' . implode(', ', $exclude) . ')';
        }

        $fragment = DataUtil::formatForStore($fragment);

        $whereSub = '';
«FOREACH getDerivedFields().reject(e|e.primaryKey || e.metaType == BooleanField || e.metaType == ArrayField || e.metaType == ObjectField) AS field-»
        $whereSub .= ((!empty($whereSub)) ? ' OR ' : '') . 'tbl.«field.name.formatForCode()» «IF field.metaType == StringField || field.metaType == TextField»LIKE \'%' . $fragment . '%\'«ELSE»= \'' . $fragment . '\'«ENDIF»';
«ENDFOREACH-»

        if (!empty($whereSub)) {
            $where .= ((!empty($where)) ? ' AND (' . $whereSub . ')' : $whereSub);
        }

        return $this->selectWherePaginated($where, $orderBy, $currentPage, $resultsPerPage, $useJoins);
    }
«IF !getUniqueDerivedFields().isEmpty-»

    /**
     * Select count with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the object count (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return integer amount of affected records
     * @TODO fix usage of joins; please remove the first line and test.
     */
    public function selectCount($where = '', $useJoins = true)
    {
        $useJoins = false;

        $selection = 'COUNT(tbl.id) AS num«nameMultiple.formatForCodeCapital()»';
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
           ->from('«implClassModelEntity()»', 'tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }

        if (!empty($where)) {
            $qb->where($where);
        }

        $query = $qb->getQuery();

«IF hasPessimisticReadLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»
        return $query->getSingleScalarResult();
    }
«ENDIF-»

    /**
     * Check for unique values.
     *
     * @param string $fieldName  The name of the property to be checked
     * @param string $fieldValue The value of the property to be checked
     * @param int    $excludeid  Id of «nameMultiple.formatForDisplay()» to exclude (optional).
     * @return boolean result of this check, true if the given «name.formatForDisplay()» does not already exist
     */
    public function detectUniqueState($fieldName, $fieldValue, $excludeid = 0)
    {
        $where = 'tbl.' . $fieldName . ' = \'' . DataUtil::formatForStore($fieldValue) . '\'';

        if ($excludeid > 0) {
            $where .= ' AND tbl.id != \'' . (int) DataUtil::formatForStore($excludeid) . '\'';
        }

        $count = $this->selectCount($where);
        return ($count == 0);
    }

«EXPAND repository::Tree::TreeMethods(app)-»

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return Doctrine\ORM\Query query instance to be further processed
     */
    protected function _intBaseQuery($where = '', $orderBy = '', $useJoins = true)
    {
        $selection = 'tbl' . (($orderBy == 'RAND()') ? ', rand() AS rand' : '');
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
           ->from('«implClassModelEntity()»', 'tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }

        if (!empty($where)) {
            $qb->where($where);
        }

        // add order by clause
        if (!empty($orderBy)) {
            if ($orderBy == 'RAND()') {
                $qb->orderBy('rand', 'ASC');
            }
            else {
                $qb->add('orderBy', 'tbl.' . $orderBy);
            }
        }

        $query = $qb->getQuery();

// TODO - see http://code.zikula.org/core/ticket/3138
        // use FilterUtil to support generic filtering
        //$fu = new FilterUtil('«container.application.appName()»', $this);

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and add them to the query.
        //$fu->enrichQuery($query);

«IF hasTranslatableFields()-»
        // set the translation query hint
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

«ENDIF-»
«IF hasPessimisticReadLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»

        return $query;
    }
«EXPAND repository::Joins::JoinMethods(app)-»
}
«ENDDEFINE»

«DEFINE singleSortingField FOR EntityField»«REM»DUMMY«ENDREM»«ENDDEFINE»
«DEFINE singleSortingField FOR DerivedField»
«LET entity.incoming.typeSelect(JoinRelationship).select(e|formatForDB(e.getSourceFields().get(0)) == name.formatForDB()) AS joins-»
«IF !joins.isEmpty-»
                     '«joins.get(0).source.name.formatForCode()»'«""-»
«ELSE-»
                     '«name.formatForCode()»'«""-»
«ENDIF-»
«ENDLET-»«ENDDEFINE»
«DEFINE singleSortingField FOR CalculatedField»
                     '«name.formatForCode()»'«""-»
«ENDDEFINE»

«DEFINE standardSortingFields FOR Entity»
«REM»will be filled by Advices (Aspect Orientation)«ENDREM»
«ENDDEFINE»


«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRepositoryImpl(Application app) FOR Entity-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for «name.formatForDisplay()» entities.
 */
class «implClassModel('repository', '')» extends «IF isInheriting()»«parentType().implClassModel('repository', '')»«ELSE»«baseClassModel('repository', '')»«ENDIF»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»


«REM»creates a reference table class file for every many-to-many relationship instance«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRefRepository().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND repository::LinkTable::ModelRefRepositoryBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRefRepository().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND repository::LinkTable::ModelRefRepositoryImpl(app)»«ENDFILE»
«ENDDEFINE»

