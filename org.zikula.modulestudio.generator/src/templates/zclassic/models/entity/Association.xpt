«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«REM»If we have an outgoing association useTarget is true; for an incoming one it is false.«ENDREM»
«DEFINE Root(Boolean useTarget) FOR JoinRelationship-»
«LET getRelationAliasName(false) AS sourceName-»
«LET getRelationAliasName(true) AS targetName-»
«LET ((useTarget) ? target : source).implClassModelEntity() AS entityClass-»
«EXPAND DirectionSwitch(useTarget, sourceName, targetName, entityClass)-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE DirectionSwitch(Boolean useTarget, String sourceName, String targetName, String entityClass) FOR JoinRelationship-»
«IF !bidirectional-»
«EXPAND Unidirectional(useTarget, sourceName, targetName, entityClass)-»
«ELSE-»
«EXPAND Bidirectional(useTarget, sourceName, targetName, entityClass)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE Unidirectional(Boolean useTarget, String sourceName, String targetName, String entityClass) FOR JoinRelationship-»
«IF useTarget-»

«IF source == target-»
    /**
     * Self relations were not working yet, must be retested with Doctrine 2.
     * See #9 for more information
     */
«ENDIF-»
«EXPAND Outgoing(sourceName, targetName, entityClass)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE Bidirectional(Boolean useTarget, String sourceName, String targetName, String entityClass) FOR JoinRelationship-»

«IF source == target-»
    /**
     * Self relations were not working yet, must be retested with Doctrine 2.
     * See #9 for more information
     */
«ENDIF-»
«IF !useTarget-»
«EXPAND Incoming(sourceName, targetName, entityClass)-»
«ELSE-»
«EXPAND Outgoing(sourceName, targetName, entityClass)-»
«ENDIF-»
«ENDDEFINE»


«DEFINE IncomingMappingDescription(String sourceName, String targetName) FOR JoinRelationship-»
«ENDDEFINE»
«DEFINE IncomingMappingDetails FOR JoinRelationship-»
«ENDDEFINE»
«DEFINE IncomingMappingType FOR JoinRelationship-»
«ENDDEFINE»

«DEFINE Incoming(String sourceName, String targetName, String entityClass) FOR JoinRelationship-»
    /**
     * Bidirectional - «EXPAND IncomingMappingDescription(sourceName, targetName)-».
     *
«EXPAND IncomingMappingDetails-»
     * @ORM\«EXPAND IncomingMappingType-»(targetEntity="«entityClass»", inversedBy="«targetName-»"«EXPAND AdditionalOptions-»)
«EXPAND JoinDetails(false)-»
     * @var «entityClass» $«sourceName».
     */
    protected $«sourceName»;
«ENDDEFINE»
«DEFINE IncomingMappingType FOR OneToOneRelationship-»OneToOne«ENDDEFINE»
«DEFINE IncomingMappingType FOR OneToManyRelationship-»ManyToOne«ENDDEFINE»
«DEFINE IncomingMappingDescription(String sourceName, String targetName) FOR OneToOneRelationship-»One «targetName» [«target.name.formatForDisplay()»] is linked by one «sourceName» [«source.name.formatForDisplay()»] (INVERSE SIDE)«ENDDEFINE»
«DEFINE IncomingMappingDescription(String sourceName, String targetName) FOR OneToManyRelationship-»Many «targetName» [«target.nameMultiple.formatForDisplay()»] are linked by one «sourceName» [«source.name.formatForDisplay()»] (OWNING SIDE)«ENDDEFINE»
«DEFINE IncomingMappingDetails FOR OneToOneRelationship-»
«IF primaryKey-»
     * @ORM\Id
«ENDIF-»
«ENDDEFINE»
«DEFINE IncomingMappingDetails FOR OneToManyRelationship-»
«ENDDEFINE»

«DEFINE Incoming(String sourceName, String targetName, String entityClass) FOR ManyToOneRelationship-»
    /**
     * Bidirectional - «EXPAND IncomingMappingDescription(sourceName, targetName)-».
     *
«IF primaryKey-»
     * @ORM\Id
«ENDIF-»
     * @ORM\OneToOne(targetEntity="«entityClass»")
«EXPAND JoinDetails(false)-»
     * @var «entityClass» $«sourceName».
     */
    protected $«sourceName»;
«ENDDEFINE»
«DEFINE IncomingMappingDescription(String sourceName, String targetName) FOR ManyToOneRelationship-»One «targetName» [«target.name.formatForDisplay()»] is linked by many «sourceName» [«source.nameMultiple.formatForDisplay()»] (INVERSE SIDE)«ENDDEFINE»

«DEFINE Incoming(String sourceName, String targetName, String entityClass) FOR ManyToManyRelationship-»
«IF bidirectional-»
    /**
     * Bidirectional - «EXPAND IncomingMappingDescription(sourceName, targetName)-».
     *
     * @ORM\ManyToMany(targetEntity="«entityClass»", mappedBy="«targetName»"«EXPAND AdditionalOptions-»)
     * @var «entityClass»[] $«sourceName».
     */
    protected $«sourceName» = null;
«ENDIF-»
«ENDDEFINE»
«DEFINE IncomingMappingDescription(String sourceName, String targetName) FOR ManyToManyRelationship-»Many «targetName» [«target.nameMultiple.formatForDisplay()»] are linked by many «sourceName» [«source.nameMultiple.formatForDisplay()»] (INVERSE SIDE)«ENDDEFINE»

«REM»this default rule is used for OneToOne and ManyToOne«ENDREM»
«DEFINE Outgoing(String sourceName, String targetName, String entityClass) FOR JoinRelationship-»
    /**
     * «IF bidirectional-»Bi«ELSE-»Uni«ENDIF-»directional - «EXPAND OutgoingMappingDescription(sourceName, targetName)-».
     *
     * @ORM\«EXPAND OutgoingMappingType-»(targetEntity="«entityClass»"«IF bidirectional-», mappedBy="«sourceName-»"«ENDIF-»«EXPAND FetchTypeTag-»«EXPAND OutgoingMappingAdditions-»)
«EXPAND JoinDetails(true)-»
     * @var «entityClass» $«targetName».
     */
    protected $«targetName»;
«ENDDEFINE»
«DEFINE OutgoingMappingType FOR JoinRelationship-»«ENDDEFINE»
«DEFINE OutgoingMappingType FOR OneToOneRelationship-»OneToOne«ENDDEFINE»
«DEFINE OutgoingMappingType FOR ManyToOneRelationship-»ManyToOne«ENDDEFINE»
«DEFINE OutgoingMappingDescription(String sourceName, String targetName) FOR JoinRelationship-»«ENDDEFINE»
«DEFINE OutgoingMappingDescription(String sourceName, String targetName) FOR OneToOneRelationship-»One «sourceName» [«source.name.formatForDisplay()»] has one «targetName» [«target.name.formatForDisplay()»] (INVERSE SIDE)«ENDDEFINE»
«DEFINE OutgoingMappingDescription(String sourceName, String targetName) FOR ManyToOneRelationship-»One «sourceName» [«source.nameMultiple.formatForDisplay()»] have one «targetName» [«target.name.formatForDisplay()»] (OWNING SIDE)«ENDDEFINE»
«DEFINE OutgoingMappingAdditions FOR JoinRelationship-»«ENDDEFINE»
«DEFINE OutgoingMappingAdditions FOR OneToOneRelationship-»«IF orphanRemoval-», orphanRemoval=true«ENDIF-»«ENDDEFINE»

«DEFINE Outgoing(String sourceName, String targetName, String entityClass) FOR OneToManyRelationship»
    /**
     * «IF bidirectional-»Bi«ELSE-»Uni«ENDIF-»directional - «EXPAND OutgoingMappingDescription(sourceName, targetName)-».
     *
«IF !bidirectional-»
     * @ORM\ManyToMany(targetEntity="«entityClass»"«EXPAND AdditionalOptions-»)
«ELSE-»
     * @ORM\OneToMany(targetEntity="«entityClass»", mappedBy="«sourceName-»"«EXPAND AdditionalOptions-»«IF orphanRemoval-», orphanRemoval=true«ENDIF-»«IF indexBy != null && indexBy != ''-», indexBy="«indexBy»"«ENDIF-»)
«ENDIF-»
«EXPAND JoinDetails(true)-»
«IF orderBy != null && orderBy != ''-»
     * @ORM\OrderBy({"«orderBy»" = "ASC"})
«ENDIF-»
     * @var «entityClass»[] $«targetName».
     */
    protected $«targetName» = null;
«ENDDEFINE»
«DEFINE OutgoingMappingDescription(String sourceName, String targetName) FOR OneToManyRelationship-»One «sourceName» [«source.name.formatForDisplay()»] has many «targetName» [«target.nameMultiple.formatForDisplay()»] (INVERSE SIDE)«ENDDEFINE»

«DEFINE Outgoing(String sourceName, String targetName, String entityClass) FOR ManyToManyRelationship»
    /**
     * «IF bidirectional-»Bi«ELSE-»Uni«ENDIF-»directional - «EXPAND OutgoingMappingDescription(sourceName, targetName)-».
     *
     * @ORM\ManyToMany(targetEntity="«entityClass»"«IF bidirectional-», inversedBy="«sourceName-»"«ENDIF-»«EXPAND AdditionalOptions-»«IF indexBy != null && indexBy != ''-», indexBy="«indexBy»"«ENDIF-»)
«EXPAND JoinDetails(true)-»
«IF orderBy != null && orderBy != ''-»
     * @ORM\OrderBy({"«orderBy»" = "ASC"})
«ENDIF-»
     * @var «entityClass»[] $«targetName».
     */
    protected $«targetName» = null;
«ENDDEFINE»
«DEFINE OutgoingMappingDescription(String sourceName, String targetName) FOR ManyToManyRelationship-»Many «sourceName» [«source.nameMultiple.formatForDisplay()»] have many «targetName» [«target.nameMultiple.formatForDisplay()»] (OWNING SIDE)«ENDDEFINE»


«DEFINE JoinDetails(Boolean useTarget) FOR JoinRelationship-»
«LET ((useTarget) ? source : target) AS joinedEntityLocal-»
«LET ((useTarget) ? target : source) AS joinedEntityForeign-»
«LET ((useTarget) ? getSourceFields() : getTargetFields()) AS joinColumnsLocal-»
«LET ((useTarget) ? getTargetFields() : getSourceFields()) AS joinColumnsForeign-»
«LET fullJoinTableName(useTarget, joinedEntityForeign) AS foreignTableName-»
«IF (joinColumnsForeign.containsDefaultIdField(joinedEntityForeign) && joinColumnsLocal.containsDefaultIdField(joinedEntityLocal) && !unique && nullable && onDelete == '' && onUpdate == '')-»
     * @ORM\JoinTable(name="«foreignTableName»")
«ELSE-»
     * @ORM\JoinTable(name="«foreignTableName»",
«EXPAND JoinTableDetails(useTarget)-»
     * )
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE JoinTableDetails(Boolean useTarget) FOR JoinRelationship-»
«LET ((useTarget) ? source : target) AS joinedEntityLocal-»
«LET ((useTarget) ? target : source) AS joinedEntityForeign-»
«LET ((useTarget) ? getSourceFields() : getTargetFields()) AS joinColumnsLocal-»
«LET ((useTarget) ? getTargetFields() : getSourceFields()) AS joinColumnsForeign-»
«IF joinColumnsForeign.size > 1-»
     *      joinColumns={«FOREACH joinColumnsLocal AS joinColumnLocal SEPARATOR ', '-»«EXPAND JoinColumn(joinColumnLocal, joinedEntityLocal.getFirstPrimaryKey().name.formatForDB())-»«ENDFOREACH-»},
«ELSE-»
     *      joinColumns={«EXPAND JoinColumn(joinColumnsLocal.get(0), joinedEntityLocal.getFirstPrimaryKey().name.formatForDB())»},
«ENDIF-»
«IF joinColumnsForeign.size > 1-»
     *      inverseJoinColumns={«FOREACH joinColumnsForeign AS joinColumnForeign SEPARATOR ', '-»«EXPAND JoinColumn(joinColumnForeign, joinedEntityForeign.getFirstPrimaryKey().name.formatForDB())-»«ENDFOREACH-»}
«ELSE-»
     *      inverseJoinColumns={«EXPAND JoinColumn(joinColumnsForeign.get(0), joinedEntityForeign.getFirstPrimaryKey().name.formatForDB())»}
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE JoinColumn(String columnName, String referencedColumnName) FOR JoinRelationship-»
@ORM\JoinColumn(name="«columnName»", referencedColumnName="«referencedColumnName»" «IF unique-», unique=true«ENDIF-»«IF !nullable-», nullable=false«ENDIF-»«IF onDelete != ''-», onDelete="«onDelete»"«ENDIF-»«IF onUpdate != ''-», onUpdate="«onUpdate»"«ENDIF-»)«''-»
«ENDDEFINE»

«DEFINE AdditionalOptions FOR JoinRelationship-»
«EXPAND CascadeOptions-»«EXPAND FetchTypeTag-»
«ENDDEFINE»
«DEFINE CascadeOptions FOR JoinRelationship-»
«IF cascade == CascadeType::NONE-»
«ELSE-», cascade={«EXPAND CascadeOptionsImpl-»}«ENDIF-»
«ENDDEFINE»

«DEFINE FetchTypeTag FOR JoinRelationship-»
«IF fetchType != RelationFetchType::LAZY-», fetch="«fetchType.asConstant()»"«ENDIF-»
«ENDDEFINE»

«DEFINE CascadeOptionsImpl FOR JoinRelationship-»
«IF cascade == CascadeType::PERSIST-»"persist"«''-»
«ELSEIF cascade == CascadeType::REMOVE-»"remove"«''-»
«ELSEIF cascade == CascadeType::MERGE-»"merge"«''-»
«ELSEIF cascade == CascadeType::DETACH-»"detach"«''-»
«ELSEIF cascade == CascadeType::PERSIST_REMOVE-»"persist", "remove"«''-»
«ELSEIF cascade == CascadeType::PERSIST_MERGE-»"persist", "merge"«''-»
«ELSEIF cascade == CascadeType::PERSIST_DETACH-»"persist", "detach"«''-»
«ELSEIF cascade == CascadeType::REMOVE_MERGE-»"remove", "merge"«''-»
«ELSEIF cascade == CascadeType::REMOVE_DETACH-»"remove", "detach"«''-»
«ELSEIF cascade == CascadeType::MERGE_DETACH-»"merge", "detach"«''-»
«ELSEIF cascade == CascadeType::PERSIST_REMOVE_MERGE-»"persist", "remove", "merge"«''-»
«ELSEIF cascade == CascadeType::PERSIST_REMOVE_DETACH-»"persist", "remove", "detach"«''-»
«ELSEIF cascade == CascadeType::PERSIST_MERGE_DETACH-»"persist", "merge", "detach"«''-»
«ELSEIF cascade == CascadeType::REMOVE_MERGE_DETACH-»"remove", "merge", "detach"«''-»
«ELSEIF cascade == CascadeType::ALL-»"all"«''-»
«ENDIF-»
«ENDDEFINE»


«DEFINE InitCollections FOR Entity-»
«EXPAND InitCollection(true) FOREACH getOutgoingCollections()-»
«EXPAND InitCollection(false) FOREACH getIncomingCollections()-»
«IF attributable-»
        $this->attributes = new Doctrine\Common\Collections\ArrayCollection();
«ENDIF-»
«IF categorisable-»
        $this->categories = new Doctrine\Common\Collections\ArrayCollection();
«ENDIF-»
«ENDDEFINE»

«DEFINE InitCollection(Boolean outgoing) FOR JoinRelationship-»
«IF isManySide(outgoing)-»
        $this->«getRelationAliasName(outgoing)» = new ArrayCollection();
«ENDIF-»
«ENDDEFINE»


«DEFINE RelationAccessor(Boolean useTarget) FOR JoinRelationship-»
«LET getRelationAliasName(useTarget) AS relationAliasName-»
«EXPAND RelationAccessorImpl(useTarget, relationAliasName)-»
«ENDLET-»
«ENDDEFINE»

«DEFINE RelationAccessorImpl(Boolean useTarget, String aliasName) FOR JoinRelationship-»
«LET ((useTarget) ? target : source).implClassModelEntity() AS entityClass-»
«LET ((useTarget) ? target : source).name AS singleName-»
«LET isManySide(useTarget) AS isMany-»
«IF isMany-»
«EXPAND FileHelper::GetterAndSetterMethods(aliasName, entityClass, true, false, '')»
«EXPAND RelationAccessorAdditions(useTarget, aliasName, singleName)-»
«ELSE-»
«EXPAND FileHelper::GetterAndSetterMethods(aliasName, entityClass, false, true, 'null')»
«ENDIF-»
«EXPAND AddMethod(useTarget, isMany, aliasName, singleName, entityClass)»
«EXPAND RemoveMethod(useTarget, isMany, aliasName, singleName, entityClass)»
«EXPAND RemoveByIdMethod(useTarget, isMany, aliasName, singleName, entityClass)»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE RelationAccessorAdditions(Boolean useTarget, String aliasName, String singleName) FOR JoinRelationship-»
«ENDDEFINE»

«DEFINE RelationAccessorAdditions(Boolean useTarget, String aliasName, String singleName) FOR OneToManyRelationship-»
«IF !useTarget && indexBy != null && indexBy != ''-»
    /**
     * Returns an instance of «source.implClassModelEntity()» from the list of «getRelationAliasName(useTarget)» by its given «indexBy.formatForDisplay()» index.
     *
     * @param «source.implClassModelEntity()» $«indexBy.formatForCode()».
     */
    public function get«singleName.formatForCodeCapital()»($«indexBy.formatForCode()»)
    {
        if (!isset($this->«aliasName.formatForCode()»[$«indexBy.formatForCode()»])) {
            throw new \InvalidArgumentException("«indexBy.formatForDisplayCapital()» is not available on this list of «aliasName.formatForDisplay()».");
        }

        return $this->«aliasName.formatForCode()»[$«indexBy.formatForCode()»];
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE AddMethod(Boolean useTarget, Boolean selfIsMany, String name, String nameSingle, String type) FOR JoinRelationship-»
    /**
     * Adds an instance of «type» to the list of «name.formatForDisplay()».
     *
     * @param «EXPAND AddParameters(useTarget, nameSingle, type, true)-».
     *
     * @return void
     */
    public function add«name.toFirstUpper()»(«EXPAND AddParameters(useTarget, nameSingle, type, false)-»)
    {
«EXPAND AddAssignment(useTarget, name, nameSingle)-»
«IF bidirectional && !useTarget-»
«LET getRelationAliasName(!useTarget).toFirstUpper() AS ownAliasName-»
«IF selfIsMany-»
        $nameSingle->add«ownAliasName»($this);
«ELSE-»
        $nameSingle->set«ownAliasName»($this);
«ENDIF-»
«ENDLET-»
«ENDIF-»
    }
«ENDDEFINE»

«DEFINE AddParameters(Boolean useTarget, String name, String type, Boolean withDescription) FOR JoinRelationship-»
«type» $«name»«IF withDescription-»«REM»TODO description«ENDREM»«ENDIF-»
«ENDDEFINE»
«DEFINE AddParameters(Boolean useTarget, String name, String type, Boolean withDescription) FOR OneToManyRelationship-»
«IF !useTarget && !source.getAggregateFields().isEmpty-»
«LET source.getAggregateFields().get(0).getAggregateTargetField() AS targetField-»
«IF withDescription-»«targetField.fieldTypeAsString()» «ENDIF-»$«targetField.name.formatForCode()»«IF withDescription-»«REM»TODO description«ENDREM»«ENDIF-»
«ENDLET-»
«ELSE-»
«type» $«name»«IF withDescription-»«REM»TODO description«ENDREM»«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE AddAssignmentDefault(Boolean useTarget, String name, String nameSingle) FOR JoinRelationship-»
        $this->«name»[] = $«nameSingle»;
«ENDDEFINE»
«DEFINE AddAssignment(Boolean useTarget, String name, String nameSingle) FOR JoinRelationship-»
«EXPAND AddAssignmentDefault(useTarget, name, nameSingle)-»
«ENDDEFINE»
«DEFINE AddAssignment(Boolean useTarget, String name, String nameSingle) FOR OneToManyRelationship-»
«IF !useTarget && indexBy != null && indexBy != ''-»
        $this->«name»[$«nameSingle»->get«indexBy.formatForCodeCapital()»()] = $«nameSingle»;
«ELSEIF !useTarget && !source.getAggregateFields().isEmpty-»
«LET source.getAggregateFields().get(0) AS sourceField-»
«LET sourceField.getAggregateTargetField() AS targetField-»
        $«getRelationAliasName(true)» = new «target.implClassModelEntity()»($this, $«targetField.name.formatForCode()»);
        $this->«name»[] = $«nameSingle»;
        $this->«sourceField.name.formatForCode()» += $«targetField.name.formatForCode()»;
        return $«getRelationAliasName(true)»;
    }

    /**
     * Additional add function for internal use.
     *
     * @param «targetField.fieldTypeAsString()» $«targetField.name.formatForCode()»«REM»TODO description«ENDREM»
     */
    protected function add«targetField.name.formatForCodeCapital()»Without«getRelationAliasName(true).formatForCodeCapital()»($«targetField.name.formatForCode()»)
    {
        $this->«sourceField.name.formatForCode()» += $«targetField.name.formatForCode()»;
	«ENDLET-»
«ENDLET-»
«ELSE-»
«EXPAND AddAssignmentDefault(useTarget, name, nameSingle)-»
«ENDIF-»
«ENDDEFINE»
«DEFINE AddAssignment(Boolean useTarget, String name, String nameSingle) FOR ManyToManyRelationship-»
«IF !useTarget && indexBy != null && indexBy != ''-»
        $this->«name»[$«nameSingle»->get«indexBy.formatForCodeCapital()»()] = $«nameSingle»;
«ELSE-»
«EXPAND AddAssignmentDefault(useTarget, name, nameSingle)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE RemoveMethod(Boolean useTarget, Boolean selfIsMany, String name, String nameSingle, String type) FOR JoinRelationship-»
    /**
     * Removes an instance of «type» from the list of «name.formatForDisplay()».
     *
     * @param «type» $«name».
     *
     * @return void
     */
    public function remove«name.toFirstUpper()»(«type» $«nameSingle»)
    {
        $this->«name»->removeElement($«nameSingle»);
«IF bidirectional && !useTarget-»
«LET getRelationAliasName(!useTarget).toFirstUpper() AS ownAliasName-»
«IF selfIsMany-»
        $nameSingle->remove«ownAliasName»($this);
«ELSE-»
        $nameSingle->set«ownAliasName»(null);
«ENDIF-»
«ENDLET-»
«ENDIF-»
    }
«ENDDEFINE»

«DEFINE RemoveByIdMethod(Boolean useTarget, Boolean selfIsMany, String name, String nameSingle, String type) FOR JoinRelationship-»
    /**
     * Removes an instance of «type» from the list of «name.formatForDisplay()» by it's identifier.
     *
     * @param integer $«name».
     *
     * @return void
     */
    public function remove«name.toFirstUpper()»ById($id)
    {
        $this->«name»->remove($id);
«IF bidirectional && !useTarget-»
«LET getRelationAliasName(!useTarget).toFirstUpper() AS ownAliasName-»
«IF selfIsMany-»
        $nameSingle->remove«ownAliasName»($this);
«ELSE-»
        $nameSingle->set«ownAliasName»(null);
«ENDIF-»
«ENDLET-»
«ENDIF-»
    }
«ENDDEFINE»

