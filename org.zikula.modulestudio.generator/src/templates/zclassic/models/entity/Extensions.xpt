«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«DEFINE Imports FOR Entity-»
use Gedmo\Mapping\Annotation as Gedmo;
«ENDDEFINE»

«REM»Class annotations«ENDREM»
«DEFINE ClassExtensions FOR Entity-»
«IF loggable-»
 * @Gedmo\Loggable(logEntryClass="«implClassModel('', 'logEntry')»")
«ENDIF-»
«IF hasTranslatableFields()-»
 * @Gedmo\TranslationEntity(class="«implClassModel('', 'translation')»")
«ENDIF-»
«IF tree != EntityTreeType::NONE-»
 * @Gedmo\Tree(type="«tree.asConstant()»")
«IF tree == EntityTreeType::CLOSURE-»
 * @Gedmo\TreeClosure(class="«implClassModel('', 'closure')»")
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«REM»Column annotations«ENDREM»
«DEFINE ColumnExtensionsDefault FOR DerivedField-»
«IF translatable-»
     * @Gedmo\Translatable
«ENDIF-»
«IF sluggablePosition > 0-»
     * @Gedmo\Sluggable(slugField="slug", position=«sluggablePosition»)
«ENDIF-»
«IF sortableGroup-»
     * @Gedmo\SortableGroup
«ENDIF-»
«ENDDEFINE»

«DEFINE ColumnExtensions FOR DerivedField-»
«EXPAND ColumnExtensionsDefault-»
«ENDDEFINE»
«DEFINE ColumnExtensions FOR AbstractIntegerField-»
«EXPAND ColumnExtensionsDefault-»
«IF sortablePosition-»
     * @Gedmo\SortablePosition
«ENDIF-»
«ENDDEFINE»
«DEFINE ColumnExtensions FOR AbstractDateField-»
«EXPAND ColumnExtensionsDefault-»
«IF timestampable != EntityTimestampableType::NONE-»
     * @Gedmo\Timestampable(on="«timestampable.asConstant()»"«EXPAND TimestampableDetails-»)
«ENDIF-»
«ENDDEFINE»

«DEFINE TimestampableDetails FOR AbstractDateField-»
«IF timestampable == EntityTimestampableType::CHANGE-»
field="«timestampableChangeTriggerField.formatForCode()»"«IF timestampableChangeTriggerValue != null && timestampableChangeTriggerValue != ''-», value="«timestampableChangeTriggerValue.formatForCode()»"«ENDIF-»«''-»
«ENDIF-»
«ENDDEFINE»

«REM»Additional column definitions«ENDREM»
«DEFINE AdditionalProperties FOR Entity-»
«IF geographical-»

    /**
     * The coordinate's latitude part.
     *
     * @ORM\Column(type="decimal", precision=3, scale=7)
     * @var decimal $latitude.
     */
    protected $latitude = 0.00;

    /**
     * The coordinate's longitude part.
     *
     * @ORM\Column(type="decimal", precision=3, scale=7)
     * @var decimal $longitude.
     */
    protected $longitude = 0.00;
«ENDIF-»
«IF hasSluggableFields()-»

    /**
«IF hasTranslatableSlug()-»
     * @Gedmo\Translatable
«ENDIF-»
     * @Gedmo\Slug(style="«slugStyle.asConstant()»", separator="«slugSeparator»"«IF !slugUnique-», unique=false«ENDIF-»«IF !slugUpdatable-», updatable=false«ENDIF-»)
     * @ORM\Column(type="string", length=«slugLength»«IF !slugUnique-», unique=false«ENDIF-»)
     * @var string $slug.
     */
    protected $slug;
«ENDIF-»
«IF hasTranslatableFields()-»

    /**
     * Field for storing the locale of this entity.
     * Overrides the locale set in translationListener (as pointed out in https://github.com/l3pp4rd/DoctrineExtensions/issues/130#issuecomment-1790206 ).
     *
     * @Gedmo\Locale«REM»the same as @Gedmo\Language«ENDREM»
     * @var string $locale.
     */
    protected $locale;
«ENDIF-»
«IF tree != EntityTreeType::NONE-»

    /**
     * @Gedmo\TreeLeft
     * @ORM\Column(type="integer")
     * @var integer $lft.
     */
    protected $lft;

    /**
     * @Gedmo\TreeLevel
     * @ORM\Column(type="integer")
     * @var integer $lvl.
     */
    protected $lvl;

    /**
     * @Gedmo\TreeRight
     * @ORM\Column(type="integer")
     * @var integer $rgt.
     */
    protected $rgt;

    /**
     * @Gedmo\TreeRoot
     * @ORM\Column(type="integer", nullable=true)
     * @var integer $root.
     */
    protected $root;

    /**
     * Bidirectional - Many children [«name.formatForDisplay()»] are linked by one parent [«name.formatForDisplay()»] (OWNING SIDE).
     *
     * @Gedmo\TreeParent
     * @ORM\ManyToOne(targetEntity="«implClassModelEntity()»", inversedBy="children")
     * @ORM\JoinColumn(name="parent_id", referencedColumnName="«getPrimaryKeyFields().get(0).name.formatForDisplay()»", onDelete="SET NULL")
     * @var «implClassModelEntity()» $parent.
     */
    protected $parent;

    /**
     * Bidirectional - One parent [«name.formatForDisplay()»] has many children [«name.formatForDisplay()»] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="«implClassModelEntity()»", mappedBy="parent")
     * @ORM\OrderBy({"lft" = "ASC"})
     * @var «implClassModelEntity()» $children.
     */
    protected $children;
«ENDIF-»
«IF metaData-»

    /**
     * @ORM\OneToOne(targetEntity="«implClassModel('', 'metaData')»", 
     *               mappedBy="entity", cascade={"all"},
     *               orphanRemoval=true)
     * @var «implClassModel('', 'metaData')»
     */
    protected $metadata;
«ENDIF-»
«IF attributable-»

    /**
     * @ORM\OneToMany(targetEntity="«implClassModel('', 'attribute')»", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true, indexBy="name")
     * @var «implClassModel('', 'attribute')»
     */
    protected $attributes;
«ENDIF-»
«IF categorisable-»

    /**
     * @ORM\OneToMany(targetEntity="«implClassModel('', 'category')»", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true, indexBy="categoryRegistryId")
     * @var «implClassModel('', 'category')»
     */
    protected $categories;
«ENDIF-»
«IF standardFields-»

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
«ENDIF-»
«ENDDEFINE»

«DEFINE AdditionalAccessors FOR Entity-»
«IF geographical-»
«EXPAND FileHelper::GetterAndSetterMethods('latitude', 'decimal', false, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('longitude', 'decimal', false, false, '')-»
«ENDIF-»
«IF hasSluggableFields()-»
«EXPAND FileHelper::GetterMethod('slug', 'string', false)-»
«REM»«EXPAND FileHelper::GetterAndSetterMethods('slug', 'string', false, false, '')-»«ENDREM»«''-»
«ENDIF-»
«IF tree != EntityTreeType::NONE-»
«EXPAND FileHelper::GetterAndSetterMethods('lft', 'integer', false, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('lvl', 'integer', false, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('rgt', 'integer', false, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('root', 'integer', false, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('parent', implClassModelEntity(), false, true, 'null')-»
«EXPAND FileHelper::GetterAndSetterMethods('children', 'array', true, false, '')-»
«ENDIF-»
«IF hasTranslatableFields()-»
«EXPAND FileHelper::GetterAndSetterMethods('locale', 'string', false, false, '')-»
«ENDIF-»
«IF metaData-»
«EXPAND FileHelper::GetterAndSetterMethods('metadata', implClassModel('', 'metaData'), false, true, 'null')-»
«ENDIF-»
«IF attributable-»
«EXPAND FileHelper::GetterMethod('attributes', 'array', true)-»

    /**
     * Set attribute.
     *
     * @param string $name.
     * @param string $value.
     *
     * @return void
     */
    public function setAttribute($name, $value)
    {
        if(isset($this->attributes[$name])) {
            if($value == null) {
                $this->attributes->remove($name);
            } else {
                $this->attributes[$name]->setValue($value);
            }
        } else {
            $this->attributes[$name] = new «implClassModel('', 'attribute')»($name, $value, $this);
        }
    }
«ENDIF-»
«IF categorisable-»
«EXPAND FileHelper::GetterAndSetterMethods('categories', 'array', true, false, '')-»
«ENDIF-»
«IF standardFields-»
«EXPAND FileHelper::GetterAndSetterMethods('createdUserId', 'integer', true, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('updatedUserId', 'integer', true, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('createdDate', 'datetime', true, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('updatedDate', 'datetime', true, false, '')-»
«ENDIF-»
«ENDDEFINE»


«REM»separate extension classes«ENDREM»
«DEFINE ExtensionClasses FOR Application»
«IF hasLoggable()-»
«REM»loggable log entry class«ENDREM»
«EXPAND ExtensionClasses(this, 'logEntry') FOREACH getLoggableEntities()-»
«ENDIF-»
«IF hasTranslatable()-»
«REM»translation entities«ENDREM»
«EXPAND ExtensionClasses(this, 'translation') FOREACH getTranslatableEntities()-»
«ENDIF-»
«IF hasTrees()-»
«REM»tree closure domain object«ENDREM»
«EXPAND ExtensionClasses(this, 'closure') FOREACH getTreeEntities().select(e|e.tree == EntityTreeType::CLOSURE)-»
«ENDIF-»
«IF hasMetaDataEntities()-»
«EXPAND ExtensionClasses(this, 'metaData') FOREACH getMetaDataEntities()-»
«ENDIF-»
«IF hasAttributableEntities()-»
«EXPAND ExtensionClasses(this, 'attribute') FOREACH getAttributableEntities()-»
«ENDIF-»
«IF hasCategorisableEntities()-»
«EXPAND ExtensionClasses(this, 'category') FOREACH getCategorisableEntities()-»
«ENDIF-»
«ENDDEFINE»

«REM»single extension class«ENDREM»
«DEFINE ExtensionClasses(Application app, String classType) FOR Entity»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('', classType).asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ExtensionClassBaseImpl(app, classType)»«ENDFILE»
    «IF classType != 'closure'-»
        «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('repository', classType).asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ExtensionClassRepositoryBaseImpl(app, classType)»«ENDFILE»
    «ENDIF-»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('', classType).asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ExtensionClassImpl(app, classType)»«ENDFILE»
    «IF classType != 'closure'-»
        «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('repository', classType).asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ExtensionClassRepositoryImpl(app, classType)»«ENDFILE»
    «ENDIF-»
«ENDDEFINE»



«REM»base implementation«ENDREM»
«DEFINE ExtensionClassBaseImpl(Application app, String classType) FOR Entity-»

«IF classType == 'closure'-»
use Gedmo\Tree\Entity\AbstractClosure;
«ELSEIF classType == 'translation'-»
use Gedmo\Translatable\Entity\AbstractTranslation;
«ELSEIF classType == 'logEntry'-»
use Gedmo\Loggable\Entity\AbstractLogEntry;
«ELSEIF classType == 'metaData' || classType == 'attribute' || classType == 'category'-»
use Doctrine\ORM\Mapping as ORM;
«ENDIF-»

/**
«EXPAND ExtensionClassDesc(classType)-»
 *
 * This is the base «classType.formatForDisplay()» class for «name.formatForDisplay()» entities.
 */
«IF classType == 'closure'-»
class «baseClassModel('', classType)» extends AbstractClosure
«ELSEIF classType == 'translation'-»
class «baseClassModel('', classType)» extends AbstractTranslation
«ELSEIF classType == 'logEntry'-»
class «baseClassModel('', classType)» extends AbstractLogEntry
«ELSEIF classType == 'metaData'-»
class «baseClassModel('', classType)» extends Zikula_Doctrine2_Entity_EntityMetadata
«ELSEIF classType == 'attribute'-»
class «baseClassModel('', classType)» extends Zikula_Doctrine2_Entity_EntityAttribute
«ELSEIF classType == 'category'-»
class «baseClassModel('', classType)» extends Zikula_Doctrine2_Entity_EntityCategory
«ENDIF-»
{
«IF classType == 'metaData' || classType == 'attribute' || classType == 'category'-»
    /**
«IF classType == 'metaData'-»
     * @ORM\OneToOne(targetEntity="«implClassModelEntity()»", inversedBy="metadata")
«ELSEIF classType == 'attribute'-»
     * @ORM\ManyToOne(targetEntity="«implClassModelEntity()»", inversedBy="attributes")
«ELSEIF classType == 'category'-»
     * @ORM\ManyToOne(targetEntity="«implClassModelEntity()»", inversedBy="categories")
«ENDIF-»
     * @ORM\JoinColumn(name="entityId", referencedColumnName="«getPrimaryKeyFields().get(0).name.formatForCode()»"«IF classType == 'metaData'-», unique=true«ENDIF-»)
     * @var «implClassModelEntity()»
     */
    protected $entity;

    /**
     * Get reference to owning entity.
     *
     * @return «implClassModelEntity()»
     */
    public function getEntity()
    {
        return $this->entity;
    }

    /**
     * Set reference to owning entity.
     *
     * @param «implClassModelEntity()» $entity
     */
    public function setEntity(/*«implClassModelEntity()» */$entity)
    {
        $this->entity = $entity;
    }
«ENDIF-»
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ExtensionClassImpl(Application app, String classType) FOR Entity-»
use Doctrine\ORM\Mapping as ORM;

/**
«EXPAND ExtensionClassDesc(classType)-»
 *
 * This is the concrete «classType.formatForDisplay()» class for «name.formatForDisplay()» entities.
«IF classType == 'closure'-»
«ELSEIF classType == 'translation'-»
 *
 * @ORM\Entity(repositoryClass="«baseClassModel('repository', classType)»")
 * @ORM\Table(name="«fullEntityTableName()»_translation",
 *     indexes={
 *         @ORM\Index(name="translations_lookup_idx", columns={
 *             "locale", "object_class", "foreign_key"
 *         })
 *     }«REM»,commented out because the length of these four fields * 3 is more than 1000 bytes with UTF-8 (requiring 3 bytes per char)
 *     uniqueConstraints={
 *         @ORM\UniqueConstraint(name="lookup_unique_idx", columns={
 *             "locale", "object_class", "foreign_key", "field"
 *         })
 *     }«ENDREM»
 * )
«ELSEIF classType == 'logEntry'-»
 *
 * @ORM\Entity(repositoryClass="«baseClassModel('repository', classType)»")
 * @ORM\Table(name="«fullEntityTableName()»_log_entry",
 *     indexes={
 *         @ORM\Index(name="log_class_lookup_idx", columns={"object_class"}),
 *         @ORM\Index(name="log_date_lookup_idx", columns={"logged_at"}),
 *         @ORM\Index(name="log_user_lookup_idx", columns={"username"})
 *     }
 * )
«ELSEIF classType == 'metaData' || classType == 'attribute' || classType == 'category'-»
 * @ORM\Entity(repositoryClass="«baseClassModel('repository', classType)»")
«IF classType == 'metaData'-»
 * @ORM\Table(name="«fullEntityTableName()»_metadata")
«ELSEIF classType == 'attribute'-»
 * @ORM\Table(name="«fullEntityTableName()»_attribute",
 *     uniqueConstraints={
 *         @ORM\UniqueConstraint(name="cat_unq", columns={"name", "entityId"})
 *     }
 * )
«ELSEIF classType == 'category'-»
 * @ORM\Table(name="«fullEntityTableName()»_category",
 *     uniqueConstraints={
 *         @ORM\UniqueConstraint(name="cat_unq",columns={"registryId", "categoryId", "entityId"})
 *     }
 * )
«ENDIF-»
«ENDIF-»
 */
class «implClassModel('', classType)» extends «IF isInheriting()»«parentType().implClassModel('', classType)»«ELSE»«baseClassModel('', classType)»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»


«DEFINE ExtensionClassDesc(String classType) FOR Entity»
«IF classType == 'closure'-»
 * Entity extension domain class storing «name.formatForDisplay()» tree closures.
«ELSEIF classType == 'translation'-»
 * Entity extension domain class storing «name.formatForDisplay()» translations.
«ELSEIF classType == 'logEntry'-»
 * Entity extension domain class storing «name.formatForDisplay()» log entries.
«ELSEIF classType == 'metaData'-»
 * Entity extension domain class storing «name.formatForDisplay()» meta data.
«ELSEIF classType == 'attribute'-»
 * Entity extension domain class storing «name.formatForDisplay()» attributes.
«ELSEIF classType == 'category'-»
 * Entity extension domain class storing «name.formatForDisplay()» categories.
«ENDIF-»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ExtensionClassRepositoryBaseImpl(Application app, String classType) FOR Entity»
«IF classType == 'translation'-»
use Gedmo\Translatable\Entity\Repository\TranslationRepository;
«ELSEIF classType == 'logEntry'-»
use Gedmo\Loggable\Entity\Repository\LogEntryRepository;
«ELSE-»
use Doctrine\ORM\EntityRepository;
«ENDIF-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for «name.formatForDisplay()» «classType.formatForDisplay()» entities.
 */
class «baseClassModel('repository', classType)» extends «IF classType == 'translation'-»Translation«ELSEIF classType == 'logEntry'-»LogEntry«ELSE-»Entity«ENDIF-»Repository
{
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ExtensionClassRepositoryImpl(Application app, String classType) FOR Entity»
/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for «name.formatForDisplay()» «classType.formatForDisplay()» entities.
 */
class «implClassModel('repository', classType)» extends «IF isInheriting()»«parentType().implClassModel('repository', classType)»«ELSE»«baseClassModel('repository', classType)»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»
