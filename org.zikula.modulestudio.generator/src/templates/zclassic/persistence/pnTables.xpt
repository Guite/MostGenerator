«IMPORT ModuleStudio»
«IMPORT Persistence»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»Entry point for module table definition«ENDREM»
«DEFINE Root FOR Module-»
«FILE "pntables.php"-»
«EXPAND FileHelper::phpFileHeader(this)-»
«EXPAND TableInfo-»
«ENDFILE»
«ENDDEFINE»

«DEFINE TableInfo FOR Module-»
/**
 * Populate tables array for «modName()» module
 *
 * This function is called internally by the core whenever the module is
 * loaded. It delivers the table information to the core.
 * It can be loaded explicitly using the pnModDBInfoLoad() API function.
 *
 * @author       «author»
 * @return       array       The table information.
 */
function «modName()»_pntables()
{
    // Initialise table array
    $tables = array();

    $dbdriver = DBConnectionStack::getConnectionDBDriver();

«FOREACH persistenceContainer.tables AS tab-»

    /*
     * definitions for «moduleName(tab.name)» table
     */

    // set the table name combined with prefix
    $tables['«fullTableName(tab)»'] = DBUtil::getLimitedTablename('«fullTableName(tab)»');

    // set the column names
    $columns = array(«EXPAND FieldStructure(tab.prefix) FOREACH tab.columns SEPARATOR ','»);

    // set the data dictionary for the table columns
«EXPAND TextTypesMSSQL FOREACH tab.columns-»
    $columnDef = array(«EXPAND FieldData FOREACH tab.columns SEPARATOR ','»);

«EXPAND ObjectExtensions FOR tab-»

    $tables['«fullTableName(tab)»_column'] = $columns;
    $tables['«fullTableName(tab)»_column_def'] = $columnDef;

«IF tab.indices.size > 0-»
    // define additional indexes
    $tables['«dbName(prefix + '_' + tab.name)»_column_idx'] = array(«EXPAND IndexStructure FOREACH tab.indices SEPARATOR ','»);
«ENDIF-»
«ENDFOREACH-»

    // return table data
    return $tables;
}
«ENDDEFINE»


«REM»column definition«ENDREM»
«DEFINE FieldStructure(String prefix) FOR TableColumn»
        '«dbName(name)»' => '«dbName(prefix + '_' + name)»'«ENDDEFINE»

«REM»column data dictionary«ENDREM»
«REM»http://community.zikula.org/Wiki-AdodbDataDictionary.htm«ENDREM»

«DEFINE TextTypesMSSQL FOR TableColumn»«ENDDEFINE»
«DEFINE TextTypesMSSQL FOR TextField»
«IF type == TextFieldType::NORMAL-»
    $«dbName(name)»Type = 'X';
«ELSEIF type == TextFieldType::LARGE-»
    $«dbName(name)»Type = 'XL';
«ELSEIF type == TextFieldType::MULTIBYTE-»
    $«dbName(name)»Type = 'C2';
«ELSEIF type == TextFieldType::LARGEMULTIBYTE-»
    $«dbName(name)»Type = 'X2';
«ENDIF-»
«EXPAND TextTypesMSSQLFix»
«ENDDEFINE»

«DEFINE TextTypesMSSQLFix FOR TableColumn»
    $dbType = DBConnectionStack::getConnectionDBType();
    if ($dbType == 'mssql') { // mssql can't sort on fields of type text
        $«dbName(name)»Type = 'C(8000)';
    }
«ENDDEFINE»

«DEFINE FieldData FOR TableColumn»
        '«dbName(name)»' => "«IF isPrimaryKey == true»I NOTNULL AUTO PRIMARY«ELSE»«EXPAND TypeDef»«EXPAND TypeValue»«ENDIF»"«ENDDEFINE»

«DEFINE TypeDef FOR TableColumn-»
//TODO: Undefined TableColumn
«ENDDEFINE»
«DEFINE TypeValue FOR TableColumn»«IF isMandatory == true» NOTNULL«ENDIF»«REM»no default value for text and blob fields, breaks mysql strict mode«ENDREM»«IF metaType.name != "Persistence::TextField" && metaType.name != "Persistence::BlobField"» DEFAULT '«defaultValue»'«ENDIF»«ENDDEFINE»

«DEFINE TypeDef FOR StringField»C(«IF length > 0 && length < 256»«length»«ELSE»255«ENDIF»)«ENDDEFINE»
«DEFINE TypeDef FOR TextField»$«dbName(name)»Type«ENDDEFINE»
«DEFINE TypeDef FOR BlobField»B«ENDDEFINE»

«DEFINE TypeDef FOR DateField»D«ENDDEFINE»«REM»1970-01-01«ENDREM»
«DEFINE TypeValue FOR DateField»«IF isMandatory == true» NOTNULL«ENDIF» «IF defaultValue.length > 0»DEFAULT '«defaultValue»'«ELSEIF isMandatory == true»DEFDATE«ELSE»DEFAULT NULL«ENDIF»«ENDDEFINE»

«DEFINE TypeDef FOR TimestampField»T«ENDDEFINE»«REM»1970-01-01 00:00:00«ENDREM»
«DEFINE TypeValue FOR TimestampField»«IF isMandatory == true» NOTNULL«ENDIF» «IF defaultValue.length > 0»DEFAULT '«defaultValue»'«ELSEIF isMandatory == true»DEFTIMESTAMP«ELSE»DEFAULT NULL«ENDIF»«ENDDEFINE»

«DEFINE TypeDef FOR BooleanField»L«ENDDEFINE»
«DEFINE TypeValue FOR BooleanField»«IF isMandatory == true» NOTNULL«ENDIF» DEFAULT '«IF defaultValue == true»1«ELSE»0«ENDIF»'«ENDDEFINE»

«DEFINE TypeDef FOR IntegerField»I«IF length == "1" || length == "2" || length == "4" || length == "8"»«length»«ELSE»4«ENDIF»«ENDDEFINE»
«DEFINE TypeValue FOR IntegerField»«IF isMandatory == true» NOTNULL«ENDIF» DEFAULT '«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»'«ENDDEFINE»

«DEFINE TypeDef FOR FloatField»F«IF length > 0»(«length».«precision»)«ELSE»(10.2)«ENDIF»«ENDDEFINE»
«DEFINE TypeValue FOR FloatField»«IF isMandatory == true» NOTNULL«ENDIF» DEFAULT '«IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»'«ENDDEFINE»

«DEFINE TypeDef FOR DecimalField»N«IF length > 0»(«length».«precision»)«ELSE»(10.2)«ENDIF»«ENDDEFINE»
«DEFINE TypeValue FOR DecimalField»«IF isMandatory == true» NOTNULL«ENDIF» DEFAULT «IF defaultValue.length > 0»«defaultValue»«ELSE»0«ENDIF»«ENDDEFINE»


«DEFINE IndexStructure FOR TableIndex»
        '«dbName(name)»' => «IF indexItems.size > 1»array(«EXPAND IndexField FOREACH indexItems SEPARATOR ', '»)«ELSE»'«dbName(indexItems.get(0).name)»'«ENDIF»«ENDDEFINE»

«DEFINE IndexField FOR TableIndexItem»'«dbName(name)»'«ENDDEFINE»


«DEFINE ObjectExtensions FOR Table»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»

