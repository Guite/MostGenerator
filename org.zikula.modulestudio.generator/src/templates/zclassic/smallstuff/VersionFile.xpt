«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»


«DEFINE Root FOR Application»
    «FILE getAppSourceLibPath(appName()).msconcat("Base/Version.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND AppInfoBase»«ENDFILE»
    «FILE getAppSourceLibPath(appName()).msconcat("Version.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND AppInfoImpl»«ENDFILE»
«ENDDEFINE»

«DEFINE AppInfoBase FOR Application-»
/**
 * Version information base class.
 */
class «appName()»_Base_Version extends Zikula_AbstractVersion
{
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version']              = '«version»';
        // the displayed name of the module
        $meta['displayname']          = $this->__('«appName()»');
        // the module description
        $meta['description']          = $this->__('«IF documentation != null && documentation != ""»«documentation.replaceAll("'", "\\'")»«ELSE»«appName()» module generated by ModuleStudio «msVersion()».«ENDIF»');
        //! url version of name, should be in lowercase without space
        $meta['url']                  = $this->__('«appName().formatForDB()»');
        // core requirement
        $meta['core_min']             = '1.3.1'; // requires minimum 1.3.1 or later
        $meta['core_max']             = '1.3.99'; // not ready for 1.4.0 yet

        // define special capabilities of this module
        $meta['capabilities'] = array(
                          HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)
/*,
                          HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #15
                          'authentication' => array('version' => '1.0'),
                          'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
                          'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
*/
        );

        // permission schema
«EXPAND PermissionSchema-»
«IF !referredApplications.isEmpty-»

        // module dependencies
        $meta['dependencies'] = array(
«EXPAND AppDependency FOREACH referredApplications SEPARATOR ','-»
        );
«ENDIF-»

        return $meta;
    }

    /**
     * Define hook subscriber«REM» and provider (TODO see #15)«ENDREM» bundles.
     */
    protected function setupHookBundles()
    {
«REM»we register one hook subscriber bundle foreach entity type«ENDREM»«""-»
«LET name.formatForDB() AS appName-»
«FOREACH models.entities AS entity-»
«LET entity.nameMultiple.formatForDB() AS areaName»
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.«appName».ui_hooks.«areaName»', 'ui_hooks', __('«appName» «entity.nameMultiple.formatForDisplayCapital()» Display Hooks'));
«REM»   $bundle->addEvent('hook type', 'event name triggered by *this* module');«ENDREM»«""-»
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', '«appName».ui_hooks.«areaName».display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', '«appName».ui_hooks.«areaName».form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', '«appName».ui_hooks.«areaName».form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', '«appName».ui_hooks.«areaName».validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', '«appName».ui_hooks.«areaName».validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', '«appName».ui_hooks.«areaName».process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', '«appName».ui_hooks.«areaName».process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.«appName».filter_hooks.«areaName»', 'filter_hooks', __('«appName» «entity.nameMultiple.formatForDisplayCapital()» Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', '«appName».filter_hooks.«areaName».filter');
        $this->registerHookSubscriberBundle($bundle);
«ENDLET-»
«ENDFOREACH-»
«ENDLET-»

«REM»TODO see #15
Example for name of provider area: provider_area.comments.general

        $bundle = new Zikula_Version_HookProviderBundle($this->name, 'provider.ratings.ui_hooks.rating', 'ui_hooks', $this->__('Ratings Hook Poviders'));
        $bundle->addServiceHandler('display_view', 'Ratings_Hooks', 'uiView', 'ratings.service');
        // add other hooks as needed
        $this->registerHookProviderBundle($bundle);

        //... repeat as many times as necessary
«ENDREM»
    }
}

«ENDDEFINE»

«DEFINE AppInfoImpl FOR Application-»
/**
 * Version information implementation class.
 */
class «appName()»_Version extends «appName()»_Base_Version
{
    // custom enhancements can go here
}
«ENDDEFINE»

«DEFINE PermissionSchema FOR Application»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»


«DEFINE AppDependency FOR Application-»
                    array('modname'    => '«appName()»',
                          'minversion' => '«version»',
                          'maxversion' => '',
                          'status'     => ModUtil::DEPENDENCY_REQUIRED«REM»TODO: ModUtil::RECOMMENDED, ModUtil::CONFLICTS«ENDREM»)
«ENDDEFINE»
