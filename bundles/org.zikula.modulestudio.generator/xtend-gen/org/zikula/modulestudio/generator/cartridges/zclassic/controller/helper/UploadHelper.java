package org.zikula.modulestudio.generator.cartridges.zclassic.controller.helper;

import com.google.common.collect.Iterables;
import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.DataObject;
import de.guite.modulestudio.metamodel.Entity;
import de.guite.modulestudio.metamodel.UploadField;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class UploadHelper {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  /**
   * Entry point for the helper class creation.
   */
  public void generate(final Application it, final IFileSystemAccess fsa) {
    InputOutput.<String>println("Generating helper class for upload handling");
    final FileHelper fh = new FileHelper();
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Helper/UploadHelper.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      fh.phpFileContent(it, this.uploadFunctionsBaseImpl(it)), fh.phpFileContent(it, this.uploadFunctionsImpl(it)));
  }
  
  private CharSequence uploadFunctionsBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Helper\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Liip\\ImagineBundle\\Imagine\\Cache\\CacheManager;");
    _builder.newLine();
    _builder.append("use Psr\\Log\\LoggerInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Filesystem\\Exception\\IOExceptionInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Filesystem\\Filesystem;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\File\\File;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\Common\\Translator\\TranslatorInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\Common\\Translator\\TranslatorTrait;");
    _builder.newLine();
    _builder.append("use Zikula\\ExtensionsModule\\Api\\");
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      if ((_targets).booleanValue()) {
        _builder.append("ApiInterface\\VariableApiInterface");
      } else {
        _builder.append("VariableApi");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("use Zikula\\UsersModule\\Api\\");
    {
      Boolean _targets_1 = this._utils.targets(it, "1.5");
      if ((_targets_1).booleanValue()) {
        _builder.append("ApiInterface\\CurrentUserApiInterface");
      } else {
        _builder.append("CurrentUserApi");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Helper base class for upload handling.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractUploadHelper");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("use TranslatorTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var SessionInterface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $session;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var CacheManager");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $thumbCacheManager;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var LoggerInterface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var CurrentUserApi");
    {
      Boolean _targets_2 = this._utils.targets(it, "1.5");
      if ((_targets_2).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $currentUserApi;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var VariableApi");
    {
      Boolean _targets_3 = this._utils.targets(it, "1.5");
      if ((_targets_3).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $variableApi;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var String");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $dataDirectory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var array List of object types with upload fields");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $allowedObjectTypes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var array List of file types to be considered as images");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $imageFileTypes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var array List of dangerous file types to be rejected");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $forbiddenFileTypes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* UploadHelper constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param TranslatorInterface $translator        Translator service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param SessionInterface    $session           Session service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param CacheManager        $thumbCacheManager Imagine thumb cache manager");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LoggerInterface     $logger            Logger service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param CurrentUserApi");
    {
      Boolean _targets_4 = this._utils.targets(it, "1.5");
      if ((_targets_4).booleanValue()) {
        _builder.append("Interface");
      } else {
        _builder.append("     ");
      }
    }
    _builder.append(" $currentUserApi    CurrentUserApi service instance");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("* @param VariableApi");
    {
      Boolean _targets_5 = this._utils.targets(it, "1.5");
      if ((_targets_5).booleanValue()) {
        _builder.append("Interface");
      } else {
        _builder.append("        ");
      }
    }
    _builder.append(" $variableApi       VariableApi service instance");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("* @param String              $dataDirectory     The data directory name");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("TranslatorInterface $translator,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SessionInterface $session,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CacheManager $thumbCacheManager,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LoggerInterface $logger,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CurrentUserApi");
    {
      Boolean _targets_6 = this._utils.targets(it, "1.5");
      if ((_targets_6).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.append(" $currentUserApi,");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("VariableApi");
    {
      Boolean _targets_7 = this._utils.targets(it, "1.5");
      if ((_targets_7).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.append(" $variableApi,");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$dataDirectory");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(") {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setTranslator($translator);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->session = $session;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->thumbCacheManager = $thumbCacheManager;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->logger = $logger;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->currentUserApi = $currentUserApi;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->variableApi = $variableApi;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->dataDirectory = $dataDirectory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->allowedObjectTypes = [");
    {
      Iterable<DataObject> _uploadEntities = this._modelExtensions.getUploadEntities(it);
      boolean _hasElements = false;
      for(final DataObject entity : _uploadEntities) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "        ");
        }
        _builder.append("\'");
        String _formatForCode = this._formattingExtensions.formatForCode(entity.getName());
        _builder.append(_formatForCode, "        ");
        _builder.append("\'");
      }
    }
    _builder.append("];");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$this->imageFileTypes = [\'gif\', \'jpeg\', \'jpg\', \'png\', \'swf\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->forbiddenFileTypes = [\'cgi\', \'pl\', \'asp\', \'phtml\', \'php\', \'php3\', \'php4\', \'php5\', \'exe\', \'com\', \'bat\', \'jsp\', \'cfm\', \'shtml\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _setTranslatorMethod = this._modelBehaviourExtensions.setTranslatorMethod(it);
    _builder.append(_setTranslatorMethod, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _performFileUpload = this.performFileUpload(it);
    _builder.append(_performFileUpload, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _validateFileUpload = this.validateFileUpload(it);
    _builder.append(_validateFileUpload, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _readMetaDataForFile = this.readMetaDataForFile(it);
    _builder.append(_readMetaDataForFile, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _isAllowedFileExtension = this.isAllowedFileExtension(it);
    _builder.append(_isAllowedFileExtension, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _determineFileName = this.determineFileName(it);
    _builder.append(_determineFileName, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _deleteUploadFile = this.deleteUploadFile(it);
    _builder.append(_deleteUploadFile, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _fileBaseFolder = this.getFileBaseFolder(it);
    _builder.append(_fileBaseFolder, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _initialiseUploadField = this.initialiseUploadField(it);
    _builder.append(_initialiseUploadField, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _checkAndCreateAllUploadFolders = this.checkAndCreateAllUploadFolders(it);
    _builder.append(_checkAndCreateAllUploadFolders, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _checkAndCreateUploadFolder = this.checkAndCreateUploadFolder(it);
    _builder.append(_checkAndCreateUploadFolder, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence performFileUpload(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Process a file upload.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $objectType Currently treated entity type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param UploadedFile $file       The uploaded file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $fieldName  Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array Resulting file name and collected meta data");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function performFileUpload($objectType, $file, $fieldName)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'fileName\' => \'\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'metaData\' => []");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// check whether uploads are allowed for the given object type");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!in_array($objectType, $this->allowedObjectTypes)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// perform validation");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->validateFileUpload($objectType, $file, $fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (\\Exception $e) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// skip this upload field");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// build the file name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fileName = $file->getClientOriginalName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fileNameParts = explode(\'.\', $fileName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$extension = null !== $file->guessExtension() ? $file->guessExtension() : $file->guessClientExtension();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (null === $extension) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$extension = strtolower($fileNameParts[count($fileNameParts) - 1]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$extension = str_replace(\'jpeg\', \'jpg\', $extension);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fileNameParts[count($fileNameParts) - 1] = $extension;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fileName = implode(\'.\', $fileNameParts);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$flashBag = $this->session->getFlashBag();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// retrieve the final file name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$basePath = $this->getFileBaseFolder($objectType, $fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (\\Exception $e) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$flashBag->add(\'error\', $e->getMessage());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->logger->error(\'{app}: User {user} could not detect upload destination path for entity {entity} and field {field}.\', [\'app\' => \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "        ");
    _builder.append("\', \'user\' => $this->currentUserApi->get(\'uname\'), \'entity\' => $objectType, \'field\' => $fieldName]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fileName = $this->determineFileName($objectType, $fieldName, $basePath, $fileName, $extension);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$destinationFilePath = $basePath . $fileName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$targetFile = $file->move($basePath, $fileName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _doFileValidation = this.doFileValidation(it, "$destinationFilePath");
    _builder.append(_doFileValidation, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$isImage = in_array($extension, $this->imageFileTypes);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($isImage) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// check if shrinking functionality is enabled");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldSuffix = ucfirst($objectType) . ucfirst($fieldName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (true === $this->variableApi->get(\'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "        ");
    _builder.append("\', \'enableShrinkingFor\' . $fieldSuffix, false)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("// check for maximum size");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$maxWidth = $this->variableApi->get(\'");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "            ");
    _builder.append("\', \'shrinkWidth\' . $fieldSuffix, 800);");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("$maxHeight = $this->variableApi->get(\'");
    String _appName_3 = this._utils.appName(it);
    _builder.append(_appName_3, "            ");
    _builder.append("\', \'shrinkHeight\' . $fieldSuffix, 600);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$imgInfo = getimagesize($destinationFilePath);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($imgInfo[0] > $maxWidth || $imgInfo[1] > $maxHeight) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// resize to allowed maximum size");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$thumbConfig = [");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\'size\' => [$maxWidth, $maxHeight],");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\'mode\' => \'inset\'");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// create thumbnail image");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$thumbFilePath = $this->thumbCacheManager->getBrowserPath($destinationFilePath, \'zkroot\', $thumbConfig);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// remove original image");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("unlink($destinationFilePath);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// rename thumbnail image to original image");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("rename($thumbFilePath, $destinationFilePath);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// collect data to return");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result[\'fileName\'] = $fileName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result[\'metaData\'] = $this->readMetaDataForFile($fileName, $destinationFilePath);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence validateFileUpload(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if an upload file meets all validation criteria.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $objectType Currently treated entity type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param UploadedFile $file       Reference to data of uploaded file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $fieldName  Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return boolean true if file is valid else false");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function validateFileUpload($objectType, $file, $fieldName)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$flashBag = $this->session->getFlashBag();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// check if a file has been uploaded properly without errors");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($file->getError() != UPLOAD_ERR_OK) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$flashBag->add(\'error\', $file->getErrorMessage());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->logger->error(\'{app}: User {user} tried to upload a file with errors: \' . $file->getErrorMessage(), [\'app\' => \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "        ");
    _builder.append("\', \'user\' => $this->currentUserApi->get(\'uname\')]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// extract file extension");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fileName = $file->getClientOriginalName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$extension = null !== $file->guessExtension() ? $file->guessExtension() : $file->guessClientExtension();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (null === $extension) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fileNameParts = explode(\'.\', $fileName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$extension = strtolower($fileNameParts[count($fileNameParts) - 1]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$extension = str_replace(\'jpeg\', \'jpg\', $extension);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// validate extension");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$isValidExtension = $this->isAllowedFileExtension($objectType, $fieldName, $extension);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (false === $isValidExtension) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$flashBag->add(\'error\', $this->__(\'Error! This file type is not allowed. Please choose another file format.\'));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->logger->error(\'{app}: User {user} tried to upload a file with a forbidden extension (\"{extension}\").\', [\'app\' => \'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "        ");
    _builder.append("\', \'user\' => $this->currentUserApi->get(\'uname\'), \'extension\' => $extension]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence doFileValidation(final Application it, final String fileVar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// validate image file");
    _builder.newLine();
    _builder.append("$isImage = in_array($extension, $this->imageFileTypes);");
    _builder.newLine();
    _builder.append("if ($isImage) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$imgInfo = getimagesize(");
    _builder.append(fileVar, "    ");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("if (!is_array($imgInfo) || !$imgInfo[0] || !$imgInfo[1]) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$flashBag->add(\'error\', $this->__(\'Error! This file type seems not to be a valid image.\'));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->logger->error(\'{app}: User {user} tried to upload a file which is seems not to be a valid image.\', [\'app\' => \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "        ");
    _builder.append("\', \'user\' => $this->currentUserApi->get(\'uname\')]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence readMetaDataForFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Read meta data from a certain file.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $fileName  Name of file to be processed");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $filePath  Path to file to be processed");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array collected meta data");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function readMetaDataForFile($fileName, $filePath)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$meta = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($fileName)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $meta;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$extensionarr = explode(\'.\', $fileName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$meta[\'extension\'] = strtolower($extensionarr[count($extensionarr) - 1]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$meta[\'size\'] = filesize($filePath);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$meta[\'isImage\'] = in_array($meta[\'extension\'], $this->imageFileTypes) ? true : false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$meta[\'isImage\']) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $meta;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($meta[\'extension\'] == \'swf\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$meta[\'isImage\'] = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$imgInfo = getimagesize($filePath);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!is_array($imgInfo)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $meta;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$meta[\'width\'] = $imgInfo[0];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$meta[\'height\'] = $imgInfo[1];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($imgInfo[1] < $imgInfo[0]) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$meta[\'format\'] = \'landscape\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($imgInfo[1] > $imgInfo[0]) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$meta[\'format\'] = \'portrait\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$meta[\'format\'] = \'square\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $meta;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence isAllowedFileExtension(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determines the allowed file extensions for a given object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType Currently treated entity type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $fieldName  Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $extension  Input file extension");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array the list of allowed file extensions");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function isAllowedFileExtension($objectType, $fieldName, $extension)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// determine the allowed extensions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$allowedExtensions = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("switch ($objectType) {");
    _builder.newLine();
    _builder.append("        ");
    {
      Iterable<Entity> _filter = Iterables.<Entity>filter(this._modelExtensions.getUploadEntities(it), Entity.class);
      for(final Entity entity : _filter) {
        CharSequence _isAllowedFileExtensionEntityCase = this.isAllowedFileExtensionEntityCase(entity);
        _builder.append(_isAllowedFileExtensionEntityCase, "        ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (count($allowedExtensions) > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!in_array($extension, $allowedExtensions)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (in_array($extension, $this->forbiddenFileTypes)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence isAllowedFileExtensionEntityCase(final Entity it) {
    StringConcatenation _builder = new StringConcatenation();
    final Iterable<UploadField> uploadFields = this._modelExtensions.getUploadFieldsEntity(it);
    _builder.newLineIfNotEmpty();
    _builder.append("case \'");
    String _formatForCode = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode);
    _builder.append("\':");
    _builder.newLineIfNotEmpty();
    {
      int _size = IterableExtensions.size(uploadFields);
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        _builder.append("    ");
        _builder.append("switch ($fieldName) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        {
          for(final UploadField uploadField : uploadFields) {
            CharSequence _isAllowedFileExtensionFieldCase = this.isAllowedFileExtensionFieldCase(uploadField);
            _builder.append(_isAllowedFileExtensionFieldCase, "        ");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("$allowedExtensions = [\'");
        String _replace = IterableExtensions.<UploadField>head(uploadFields).getAllowedExtensions().replace(", ", "\', \'");
        _builder.append(_replace, "    ");
        _builder.append("\'];");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.append("break;");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence isAllowedFileExtensionFieldCase(final UploadField it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("case \'");
    String _formatForCode = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode);
    _builder.append("\':");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$allowedExtensions = [\'");
    String _replace = it.getAllowedExtensions().replace(", ", "\', \'");
    _builder.append(_replace, "    ");
    _builder.append("\'];");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("break;");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence determineFileName(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determines the final filename for a given input filename.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* It considers different strategies for computing the result.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType Currently treated entity type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $fieldName  Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $basePath   Base path for file storage");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $fileName   Input file name");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $extension  Input file extension");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string the resulting file name");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function determineFileName($objectType, $fieldName, $basePath, $fileName, $extension)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$backupFileName = $fileName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$namingScheme = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("switch ($objectType) {");
    _builder.newLine();
    _builder.append("        ");
    {
      Iterable<Entity> _filter = Iterables.<Entity>filter(this._modelExtensions.getUploadEntities(it), Entity.class);
      for(final Entity entity : _filter) {
        CharSequence _determineFileNameEntityCase = this.determineFileNameEntityCase(entity);
        _builder.append(_determineFileNameEntityCase, "        ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$iterIndex = -1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("do {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($namingScheme == 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// original file name");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fileNameCharCount = strlen($fileName);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for ($y = 0; $y < $fileNameCharCount; $y++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (preg_match(\'/[^0-9A-Za-z_\\.]/\', $fileName[$y])) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$fileName[$y] = \'_\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// append incremented number");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($iterIndex > 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// strip off extension");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$fileName = str_replace(\'.\' . $extension, \'\', $backupFileName);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// add iterated number");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$fileName .= (string) ++$iterIndex;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// readd extension");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$fileName .= \'.\' . $extension;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$iterIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} elseif ($namingScheme == 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// md5 name");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fileName = md5(uniqid(mt_rand(), TRUE)) . \'.\' . $extension;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} elseif ($namingScheme == 2) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// prefix with random number");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fileName = $fieldName . mt_rand(1, 999999) . \'.\' . $extension;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while (file_exists($basePath . $fileName)); // repeat until we have a new name");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// return the new file name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $fileName;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence determineFileNameEntityCase(final Entity it) {
    StringConcatenation _builder = new StringConcatenation();
    final Iterable<UploadField> uploadFields = this._modelExtensions.getUploadFieldsEntity(it);
    _builder.newLineIfNotEmpty();
    _builder.append("case \'");
    String _formatForCode = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode);
    _builder.append("\':");
    _builder.newLineIfNotEmpty();
    {
      int _size = IterableExtensions.size(uploadFields);
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        _builder.append("    ");
        _builder.append("switch ($fieldName) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        {
          for(final UploadField uploadField : uploadFields) {
            CharSequence _determineFileNameFieldCase = this.determineFileNameFieldCase(uploadField);
            _builder.append(_determineFileNameFieldCase, "        ");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("$namingScheme = ");
        int _value = IterableExtensions.<UploadField>head(uploadFields).getNamingScheme().getValue();
        _builder.append(_value, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.append("break;");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence determineFileNameFieldCase(final UploadField it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("case \'");
    String _formatForCode = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode);
    _builder.append("\':");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$namingScheme = ");
    int _value = it.getNamingScheme().getValue();
    _builder.append(_value, "    ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("break;");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence deleteUploadFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Deletes an existing upload file.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* For images the thumbnails are removed, too.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param object  $entity    Currently treated entity");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $fieldName Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return mixed Updated entity on success, else false");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function deleteUploadFile($entity, $fieldName)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectType = $entity->get_objectType();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!in_array($objectType, $this->allowedObjectTypes)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($entity[$fieldName])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $entity;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    final Function1<Entity, Boolean> _function = (Entity it_1) -> {
      return Boolean.valueOf(it_1.isLoggable());
    };
    final Iterable<Entity> loggableEntitiesWithUploads = IterableExtensions.<Entity>filter(Iterables.<Entity>filter(this._modelExtensions.getUploadEntities(it), Entity.class), _function);
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("// remove the file");
    {
      boolean _isEmpty = IterableExtensions.isEmpty(loggableEntitiesWithUploads);
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append(" (but not for loggable entities)");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty_1 = IterableExtensions.isEmpty(loggableEntitiesWithUploads);
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("    ");
        _builder.append("if (!in_array($objectType, [\'");
        final Function1<Entity, String> _function_1 = (Entity it_1) -> {
          return this._formattingExtensions.formatForCode(it_1.getName());
        };
        String _join = IterableExtensions.join(IterableExtensions.<Entity, String>map(loggableEntitiesWithUploads, _function_1), "\', \'");
        _builder.append(_join, "    ");
        _builder.append("\'])) {");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("if (is_array($entity[$fieldName]) && isset($entity[$fieldName][$fieldName])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$fieldName] = $entity[$fieldName][$fieldName];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (is_object($entity[$fieldName])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$filePath = $entity[$fieldName]->getPathname();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (file_exists($filePath) && !unlink($filePath)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      boolean _isEmpty_2 = IterableExtensions.isEmpty(loggableEntitiesWithUploads);
      boolean _not_2 = (!_isEmpty_2);
      if (_not_2) {
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entity[$fieldName] = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entity[$fieldName . \'Meta\'] = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entity[$fieldName . \'Url\'] = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $entity;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence getFileBaseFolder(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Retrieve the base path for given object type and upload field combination.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $objectType   Name of treated entity type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $fieldName    Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param boolean $ignoreCreate Whether to ignore the creation of upload folders on demand or not");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return mixed Output");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @throws Exception If an invalid object type is used");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getFileBaseFolder($objectType, $fieldName, $ignoreCreate = false)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$basePath = $this->dataDirectory . \'/");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "    ");
    _builder.append("/\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("switch ($objectType) {");
    _builder.newLine();
    {
      Iterable<Entity> _filter = Iterables.<Entity>filter(this._modelExtensions.getUploadEntities(it), Entity.class);
      for(final Entity entity : _filter) {
        _builder.append("        ");
        final Iterable<UploadField> uploadFields = this._modelExtensions.getUploadFieldsEntity(entity);
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("case \'");
        String _formatForCode = this._formattingExtensions.formatForCode(entity.getName());
        _builder.append(_formatForCode, "        ");
        _builder.append("\':");
        _builder.newLineIfNotEmpty();
        {
          int _size = IterableExtensions.size(uploadFields);
          boolean _greaterThan = (_size > 1);
          if (_greaterThan) {
            _builder.append("        ");
            _builder.append("    ");
            _builder.append("$basePath .= \'");
            String _formatForDB = this._formattingExtensions.formatForDB(entity.getNameMultiple());
            _builder.append(_formatForDB, "            ");
            _builder.append("/\';");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.append("    ");
            _builder.append("switch ($fieldName) {");
            _builder.newLine();
            {
              for(final UploadField uploadField : uploadFields) {
                _builder.append("        ");
                _builder.append("    ");
                _builder.append("    ");
                _builder.append("case \'");
                String _formatForCode_1 = this._formattingExtensions.formatForCode(uploadField.getName());
                _builder.append(_formatForCode_1, "                ");
                _builder.append("\':");
                _builder.newLineIfNotEmpty();
                _builder.append("        ");
                _builder.append("    ");
                _builder.append("    ");
                _builder.append("    ");
                _builder.append("$basePath .= \'");
                String _subFolderPathSegment = this._modelExtensions.subFolderPathSegment(uploadField);
                _builder.append(_subFolderPathSegment, "                    ");
                _builder.append("/\';");
                _builder.newLineIfNotEmpty();
                _builder.append("        ");
                _builder.append("    ");
                _builder.append("    ");
                _builder.append("    ");
                _builder.append("break;");
                _builder.newLine();
              }
            }
            _builder.append("        ");
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("        ");
            _builder.append("    ");
            _builder.append("$basePath .= \'");
            String _formatForDB_1 = this._formattingExtensions.formatForDB(entity.getNameMultiple());
            _builder.append(_formatForDB_1, "            ");
            _builder.append("/");
            String _subFolderPathSegment_1 = this._modelExtensions.subFolderPathSegment(IterableExtensions.<UploadField>head(uploadFields));
            _builder.append(_subFolderPathSegment_1, "            ");
            _builder.append("/\';");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("        ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Exception($this->__(\'Error! Invalid object type received.\'));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result = $basePath;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (substr($result, -1, 1) != \'/\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// reappend the removed slash");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$result .= \'/\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!is_dir($result) && !$ignoreCreate) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->checkAndCreateAllUploadFolders();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initialiseUploadField(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Prepares an upload field by transforming the file name into a File object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param EntityAccess $entity    The entity object");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $fieldName Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $baseUrl   The base url to prepend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function initialiseUploadField($entity, $fieldName, $baseUrl)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($fieldName)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fileName = $entity[$fieldName];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$filePath = $this->getFileBaseFolder($entity->get_objectType(), $fieldName) . $fileName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!empty($fileName) && file_exists($filePath)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$fieldName] = new File($filePath);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$fieldName . \'Url\'] = $baseUrl . \'/\' . $filePath;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// determine meta data if it does not exist");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!is_array($entity[$fieldName . \'Meta\']) || !count($entity[$fieldName . \'Meta\'])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$entity[$fieldName . \'Meta\'] = $this->readMetaDataForFile($fileName, $filePath);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$fieldName] = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$fieldName . \'Url\'] = \'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$fieldName . \'Meta\'] = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence checkAndCreateAllUploadFolders(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Creates all required upload folders for this application.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return Boolean Whether everything went okay or not");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function checkAndCreateAllUploadFolders()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result = true;");
    _builder.newLine();
    {
      Iterable<DataObject> _uploadEntities = this._modelExtensions.getUploadEntities(it);
      for(final DataObject uploadEntity : _uploadEntities) {
        _builder.newLine();
        {
          Iterable<UploadField> _uploadFieldsEntity = this._modelExtensions.getUploadFieldsEntity(uploadEntity);
          for(final UploadField uploadField : _uploadFieldsEntity) {
            _builder.append("    ");
            _builder.append("$result &= $this->checkAndCreateUploadFolder(\'");
            String _formatForCode = this._formattingExtensions.formatForCode(uploadField.getEntity().getName());
            _builder.append(_formatForCode, "    ");
            _builder.append("\', \'");
            String _formatForCode_1 = this._formattingExtensions.formatForCode(uploadField.getName());
            _builder.append(_formatForCode_1, "    ");
            _builder.append("\', \'");
            String _allowedExtensions = uploadField.getAllowedExtensions();
            _builder.append(_allowedExtensions, "    ");
            _builder.append("\');");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence checkAndCreateUploadFolder(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Creates upload folder including a subfolder for thumbnail and an .htaccess file within it.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType        Name of treated entity type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $fieldName         Name of upload field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $allowedExtensions String with list of allowed file extensions (separated by \", \")");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return Boolean Whether everything went okay or not");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function checkAndCreateUploadFolder($objectType, $fieldName, $allowedExtensions = \'\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$uploadPath = $this->getFileBaseFolder($objectType, $fieldName, true);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$fs = new Filesystem();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$flashBag = $this->session->getFlashBag();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Check if directory exist and try to create it if needed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$fs->exists($uploadPath)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fs->mkdir($uploadPath, 0777);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (IOExceptionInterface $e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$flashBag->add(\'error\', $this->__f(\'The upload directory \"%path%\" does not exist and could not be created. Try to create it yourself and make sure that this folder is accessible via the web and writable by the webserver.\', [\'%path%\' => $e->getPath()]));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$this->logger->error(\'{app}: The upload directory {directory} does not exist and could not be created.\', [\'app\' => \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "            ");
    _builder.append("\', \'directory\' => $uploadPath]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Check if directory is writable and change permissions if needed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!is_writable($uploadPath)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fs->chmod($uploadPath, 0777);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (IOExceptionInterface $e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$flashBag->add(\'warning\', $this->__f(\'Warning! The upload directory at \"%path%\" exists but is not writable by the webserver.\', [\'%path%\' => $e->getPath()]));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$this->logger->error(\'{app}: The upload directory {directory} exists but is not writable by the webserver.\', [\'app\' => \'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "            ");
    _builder.append("\', \'directory\' => $uploadPath]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Write a htaccess file into the upload directory");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$htaccessFilePath = $uploadPath . \'/.htaccess\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$htaccessFileTemplate = \'");
    String _relativeAppRootPath = this._namingExtensions.relativeAppRootPath(it);
    _builder.append(_relativeAppRootPath, "    ");
    _builder.append("/");
    String _appDocPath = this._namingExtensions.getAppDocPath(it);
    _builder.append(_appDocPath, "    ");
    _builder.append("htaccessTemplate\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("if (!$fs->exists($htaccessFilePath) && $fs->exists($htaccessFileTemplate)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$extensions = str_replace(\',\', \'|\', str_replace(\' \', \'\', $allowedExtensions));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$htaccessContent = str_replace(\'__EXTENSIONS__\', $extensions, file_get_contents($htaccessFileTemplate, false));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fs->dumpFile($htaccessFilePath, $htaccessContent);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (IOExceptionInterface $e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$flashBag->add(\'error\', $this->__f(\'An error occured during creation of the .htaccess file in directory \"%path%\".\', [\'%path%\' => $e->getPath()]));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$this->logger->error(\'{app}: An error occured during creation of the .htaccess file in directory {directory}.\', [\'app\' => \'");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "            ");
    _builder.append("\', \'directory\' => $uploadPath]);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence uploadFunctionsImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Helper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Helper\\Base\\AbstractUploadHelper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Helper implementation class for upload handling.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class UploadHelper extends AbstractUploadHelper");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to add your own convenience methods here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
