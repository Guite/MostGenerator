package org.zikula.modulestudio.generator.cartridges.zclassic.controller.javascript;

import com.google.common.collect.Iterables;
import de.guite.modulestudio.metamodel.AbstractDateField;
import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.DataObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.ModelJoinExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class EditFunctions {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private ModelJoinExtensions _modelJoinExtensions = new ModelJoinExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  /**
   * Entry point for the JavaScript file with edit functionality.
   */
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appName = this._utils.appName(it);
    String fileName = (_appName + ".EditFunctions.js");
    String _appJsPath = this._namingExtensions.getAppJsPath(it);
    String _plus = (_appJsPath + fileName);
    boolean _shouldBeSkipped = this._namingExtensions.shouldBeSkipped(it, _plus);
    boolean _not = (!_shouldBeSkipped);
    if (_not) {
      InputOutput.<String>println("Generating JavaScript for edit functions");
      String _appJsPath_1 = this._namingExtensions.getAppJsPath(it);
      String _plus_1 = (_appJsPath_1 + fileName);
      boolean _shouldBeMarked = this._namingExtensions.shouldBeMarked(it, _plus_1);
      if (_shouldBeMarked) {
        String _appName_1 = this._utils.appName(it);
        String _plus_2 = (_appName_1 + ".EditFunctions.generated.js");
        fileName = _plus_2;
      }
      String _appJsPath_2 = this._namingExtensions.getAppJsPath(it);
      String _plus_3 = (_appJsPath_2 + fileName);
      fsa.generateFile(_plus_3, this.generate(it));
    }
  }
  
  private CharSequence generate(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    CharSequence _initUserField = this.initUserField(it);
    _builder.append(_initUserField);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _hasUploads = this._modelExtensions.hasUploads(it);
      if (_hasUploads) {
        CharSequence _resetUploadField = this.resetUploadField(it);
        _builder.append(_resetUploadField);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initUploadField = this.initUploadField(it);
        _builder.append(_initUploadField);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    {
      final Function1<DataObject, Boolean> _function = (DataObject it_1) -> {
        boolean _isEmpty = IterableExtensions.isEmpty(Iterables.<AbstractDateField>filter(this._modelExtensions.getDerivedFields(it_1), AbstractDateField.class));
        return Boolean.valueOf((!_isEmpty));
      };
      boolean _isEmpty = IterableExtensions.isEmpty(IterableExtensions.<DataObject>filter(it.getEntities(), _function));
      boolean _not = (!_isEmpty);
      if (_not) {
        CharSequence _resetDateField = this.resetDateField(it);
        _builder.append(_resetDateField);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initDateField = this.initDateField(it);
        _builder.append(_initDateField);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    CharSequence _initEditForm = this.initEditForm(it);
    _builder.append(_initEditForm);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _relationshipFunctions = this.relationshipFunctions(it);
    _builder.append(_relationshipFunctions);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence initUserField(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _needsUserAutoCompletion = this._modelBehaviourExtensions.needsUserAutoCompletion(it);
      if (_needsUserAutoCompletion) {
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Initialises a user field with auto completion.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("function ");
        String _vendorAndName = this._utils.vendorAndName(it);
        _builder.append(_vendorAndName);
        _builder.append("InitUserField(fieldName, getterName)");
        _builder.newLineIfNotEmpty();
        _builder.append("{");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if (jQuery(\'#\' + fieldName + \'LiveSearch\').length < 1) {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("return;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("jQuery(\'#\' + fieldName + \'LiveSearch\').removeClass(\'hidden\');");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("jQuery(\'#\' + fieldName + \'Selector\').typeahead({");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("highlight: true,");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("hint: true,");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("minLength: 2");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}, {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("limit: 15,");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("// The data source to query against. Receives the query value in the input field and the process callbacks.");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("source: function (query, syncResults, asyncResults) {");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("// Retrieve data from server using \"query\" parameter as it contains the search string entered by the user");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("jQuery(\'#\' + fieldName + \'Indicator\').removeClass(\'hidden\');");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("jQuery.getJSON(Routing.generate(\'");
        String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
        _builder.append(_formatForDB, "            ");
        _builder.append("_ajax_\' + getterName.toLowerCase(), { fragment: query }), function( data ) {");
        _builder.newLineIfNotEmpty();
        _builder.append("                ");
        _builder.append("jQuery(\'#\' + fieldName + \'Indicator\').addClass(\'hidden\');");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("asyncResults(data);");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("});");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("},");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("templates: {");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("empty: \'<div class=\"empty-message\">\' + jQuery(\'#\' + fieldName + \'NoResultsHint\').text() + \'</div>\',");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("suggestion: function(user) {");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("var html;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("                ");
        _builder.append("html = \'<div class=\"typeahead\">\';");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("html += \'<div class=\"media\"><a class=\"pull-left\" href=\"javascript:void(0)\">\' + user.avatar + \'</a>\';");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("html += \'<div class=\"media-body\">\';");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("html += \'<p class=\"media-heading\">\' + user.uname + \'</p>\';");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("html += \'</div>\';");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("html += \'</div>\';");
        _builder.newLine();
        _builder.newLine();
        _builder.append("                ");
        _builder.append("return html;");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}).bind(\'typeahead:select\', function(ev, user) {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("// Called after the user selects an item. Here we can do something with the selection.");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("jQuery(\'#\' + fieldName).val(user.uid);");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("jQuery(this).typeahead(\'val\', user.uname);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("});");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  private CharSequence resetUploadField(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Resets the value of an upload / file input field.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("ResetUploadField(fieldName)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + fieldName).attr(\'type\', \'input\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + fieldName).attr(\'type\', \'file\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initUploadField(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises the reset button for a certain upload input.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitUploadField(fieldName)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + fieldName + \'ResetVal\').click( function (event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("ResetUploadField(fieldName);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}).removeClass(\'hidden\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence resetDateField(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Resets the value of a date or datetime input field.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("ResetDateField(fieldName)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + fieldName).val(\'\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + fieldName + \'cal\').html(Translator.__(\'No date set.\'));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initDateField(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises the reset button for a certain date input.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitDateField(fieldName)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + fieldName + \'ResetVal\').click( function (event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("ResetDateField(fieldName);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}).removeClass(\'hidden\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initEditForm(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var editedObjectType;");
    _builder.newLine();
    _builder.append("var editedEntityId;");
    _builder.newLine();
    _builder.append("var editForm;");
    _builder.newLine();
    _builder.append("var formButtons;");
    _builder.newLine();
    _builder.append("var triggerValidation = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("TriggerFormValidation()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "    ");
    _builder.append("ExecuteCustomValidationConstraints(editedObjectType, editedEntityId);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!editForm.get(0).checkValidity()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// This does not really submit the form,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// but causes the browser to display the error message");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("editForm.find(\':submit\').first().click();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2);
    _builder.append("HandleFormSubmit (event) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("if (triggerValidation) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "        ");
    _builder.append("TriggerFormValidation();");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("if (!editForm.get(0).checkValidity()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// hide form buttons to prevent double submits by accident");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("formButtons.each(function (index) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(this).addClass(\'hidden\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises an entity edit form.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName_4 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_4);
    _builder.append("InitEditForm(mode, entityId)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'.");
    String _lowerCase = this._utils.vendorAndName(it).toLowerCase();
    _builder.append(_lowerCase, "    ");
    _builder.append("-edit-form\').length < 1) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("editForm = jQuery(\'.");
    String _lowerCase_1 = this._utils.vendorAndName(it).toLowerCase();
    _builder.append(_lowerCase_1, "    ");
    _builder.append("-edit-form\').first();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("editedObjectType = editForm.attr(\'id\').replace(\'EditForm\', \'\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("editedEntityId = entityId;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'#moderationFieldsSection\').length > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#moderationFieldsContent\').addClass(\'hidden\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#moderationFieldsSection legend\').addClass(\'pointer\').click(function (event) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (jQuery(\'#moderationFieldsContent\').hasClass(\'hidden\')) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(\'#moderationFieldsContent\').removeClass(\'hidden\');");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(this).find(\'i\').removeClass(\'fa-expand\').addClass(\'fa-compress\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(\'#moderationFieldsContent\').addClass(\'hidden\');");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(this).find(\'i\').removeClass(\'fa-compress\').addClass(\'fa-expand\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var allFormFields = editForm.find(\'input, select, textarea\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("allFormFields.change(function (event) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_5 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_5, "        ");
    _builder.append("ExecuteCustomValidationConstraints(editedObjectType, editedEntityId);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("formButtons = editForm.find(\'.form-buttons input\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("editForm.find(\'.btn-danger\').first().bind(\'click keypress\', function (event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!window.confirm(Translator.__(\'Do you really want to delete this entry?\'))) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("editForm.find(\'button[type=submit]\').bind(\'click keypress\', function (event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("triggerValidation = !jQuery(this).attr(\'formnovalidate\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("editForm.submit(");
    String _vendorAndName_6 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_6, "    ");
    _builder.append("HandleFormSubmit);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (mode != \'create\') {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_7 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_7, "        ");
    _builder.append("TriggerFormValidation();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence relationshipFunctions(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _needsAutoCompletion = this._modelJoinExtensions.needsAutoCompletion(it);
      if (_needsAutoCompletion) {
        CharSequence _ggleRelatedItemForm = this.toggleRelatedItemForm(it);
        _builder.append(_ggleRelatedItemForm);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _resetRelatedItemForm = this.resetRelatedItemForm(it);
        _builder.append(_resetRelatedItemForm);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _createRelationWindowInstance = this.createRelationWindowInstance(it);
        _builder.append(_createRelationWindowInstance);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initInlineRelationWindow = this.initInlineRelationWindow(it);
        _builder.append(_initInlineRelationWindow);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _removeRelatedItem = this.removeRelatedItem(it);
        _builder.append(_removeRelatedItem);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _selectRelatedItem = this.selectRelatedItem(it);
        _builder.append(_selectRelatedItem);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initRelatedItemsForm = this.initRelatedItemsForm(it);
        _builder.append(_initRelatedItemsForm);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _closeWindowFromInside = this.closeWindowFromInside(it);
        _builder.append(_closeWindowFromInside);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence toggleRelatedItemForm(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Toggles the fields of an auto completion field.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("ToggleRelatedItemForm(idPrefix)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// if we don\'t have a toggle link do nothing");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'#\' + idPrefix + \'AddLink\').length < 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// show/hide the toggle link");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'AddLink\').toggleClass(\'hidden\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// hide/show the fields");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'AddFields\').toggleClass(\'hidden\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence resetRelatedItemForm(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Resets an auto completion field.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("ResetRelatedItemForm(idPrefix)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// hide the sub form");
    _builder.newLine();
    _builder.append("    ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "    ");
    _builder.append("ToggleRelatedItemForm(idPrefix);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// reset value of the auto completion field");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Selector\').val(\'\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence createRelationWindowInstance(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Helper function to create new modal form dialog instances.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("CreateRelationWindowInstance(containerElem, useIframe)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var newWindowId;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// define the new window instance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("newWindowId = containerElem.attr(\'id\') + \'Dialog\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'<div id=\"\' + newWindowId + \'\"></div>\')");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".append(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("jQuery(\'<iframe />\')");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".attr(\'src\', containerElem.attr(\'href\'))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".css({ width: \'100%\', height: \'440px\' })");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".dialog({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("autoOpen: false,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("show: {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("effect: \'blind\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("duration: 1000");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("hide: {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("effect: \'explode\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("duration: 1000");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//title: containerElem.title,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("width: 600,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("height: 500,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("modal: false");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".dialog(\'open\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// return the instance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return newWindowId;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initInlineRelationWindow(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Observe a link for opening an inline window");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitInlineRelationWindow(objectType, containerID)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var found, newItem;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// whether the handler has been found");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("found = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// search for the handler");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery.each(relationHandler, function (key, singleRelationHandler) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// is this the right one");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (singleRelationHandler.prefix === containerID) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// yes, it is");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("found = true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// look whether there is already a window instance");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (null !== singleRelationHandler.windowInstanceId) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// unset it");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(containerID + \'Dialog\').dialog(\'destroy\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// create and assign the new window instance");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("singleRelationHandler.windowInstanceId = ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "            ");
    _builder.append("CreateRelationWindowInstance(jQuery(\'#\' + containerID), true);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (false !== found) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// if no handler was found create a new one");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("newItem = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ot: objectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("prefix: containerID,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("moduleName: \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "        ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("acInstance: null,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("windowInstanceId: ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "        ");
    _builder.append("CreateRelationWindowInstance(jQuery(\'#\' + containerID), true)");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// add it to the list of handlers");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("relationHandler.push(newItem);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence removeRelatedItem(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Removes a related item from the list of selected ones.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("RemoveRelatedItem(idPrefix, removeId)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var itemIds, itemIdsArr;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIds = jQuery(\'#\' + idPrefix).val();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIdsArr = itemIds.split(\',\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIdsArr = jQuery.grep(itemIdsArr, function(value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return value != removeId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIds = itemIdsArr.join(\',\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix).val(itemIds);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Reference_\' + removeId).remove();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence selectRelatedItem(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Adds a related item to selection which has been chosen by auto completion.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("SelectRelatedItem(objectType, idPrefix, selectedListItem)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var newItemId, newTitle, includeEditing, editLink, removeLink, elemPrefix, itemPreview, li, editHref, fldPreview, itemIds, itemIdsArr;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIds = jQuery(\'#\' + idPrefix).val();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (itemIds !== \'\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (jQuery(\'#\' + idPrefix + \'Scope\').val() === \'0\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("jQuery(\'#\' + idPrefix + \'ReferenceList\').text(\'\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("itemIds = \'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("itemIds += \',\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("newItemId = selectedListItem.id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("newTitle = selectedListItem.title;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("includeEditing = !!((jQuery(\'#\' + idPrefix + \'Mode\').val() == \'1\'));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("elemPrefix = idPrefix + \'Reference_\' + newItemId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemPreview = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (selectedListItem.image != \'\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("itemPreview = selectedListItem.image;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var li = jQuery(\'<li />\', { id: elemPrefix, text: newTitle });");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (true === includeEditing) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var editHref = jQuery(\'#\' + idPrefix + \'SelectorDoNew\').attr(\'href\') + \'?id=\' + newItemId;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("editLink = jQuery(\'<a />\', { id: elemPrefix + \'Edit\', href: editHref, text: \'edit\' });");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("li.append(editLink);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("removeLink = jQuery(\'<a />\', { id: elemPrefix + \'Remove\', href: \'javascript:");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "    ");
    _builder.append("RemoveRelatedItem(\\\'\' + idPrefix + \'\\\', \' + newItemId + \');\', text: \'remove\' });");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("li.append(removeLink);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (itemPreview !== \'\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fldPreview = jQuery(\'<div>\', { id: elemPrefix + \'preview\', name: idPrefix + \'preview\' });");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fldPreview.html(itemPreview);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("li.append(fldPreview);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("itemPreview = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'ReferenceList\').append(li);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (true === includeEditing) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("editLink.html(\' \' + editImage);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#\' + elemPrefix + \'Edit\').click( function (event) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "            ");
    _builder.append("InitInlineRelationWindow(objectType, idPrefix + \'Reference_\' + newItemId + \'Edit\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("removeLink.html(\' \' + removeImage);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIds += newItemId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix).val(itemIds);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "    ");
    _builder.append("ResetRelatedItemForm(idPrefix);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initRelatedItemsForm(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises a relation field section with autocompletion and optional edit capabilities.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitRelationItemsForm(objectType, idPrefix, includeEditing)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var acOptions, acDataSet, itemIds, itemIdsArr, acUrl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// add handling for the toggle link if existing");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'AddLink\').click( function (e) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("ToggleRelatedItemForm(idPrefix);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// add handling for the cancel button");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'SelectorDoCancel\').click( function (e) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "        ");
    _builder.append("ResetRelatedItemForm(idPrefix);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// clear values and ensure starting state");
    _builder.newLine();
    _builder.append("    ");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "    ");
    _builder.append("ResetRelatedItemForm(idPrefix);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("acOptions = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("highlight: true,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("hint: true,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("minLength: 2,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("acDataSet = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("limit: 15,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("templates: {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("empty: \'<div class=\"empty-message\">\' + jQuery(\'#\' + idPrefix + \'NoResultsHint\').text() + \'</div>\',");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("suggestion: function(item) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("var html;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("html = \'<div class=\"typeahead\">\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("html += \'<div class=\"media\"><a class=\"pull-left\" href=\"javascript:void(0)\">\' + item.image + \'</a>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("html += \'<div class=\"media-body\">\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("html += \'<p class=\"media-heading\">\' + item.title + \'</p>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("html += item.description;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("html += \'</div>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("html += \'</div>\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return html;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery.each(relationHandler, function (key, singleRelationHandler) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (singleRelationHandler.prefix !== (idPrefix + \'SelectorDoNew\') || null !== singleRelationHandler.acInstance) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("singleRelationHandler.acInstance = \'yes\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// The data source to query against. Receives the query value in the input field and the process callbacks.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("acDataSet.source = function (query, syncResults, asyncResults) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var acUrlArgs;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("acUrlArgs = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ot: objectType");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (jQuery(\'#\' + idPrefix).length > 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("acUrlArgs.exclude = jQuery(\'#\' + idPrefix).val();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("acUrl = Routing.generate(singleRelationHandler.moduleName.toLowerCase() + \'_ajax_getitemlistautocompletion\', acUrlArgs);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// Retrieve data from server using \"query\" parameter as it contains the search string entered by the user");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Indicator\').removeClass(\'hidden\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("jQuery.getJSON(acUrl, { fragment: query }, function( data ) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Indicator\').addClass(\'hidden\');");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("asyncResults(data);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Selector\')");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".typeahead(acOptions, acDataSet)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".bind(\'typeahead:select\', function(ev, item) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// Called after the user selects an item. Here we can do something with the selection.");
    _builder.newLine();
    _builder.append("                ");
    String _vendorAndName_4 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_4, "                ");
    _builder.append("SelectRelatedItem(objectType, idPrefix, item);");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("jQuery(this).typeahead(\'val\', item.title);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Ensure that clearing out the selector is properly reflected into the hidden field");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Selector\').blur(function() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (jQuery(this).val().length == 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(\'#\' + idPrefix).val(\'\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!includeEditing || jQuery(\'#\' + idPrefix + \'SelectorDoNew\').length < 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// from here inline editing will be handled");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'SelectorDoNew\').attr(\'href\', jQuery(\'#\' + idPrefix + \'SelectorDoNew\').attr(\'href\') + \'?raw=1&idp=\' + idPrefix + \'SelectorDoNew\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'SelectorDoNew\').click( function(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_5 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_5, "        ");
    _builder.append("InitInlineRelationWindow(objectType, idPrefix + \'SelectorDoNew\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIds = jQuery(\'#\' + idPrefix).val();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("itemIdsArr = itemIds.split(\',\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery.each(itemIdsArr, function (key, existingId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var elemPrefix;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (existingId) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("elemPrefix = idPrefix + \'Reference_\' + existingId + \'Edit\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("jQuery(\'#\' + elemPrefix).attr(\'href\', jQuery(\'#\' + elemPrefix).attr(\'href\') + \'?raw=1&idp=\' + elemPrefix);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("jQuery(\'#\' + elemPrefix).click( function (event) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("                ");
    String _vendorAndName_6 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_6, "                ");
    _builder.append("InitInlineRelationWindow(objectType, elemPrefix);");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence closeWindowFromInside(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Closes an iframe from the document displayed in it.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("CloseWindowFromInside(idPrefix, itemId)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// if there is no parent window do nothing");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (window.parent === \'\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// search for the handler of the current window");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery.each(window.parent.relationHandler, function (key, singleRelationHandler) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// look if this handler is the right one");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (singleRelationHandler.prefix === idPrefix) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// do we have an item created");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (itemId > 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// look whether there is an auto completion instance");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (null !== singleRelationHandler.acInstance) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// activate it");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Selector\').lookup();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// show a message");
    _builder.newLine();
    _builder.append("                    ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "                    ");
    _builder.append("SimpleAlert(jQuery(\'.");
    String _lowerCase = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase, "                    ");
    _builder.append("-form\'), Translator.__(\'Information\'), Translator.__(\'Action has been completed.\'), \'actionDoneAlert\', \'success\');");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// look whether there is a windows instance");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (null !== singleRelationHandler.windowInstanceId) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// close it");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("window.parent.jQuery(\'#\' + singleRelationHandler.windowInstanceId).dialog(\'close\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
