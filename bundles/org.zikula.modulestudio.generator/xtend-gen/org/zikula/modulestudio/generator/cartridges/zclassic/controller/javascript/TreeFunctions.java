package org.zikula.modulestudio.generator.cartridges.zclassic.controller.javascript;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class TreeFunctions {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  /**
   * Entry point for tree-related JavaScript functions.
   */
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appName = this._utils.appName(it);
    String fileName = (_appName + ".Tree.js");
    String _appJsPath = this._namingExtensions.getAppJsPath(it);
    String _plus = (_appJsPath + fileName);
    boolean _shouldBeSkipped = this._namingExtensions.shouldBeSkipped(it, _plus);
    boolean _not = (!_shouldBeSkipped);
    if (_not) {
      InputOutput.<String>println("Generating JavaScript for tree functions");
      String _appJsPath_1 = this._namingExtensions.getAppJsPath(it);
      String _plus_1 = (_appJsPath_1 + fileName);
      boolean _shouldBeMarked = this._namingExtensions.shouldBeMarked(it, _plus_1);
      if (_shouldBeMarked) {
        String _appName_1 = this._utils.appName(it);
        String _plus_2 = (_appName_1 + ".Tree.generated.js");
        fileName = _plus_2;
      }
      String _appJsPath_2 = this._namingExtensions.getAppJsPath(it);
      String _plus_3 = (_appJsPath_2 + fileName);
      fsa.generateFile(_plus_3, this.generate(it));
    }
  }
  
  private CharSequence generate(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("var nodeEntityId = 0;");
    _builder.newLine();
    _builder.newLine();
    CharSequence _performTreeOperation = this.performTreeOperation(it);
    _builder.append(_performTreeOperation);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _initTree = this.initTree(it);
    _builder.append(_initTree);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _treeContextMenuActions = this.treeContextMenuActions(it);
    _builder.append(_treeContextMenuActions);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _treeSave = this.treeSave(it);
    _builder.append(_treeSave);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _onLoad = this.onLoad(it);
    _builder.append(_onLoad);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence initTree(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var tree;");
    _builder.newLine();
    _builder.append("var objectType;");
    _builder.newLine();
    _builder.append("var rootId;");
    _builder.newLine();
    _builder.append("var hasDisplay;");
    _builder.newLine();
    _builder.append("var hasEdit;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialise a tree.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitTree(idPrefix, theObjectType, theRootId, hasDisplayAction, hasEditAction)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("objectType = theObjectType;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rootId = theRootId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("hasDisplay = hasDisplayAction;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("hasEdit = hasEditAction;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tree = jQuery(\'#\' + idPrefix).jstree({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'core\': {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'multiple\': false,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'check_callback\': true");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'contextmenu\': {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'items\': ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "            ");
    _builder.append("TreeContextMenuActions");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'dnd\': {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'copy\': false,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'is_draggable\': function(node) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// disable drag and drop for root category");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return !jQuery(node).hasClass(\'lvl0\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'state\': {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'key\': idPrefix");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'plugins\': [ \'contextmenu\', \'dnd\', \'search\', \'state\', \'wholerow\'");
    _builder.append(" ]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Drag n drop");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tree.on(\'move_node.jstree\', function (e, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var node = data.node;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var parentId = data.parent;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var parentNode = tree.jstree(\'get_node\', parentId, false);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "        ");
    _builder.append("TreeSave(node, parentNode, \'bottom\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Expand and collapse");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Expand\').click(function(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tree.jstree(true).open_all(null, 500);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'Collapse\').click(function(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tree.jstree(true).close_all(null, 500);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Search");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var searchStartDelay = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + idPrefix + \'SearchTerm\').keyup(function () {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (searchStartDelay) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("clearTimeout(searchStartDelay);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("searchStartDelay = setTimeout(function () {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var v = jQuery(\'#\' + idPrefix + \'SearchTerm\').val();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tree.jstree(true).search(v);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}, 250);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// allow redirecting if a link has been clicked");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tree.find(\'ul\').on(\'click\', \'li.jstree-node a\', function(e) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tree.jstree(\'save_state\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("document.location.href = jQuery(this).attr(\'href\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence treeContextMenuActions(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialise context menu actions for a given tree node.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("TreeContextMenuActions(theNode)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _initTreeNodesImpl = this.initTreeNodesImpl(it);
    _builder.append(_initTreeNodesImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initTreeNodesImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var currentNode;");
    _builder.newLine();
    _builder.append("var isRoot;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("currentNode = tree.jstree(\'get_node\', theNode, true);");
    _builder.newLine();
    _builder.append("isRoot = (currentNode.attr(\'id\') === \'tree\' + rootId + \'node_\' + rootId);");
    _builder.newLine();
    _builder.append("nodeEntityId = currentNode.attr(\'id\').replace(\'tree\' + rootId + \'node_\', \'\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("var actions = {};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if (true === hasDisplay) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("actions.display = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label: Translator.__(\'Display\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: Translator.__(\'Show detail page\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("document.location.href = Routing.generate(\'");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, "            ");
    _builder.append("_\' + objectType.toLowerCase() + \'_display\', { id: nodeEntityId }, true);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("icon: \'fa fa-fw fa-eye\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("if (true === hasEdit) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("actions.edit = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label: Translator.__(\'Edit\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: Translator.__(\'Show edit form\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("document.location.href = Routing.generate(\'");
    String _formatForDB_1 = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB_1, "            ");
    _builder.append("_\' + objectType.toLowerCase() + \'_edit\', { id: nodeEntityId }, true);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("icon: \'fa fa-fw fa-pencil-square-o\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("actions.addChildNode = {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("label: Translator.__(\'Add child node\'),");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("title: Translator.__(\'Add child node\'),");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName, "        ");
    _builder.append("PerformTreeOperation(objectType, rootId, \'addChildNode\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("icon: \'fa fa-fw fa-plus\'");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.append("actions.deleteNode = {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("label: Translator.__(\'Delete\'),");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("title: Translator.__(\'Delete this node\'),");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var confirmQuestion;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var amountOfChildren;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("confirmQuestion = Translator.__(\'Do you really want to remove this node?\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("amountOfChildren = node.children.length;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (amountOfChildren > 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("confirmQuestion = Translator.__(\'Do you really want to remove this node including all child nodes?\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (false !== window.confirm(confirmQuestion)) {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "            ");
    _builder.append("PerformTreeOperation(objectType, rootId, \'deleteNode\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("icon: \'fa fa-fw fa-trash-o\'");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if (isRoot) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return actions;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if (currentNode.is(\':first-child\') && currentNode.is(\':last-child\')) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return actions;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if (!currentNode.is(\':first-child\')) { // has previous sibling");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("actions.moveTop = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label: Translator.__(\'Move to top\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: Translator.__(\'Move to top position\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "            ");
    _builder.append("PerformTreeOperation(objectType, rootId, \'moveNodeTop\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("icon: \'fa fa-fw fa-angle-double-up\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("separator_before: true");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("actions.moveUp = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label: Translator.__(\'Move up\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: Translator.__(\'Move one position up\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "            ");
    _builder.append("PerformTreeOperation(objectType, rootId, \'moveNodeUp\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("icon: \'fa fa-fw fa-angle-up\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("if (!currentNode.is(\':last-child\')) { // has next sibling");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("actions.moveDown = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label: Translator.__(\'Move down\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: Translator.__(\'Move one position down\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_4 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_4, "            ");
    _builder.append("PerformTreeOperation(objectType, rootId, \'moveNodeDown\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("icon: \'fa fa-fw fa-angle-down\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("separator_before: currentNode.is(\':first-child\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("actions.moveBottom = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label: Translator.__(\'Move to bottom\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: Translator.__(\'Move to bottom position\'),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("action: function (node) {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_5 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_5, "            ");
    _builder.append("PerformTreeOperation(objectType, rootId, \'moveNodeBottom\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("icon: \'fa fa-fw fa-angle-double-down\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("return actions;");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence performTreeOperation(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Helper function to start several different ajax actions");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* performing tree related amendments and operations.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("PerformTreeOperation(objectType, rootId, op)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var opParam, params;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("opParam = ((op === \'moveNodeTop\' || op === \'moveNodeUp\' || op === \'moveNodeDown\' || op === \'moveNodeBottom\') ? \'moveNode\' : op);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("params = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ot: objectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("op: opParam");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (op !== \'addRootNode\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!nodeEntityId) {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "            ");
    _builder.append("SimpleAlert(jQuery(\'.tree-container\'), Translator.__(\'Error\'), Translator.__(\'Invalid node id\'), \'treeInvalidNodeAlert\', \'danger\');");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("params[\'root\'] = rootId;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("params[op === \'addChildNode\' ? \'pid\' : \'id\'] = nodeEntityId;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (op === \'moveNodeTop\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("params[\'direction\'] = \'top\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (op === \'moveNodeUp\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("params[\'direction\'] = \'up\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (op === \'moveNodeDown\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("params[\'direction\'] = \'down\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (op === \'moveNodeBottom\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("params[\'direction\'] = \'bottom\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery.ajax({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type: \'POST\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("url: Routing.generate(\'");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, "        ");
    _builder.append("_ajax_handletreeoperation\'),");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("data: params");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}).done(function(res) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// get data returned by the ajax response");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var data;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("data = res.data;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (data.result == \'success\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("/*");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "            ");
    _builder.append("SimpleAlert(jQuery(\'.tree-container\'), Translator.__(\'Success\'), data.message, \'treeAjaxDoneAlert\', \'success\');*/");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (typeof data.returnUrl != \'undefined\') {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("window.location = data.returnUrl;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("window.location.reload();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "            ");
    _builder.append("SimpleAlert(jQuery(\'.tree-container\'), Translator.__(\'Error\'), data.message != \'\' ? data.message : Translator.__(\'Could not persist your change.\'), \'treeAjaxFailedAlert\', \'danger\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}).fail(function(jqXHR, textStatus) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_4 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_4, "        ");
    _builder.append("SimpleAlert(jQuery(\'.tree-container\'), Translator.__(\'Error\'), Translator.__(\'Could not persist your change.\'), \'treeAjaxFailedAlert\', \'danger\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence treeSave(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Callback function for config.onSave. This function is called after each tree change.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param node - the node which is currently being moved");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param parentNode - the new parent node");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param position - can be \"after\", \"before\" or \"bottom\" and defines");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*       whether the affected node is inserted after, before or as last child of \"relativenode\"");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return true on success, otherwise the change will be reverted");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("TreeSave(node, parentNode, position)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var nodeParts, rootId, nodeId, destId;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// do not allow inserts on root level");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (node.parents.length < 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("nodeParts = node.id.split(\'node_\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rootId = nodeParts[0].replace(\'tree\', \'\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("nodeId = nodeParts[1];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("destId = parentNode.id.replace(\'tree\' + rootId + \'node_\', \'\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery.ajax({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type: \'POST\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("url: Routing.generate(\'");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, "        ");
    _builder.append("_ajax_handletreeoperation\'),");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("data: {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("op: \'moveNodeTo\',");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("direction: position,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root: rootId,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("id: nodeId,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("destid: destId");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}).done(function(res) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}).fail(function(jqXHR, textStatus) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var treeName = \'itemTree\' + rootId;");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("SimpleAlert(jQuery(\'.tree-container\'), Translator.__(\'Error\'), Translator.__(\'Could not persist your change.\'), \'treeAjaxFailedAlert\', \'danger\');");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("window.location.reload();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence onLoad(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("jQuery(document).ready(function() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'#treeAddRoot\').length > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#treeAddRoot\').click( function(event) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName, "            ");
    _builder.append("PerformTreeOperation(jQuery(this).data(\'object-type\'), 1, \'addRootNode\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}).removeClass(\'hidden\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'.tree-container\').length > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var treeContainer;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var idPrefix;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var objectType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("treeContainer = jQuery(\'.tree-container\').first();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("idPrefix = treeContainer.attr(\'id\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("objectType = treeContainer.data(\'object-type\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("InitTree(idPrefix, objectType, treeContainer.data(\'root-id\'), treeContainer.data(\'has-display\'), treeContainer.data(\'has-edit\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("});");
    _builder.newLine();
    return _builder;
  }
}
