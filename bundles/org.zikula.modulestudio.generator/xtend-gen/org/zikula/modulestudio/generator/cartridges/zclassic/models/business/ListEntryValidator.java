package org.zikula.modulestudio.generator.cartridges.zclassic.models.business;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class ListEntryValidator {
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  /**
   * Creates constraint and validator classes for list field items.
   */
  public void generate(final Application it, final IFileSystemAccess fsa) {
    InputOutput.<String>println("Generating list entry constraint and validator classes");
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Validator/Constraints/ListEntry.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.constraintBaseImpl(it)), this.fh.phpFileContent(it, this.constraintImpl(it)));
    String _appSourceLibPath_1 = this._namingExtensions.getAppSourceLibPath(it);
    String _plus_1 = (_appSourceLibPath_1 + "Validator/Constraints/ListEntryValidator.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus_1, 
      this.fh.phpFileContent(it, this.validatorBaseImpl(it)), this.fh.phpFileContent(it, this.validatorImpl(it)));
  }
  
  private CharSequence constraintBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Validator\\Constraints\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Validator\\Constraint;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List entry validation constraint.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractListEntry extends Constraint");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Entity name");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public $entityName = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Property name");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public $propertyName = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Whether multiple list values are allowed or not");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var boolean");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public $multiple = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Minimum amount of values for multiple lists");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var integer");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public $min;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Maximum amount of values for multiple lists");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var integer");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public $max;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @inheritDoc");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function validatedBy()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'");
    String _appService = this._utils.appService(it);
    _builder.append(_appService, "        ");
    _builder.append(".validator.list_entry.validator\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence constraintImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Validator\\Constraints;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Validator\\Constraints\\Base\\AbstractListEntry;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List entry validation constraint.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @Annotation");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ListEntry extends AbstractListEntry");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// here you can customise the constraint");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence validatorBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Validator\\Constraints\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Validator\\Constraint;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Validator\\ConstraintValidator;");
    _builder.newLine();
    _builder.append("use Zikula\\Common\\Translator\\TranslatorInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\Common\\Translator\\TranslatorTrait;");
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Helper\\ListEntriesHelper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List entry validator.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractListEntryValidator extends ConstraintValidator");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("use TranslatorTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var ListEntriesHelper");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $listEntriesHelper;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ListEntryValidator constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param TranslatorInterface $translator        Translator service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param ListEntriesHelper   $listEntriesHelper ListEntriesHelper service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(TranslatorInterface $translator, ListEntriesHelper $listEntriesHelper)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setTranslator($translator);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->listEntriesHelper = $listEntriesHelper;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _setTranslatorMethod = this._modelBehaviourExtensions.setTranslatorMethod(it);
    _builder.append(_setTranslatorMethod, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @inheritDoc");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function validate($value, Constraint $constraint)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null === $value) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($constraint->propertyName == \'workflowState\' && in_array($value, [\'initial\', \'deleted\'])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$listEntries = $this->listEntriesHelper->getEntries($constraint->entityName, $constraint->propertyName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$allowedValues = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($listEntries as $entry) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$allowedValues[] = $entry[\'value\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$constraint->multiple) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// single-valued list");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!in_array($value, $allowedValues)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$this->context->buildViolation(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$this->__f(\'The value \"%value%\" is not allowed for the \"%property%\" property.\', [");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("\'%value%\' => $value,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("\'%property%\' => $constraint->propertyName");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(")->addViolation();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// multi-values list");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$selected = explode(\'###\', $value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($selected as $singleValue) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($singleValue == \'\') {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!in_array($singleValue, $allowedValues)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$this->context->buildViolation(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$this->__f(\'The value \"%value%\" is not allowed for the \"%property%\" property.\', [");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("\'%value%\' => $singleValue,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("\'%property%\' => $constraint->propertyName");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(")->addViolation();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$count = count($value);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null !== $constraint->min && $count < $constraint->min) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$this->context->buildViolation(");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$this->__fn(\'You must select at least \"%limit%\" choice.\', \'You must select at least \"%limit%\" choices.\', $count, [");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\'%limit%\' => $constraint->min");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(")->addViolation();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null !== $constraint->max && $count > $constraint->max) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$this->context->buildViolation(");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$this->__fn(\'You must select at most \"%limit%\" choice.\', \'You must select at most \"%limit%\" choices.\', $count, [");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\'%limit%\' => $constraint->max");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(")->addViolation();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence validatorImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Validator\\Constraints;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Validator\\Constraints\\Base\\AbstractListEntryValidator;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List entry validator.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ListEntryValidator extends AbstractListEntryValidator");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// here you can customise the validator");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
