package org.zikula.modulestudio.generator.cartridges.zclassic.view.plugin;

import com.google.common.base.Objects;
import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.Entity;
import de.guite.modulestudio.metamodel.EntityTreeType;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.zikula.modulestudio.generator.extensions.ControllerExtensions;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class TreeData {
  @Extension
  private ControllerExtensions _controllerExtensions = new ControllerExtensions();
  
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  public CharSequence generate(final Application it, final IFileSystemAccess fsa) {
    return this.treeDataImpl(it);
  }
  
  private CharSequence treeDataImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, " ");
    _builder.append("_treeData function delivers the html output for a JS tree");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* based on given tree entities.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $objectType Name of treated object type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array   $tree       Object collection with tree items");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $routeArea  Either \'admin\' or an emptyy string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param integer $rootId     Optional id of root node, defaults to 1");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string Output markup");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getTreeData($objectType, $tree, $routeArea = \'\', $rootId = 1)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// check whether an edit action is available");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$hasEditAction = in_array($objectType, [\'");
    final Function1<Entity, Boolean> _function = (Entity it_1) -> {
      return Boolean.valueOf(((!Objects.equal(it_1.getTree(), EntityTreeType.NONE)) && this._controllerExtensions.hasEditAction(it_1)));
    };
    final Function1<Entity, String> _function_1 = (Entity it_1) -> {
      return this._formattingExtensions.formatForCode(it_1.getName());
    };
    String _join = IterableExtensions.join(IterableExtensions.<Entity, String>map(IterableExtensions.<Entity>filter(this._modelExtensions.getAllEntities(it), _function), _function_1), "\', \'");
    _builder.append(_join, "    ");
    _builder.append("\']);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $this->entityFactory->getRepository($objectType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$descriptionFieldName = $repository->getDescriptionFieldName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($tree as $node) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($node->getLvl() < 1 || $node->createCompositeIdentifier() == $rootId) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result .= $this->processTreeItemWithChildren($objectType, $node, $routeArea, $rootId, $descriptionFieldName, $hasEditAction);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Builds an unordered list for a tree node and it\'s children.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $objectType           Name of treated object type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param object  $node                 The processed tree node");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $routeArea            Either \'admin\' or an emptyy string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param integer $rootId               Optional id of root node, defaults to 1");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $descriptionFieldName Name of field to be used as a description");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param boolean $hasEditAction        Whether item editing is possible or not");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string Output markup");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function processTreeItemWithChildren($objectType, $node, $routeArea, $rootId, $descriptionFieldName, $hasEditAction)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$idPrefix = \'tree\' . $rootId . \'node_\' . $node->createCompositeIdentifier();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$title = $descriptionFieldName != \'\' ? strip_tags($node[$descriptionFieldName]) : \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$liTag = \'<li id=\"\' . $idPrefix . \'\" title=\"\' . str_replace(\'\"\', \'\', $title) . \'\" class=\"lvl\' . $node->getLvl() . \'\">\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$liContent = $node->getTitleFromDisplayPattern();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($hasEditAction) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$urlArgs = $node->createUrlArgs();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$url = $this->router->generate(\'");
    String _formatForDB_1 = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB_1, "        ");
    _builder.append("_\' . strtolower($objectType) . \'_\' . $routeArea . \'edit\', $urlArgs);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$liContent = \'<a href=\"\' . $url . \'\" title=\"\' . str_replace(\'\"\', \'\', $title) . \'\">\' . $liContent . \'</a>\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$treeItem = $liTag . $liContent;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (count($node->getChildren()) > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$treeItem .= \'<ul>\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($node->getChildren() as $childNode) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$treeItem .= $this->processTreeItemWithChildren($objectType, $childNode, $routeArea, $rootId, $descriptionFieldName, $hasEditAction);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$treeItem .= \'</ul>\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$treeItem .= \'</li>\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $treeItem;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
