package org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff;

import com.google.common.base.Objects;
import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.ApplicationDependencyType;
import de.guite.modulestudio.metamodel.Entity;
import de.guite.modulestudio.metamodel.JoinRelationship;
import de.guite.modulestudio.metamodel.ReferredApplication;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.zikula.modulestudio.generator.extensions.ControllerExtensions;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.GeneratorSettingsExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.ModelJoinExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;
import org.zikula.modulestudio.generator.extensions.WorkflowExtensions;

@SuppressWarnings("all")
public class ComposerFile {
  @Extension
  private ControllerExtensions _controllerExtensions = new ControllerExtensions();
  
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private GeneratorSettingsExtensions _generatorSettingsExtensions = new GeneratorSettingsExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private ModelJoinExtensions _modelJoinExtensions = new ModelJoinExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  @Extension
  private WorkflowExtensions _workflowExtensions = new WorkflowExtensions();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String fileName = "composer.json";
    String _appSourcePath = this._namingExtensions.getAppSourcePath(it);
    String _plus = (_appSourcePath + fileName);
    boolean _shouldBeSkipped = this._namingExtensions.shouldBeSkipped(it, _plus);
    boolean _not = (!_shouldBeSkipped);
    if (_not) {
      String _appSourcePath_1 = this._namingExtensions.getAppSourcePath(it);
      String _plus_1 = (_appSourcePath_1 + fileName);
      boolean _shouldBeMarked = this._namingExtensions.shouldBeMarked(it, _plus_1);
      if (_shouldBeMarked) {
        fileName = "composer.generated.json";
      }
      String _appSourcePath_2 = this._namingExtensions.getAppSourcePath(it);
      String _plus_2 = (_appSourcePath_2 + fileName);
      fsa.generateFile(_plus_2, this.composerFile(it));
    }
  }
  
  private CharSequence composerFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _composerContent = this.composerContent(it);
    _builder.append(_composerContent, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence composerContent(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"name\": \"");
    String _formatForDB = this._formattingExtensions.formatForDB(it.getVendor());
    _builder.append(_formatForDB);
    _builder.append("/");
    String _formatForDB_1 = this._formattingExtensions.formatForDB(it.getName());
    _builder.append(_formatForDB_1);
    _builder.append("-module\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"version\": \"");
    String _version = it.getVersion();
    _builder.append(_version);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"description\": \"");
    {
      if (((null != it.getDocumentation()) && (!Objects.equal(it.getDocumentation(), "")))) {
        String _replace = it.getDocumentation().replace("\"", "\'");
        _builder.append(_replace);
      } else {
        String _appName = this._utils.appName(it);
        _builder.append(_appName);
        _builder.append(" module generated by ModuleStudio ");
        String _msVersion = this._utils.msVersion();
        _builder.append(_msVersion);
        _builder.append(".");
      }
    }
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"type\": \"zikula-module\",");
    _builder.newLine();
    _builder.append("\"license\": \"");
    String _licenseSPDX = this.licenseSPDX(it);
    _builder.append(_licenseSPDX);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"authors\": [");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"name\": \"");
    String _author = it.getAuthor();
    _builder.append(_author, "        ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"email\": \"");
    String _email = it.getEmail();
    _builder.append(_email, "        ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"homepage\": \"");
    String _url = it.getUrl();
    _builder.append(_url, "        ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"role\": \"owner\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("],");
    _builder.newLine();
    _builder.append("\"autoload\": {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"psr-4\": { \"");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getVendor());
    _builder.append(_formatForCodeCapital, "    ");
    _builder.append("\\\\");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1, "    ");
    _builder.append("Module\\\\\": \"\" }");
    _builder.newLineIfNotEmpty();
    _builder.append("},");
    _builder.newLine();
    _builder.append("\"require\": {");
    _builder.newLine();
    _builder.append("    ");
    final Function1<ReferredApplication, Boolean> _function = (ReferredApplication e) -> {
      ApplicationDependencyType _dependencyType = e.getDependencyType();
      return Boolean.valueOf(Objects.equal(_dependencyType, ApplicationDependencyType.REQUIREMENT));
    };
    Iterable<ReferredApplication> dependencies = IterableExtensions.<ReferredApplication>filter(it.getReferredApplications(), _function);
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"php\": \">=");
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      if ((_targets).booleanValue()) {
        _builder.append("5.5.9");
      } else {
        _builder.append("5.4.1");
      }
    }
    _builder.append("\"");
    {
      boolean _isEmpty = IterableExtensions.isEmpty(dependencies);
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append(",");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty_1 = IterableExtensions.isEmpty(dependencies);
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        {
          for(final ReferredApplication referredApp : dependencies) {
            _builder.append("    ");
            CharSequence _dependency = this.dependency(it, referredApp);
            _builder.append(_dependency, "    ");
            {
              ReferredApplication _last = IterableExtensions.<ReferredApplication>last(dependencies);
              boolean _notEquals = (!Objects.equal(referredApp, _last));
              if (_notEquals) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("},");
    _builder.newLine();
    _builder.append("\"suggest\": {");
    _builder.newLine();
    _builder.append("    ");
    String _xblockexpression = null;
    {
      final Function1<ReferredApplication, Boolean> _function_1 = (ReferredApplication e) -> {
        ApplicationDependencyType _dependencyType = e.getDependencyType();
        return Boolean.valueOf(Objects.equal(_dependencyType, ApplicationDependencyType.RECOMMENDATION));
      };
      dependencies = IterableExtensions.<ReferredApplication>filter(it.getReferredApplications(), _function_1);
      _xblockexpression = "";
    }
    _builder.append(_xblockexpression, "    ");
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty_2 = IterableExtensions.isEmpty(dependencies);
      boolean _not_2 = (!_isEmpty_2);
      if (_not_2) {
        {
          for(final ReferredApplication referredApp_1 : dependencies) {
            _builder.append("    ");
            CharSequence _dependency_1 = this.dependency(it, referredApp_1);
            _builder.append(_dependency_1, "    ");
            {
              ReferredApplication _last_1 = IterableExtensions.<ReferredApplication>last(dependencies);
              boolean _notEquals_1 = (!Objects.equal(referredApp_1, _last_1));
              if (_notEquals_1) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("},");
    _builder.newLine();
    _builder.append("\"extra\": {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"zikula\": {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"core-compatibility\": \">=");
    {
      Boolean _targets_1 = this._utils.targets(it, "1.5");
      if ((_targets_1).booleanValue()) {
        _builder.append("1.5.0");
      } else {
        _builder.append("1.4.6");
      }
    }
    _builder.append(" <3.0\",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"class\": \"");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getVendor());
    _builder.append(_formatForCodeCapital_2, "        ");
    _builder.append("\\\\");
    String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_3, "        ");
    _builder.append("Module\\\\");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "        ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"displayname\": \"");
    String _formatForDisplayCapital = this._formattingExtensions.formatForDisplayCapital(it.getName());
    _builder.append(_formatForDisplayCapital, "        ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"url\": \"");
    String _formatForDB_2 = this._formattingExtensions.formatForDB(it.getName());
    _builder.append(_formatForDB_2, "        ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"capabilities\": {");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _generateCapabilities = this.generateCapabilities(it);
    _builder.append(_generateCapabilities, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"securityschema\": {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "            ");
    _builder.append("::\": \"::\",");
    _builder.newLineIfNotEmpty();
    {
      boolean _generateListBlock = this._generatorSettingsExtensions.generateListBlock(it);
      if (_generateListBlock) {
        _builder.append("            ");
        _builder.append("\"");
        String _appName_3 = this._utils.appName(it);
        _builder.append(_appName_3, "            ");
        _builder.append(":ItemListBlock:\": \"Block title::\",");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _needsApproval = this._workflowExtensions.needsApproval(it);
      if (_needsApproval) {
        _builder.append("            ");
        _builder.append("\"");
        String _appName_4 = this._utils.appName(it);
        _builder.append(_appName_4, "            ");
        _builder.append(":ModerationBlock:\": \"Block title::\",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("            ");
    {
      Iterable<Entity> _allEntities = this._modelExtensions.getAllEntities(it);
      for(final Entity entity : _allEntities) {
        CharSequence _permissionSchema = this.permissionSchema(entity, this._utils.appName(it));
        _builder.append(_permissionSchema, "            ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("\"");
    String _appName_5 = this._utils.appName(it);
    _builder.append(_appName_5, "            ");
    _builder.append("::Ajax\": \"::\"");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence dependency(final Application it, final ReferredApplication dependency) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _name = dependency.getName();
    _builder.append(_name);
    _builder.append(":>=");
    String _minVersion = dependency.getMinVersion();
    _builder.append(_minVersion);
    _builder.append(",<=");
    String _maxVersion = dependency.getMaxVersion();
    _builder.append(_maxVersion);
    _builder.append("\": \"");
    {
      if (((null != dependency.getDocumentation()) && (!Objects.equal(dependency.getDocumentation(), "")))) {
        String _formatForDisplay = this._formattingExtensions.formatForDisplay(dependency.getDocumentation());
        _builder.append(_formatForDisplay);
      } else {
        String _name_1 = dependency.getName();
        _builder.append(_name_1);
        _builder.append(" application");
      }
    }
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence generateCapabilities(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"user\": {\"route\": \"");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB);
    _builder.append("_");
    String _formatForDB_1 = this._formattingExtensions.formatForDB(this._modelExtensions.getLeadingEntity(it).getName());
    _builder.append(_formatForDB_1);
    _builder.append("_");
    String _primaryAction = this._controllerExtensions.getPrimaryAction(this._modelExtensions.getLeadingEntity(it));
    _builder.append(_primaryAction);
    _builder.append("\"},");
    _builder.newLineIfNotEmpty();
    _builder.append("\"admin\": {\"route\": \"");
    String _formatForDB_2 = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB_2);
    _builder.append("_");
    String _formatForDB_3 = this._formattingExtensions.formatForDB(this._modelExtensions.getLeadingEntity(it).getName());
    _builder.append(_formatForDB_3);
    _builder.append("_admin");
    String _primaryAction_1 = this._controllerExtensions.getPrimaryAction(this._modelExtensions.getLeadingEntity(it));
    _builder.append(_primaryAction_1);
    _builder.append("\"}");
    {
      boolean _hasExtraCapabilities = this.hasExtraCapabilities(it);
      if (_hasExtraCapabilities) {
        _builder.append(",");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _hasCategorisableEntities = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities) {
        _builder.append("\"categorizable\": {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"entities\": [");
        _builder.newLine();
        {
          Iterable<Entity> _categorisableEntities = this._modelBehaviourExtensions.getCategorisableEntities(it);
          for(final Entity entity : _categorisableEntities) {
            _builder.append("        ");
            _builder.append("\"");
            String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getVendor());
            _builder.append(_formatForCodeCapital, "        ");
            _builder.append("\\\\");
            String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
            _builder.append(_formatForCodeCapital_1, "        ");
            _builder.append("Module\\\\Entity\\\\");
            String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(entity.getName());
            _builder.append(_formatForCodeCapital_2, "        ");
            _builder.append("Entity\"");
            {
              Entity _last = IterableExtensions.<Entity>last(this._modelBehaviourExtensions.getCategorisableEntities(it));
              boolean _notEquals = (!Objects.equal(entity, _last));
              if (_notEquals) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("    ");
        _builder.append("]");
        _builder.newLine();
        _builder.append("}");
        {
          if ((((null != it.getCapabilities()) && (!Objects.equal(it.getCapabilities(), ""))) || this._modelExtensions.hasHookSubscribers(it))) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((null != it.getCapabilities()) && (!Objects.equal(it.getCapabilities(), "")))) {
        final String[] capabilitiesArray = it.getCapabilities().replaceAll(", ", "").split(",");
        _builder.newLineIfNotEmpty();
        {
          for(final String capability : capabilitiesArray) {
            _builder.append("\"");
            String _formatForDisplay = this._formattingExtensions.formatForDisplay(capability);
            _builder.append(_formatForDisplay);
            _builder.append("\": {\"version\": \"1.0\"}");
            {
              if (((!Objects.equal(capability, IterableExtensions.<Object>last(((Iterable<Object>)Conversions.doWrapArray(capabilitiesArray))))) || this._modelExtensions.hasHookSubscribers(it))) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      boolean _hasHookSubscribers = this._modelExtensions.hasHookSubscribers(it);
      if (_hasHookSubscribers) {
        _builder.append("\"hook_subscriber\": {\"class\": \"");
        String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(it.getVendor());
        _builder.append(_formatForCodeCapital_3);
        _builder.append("\\\\");
        String _formatForCodeCapital_4 = this._formattingExtensions.formatForCodeCapital(it.getName());
        _builder.append(_formatForCodeCapital_4);
        _builder.append("Module\\\\Container\\\\HookContainer\"}");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private boolean hasExtraCapabilities(final Application it) {
    boolean _xblockexpression = false;
    {
      boolean _generateSearchApi = this._generatorSettingsExtensions.generateSearchApi(it);
      if (_generateSearchApi) {
        return true;
      }
      boolean _hasCategorisableEntities = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities) {
        return true;
      }
      if (((null != it.getCapabilities()) && (!Objects.equal(it.getCapabilities(), "")))) {
        return true;
      }
      boolean _hasHookSubscribers = this._modelExtensions.hasHookSubscribers(it);
      if (_hasHookSubscribers) {
        return true;
      }
      _xblockexpression = false;
    }
    return _xblockexpression;
  }
  
  private CharSequence permissionSchema(final Entity it, final String appName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    _builder.append(appName);
    _builder.append(":");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital);
    _builder.append(":\": \"");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1);
    _builder.append(" ID::\",");
    _builder.newLineIfNotEmpty();
    final Iterable<JoinRelationship> incomingRelations = this._modelJoinExtensions.getIncomingJoinRelations(it);
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty = IterableExtensions.isEmpty(incomingRelations);
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          for(final JoinRelationship relation : incomingRelations) {
            CharSequence _permissionSchema = this.permissionSchema(relation, appName);
            _builder.append(_permissionSchema);
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence permissionSchema(final JoinRelationship it, final String appName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    _builder.append(appName);
    _builder.append(":");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getSource().getName());
    _builder.append(_formatForCodeCapital);
    _builder.append(":");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getTarget().getName());
    _builder.append(_formatForCodeCapital_1);
    _builder.append("\": \"");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getSource().getName());
    _builder.append(_formatForCodeCapital_2);
    _builder.append(" ID:");
    String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(it.getTarget().getName());
    _builder.append(_formatForCodeCapital_3);
    _builder.append(" ID:\",");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private String licenseSPDX(final Application it) {
    String _switchResult = null;
    String _license = it.getLicense();
    if (_license != null) {
      switch (_license) {
        case "Academic Free License v1.1":
          _switchResult = "AFL-1.1";
          break;
        case "AFL-1.1":
          _switchResult = "AFL-1.1";
          break;
        case "Academic Free License v1.2":
          _switchResult = "AFL-1.2";
          break;
        case "AFL-1.2":
          _switchResult = "AFL-1.2";
          break;
        case "Academic Free License v2.0":
          _switchResult = "AFL-2.0";
          break;
        case "AFL-2.0":
          _switchResult = "AFL-2.0";
          break;
        case "Academic Free License v2.1":
          _switchResult = "AFL-2.1";
          break;
        case "AFL-2.1":
          _switchResult = "AFL-2.1";
          break;
        case "Academic Free License v3.0":
          _switchResult = "AFL-3.0";
          break;
        case "AFL-3.0":
          _switchResult = "AFL-3.0";
          break;
        case "Adaptive Public License 1.0":
          _switchResult = "APL-1.0";
          break;
        case "APL-1.0":
          _switchResult = "APL-1.0";
          break;
        case "ANTLR Software Rights Notice":
          _switchResult = "ANTLR-PD";
          break;
        case "ANTLR-PD":
          _switchResult = "ANTLR-PD";
          break;
        case "Apache License 1.0":
          _switchResult = "Apache-1.0";
          break;
        case "Apache-1.0":
          _switchResult = "Apache-1.0";
          break;
        case "Apache License 1.1":
          _switchResult = "Apache-1.1";
          break;
        case "Apache-1.1":
          _switchResult = "Apache-1.1";
          break;
        case "Apache License 2.0":
          _switchResult = "Apache-2.0";
          break;
        case "Apache-2.0":
          _switchResult = "Apache-2.0";
          break;
        case "Apple Public Source License 1.0":
          _switchResult = "APSL-1.0";
          break;
        case "APSL-1.0":
          _switchResult = "APSL-1.0";
          break;
        case "Apple Public Source License 1.1":
          _switchResult = "APSL-1.1";
          break;
        case "APSL-1.1":
          _switchResult = "APSL-1.1";
          break;
        case "Apple Public Source License 1.2":
          _switchResult = "APSL-1.2";
          break;
        case "APSL-1.2":
          _switchResult = "APSL-1.2";
          break;
        case "Apple Public Source License 2.0":
          _switchResult = "APSL-2.0";
          break;
        case "APSL-2.0":
          _switchResult = "APSL-2.0";
          break;
        case "Artistic License 1.0":
          _switchResult = "Artistic-1.0";
          break;
        case "Artistic-1.0":
          _switchResult = "Artistic-1.0";
          break;
        case "Artistic License 2.0":
          _switchResult = "Artistic-2.0";
          break;
        case "Artistic-2.0":
          _switchResult = "Artistic-2.0";
          break;
        case "Attribution Assurance License":
          _switchResult = "AAL";
          break;
        case "AAL":
          _switchResult = "AAL";
          break;
        case "Boost Software License 1.0":
          _switchResult = "BSL-1.0";
          break;
        case "BSL-1.0":
          _switchResult = "BSL-1.0";
          break;
        case "BSD 2-clause \"Simplified\" License":
          _switchResult = "BSD-2-Clause";
          break;
        case "BSD-2-Clause":
          _switchResult = "BSD-2-Clause";
          break;
        case "BSD 2-clause \"NetBSD\" License":
          _switchResult = "BSD-2-Clause-NetBSD";
          break;
        case "BSD-2-Clause-NetBSD":
          _switchResult = "BSD-2-Clause-NetBSD";
          break;
        case "BSD 2-clause \"FreeBSD\" License":
          _switchResult = "BSD-2-Clause-FreeBSD";
          break;
        case "BSD-2-Clause-FreeBSD":
          _switchResult = "BSD-2-Clause-FreeBSD";
          break;
        case "BSD 3-clause \"New\" or \"Revised\" License":
          _switchResult = "BSD-3-Clause";
          break;
        case "BSD-3-Clause":
          _switchResult = "BSD-3-Clause";
          break;
        case "BSD 4-clause \"Original\" or \"Old\" License":
          _switchResult = "BSD-4-Clause";
          break;
        case "BSD-4-Clause":
          _switchResult = "BSD-4-Clause";
          break;
        case "BSD-4-Clause (University of California-Specific)":
          _switchResult = "BSD-4-Clause-UC";
          break;
        case "BSD-4-Clause-UC":
          _switchResult = "BSD-4-Clause-UC";
          break;
        case "CeCILL Free Software License Agreement v1.0":
          _switchResult = "CECILL-1.0";
          break;
        case "CECILL-1.0":
          _switchResult = "CECILL-1.0";
          break;
        case "CeCILL Free Software License Agreement v1.1":
          _switchResult = "CECILL-1.1";
          break;
        case "CECILL-1.1":
          _switchResult = "CECILL-1.1";
          break;
        case "CeCILL Free Software License Agreement v2.0":
          _switchResult = "CECILL-2.0";
          break;
        case "CECILL-2.0":
          _switchResult = "CECILL-2.0";
          break;
        case "CeCILL-B Free Software License Agreement":
          _switchResult = "CECILL-B";
          break;
        case "CECILL-B":
          _switchResult = "CECILL-B";
          break;
        case "CeCILL-C Free Software License Agreement":
          _switchResult = "CECILL-C";
          break;
        case "CECILL-C":
          _switchResult = "CECILL-C";
          break;
        case "Clarified Artistic License":
          _switchResult = "ClArtistic";
          break;
        case "ClArtistic":
          _switchResult = "ClArtistic";
          break;
        case "CNRI Python Open Source GPL Compatible License Agreement":
          _switchResult = "CNRI-Python-GPL-Compatible";
          break;
        case "CNRI-Python-GPL-Compatible":
          _switchResult = "CNRI-Python-GPL-Compatible";
          break;
        case "CNRI Python License":
          _switchResult = "CNRI-Python";
          break;
        case "CNRI-Python":
          _switchResult = "CNRI-Python";
          break;
        case "Common Development and Distribution License 1.0":
          _switchResult = "CDDL-1.0";
          break;
        case "CDDL-1.0":
          _switchResult = "CDDL-1.0";
          break;
        case "Common Development and Distribution License 1.1":
          _switchResult = "CDDL-1.1";
          break;
        case "CDDL-1.1":
          _switchResult = "CDDL-1.1";
          break;
        case "Common Public Attribution License 1.0":
          _switchResult = "CPAL-1.0";
          break;
        case "CPAL-1.0":
          _switchResult = "CPAL-1.0";
          break;
        case "Common Public License 1.0":
          _switchResult = "CPL-1.0";
          break;
        case "CPL-1.0":
          _switchResult = "CPL-1.0";
          break;
        case "Computer Associates Trusted Open Source License 1.1":
          _switchResult = "CATOSL-1.1";
          break;
        case "CATOSL-1.1":
          _switchResult = "CATOSL-1.1";
          break;
        case "Creative Commons Attribution 1.0":
          _switchResult = "CC-BY-1.0";
          break;
        case "CC-BY-1.0":
          _switchResult = "CC-BY-1.0";
          break;
        case "Creative Commons Attribution 2.0":
          _switchResult = "CC-BY-2.0";
          break;
        case "CC-BY-2.0":
          _switchResult = "CC-BY-2.0";
          break;
        case "Creative Commons Attribution 2.5":
          _switchResult = "CC-BY-2.5";
          break;
        case "CC-BY-2.5":
          _switchResult = "CC-BY-2.5";
          break;
        case "Creative Commons Attribution 3.0":
          _switchResult = "CC-BY-3.0";
          break;
        case "CC-BY-3.0":
          _switchResult = "CC-BY-3.0";
          break;
        case "Creative Commons Attribution No Derivatives 1.0":
          _switchResult = "CC-BY-ND-1.0";
          break;
        case "CC-BY-ND-1.0":
          _switchResult = "CC-BY-ND-1.0";
          break;
        case "Creative Commons Attribution No Derivatives 2.0":
          _switchResult = "CC-BY-ND-2.0";
          break;
        case "CC-BY-ND-2.0":
          _switchResult = "CC-BY-ND-2.0";
          break;
        case "Creative Commons Attribution No Derivatives 2.5":
          _switchResult = "CC-BY-ND-2.5";
          break;
        case "CC-BY-ND-2.5":
          _switchResult = "CC-BY-ND-2.5";
          break;
        case "Creative Commons Attribution No Derivatives 3.0":
          _switchResult = "CC-BY-ND-3.0";
          break;
        case "CC-BY-ND-3.0":
          _switchResult = "CC-BY-ND-3.0";
          break;
        case "Creative Commons Attribution Non Commercial 1.0":
          _switchResult = "CC-BY-NC-1.0";
          break;
        case "CC-BY-NC-1.0":
          _switchResult = "CC-BY-NC-1.0";
          break;
        case "Creative Commons Attribution Non Commercial 2.0":
          _switchResult = "CC-BY-NC-2.0";
          break;
        case "CC-BY-NC-2.0":
          _switchResult = "CC-BY-NC-2.0";
          break;
        case "Creative Commons Attribution Non Commercial 2.5":
          _switchResult = "CC-BY-NC-2.5";
          break;
        case "CC-BY-NC-2.5":
          _switchResult = "CC-BY-NC-2.5";
          break;
        case "Creative Commons Attribution Non Commercial 3.0":
          _switchResult = "CC-BY-NC-3.0";
          break;
        case "CC-BY-NC-3.0":
          _switchResult = "CC-BY-NC-3.0";
          break;
        case "Creative Commons Attribution Non Commercial No Derivatives 1.0":
          _switchResult = "CC-BY-NC-ND-1.0";
          break;
        case "CC-BY-NC-ND-1.0":
          _switchResult = "CC-BY-NC-ND-1.0";
          break;
        case "Creative Commons Attribution Non Commercial No Derivatives 2.0":
          _switchResult = "CC-BY-NC-ND-2.0";
          break;
        case "CC-BY-NC-ND-2.0":
          _switchResult = "CC-BY-NC-ND-2.0";
          break;
        case "Creative Commons Attribution Non Commercial No Derivatives 2.5":
          _switchResult = "CC-BY-NC-ND-2.5";
          break;
        case "CC-BY-NC-ND-2.5":
          _switchResult = "CC-BY-NC-ND-2.5";
          break;
        case "Creative Commons Attribution Non Commercial No Derivatives 3.0":
          _switchResult = "CC-BY-NC-ND-3.0";
          break;
        case "CC-BY-NC-ND-3.0":
          _switchResult = "CC-BY-NC-ND-3.0";
          break;
        case "Creative Commons Attribution Non Commercial Share Alike 1.0":
          _switchResult = "CC-BY-NC-SA-1.0";
          break;
        case "CC-BY-NC-SA-1.0":
          _switchResult = "CC-BY-NC-SA-1.0";
          break;
        case "Creative Commons Attribution Non Commercial Share Alike 2.0":
          _switchResult = "CC-BY-NC-SA-2.0";
          break;
        case "CC-BY-NC-SA-2.0":
          _switchResult = "CC-BY-NC-SA-2.0";
          break;
        case "Creative Commons Attribution Non Commercial Share Alike 2.5":
          _switchResult = "CC-BY-NC-SA-2.5";
          break;
        case "CC-BY-NC-SA-2.5":
          _switchResult = "CC-BY-NC-SA-2.5";
          break;
        case "Creative Commons Attribution Non Commercial Share Alike 3.0":
          _switchResult = "CC-BY-NC-SA-3.0";
          break;
        case "CC-BY-NC-SA-3.0":
          _switchResult = "CC-BY-NC-SA-3.0";
          break;
        case "Creative Commons Attribution Share Alike 1.0":
          _switchResult = "CC-BY-SA-1.0";
          break;
        case "CC-BY-SA-1.0":
          _switchResult = "CC-BY-SA-1.0";
          break;
        case "Creative Commons Attribution Share Alike 2.0":
          _switchResult = "CC-BY-SA-2.0";
          break;
        case "CC-BY-SA-2.0":
          _switchResult = "CC-BY-SA-2.0";
          break;
        case "Creative Commons Attribution Share Alike 2.5":
          _switchResult = "CC-BY-SA-2.5";
          break;
        case "CC-BY-SA-2.5":
          _switchResult = "CC-BY-SA-2.5";
          break;
        case "Creative Commons Attribution Share Alike 3.0":
          _switchResult = "CC-BY-SA-3.0";
          break;
        case "CC-BY-SA-3.0":
          _switchResult = "CC-BY-SA-3.0";
          break;
        case "Creative Commons Zero v1.0 Universal":
          _switchResult = "CC0-1.0";
          break;
        case "CC0-1.0":
          _switchResult = "CC0-1.0";
          break;
        case "CUA Office Public License v1.0":
          _switchResult = "CUA-OPL-1.0";
          break;
        case "CUA-OPL-1.0":
          _switchResult = "CUA-OPL-1.0";
          break;
        case "Eclipse Public License 1.0":
          _switchResult = "EPL-1.0";
          break;
        case "EPL-1.0":
          _switchResult = "EPL-1.0";
          break;
        case "eCos license version 2.0":
          _switchResult = "eCos-2.0";
          break;
        case "eCos-2.0":
          _switchResult = "eCos-2.0";
          break;
        case "Educational Community License v1.0":
          _switchResult = "ECL-1.0";
          break;
        case "ECL-1.0":
          _switchResult = "ECL-1.0";
          break;
        case "Educational Community License v2.0":
          _switchResult = "ECL-2.0";
          break;
        case "ECL-2.0":
          _switchResult = "ECL-2.0";
          break;
        case "Eiffel Forum License v1.0":
          _switchResult = "EFL-1.0";
          break;
        case "EFL-1.0":
          _switchResult = "EFL-1.0";
          break;
        case "Eiffel Forum License v2.0":
          _switchResult = "EFL-2.0";
          break;
        case "EFL-2.0":
          _switchResult = "EFL-2.0";
          break;
        case "Entessa Public License v1.0":
          _switchResult = "Entessa";
          break;
        case "Entessa":
          _switchResult = "Entessa";
          break;
        case "Erlang Public License v1.1":
          _switchResult = "ErlPL-1.1";
          break;
        case "ErlPL-1.1":
          _switchResult = "ErlPL-1.1";
          break;
        case "EU DataGrid Software License":
          _switchResult = "EUDatagrid";
          break;
        case "EUDatagrid":
          _switchResult = "EUDatagrid";
          break;
        case "European Union Public License 1.0":
          _switchResult = "EUPL-1.0";
          break;
        case "EUPL-1.0":
          _switchResult = "EUPL-1.0";
          break;
        case "European Union Public License 1.1":
          _switchResult = "EUPL-1.1";
          break;
        case "EUPL-1.1":
          _switchResult = "EUPL-1.1";
          break;
        case "Fair License":
          _switchResult = "Fair";
          break;
        case "Fair":
          _switchResult = "Fair";
          break;
        case "Frameworx Open License 1.0":
          _switchResult = "Frameworx-1.0";
          break;
        case "Frameworx-1.0":
          _switchResult = "Frameworx-1.0";
          break;
        case "GNU Affero General Public License v3.0":
          _switchResult = "AGPL-3.0";
          break;
        case "AGPL-3.0":
          _switchResult = "AGPL-3.0";
          break;
        case "GNU Free Documentation License v1.1":
          _switchResult = "GFDL-1.1";
          break;
        case "GFDL-1.1":
          _switchResult = "GFDL-1.1";
          break;
        case "GNU Free Documentation License v1.2":
          _switchResult = "GFDL-1.2";
          break;
        case "GFDL-1.2":
          _switchResult = "GFDL-1.2";
          break;
        case "GNU Free Documentation License v1.3":
          _switchResult = "GFDL-1.3";
          break;
        case "GFDL-1.3":
          _switchResult = "GFDL-1.3";
          break;
        case "GNU General Public License v1.0 only":
          _switchResult = "GPL-1.0";
          break;
        case "GPL-1.0":
          _switchResult = "GPL-1.0";
          break;
        case "GNU General Public License v1.0 or later":
          _switchResult = "GPL-1.0+";
          break;
        case "GPL-1.0+":
          _switchResult = "GPL-1.0+";
          break;
        case "GNU General Public License v2.0 only":
          _switchResult = "GPL-2.0";
          break;
        case "GPL-2.0":
          _switchResult = "GPL-2.0";
          break;
        case "GNU General Public License v2.0 or later":
          _switchResult = "GPL-2.0+";
          break;
        case "GPL-2.0+":
          _switchResult = "GPL-2.0+";
          break;
        case "GNU General Public License v2.0 w/Autoconf exception":
          _switchResult = "GPL-2.0-with-autoconf-exception";
          break;
        case "GPL-2.0-with-autoconf-exception":
          _switchResult = "GPL-2.0-with-autoconf-exception";
          break;
        case "GNU General Public License v2.0 w/Bison exception":
          _switchResult = "GPL-2.0-with-bison-exception";
          break;
        case "GPL-2.0-with-bison-exception":
          _switchResult = "GPL-2.0-with-bison-exception";
          break;
        case "GNU General Public License v2.0 w/Classpath exception":
          _switchResult = "GPL-2.0-with-classpath-exception";
          break;
        case "GPL-2.0-with-classpath-exception":
          _switchResult = "GPL-2.0-with-classpath-exception";
          break;
        case "GNU General Public License v2.0 w/Font exception":
          _switchResult = "GPL-2.0-with-font-exception";
          break;
        case "GPL-2.0-with-font-exception":
          _switchResult = "GPL-2.0-with-font-exception";
          break;
        case "GNU General Public License v2.0 w/GCC Runtime Library exception":
          _switchResult = "GPL-2.0-with-GCC-exception";
          break;
        case "GPL-2.0-with-GCC-exception":
          _switchResult = "GPL-2.0-with-GCC-exception";
          break;
        case "GNU General Public License v3.0 only":
          _switchResult = "GPL-3.0";
          break;
        case "GPL-3.0":
          _switchResult = "GPL-3.0";
          break;
        case "GNU General Public License v3.0 or later":
          _switchResult = "GPL-3.0+";
          break;
        case "GPL-3.0+":
          _switchResult = "GPL-3.0+";
          break;
        case "GNU General Public License v3.0 w/Autoconf exception":
          _switchResult = "GPL-3.0-with-autoconf-exception";
          break;
        case "GPL-3.0-with-autoconf-exception":
          _switchResult = "GPL-3.0-with-autoconf-exception";
          break;
        case "GNU General Public License v3.0 w/GCC Runtime Library exception":
          _switchResult = "GPL-3.0-with-GCC-exception";
          break;
        case "GPL-3.0-with-GCC-exception":
          _switchResult = "GPL-3.0-with-GCC-exception";
          break;
        case "GNU Lesser General Public License v2.1 only":
          _switchResult = "LGPL-2.1";
          break;
        case "LGPL-2.1":
          _switchResult = "LGPL-2.1";
          break;
        case "GNU Lesser General Public License v2.1 or later":
          _switchResult = "LGPL-2.1+";
          break;
        case "LGPL-2.1+":
          _switchResult = "LGPL-2.1+";
          break;
        case "GNU Lesser General Public License v3.0 only":
          _switchResult = "LGPL-3.0";
          break;
        case "LGPL-3.0":
          _switchResult = "LGPL-3.0";
          break;
        case "GNU Lesser General Public License v3.0 or later":
          _switchResult = "LGPL-3.0+";
          break;
        case "LGPL-3.0+":
          _switchResult = "LGPL-3.0+";
          break;
        case "GNU Library General Public License v2 only":
          _switchResult = "LGPL-2.0";
          break;
        case "LGPL-2.0":
          _switchResult = "LGPL-2.0";
          break;
        case "GNU Library General Public License v2 or later":
          _switchResult = "LGPL-2.0+";
          break;
        case "LGPL-2.0+":
          _switchResult = "LGPL-2.0+";
          break;
        case "gSOAP Public License v1.3b":
          _switchResult = "gSOAP-1.3b";
          break;
        case "gSOAP-1.3b":
          _switchResult = "gSOAP-1.3b";
          break;
        case "Historic Permission Notice and Disclaimer":
          _switchResult = "HPND";
          break;
        case "HPND":
          _switchResult = "HPND";
          break;
        case "IBM Public License v1.0":
          _switchResult = "IPL-1.0";
          break;
        case "IPL-1.0":
          _switchResult = "IPL-1.0";
          break;
        case "IPA Font License":
          _switchResult = "IPA";
          break;
        case "IPA":
          _switchResult = "IPA";
          break;
        case "ISC License":
          _switchResult = "ISC";
          break;
        case "ISC":
          _switchResult = "ISC";
          break;
        case "LaTeX Project Public License v1.0":
          _switchResult = "LPPL-1.0";
          break;
        case "LPPL-1.0":
          _switchResult = "LPPL-1.0";
          break;
        case "LaTeX Project Public License v1.1":
          _switchResult = "LPPL-1.1";
          break;
        case "LPPL-1.1":
          _switchResult = "LPPL-1.1";
          break;
        case "LaTeX Project Public License v1.2":
          _switchResult = "LPPL-1.2";
          break;
        case "LPPL-1.2":
          _switchResult = "LPPL-1.2";
          break;
        case "LaTeX Project Public License v1.3c":
          _switchResult = "LPPL-1.3c";
          break;
        case "LPPL-1.3c":
          _switchResult = "LPPL-1.3c";
          break;
        case "libpng License":
          _switchResult = "Libpng";
          break;
        case "Libpng":
          _switchResult = "Libpng";
          break;
        case "Lucent Public License Version 1.0 (Plan9)":
          _switchResult = "LPL-1.0";
          break;
        case "LPL-1.0":
          _switchResult = "LPL-1.0";
          break;
        case "Lucent Public License v1.02":
          _switchResult = "LPL-1.02";
          break;
        case "LPL-1.02":
          _switchResult = "LPL-1.02";
          break;
        case "Microsoft Public License":
          _switchResult = "MS-PL";
          break;
        case "MS-PL":
          _switchResult = "MS-PL";
          break;
        case "Microsoft Reciprocal License":
          _switchResult = "MS-RL";
          break;
        case "MS-RL":
          _switchResult = "MS-RL";
          break;
        case "MirOS Licence":
          _switchResult = "MirOS";
          break;
        case "MirOS":
          _switchResult = "MirOS";
          break;
        case "MIT License":
          _switchResult = "MIT";
          break;
        case "MIT":
          _switchResult = "MIT";
          break;
        case "Motosoto License":
          _switchResult = "Motosoto";
          break;
        case "Motosoto":
          _switchResult = "Motosoto";
          break;
        case "Mozilla Public License 1.0":
          _switchResult = "MPL-1.0";
          break;
        case "MPL-1.0":
          _switchResult = "MPL-1.0";
          break;
        case "Mozilla Public License 1.1":
          _switchResult = "MPL-1.1";
          break;
        case "MPL-1.1":
          _switchResult = "MPL-1.1";
          break;
        case "Mozilla Public License 2.0":
          _switchResult = "MPL-2.0";
          break;
        case "MPL-2.0":
          _switchResult = "MPL-2.0";
          break;
        case "Mozilla Public License 2.0 (no copyleft exception)":
          _switchResult = "MPL-2.0-no-copyleft-exception";
          break;
        case "MPL-2.0-no-copyleft-exception":
          _switchResult = "MPL-2.0-no-copyleft-exception";
          break;
        case "Multics License":
          _switchResult = "Multics";
          break;
        case "Multics":
          _switchResult = "Multics";
          break;
        case "NASA Open Source Agreement 1.3":
          _switchResult = "NASA-1.3";
          break;
        case "NASA-1.3":
          _switchResult = "NASA-1.3";
          break;
        case "Naumen Public License":
          _switchResult = "Naumen";
          break;
        case "Naumen":
          _switchResult = "Naumen";
          break;
        case "Nethack General Public License":
          _switchResult = "NGPL";
          break;
        case "NGPL":
          _switchResult = "NGPL";
          break;
        case "Nokia Open Source License":
          _switchResult = "Nokia";
          break;
        case "Nokia":
          _switchResult = "Nokia";
          break;
        case "Non-Profit Open Software License 3.0":
          _switchResult = "NPOSL-3.0";
          break;
        case "NPOSL-3.0":
          _switchResult = "NPOSL-3.0";
          break;
        case "NTP License":
          _switchResult = "NTP";
          break;
        case "NTP":
          _switchResult = "NTP";
          break;
        case "OCLC Research Public License 2.0":
          _switchResult = "OCLC-2.0";
          break;
        case "OCLC-2.0":
          _switchResult = "OCLC-2.0";
          break;
        case "ODC Open Database License v1.0":
          _switchResult = "ODbL-1.0";
          break;
        case "ODbL-1.0":
          _switchResult = "ODbL-1.0";
          break;
        case "ODC Public Domain Dedication & License 1.0":
          _switchResult = "PDDL-1.0";
          break;
        case "PDDL-1.0":
          _switchResult = "PDDL-1.0";
          break;
        case "Open Group Test Suite License":
          _switchResult = "OGTSL";
          break;
        case "OGTSL":
          _switchResult = "OGTSL";
          break;
        case "Open Software License 1.0":
          _switchResult = "OSL-1.0";
          break;
        case "OSL-1.0":
          _switchResult = "OSL-1.0";
          break;
        case "Open Software License 2.0":
          _switchResult = "OSL-2.0";
          break;
        case "OSL-2.0":
          _switchResult = "OSL-2.0";
          break;
        case "Open Software License 2.1":
          _switchResult = "OSL-2.1";
          break;
        case "OSL-2.1":
          _switchResult = "OSL-2.1";
          break;
        case "Open Software License 3.0":
          _switchResult = "OSL-3.0";
          break;
        case "OSL-3.0":
          _switchResult = "OSL-3.0";
          break;
        case "OpenLDAP Public License v2.8":
          _switchResult = "OLDAP-2.8";
          break;
        case "OLDAP-2.8":
          _switchResult = "OLDAP-2.8";
          break;
        case "OpenSSL License":
          _switchResult = "OpenSSL";
          break;
        case "OpenSSL":
          _switchResult = "OpenSSL";
          break;
        case "PHP License v3.0":
          _switchResult = "PHP-3.0";
          break;
        case "PHP-3.0":
          _switchResult = "PHP-3.0";
          break;
        case "PHP LIcense v3.01":
          _switchResult = "PHP-3.01";
          break;
        case "PHP-3.01":
          _switchResult = "PHP-3.01";
          break;
        case "PostgreSQL License":
          _switchResult = "PostgreSQL";
          break;
        case "PostgreSQL":
          _switchResult = "PostgreSQL";
          break;
        case "Python License 2.0":
          _switchResult = "Python-2.0";
          break;
        case "Python-2.0":
          _switchResult = "Python-2.0";
          break;
        case "Q Public License 1.0":
          _switchResult = "QPL-1.0";
          break;
        case "QPL-1.0":
          _switchResult = "QPL-1.0";
          break;
        case "RealNetworks Public Source License v1.0":
          _switchResult = "RPSL-1.0";
          break;
        case "RPSL-1.0":
          _switchResult = "RPSL-1.0";
          break;
        case "Reciprocal Public License 1.5":
          _switchResult = "RPL-1.5";
          break;
        case "RPL-1.5":
          _switchResult = "RPL-1.5";
          break;
        case "Red Hat eCos Public License v1.1":
          _switchResult = "RHeCos-1.1";
          break;
        case "RHeCos-1.1":
          _switchResult = "RHeCos-1.1";
          break;
        case "Ricoh Source Code Public License":
          _switchResult = "RSCPL";
          break;
        case "RSCPL":
          _switchResult = "RSCPL";
          break;
        case "Ruby License":
          _switchResult = "Ruby";
          break;
        case "Ruby":
          _switchResult = "Ruby";
          break;
        case "Sax Public Domain Notice":
          _switchResult = "SAX-PD";
          break;
        case "SAX-PD":
          _switchResult = "SAX-PD";
          break;
        case "SIL Open Font License 1.0":
          _switchResult = "OFL-1.0";
          break;
        case "OFL-1.0":
          _switchResult = "OFL-1.0";
          break;
        case "SIL Open Font License 1.1":
          _switchResult = "OFL-1.1";
          break;
        case "OFL-1.1":
          _switchResult = "OFL-1.1";
          break;
        case "Simple Public License 2.0":
          _switchResult = "SimPL-2.0";
          break;
        case "SimPL-2.0":
          _switchResult = "SimPL-2.0";
          break;
        case "Sleepycat License":
          _switchResult = "Sleepycat";
          break;
        case "Sleepycat":
          _switchResult = "Sleepycat";
          break;
        case "SugarCRM Public License v1.1.3":
          _switchResult = "SugarCRM-1.1.3";
          break;
        case "SugarCRM-1.1.3":
          _switchResult = "SugarCRM-1.1.3";
          break;
        case "Sun Public License v1.0":
          _switchResult = "SPL-1.0";
          break;
        case "SPL-1.0":
          _switchResult = "SPL-1.0";
          break;
        case "Sybase Open Watcom Public License 1.0":
          _switchResult = "Watcom-1.0";
          break;
        case "Watcom-1.0":
          _switchResult = "Watcom-1.0";
          break;
        case "University of Illinois/NCSA Open Source License":
          _switchResult = "NCSA";
          break;
        case "NCSA":
          _switchResult = "NCSA";
          break;
        case "Vovida Software License v1.0":
          _switchResult = "VSL-1.0";
          break;
        case "VSL-1.0":
          _switchResult = "VSL-1.0";
          break;
        case "W3C Software and Notice License":
          _switchResult = "W3C";
          break;
        case "W3C":
          _switchResult = "W3C";
          break;
        case "wxWindows Library License":
          _switchResult = "WXwindows";
          break;
        case "WXwindows":
          _switchResult = "WXwindows";
          break;
        case "X.Net License":
          _switchResult = "Xnet";
          break;
        case "Xnet":
          _switchResult = "Xnet";
          break;
        case "XFree86 License 1.1":
          _switchResult = "XFree86-1.1";
          break;
        case "XFree86-1.1":
          _switchResult = "XFree86-1.1";
          break;
        case "Yahoo! Public License v1.0":
          _switchResult = "YPL-1.0";
          break;
        case "YPL-1.0":
          _switchResult = "YPL-1.0";
          break;
        case "Yahoo! Public License v1.1":
          _switchResult = "YPL-1.1";
          break;
        case "YPL-1.1":
          _switchResult = "YPL-1.1";
          break;
        case "Zimbra Public License v1.3":
          _switchResult = "Zimbra-1.3";
          break;
        case "Zimbra-1.3":
          _switchResult = "Zimbra-1.3";
          break;
        case "zlib License":
          _switchResult = "Zlib";
          break;
        case "Zlib":
          _switchResult = "Zlib";
          break;
        case "Zope Public License 1.1":
          _switchResult = "ZPL-1.1";
          break;
        case "ZPL-1.1":
          _switchResult = "ZPL-1.1";
          break;
        case "Zope Public License 2.0":
          _switchResult = "ZPL-2.0";
          break;
        case "ZPL-2.0":
          _switchResult = "ZPL-2.0";
          break;
        case "Zope Public License 2.1":
          _switchResult = "ZPL-2.1";
          break;
        case "ZPL-2.1":
          _switchResult = "ZPL-2.1";
          break;
        default:
          _switchResult = "LGPL-3.0+";
          break;
      }
    } else {
      _switchResult = "LGPL-3.0+";
    }
    return _switchResult;
  }
}
