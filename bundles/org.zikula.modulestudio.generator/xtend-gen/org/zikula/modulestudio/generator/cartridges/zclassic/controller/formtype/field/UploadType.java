package org.zikula.modulestudio.generator.cartridges.zclassic.controller.formtype.field;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class UploadType {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Form/Type/Field/UploadType.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.uploadTypeBaseImpl(it)), this.fh.phpFileContent(it, this.uploadTypeImpl(it)));
  }
  
  private CharSequence uploadTypeBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\Type\\Field\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\AbstractType;");
    _builder.newLine();
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      if ((_targets).booleanValue()) {
        _builder.append("use Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;");
        _builder.newLine();
        _builder.append("use Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;");
        _builder.newLine();
      }
    }
    _builder.append("use Symfony\\Component\\Form\\FormBuilderInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\FormInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\FormView;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\File\\File;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\RequestStack;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\OptionsResolver\\OptionsResolver;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\PropertyAccess\\PropertyAccess;");
    _builder.newLine();
    _builder.append("use Zikula\\Common\\Translator\\TranslatorInterface;");
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Form\\DataTransformer\\UploadFileTransformer;");
    _builder.newLineIfNotEmpty();
    _builder.append("use ");
    String _appNamespace_2 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_2);
    _builder.append("\\Helper\\ImageHelper;");
    _builder.newLineIfNotEmpty();
    _builder.append("use ");
    String _appNamespace_3 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_3);
    _builder.append("\\Helper\\UploadHelper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Upload field type base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractUploadType extends AbstractType");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var TranslatorInterface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $translator;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var RequestStack");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $requestStack = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var ImageHelper");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $imageHelper;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var UploadHelper");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $uploadHelper = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var FormBuilderInterface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $formBuilder = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var object");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $entity = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* UploadTypeExtension constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param TranslatorInterface $translator   Translator service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param RequestStack        $requestStack RequestStack service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param ImageHelper         $imageHelper  ImageHelper service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param UploadHelper        $uploadHelper UploadHelper service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(TranslatorInterface $translator, RequestStack $requestStack, ImageHelper $imageHelper, UploadHelper $uploadHelper)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->translator = $translator;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->requestStack = $requestStack;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->imageHelper = $imageHelper;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->uploadHelper = $uploadHelper;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @inheritDoc");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function buildForm(FormBuilderInterface $builder, array $options)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$options[\'compound\'] = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldName = $builder->getName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->entity = $options[\'entity\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->formBuilder = $builder;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fileOptions = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($options as $optionName => $optionValue) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (in_array($optionName, [\'entity\', \'allowed_extensions\', \'allowed_size\'])) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fileOptions[$optionName] = $optionValue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fileOptions[\'attr\'][\'class\'] = \'validate-upload\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$builder->add($fieldName, ");
    {
      Boolean _targets_1 = this._utils.targets(it, "1.5");
      if ((_targets_1).booleanValue()) {
        _builder.append("FileType::class");
      } else {
        _builder.append("\'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType\'");
      }
    }
    _builder.append(", $fileOptions);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$uploadFileTransformer = new UploadFileTransformer($this, $this->requestStack, $this->uploadHelper, $fieldName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$builder->get($fieldName)->addModelTransformer($uploadFileTransformer);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($options[\'required\']) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$builder->add($fieldName . \'DeleteFile\', ");
    {
      Boolean _targets_2 = this._utils.targets(it, "1.5");
      if ((_targets_2).booleanValue()) {
        _builder.append("CheckboxType::class");
      } else {
        _builder.append("\'Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType\'");
      }
    }
    _builder.append(", [");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("\'mapped\' => false,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'label\' => $this->translator->__(\'Delete existing file\'),");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'required\' => false,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'attr\' => [");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\'title\' => $this->translator->__(\'Delete this file ?\')");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @inheritDoc");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function buildView(FormView $view, FormInterface $form, array $options)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldName = $form->getConfig()->getName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'object_type\'] = $this->entity->get_objectType();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'field_name\'] = $fieldName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'formatted_entity_title\'] = $this->entity->getTitleFromDisplayPattern();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$parentData = $form->getParent()->getData();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$accessor = PropertyAccess::createPropertyAccessor();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldNameGetter = \'get\' . ucfirst($fieldName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// assign basic file properties");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$file = null !== $parentData ? $accessor->getValue($parentData, $fieldNameGetter) : null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null !== $file && is_array($file)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$file = $file[$fieldName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null !== $file && is_string($file)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (false === strpos($file, \'/\')) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$file = $this->uploadHelper->getFileBaseFolder($this->entity->get_objectType(), $fieldName) . $file;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$file = new File($file);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$hasFile = null !== $file;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fileMeta = $hasFile ? $accessor->getValue($parentData, $fieldNameGetter . \'Meta\') : [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!isset($fileMeta[\'isImage\'])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fileMeta[\'isImage\'] = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!isset($fileMeta[\'size\'])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$fileMeta[\'size\'] = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'file_meta\'] = $fileMeta;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'file_path\'] = $hasFile ? $file->getPathname() : null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'file_url\'] = $hasFile ? $accessor->getValue($parentData, $fieldNameGetter . \'Url\') : null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// assign other custom options");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'allowed_extensions\'] = array_key_exists(\'allowed_extensions\', $options) ? $options[\'allowed_extensions\'] : \'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'allowed_size\'] = array_key_exists(\'allowed_size\', $options) ? $options[\'allowed_size\'] : 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$view->vars[\'thumb_runtime_options\'] = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (true === $fileMeta[\'isImage\']) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$view->vars[\'thumb_runtime_options\'] = $this->imageHelper->getRuntimeOptions($this->entity->get_objectType(), $fieldName, \'controllerAction\', [\'action\' => \'edit\']);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @inheritDoc");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function configureOptions(OptionsResolver $resolver)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$resolver");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("->setRequired([\'entity\'])");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("->setOptional([\'allowed_extensions\', \'allowed_size\'])");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("->setDefaults([");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\'attr\' => [");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\'class\' => \'file-selector\'");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\'allowed_extensions\' => \'\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\'allowed_size\' => \'\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\'error_bubbling\' => false");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("->setAllowedTypes([");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\'allowed_extensions\' => \'string\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\'allowed_size\' => \'string\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _terMethod = new FileHelper().getterMethod(null, "formBuilder", "FormBuilderInterface", Boolean.valueOf(false));
    _builder.append(_terMethod, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    CharSequence _terMethod_1 = new FileHelper().getterMethod(null, "entity", "object", Boolean.valueOf(false));
    _builder.append(_terMethod_1, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @inheritDoc");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function getBlockPrefix()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, "        ");
    _builder.append("_field_upload\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence uploadTypeImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\Type\\Field;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Form\\Type\\Field\\Base\\AbstractUploadType;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Upload field type implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class UploadType extends AbstractUploadType");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to add your customisation here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
