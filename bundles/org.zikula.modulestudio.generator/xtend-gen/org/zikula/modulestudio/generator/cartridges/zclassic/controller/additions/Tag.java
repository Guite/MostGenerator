package org.zikula.modulestudio.generator.cartridges.zclassic.controller.additions;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class Tag {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "TaggedObjectMeta/");
    String _appName = this._utils.appName(it);
    String _plus_1 = (_plus + _appName);
    String _plus_2 = (_plus_1 + ".php");
    this._namingExtensions.generateClassPair(it, fsa, _plus_2, 
      this.fh.phpFileContent(it, this.tagBaseClass(it)), this.fh.phpFileContent(it, this.tagImpl(it)));
  }
  
  private CharSequence tagBaseClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\TaggedObjectMeta\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use DateTime;");
    _builder.newLine();
    _builder.append("use IntlDateFormatter;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;");
    _builder.newLine();
    _builder.append("use Zikula\\Core\\UrlInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\TagModule\\AbstractTaggedObjectMeta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class provides object meta data for the Tag module.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class Abstract");
    String _appName = this._utils.appName(it);
    _builder.append(_appName);
    _builder.append(" extends AbstractTaggedObjectMeta implements ContainerAwareInterface");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("use ContainerAwareTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _tagBaseImpl = this.tagBaseImpl(it);
    _builder.append(_tagBaseImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence tagBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, " ");
    _builder.append(" constructor.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param integer      $objectId  Identifier of treated object");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param integer      $areaId    Name of hook area");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $module    Name of the owning module");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $urlString **deprecated**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param UrlInterface $urlObject Object carrying url arguments");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function __construct($objectId, $areaId, $module, $urlString = null, UrlInterface $urlObject = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// call base constructor to store arguments in member vars");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("parent::__construct($objectId, $areaId, $module, $urlString, $urlObject);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// derive object type from url object");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$urlArgs = $urlObject->getArgs();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectType = isset($urlArgs[\'ot\']) ? $urlArgs[\'ot\'] : \'");
    String _formatForCode = this._formattingExtensions.formatForCode(this._modelExtensions.getLeadingEntity(it).getName());
    _builder.append(_formatForCode, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->setContainer(\\ServiceUtil::getManager());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$permissionApi = $this->container->get(\'zikula_permissions_module.api.permission\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$component = $module . \':\' . ucfirst($objectType) . \':\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$perm = $permissionApi->hasPermission($component, $objectId . \'::\', ACCESS_READ);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$perm) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $this->container->get(\'");
    String _appService = this._utils.appService(it);
    _builder.append(_appService, "    ");
    _builder.append(".entity_factory\')->getRepository($objectType);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$useJoins = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entity = $repository->selectById($objectId, $useJoins);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (null === $entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->setObjectTitle($entity->getTitleFromDisplayPattern());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dateFieldName = $repository->getStartDateFieldName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($dateFieldName != \'\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setObjectDate($entity[$dateFieldName]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setObjectDate(\'\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (method_exists($entity, \'getCreatedBy\')) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setObjectAuthor($entity->getCreatedBy()->getUname());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setObjectAuthor(\'\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Sets the object title.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $title");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function setObjectTitle($title)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->title = $title;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Sets the object date.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param DateTime|string $date");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function setObjectDate($date)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($date instanceof DateTime) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$formatter = new IntlDateFormatter();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->date = $formatter->format($date->getTimestamp());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->date = $date;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Sets the object author.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $author");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function setObjectAuthor($author)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->author = $author;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence tagImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\TaggedObjectMeta;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\TaggedObjectMeta\\Base\\Abstract");
    String _appName = this._utils.appName(it);
    _builder.append(_appName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class provides object meta data for the Tag module.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1);
    _builder.append(" extends Abstract");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2);
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the tag support here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
