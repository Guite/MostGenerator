package org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff;

import com.google.common.base.Objects;
import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class ZikulaManifest {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String fileName = "zikula.manifest.json";
    String _appSourcePath = this._namingExtensions.getAppSourcePath(it);
    String _plus = (_appSourcePath + fileName);
    boolean _shouldBeSkipped = this._namingExtensions.shouldBeSkipped(it, _plus);
    boolean _not = (!_shouldBeSkipped);
    if (_not) {
      String _appSourcePath_1 = this._namingExtensions.getAppSourcePath(it);
      String _plus_1 = (_appSourcePath_1 + fileName);
      boolean _shouldBeMarked = this._namingExtensions.shouldBeMarked(it, _plus_1);
      if (_shouldBeMarked) {
        fileName = "zikula.manifest.generated.json";
      }
      String _appSourcePath_2 = this._namingExtensions.getAppSourcePath(it);
      String _plus_2 = (_appSourcePath_2 + fileName);
      fsa.generateFile(_plus_2, this.manifestFile(it));
    }
  }
  
  private CharSequence manifestFile(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _manifestContent = this.manifestContent(it);
    _builder.append(_manifestContent, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence manifestContent(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"vendor\": {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"title\": \"");
    String _vendor = it.getVendor();
    _builder.append(_vendor, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"url\": \"");
    String _url = it.getUrl();
    _builder.append(_url, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"logo\": \"\"");
    _builder.newLine();
    _builder.append("},");
    _builder.newLine();
    _builder.append("\"extension\": {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"name\": \"");
    String _formatForDisplayCapital = this._formattingExtensions.formatForDisplayCapital(it.getName());
    _builder.append(_formatForDisplayCapital, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"url\": \"");
    String _url_1 = it.getUrl();
    _builder.append(_url_1, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"icon\": \"\"");
    _builder.newLine();
    _builder.append("},");
    _builder.newLine();
    _builder.append("\"version\": {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"semver\": \"");
    String _version = it.getVersion();
    _builder.append(_version, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"compatibility\": \">=");
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      if ((_targets).booleanValue()) {
        _builder.append("1.5.0");
      } else {
        _builder.append("1.4.6");
      }
    }
    _builder.append(" <3.0.0\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"composerpath\": \"composer.json\",");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"description\": \"");
    {
      if (((null != it.getDocumentation()) && (!Objects.equal(it.getDocumentation(), "")))) {
        String _replace = it.getDocumentation().replace("\"", "\'");
        _builder.append(_replace, "    ");
      } else {
        String _appName = this._utils.appName(it);
        _builder.append(_appName, "    ");
        _builder.append(" module generated by ModuleStudio ");
        String _msVersion = this._utils.msVersion();
        _builder.append(_msVersion, "    ");
        _builder.append(".");
      }
    }
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("\"keywords\": [");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("},");
    _builder.newLine();
    _builder.append("\"urls\": {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"version\": \"\",");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"docs\": \"\",");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"demo\": \"\",");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"download\": \"\",");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"issues\": \"\"");
    _builder.newLine();
    _builder.append("},");
    _builder.newLine();
    _builder.append("\"dependencies\": [");
    _builder.newLine();
    _builder.append("]");
    _builder.newLine();
    return _builder;
  }
}
