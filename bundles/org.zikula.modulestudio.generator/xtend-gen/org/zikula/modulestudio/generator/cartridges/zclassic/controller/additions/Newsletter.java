package org.zikula.modulestudio.generator.cartridges.zclassic.controller.additions;

import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.cartridges.zclassic.view.additions.NewsletterView;
import org.zikula.modulestudio.generator.extensions.ControllerExtensions;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.GeneratorSettingsExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class Newsletter {
  @Extension
  private ControllerExtensions _controllerExtensions = new ControllerExtensions();
  
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private GeneratorSettingsExtensions _generatorSettingsExtensions = new GeneratorSettingsExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    final String pluginPath = (_appSourceLibPath + "NewsletterPlugin/");
    final String pluginClassSuffix = "Plugin";
    String pluginFileName = (("ItemList" + pluginClassSuffix) + ".php");
    if (((!this._generatorSettingsExtensions.generateOnlyBaseClasses(it)) && (!this._namingExtensions.shouldBeSkipped(it, (pluginPath + pluginFileName))))) {
      boolean _shouldBeMarked = this._namingExtensions.shouldBeMarked(it, (pluginPath + pluginFileName));
      if (_shouldBeMarked) {
        pluginFileName = (("ItemList" + pluginClassSuffix) + ".generated.php");
      }
      fsa.generateFile((pluginPath + pluginFileName), this.fh.phpFileContent(it, this.newsletterClass(it)));
    }
    new NewsletterView().generate(it, fsa);
  }
  
  private CharSequence newsletterClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\NewsletterPlugin;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Newsletter_AbstractPlugin;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Newsletter plugin class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ItemListPlugin extends Newsletter_AbstractPlugin implements ContainerAwareInterface");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("use ContainerAwareTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ItemListPlugin constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setContainer(\\ServiceUtil::getManager());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _newsletterImpl = this.newsletterImpl(it);
    _builder.append(_newsletterImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence newsletterImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    final String itemDesc = this._formattingExtensions.formatForDisplay(this._modelExtensions.getLeadingEntity(it).getNameMultiple());
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a title being used in the newsletter. Should be short.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string Title in newsletter");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getTitle()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'translator.default\')->__(\'Latest ");
    {
      int _size = it.getEntities().size();
      boolean _lessThan = (_size < 2);
      if (_lessThan) {
        _builder.append(itemDesc, "    ");
      } else {
        String _appName = this._utils.appName(it);
        _builder.append(_appName, "    ");
        _builder.append(" items");
      }
    }
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a display name for the admin interface.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string Display name in admin area");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getDisplayName()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'translator.default\')->__(\'List of ");
    _builder.append(itemDesc, "    ");
    {
      int _size_1 = it.getEntities().size();
      boolean _greaterThan = (_size_1 > 1);
      if (_greaterThan) {
        _builder.append(" and other ");
        String _appName_1 = this._utils.appName(it);
        _builder.append(_appName_1, "    ");
        _builder.append(" items");
      }
    }
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a description for the admin interface.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string Description in admin area");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getDescription()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'translator.default\')->__(\'This plugin shows a list of ");
    _builder.append(itemDesc, "    ");
    {
      int _size_2 = it.getEntities().size();
      boolean _greaterThan_1 = (_size_2 > 1);
      if (_greaterThan_1) {
        _builder.append(" and other items");
      }
    }
    _builder.append(" of the ");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "    ");
    _builder.append(" module.\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determines whether this plugin is active or not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* An inactive plugin is not shown in the newsletter.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return boolean Whether the plugin is available or not");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function pluginAvailable()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'kernel\')->isBundle($this->modname);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns custom plugin variables.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array List of variables");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getParameters()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$translator = $this->container->get(\'translator.default\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectTypes = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->pluginAvailable()) {");
    _builder.newLine();
    {
      Iterable<Entity> _allEntities = this._modelExtensions.getAllEntities(it);
      for(final Entity entity : _allEntities) {
        _builder.append("        ");
        _builder.append("$objectTypes[\'");
        String _formatForCode = this._formattingExtensions.formatForCode(entity.getName());
        _builder.append(_formatForCode, "        ");
        _builder.append("\'] = [\'name\' => $translator->__(\'");
        String _formatForDisplayCapital = this._formattingExtensions.formatForDisplayCapital(entity.getNameMultiple());
        _builder.append(_formatForDisplayCapital, "        ");
        _builder.append("\')];");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$active = $this->getPluginVar(\'ObjectTypes\', []);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($objectTypes as $k => $v) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$objectTypes[$k][\'nwactive\'] = in_array($k, $active);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$args = $this->getPluginVar(\'Args\', []);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'number\' => 1,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'param\'  => [");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'ObjectTypes\'=> $objectTypes,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'Args\' => $args");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Sets custom plugin variables.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function setParameters()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Object types to be used in the newsletter");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$request = $this->container->get(\'request_stack\')->getCurrentRequest();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectTypes = $request->request->get($this->modname . \'ObjectTypes\', []);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->setPluginVar(\'ObjectTypes\', array_keys($objectTypes));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Additional arguments");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$args = $request->request->get($this->modname . \'Args\', []);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->setPluginVar(\'Args\', $args);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns data for the Newsletter plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param \\DateTime $filterAfterDate Optional date filter (items should be newer), format yyyy-mm-dd hh:mm:ss or null if not set");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array List of affected content items");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getPluginData($filterAfterDate = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$this->pluginAvailable()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// collect data for each activated object type");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$itemsGrouped = $this->getItemsPerObjectType($filterAfterDate);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// now flatten for presentation");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$items = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($itemsGrouped) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($itemsGrouped as $objectTypes => $itemList) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($itemList as $item) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$items[] = $item;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $items;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Collects newsletter data for each activated object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param \\DateTime $filterAfterDate Optional date filter (items should be newer), format yyyy-mm-dd hh:mm:ss or null if not set");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array Data grouped by object type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getItemsPerObjectType($filterAfterDate = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectTypes = $this->getPluginVar(\'ObjectTypes\', []);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$args = $this->getPluginVar(\'Args\', []);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$permissionApi = $this->container->get(\'zikula_permissions_module.api.permission\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$output = [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($objectTypes as $objectType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$permissionApi->hasPermission($this->modname . \':\' . ucfirst($objectType) . \':\', \'::\', ACCESS_READ, $this->userNewsletter)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// the newsletter has no permission for these items");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$otArgs = isset($args[$objectType]) ? $args[$objectType] : [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$otArgs[\'objectType\'] = $objectType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// perform the data selection");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$output[$objectType] = $this->selectPluginData($otArgs, $filterAfterDate);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $output;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Performs the internal data selection.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array     $args            Arguments array (contains object type)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param \\DateTime $filterAfterDate Optional date filter (items should be newer), format yyyy-mm-dd hh:mm:ss or null if not set");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array List of selected items");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function selectPluginData(array $args = [], $filterAfterDate = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectType = $args[\'objectType\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $this->container->get(\'");
    String _appService = this._utils.appService(it);
    _builder.append(_appService, "    ");
    _builder.append(".entity_factory\')->getRepository($objectType);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// create query");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$where = isset($args[\'filter\']) ? $args[\'filter\'] : \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$orderBy = $this->getSortParam($args, $repository);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$qb = $repository->genericBaseQuery($where, $orderBy);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($filterAfterDate) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$startDateFieldName = $repository->getStartDateFieldName();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($startDateFieldName == \'createdDate\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$qb->andWhere(\'tbl.createdDate > :afterDate\')");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->setParameter(\'afterDate\', $filterAfterDate);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// get objects from database");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$currentPage = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$resultsPerPage = isset($args[\'amount\']) && is_numeric($args[\'amount\']) ? $args[\'amount\'] : $this->nItems;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$query = $repository->getSelectWherePaginatedQuery($qb, $currentPage, $resultsPerPage);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("list($entities, $objectCount) = $repository->retrieveCollectionResult($query, $orderBy, true);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// post processing");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$descriptionFieldName = $repository->getDescriptionFieldName();");
    _builder.newLine();
    {
      boolean _hasImageFields = this._modelExtensions.hasImageFields(it);
      if (_hasImageFields) {
        _builder.append("    ");
        _builder.append("$previewFieldName = $repository->getPreviewFieldName();");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      boolean _hasDisplayActions = this._controllerExtensions.hasDisplayActions(it);
      if (_hasDisplayActions) {
        _builder.append("    ");
        _builder.append("$hasDisplayPage = in_array($objectType, [\'");
        final Function1<Entity, Boolean> _function = (Entity it_1) -> {
          return Boolean.valueOf(this._controllerExtensions.hasDisplayAction(it_1));
        };
        final Function1<Entity, String> _function_1 = (Entity it_1) -> {
          return this._formattingExtensions.formatForCode(it_1.getName());
        };
        String _join = IterableExtensions.join(IterableExtensions.<Entity, String>map(IterableExtensions.<Entity>filter(this._modelExtensions.getAllEntities(it), _function), _function_1), "\', \'");
        _builder.append(_join, "    ");
        _builder.append("\']);");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("$router = $this->container->get(\'router\');");
        _builder.newLine();
      }
    }
    _builder.append("    ");
    _builder.append("$items = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($entities as $k => $item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$items[$k] = [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Set title of this item.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$items[$k][\'nl_title\'] = $item->getTitleFromDisplayPattern();");
    _builder.newLine();
    _builder.newLine();
    {
      boolean _hasDisplayActions_1 = this._controllerExtensions.hasDisplayActions(it);
      if (_hasDisplayActions_1) {
        _builder.append("        ");
        _builder.append("if ($hasDisplayPage) {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("// Set (full qualified) link of title");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$urlArgs = $item->createUrlArgs();");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$urlArgs[\'lang\'] = $this->lang;");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$items[$k][\'nl_url_title\'] = $router->generate(\'");
        String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
        _builder.append(_formatForDB, "            ");
        _builder.append("_\' . strtolower($objectType) . \'_display\', $urlArgs, true);");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("} else {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$items[$k][\'nl_url_title\'] = null;");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("        ");
        _builder.append("$items[$k][\'nl_url_title\'] = null;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Set main content of the item.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$items[$k][\'nl_content\'] = $descriptionFieldName ? $item[$descriptionFieldName] : \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Url for further reading. In this case it is the same as used for the title.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$items[$k][\'nl_url_readmore\'] = $items[$k][\'nl_url_title\'];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// A picture to display in Newsletter next to the item");
    _builder.newLine();
    {
      boolean _hasImageFields_1 = this._modelExtensions.hasImageFields(it);
      if (_hasImageFields_1) {
        _builder.append("        ");
        _builder.append("$items[$k][\'nl_picture\'] = $previewFieldName != \'\' && !empty($item[$previewFieldName) ? $item[$previewFieldName]->getPathname() : \'\';");
        _builder.newLine();
      } else {
        _builder.append("        ");
        _builder.append("$items[$k][\'nl_picture\'] = \'\';");
        _builder.newLine();
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $items;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determines the order by parameter for item selection.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array               $args       List of plugin variables");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Doctrine_Repository $repository The repository used for data fetching");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string the sorting clause");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getSortParam($args, $repository)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($args[\'sorting\'] == \'random\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'RAND()\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$sortParam = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($args[\'sorting\'] == \'newest\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entityFactory = $this->container->get(\'");
    String _appService_1 = this._utils.appService(it);
    _builder.append(_appService_1, "        ");
    _builder.append(".entity_factory\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$idFields = $entityFactory->getIdFields($args[\'objectType\']);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (count($idFields) == 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$sortParam = $idFields[0] . \' DESC\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($idFields as $idField) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (!empty($sortParam)) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$sortParam .= \', \';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$sortParam .= $idField . \' DESC\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($args[\'sorting\'] == \'default\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$sortParam = $repository->getDefaultSortingField() . \' ASC\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $sortParam;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
