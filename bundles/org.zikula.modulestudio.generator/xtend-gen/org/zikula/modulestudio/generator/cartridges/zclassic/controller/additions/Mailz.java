package org.zikula.modulestudio.generator.cartridges.zclassic.controller.additions;

import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.cartridges.zclassic.view.additions.MailzView;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class Mailz {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Api/MailzApi.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.mailzBaseClass(it)), this.fh.phpFileContent(it, this.mailzImpl(it)));
    new MailzView().generate(it, fsa);
  }
  
  private CharSequence mailzBaseClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Api\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;");
    _builder.newLine();
    _builder.append("use Zikula_AbstractBase;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Mailz api base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractMailzApi extends Zikula_AbstractBase implements ContainerAwareInterface");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("use ContainerAwareTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* MailzApi constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setContainer(\\ServiceUtil::getManager());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _mailzBaseImpl = this.mailzBaseImpl(it);
    _builder.append(_mailzBaseImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence mailzBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns existing Mailz plugins with type / title.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array $args List of arguments");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array List of provided plugin functions");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getPlugins(array $args = [])");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$translator = $this->container->get(\'translator.default\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    final String itemDesc = this._formattingExtensions.formatForDisplay(this._modelExtensions.getLeadingEntity(it).getNameMultiple());
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$plugins = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$plugins[] = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'pluginid\'      => 1,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'module\'        => \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "        ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\'title\'         => $translator->__(\'3 newest ");
    _builder.append(itemDesc, "        ");
    _builder.append("\'),");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\'description\'   => $translator->__(\'A list of the three newest ");
    _builder.append(itemDesc, "        ");
    _builder.append(".\')");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$plugins[] = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'pluginid\'      => 2,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'module\'        => \'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "        ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\'title\'         => $translator->__(\'3 random ");
    _builder.append(itemDesc, "        ");
    _builder.append("\'),");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\'description\'   => $translator->__(\'A list of three random ");
    _builder.append(itemDesc, "        ");
    _builder.append(".\')");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $plugins;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the content for a given Mailz plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array    $args                List of arguments");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param int      $args[\'pluginid\']    id number of plugin (internal id for this module, see getPlugins method)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string   $args[\'params\']      optional, show specific one or all otherwise");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param int      $args[\'uid\']         optional, user id for user specific content");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string   $args[\'contenttype\'] h or t for html or text");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param datetime $args[\'last\']        timestamp of last newsletter");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string output of plugin template");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getContent(array $args = [])");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// $args is something like:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Array ( [uid] => 5 [contenttype] => h [pluginid] => 1 [nid] => 1 [last] => 0000-00-00 00:00:00 [params] => Array ( [] => ) ) 1");
    _builder.newLine();
    _builder.append("    ");
    final Entity leadingEntity = this._modelExtensions.getLeadingEntity(it);
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$objectType = \'");
    String _formatForCode = this._formattingExtensions.formatForCode(leadingEntity.getName());
    _builder.append(_formatForCode, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entityFactory = $this->container->get(\'");
    String _appService = this._utils.appService(it);
    _builder.append(_appService, "    ");
    _builder.append(".entity_factory\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$idFields = $entityFactory->getIdFields($objectType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $entityFactory->getRepository($objectType);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$sortParam = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($args[\'pluginid\'] == 2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$sortParam = \'RAND()\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($args[\'pluginid\'] == 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (count($idFields) == 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$sortParam = $idFields[0] . \' DESC\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($idFields as $idField) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (!empty($sortParam)) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$sortParam .= \', \';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$sortParam .= $idField . \' ASC\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$where = \'\'/*$this->filter*/;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$resultsPerPage = 3;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// get objects from database");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("list($entities, $objectCount) = $repository->selectWherePaginated($where, $orderBy, 1, $resultsPerPage);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateType = $args[\'contenttype\'] == \'t\' ? \'text\' : \'html\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//$templateParameters = [\'sorting\' => $this->sorting, \'amount\' => $this->amount, \'filter\' => $this->filter, \'template\' => $this->template];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateParameters = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'objectType\' => $objectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'items\' => $entities");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    {
      boolean _hasUploads = this._modelExtensions.hasUploads(it);
      if (_hasUploads) {
        _builder.append("    ");
        _builder.append("$imageHelper = $this->container->get(\'");
        String _appService_1 = this._utils.appService(it);
        _builder.append(_appService_1, "    ");
        _builder.append(".image_helper\');");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("$templateParameters = array_merge($templateParameters, $repository->getAdditionalTemplateParameters(");
    {
      boolean _hasUploads_1 = this._modelExtensions.hasUploads(it);
      if (_hasUploads_1) {
        _builder.append("$imageHelper, ");
      }
    }
    _builder.append("\'api\', [\'name\' => \'mailz\']));");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'twig\')->render(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'@");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "        ");
    _builder.append("/Mailz/itemlist_\' . $objectType . $templateType . \'.twig\',");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$templateParameters");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence mailzImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Api;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Api\\Base\\AbstractMailzApi;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Mailz api implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class MailzApi extends AbstractMailzApi");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the mailz api here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
