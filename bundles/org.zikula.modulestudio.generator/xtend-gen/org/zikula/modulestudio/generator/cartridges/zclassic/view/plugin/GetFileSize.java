package org.zikula.modulestudio.generator.cartridges.zclassic.view.plugin;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class GetFileSize {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  public CharSequence generate(final Application it, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _fileSizeImpl = this.getFileSizeImpl(it);
    _builder.append(_fileSizeImpl);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _readableFileSize = this.getReadableFileSize(it);
    _builder.append(_readableFileSize);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence getFileSizeImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, " ");
    _builder.append("_fileSize filter displays the size of a given file in a readable way.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* Example:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*     {{ 12345|");
    String _formatForDB_1 = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB_1, " ");
    _builder.append("_fileSize }}");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param integer $size     File size in bytes");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $filepath The input file path including file name (if file size is not known)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param boolean $nodesc   If set to true the description will not be appended");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param boolean $onlydesc If set to true only the description will be returned");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string File size in a readable form");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getFileSize($size = 0, $filepath = \'\', $nodesc = false, $onlydesc = false)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!is_numeric($size)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size = (int) $size;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$size) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (empty($filepath) || !file_exists($filepath)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return \'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size = filesize($filepath);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$size) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->getReadableFileSize($size, $nodesc, $onlydesc);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence getReadableFileSize(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Display a given file size in a readable format");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string  $size     File size in bytes");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param boolean $nodesc   If set to true the description will not be appended");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param boolean $onlydesc If set to true only the description will be returned");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string File size in a readable form");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("private function getReadableFileSize($size, $nodesc = false, $onlydesc = false)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$sizeDesc = $this->__(\'Bytes\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($size >= 1024) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size /= 1024;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$sizeDesc = $this->__(\'KB\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($size >= 1024) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size /= 1024;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$sizeDesc = $this->__(\'MB\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($size >= 1024) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size /= 1024;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$sizeDesc = $this->__(\'GB\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$sizeDesc = \'&nbsp;\' . $sizeDesc;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// format number");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dec_point = \',\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$thousands_separator = \'.\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($size - number_format($size, 0) >= 0.005) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size = number_format($size, 2, $dec_point, $thousands_separator);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size = number_format($size, 0, \'\', $thousands_separator);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// append size descriptor if desired");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!$nodesc) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$size .= $sizeDesc;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// return either only the description or the complete string");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $onlydesc ? $sizeDesc : $size;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
