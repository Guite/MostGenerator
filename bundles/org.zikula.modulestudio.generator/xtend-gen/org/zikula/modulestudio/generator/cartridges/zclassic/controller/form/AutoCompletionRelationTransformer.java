package org.zikula.modulestudio.generator.cartridges.zclassic.controller.form;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class AutoCompletionRelationTransformer {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Form/DataTransformer/AutoCompletionRelationTransformer.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.transformerBaseImpl(it)), this.fh.phpFileContent(it, this.transformerImpl(it)));
  }
  
  private CharSequence transformerBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\DataTransformer\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Doctrine\\Common\\Collections\\ArrayCollection;");
    _builder.newLine();
    _builder.append("use Doctrine\\ORM\\QueryBuilder;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\DataTransformerInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\Exception\\TransformationFailedException;");
    _builder.newLine();
    _builder.append("use Zikula\\Core\\Doctrine\\EntityAccess;");
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Entity\\Factory\\");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital);
    _builder.append("Factory;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Auto completion relation transformer base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This data transformer identifiers chosen by an auto completion functionality.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractAutoCompletionRelationTransformer implements DataTransformerInterface");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var ");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1, "     ");
    _builder.append("Factory");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $entityFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var String");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $objectType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var Boolean");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $isMultiple = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* AutoCompletionRelationTransformer constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param ");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_2, "     ");
    _builder.append("Factory $entityFactory ");
    String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_3, "     ");
    _builder.append("Factory service instance");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("* @param String $objectType The type of entities being processed");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param Boolean $isMultiple Whether a single object or a collection of object is processed");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(");
    String _formatForCodeCapital_4 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_4, "    ");
    _builder.append("Factory $entityFactory, $objectType, $isMultiple)");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->entityFactory = $entityFactory;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->objectType = $objectType;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->isMultiple = $isMultiple;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Transforms a single object or a list of objects to a string with identifiers.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param EntityAccess|ArrayCollection $entities");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return string");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function transform($entities)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$result = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($this->isMultiple && !count($entities) || !$this->isMultiple && null == $entities) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!is_array($entities)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$entities = [$entities];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($entities as $entity) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($result != \'\') {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$result .= \',\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result .= $entity->createCompositeIdentifier();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Transforms a string (identifier list) to an object or object collection.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param string $value");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return EntityAccess|ArrayCollection");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @throws TransformationFailedException if object (issue) is not found");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function reverseTransform($value)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$value) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return $this->isMultiple ? new ArrayCollection() : null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!is_array($value)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$value = explode(\',\', $value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!count($value)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return $this->isMultiple ? new ArrayCollection() : null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// fix for #446");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (count($value) == 1 && empty($value[0])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return $this->isMultiple ? new ArrayCollection() : null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$repository = $this->entityFactory->getRepository($this->objectType);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$qb = $repository->genericBaseQuery(\'\', \'\', false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$qb = $this->buildWhereClause($value, $qb);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//$qb = $repository->addCommonViewFilters($qb);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$query = $repository->getQueryFromBuilder($qb);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entities = $query->getResult();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!count($entities)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// causes a validation error");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// this message is not shown to the user");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// see the invalid_message option");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new TransformationFailedException(sprintf(\'Failed to find entities (\"%1$s\") for identifier (\"%2$s\")!\', [$this->objectType, $value]));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $this->isMultiple ? $entities : $entities[0];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _buildWhereClause = this.buildWhereClause(it);
    _builder.append(_buildWhereClause, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence buildWhereClause(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Builds the where clause for selecting matches for the current search.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $inputValue The input string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param QueryBuilder $qb         The query builder to be enriched");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return Querybuilder The enriched query builder");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function buildWhereClause($inputValue, QueryBuilder $qb)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// remove empty option if it has been selected");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($inputValue as $k => $v) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$v) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("unset($inputValue[$k]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// readd filter value for returning nothing if no real item has been selected");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (count($inputValue) == 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$inputValue[] = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$idFields = $this->entityFactory->getIdFields($this->objectType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (count($idFields) > 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$idsPerField = $this->decodeCompositeIdentifier($idFields, $inputValue);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($idFields as $idField) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$qb->andWhere(\'tbl.\' . $idField . \' IN (:\' . $idField . \'Ids)\')");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->setParameter($idField . \'Ids\', $idsPerField[$idField]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$idField = reset($idFields);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($this->isMultiple) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$qb->andWhere(\'tbl.\' . $idField . \' IN (:\' . $idField . \'Ids)\')");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->setParameter($idField . \'Ids\', $inputValue);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$qb->andWhere(\'tbl.\' . $idField . \' = :\' . $idField)");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->setParameter($idField, $inputValue);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!empty($this->where)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$qb->andWhere($this->where);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $qb;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Decodes a list of concatenated identifier strings (for composite keys).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array $idFields List of identifier field names");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array $itemIds  List of concatenated identifiers");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return Array with list of single identifiers");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function decodeCompositeIdentifier(array $idFields = [], array $itemIds = [])");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$idValues = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($idFields as $idField) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$idValues[$idField] = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($itemIds as $itemId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$itemIdParts = explode(\'_\', $itemId);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$i = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($idFields as $idField) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$idValues[$idField][] = $itemIdParts[$i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$i++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $idValues;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence transformerImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\DataTransformer;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Form\\DataTransformer\\Base\\AbstractAutoCompletionRelationTransformer;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Auto completion relation transformer implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This data transformer identifiers chosen by an auto completion functionality.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class AutoCompletionRelationTransformer extends AbstractAutoCompletionRelationTransformer");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to add your customisation here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
