package org.zikula.modulestudio.generator.cartridges.zclassic.view.plugin;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class TreeSelection {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  public CharSequence generate(final Application it, final IFileSystemAccess fsa) {
    return this.treeSelectionImpl(it);
  }
  
  private CharSequence treeSelectionImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, " ");
    _builder.append("_treeSelection function retrieves tree entities based on a given one.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Available parameters:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*   - objectType:   Name of treated object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*   - node:         Given entity as tree entry point.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*   - target:       One of \'allParents\', \'directParent\', \'allChildren\', \'directChildren\', \'predecessors\', \'successors\', \'preandsuccessors\'");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*   - skipRootNode: Whether root nodes are skipped or not (defaults to true). Useful for when working with many trees at once.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The output of the plugin");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getTreeSelection($objectType, $node, $target, $skipRootNode = true)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $this->entityFactory->getRepository($objectType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$titleFieldName = $repository->getTitleFieldName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("switch ($target) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case \'allParents\':");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case \'directParent\':");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$path = $repository->getPath($node);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (count($path) > 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// remove $node");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("unset($path[count($path)-1]);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($skipRootNode && count($path) > 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// remove root level");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("array_shift($path);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($target == \'allParents\') {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$result = $path;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} elseif ($target == \'directParent\' && count($path) > 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$result = $path[count($path)-1];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case \'allChildren\':");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case \'directChildren\':");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$direct = $target == \'directChildren\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$sortByField = $titleFieldName != \'\' ? $titleFieldName : null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$sortDirection = \'ASC\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result = $repository->children($node, $direct, $sortByField, $sortDirection);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case \'predecessors\':");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$includeSelf = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result = $repository->getPrevSiblings($node, $includeSelf);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case \'successors\':");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$includeSelf = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result = $repository->getNextSiblings($node, $includeSelf);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case \'preandsuccessors\':");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$includeSelf = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result = array_merge($repository->getPrevSiblings($node, $includeSelf), $repository->getNextSiblings($node, $includeSelf));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
