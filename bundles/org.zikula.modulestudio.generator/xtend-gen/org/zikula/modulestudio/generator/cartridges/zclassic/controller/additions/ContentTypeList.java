package org.zikula.modulestudio.generator.cartridges.zclassic.controller.additions;

import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.cartridges.zclassic.view.additions.ContentTypeListView;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class ContentTypeList {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    InputOutput.<String>println("Generating content type for multiple objects");
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "ContentType/ItemList.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.contentTypeBaseClass(it)), this.fh.phpFileContent(it, this.contentTypeImpl(it)));
    new ContentTypeListView().generate(it, fsa);
  }
  
  private CharSequence contentTypeBaseClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\ContentType\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;");
    _builder.newLine();
    {
      boolean _needsFeatureActivationHelper = this._modelBehaviourExtensions.needsFeatureActivationHelper(it);
      if (_needsFeatureActivationHelper) {
        _builder.append("use ");
        String _appNamespace_1 = this._utils.appNamespace(it);
        _builder.append(_appNamespace_1);
        _builder.append("\\Helper\\FeatureActivationHelper;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generic item list content plugin base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractItemList extends \\Content_AbstractContentType implements ContainerAwareInterface");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("use ContainerAwareTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _contentTypeBaseImpl = this.contentTypeBaseImpl(it);
    _builder.append(_contentTypeBaseImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence contentTypeBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The treated object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $objectType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The sorting criteria.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $sorting;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The amount of desired items.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var integer");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $amount;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of template file.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $template;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of custom template file.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $customTemplate;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Optional filters.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $filter;");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities) {
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of object types allowing categorisation.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $categorisableObjectTypes;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of category registries for different trees.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $catRegistries;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of category properties for different trees.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $catProperties;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* List of category ids with sub arrays for each registry.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @var array");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("protected $catIds;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ItemList constructor.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function __construct()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->setContainer(\\ServiceUtil::getManager());");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the module providing this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The module name");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getModule()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the name of this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The content type name");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getName()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return \'ItemList\';");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the title of this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The content type title");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getTitle()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'translator.default\')->__(\'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "    ");
    _builder.append(" list view\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the description of this content type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The content type description");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getDescription()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'translator.default\')->__(\'Display list of ");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "    ");
    _builder.append(" objects.\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Loads the data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array $data Data array with parameters");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function loadData(&$data)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$controllerHelper = $this->container->get(\'");
    String _appService = this._utils.appService(it);
    _builder.append(_appService, "    ");
    _builder.append(".controller_helper\');");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$contextArgs = [\'name\' => \'list\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'objectType\']) || !in_array($data[\'objectType\'], $controllerHelper->getObjectTypes(\'contentType\', $contextArgs))) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'objectType\'] = $controllerHelper->getDefaultObjectType(\'contentType\', $contextArgs);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->objectType = $data[\'objectType\'];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'sorting\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'sorting\'] = \'default\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'amount\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'amount\'] = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'template\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'template\'] = \'itemlist_\' . $this->objectType . \'_display.html.twig\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'customTemplate\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'customTemplate\'] = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($data[\'filter\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$data[\'filter\'] = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->sorting = $data[\'sorting\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->amount = $data[\'amount\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->template = $data[\'template\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->customTemplate = $data[\'customTemplate\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->filter = $data[\'filter\'];");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_1 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_1) {
        _builder.append("    ");
        _builder.append("$featureActivationHelper = $this->container->get(\'");
        String _appService_1 = this._utils.appService(it);
        _builder.append(_appService_1, "    ");
        _builder.append(".feature_activation_helper\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("if ($featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $this->objectType)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->categorisableObjectTypes = [");
        {
          Iterable<Entity> _categorisableEntities = this._modelBehaviourExtensions.getCategorisableEntities(it);
          boolean _hasElements = false;
          for(final Entity entity : _categorisableEntities) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "        ");
            }
            _builder.append("\'");
            String _formatForCode = this._formattingExtensions.formatForCode(entity.getName());
            _builder.append(_formatForCode, "        ");
            _builder.append("\'");
          }
        }
        _builder.append("];");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$categoryHelper = $this->container->get(\'");
        String _appService_2 = this._utils.appService(it);
        _builder.append(_appService_2, "        ");
        _builder.append(".category_helper\');");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("// fetch category properties");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->catRegistries = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->catProperties = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (in_array($this->objectType, $this->categorisableObjectTypes)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$entityFactory = $this->container->get(\'");
        String _appService_3 = this._utils.appService(it);
        _builder.append(_appService_3, "            ");
        _builder.append(".entity_factory\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$idFields = $entityFactory->getIdFields($this->objectType);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$this->catRegistries = $categoryHelper->getAllPropertiesWithMainCat($this->objectType, $idFields[0]);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$this->catProperties = $categoryHelper->getAllProperties($this->objectType);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (!isset($data[\'catIds\'])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$primaryRegistry = $categoryHelper->getPrimaryProperty($this->objectType);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$data[\'catIds\'] = [$primaryRegistry => []];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("// backwards compatibility");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if (isset($data[\'catId\'])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$data[\'catIds\'][$primaryRegistry][] = $data[\'catId\'];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("unset($data[\'catId\']);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("} elseif (!is_array($data[\'catIds\'])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$data[\'catIds\'] = explode(\',\', $data[\'catIds\']);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("foreach ($this->catRegistries as $registryId => $registryCid) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$propName = \'\';");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("foreach ($this->catProperties as $propertyName => $propertyId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("if ($propertyId == $registryId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("$propName = $propertyName;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$data[\'catIds\'][$propName] = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if (isset($data[\'catids\' . $propName])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$data[\'catIds\'][$propName] = $data[\'catids\' . $propName];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if (!is_array($data[\'catIds\'][$propName])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("if ($data[\'catIds\'][$propName]) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("$data[\'catIds\'][$propName] = [$data[\'catIds\'][$propName]];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("$data[\'catIds\'][$propName] = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->catIds = $data[\'catIds\'];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Displays the data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The returned output");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function display()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$repository = $this->container->get(\'");
    String _appService_4 = this._utils.appService(it);
    _builder.append(_appService_4, "    ");
    _builder.append(".entity_factory\')->getRepository($this->objectType);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$permissionApi = $this->container->get(\'zikula_permissions_module.api.permission\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// create query");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$where = $this->filter;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$orderBy = $this->getSortParam($repository);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$qb = $repository->genericBaseQuery($where, $orderBy);");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_2 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_2) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$featureActivationHelper = $this->container->get(\'");
        String _appService_5 = this._utils.appService(it);
        _builder.append(_appService_5, "    ");
        _builder.append(".feature_activation_helper\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("if ($featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $this->objectType)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("// apply category filters");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (in_array($this->objectType, $this->categorisableObjectTypes)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("if (is_array($this->catIds) && count($this->catIds) > 0) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$categoryHelper = $this->container->get(\'");
        String _appService_6 = this._utils.appService(it);
        _builder.append(_appService_6, "                ");
        _builder.append(".category_helper\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$qb = $categoryHelper->buildFilterClauses($qb, $this->objectType, $this->catIds);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// get objects from database");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$currentPage = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$resultsPerPage = isset($this->amount) ? $this->amount : 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$query = $repository->getSelectWherePaginatedQuery($qb, $currentPage, $resultsPerPage);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("list($entities, $objectCount) = $repository->retrieveCollectionResult($query, $orderBy, true);");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_3 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_3) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if ($featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $this->objectType)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$entities = $categoryHelper->filterEntitiesByPermission($entities);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$data = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'objectType\' => $this->objectType,");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_4 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_4) {
        _builder.append("        ");
        _builder.append("\'catids\' => $this->catIds,");
        _builder.newLine();
      }
    }
    _builder.append("        ");
    _builder.append("\'sorting\' => $this->sorting,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'amount\' => $this->amount,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'template\' => $this->template,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'customTemplate\' => $this->customTemplate,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'filter\' => $this->filter");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateParameters = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'vars\' => $data,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'objectType\' => $this->objectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'items\' => $entities");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    {
      boolean _hasCategorisableEntities_5 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_5) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if ($featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $this->objectType)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$templateParameters[\'registries\'] = $this->catRegistries;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$templateParameters[\'properties\'] = $this->catProperties;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      boolean _hasUploads = this._modelExtensions.hasUploads(it);
      if (_hasUploads) {
        _builder.append("    ");
        _builder.append("$imageHelper = $this->container->get(\'");
        String _appService_7 = this._utils.appService(it);
        _builder.append(_appService_7, "    ");
        _builder.append(".image_helper\');");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("$templateParameters = array_merge($templateParameters, $repository->getAdditionalTemplateParameters(");
    {
      boolean _hasUploads_1 = this._modelExtensions.hasUploads(it);
      if (_hasUploads_1) {
        _builder.append("$imageHelper, ");
      }
    }
    _builder.append("\'contentType\'));");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$template = $this->getDisplayTemplate();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->container->get(\'twig\')->render($template, $templateParameters);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the template used for output.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string the template path");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getDisplayTemplate()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateFile = $this->template;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($templateFile == \'custom\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$templateFile = $this->customTemplate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateForObjectType = str_replace(\'itemlist_\', \'itemlist_\' . $this->objectType . \'_\', $templateFile);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templating = $this->container->get(\'templating\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateOptions = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'ContentType/\' . $templateForObjectType,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'ContentType/\' . $templateFile,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'ContentType/itemlist_display.html.twig\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$template = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($templateOptions as $templatePath) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($templating->exists(\'@");
    String _appName_3 = this._utils.appName(it);
    _builder.append(_appName_3, "        ");
    _builder.append("/\' . $templatePath)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("$template = \'@");
    String _appName_4 = this._utils.appName(it);
    _builder.append(_appName_4, "            ");
    _builder.append("/\' . $templatePath;");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $template;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determines the order by parameter for item selection.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Doctrine_Repository $repository The repository used for data fetching");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string the sorting clause");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getSortParam($repository)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->sorting == \'random\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'RAND()\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$sortParam = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->sorting == \'newest\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entityFactory = $this->container->get(\'");
    String _appService_8 = this._utils.appService(it);
    _builder.append(_appService_8, "        ");
    _builder.append(".entity_factory\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$idFields = $entityFactory->getIdFields($this->objectType);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (count($idFields) == 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$sortParam = $idFields[0] . \' DESC\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($idFields as $idField) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (!empty($sortParam)) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$sortParam .= \', \';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$sortParam .= $idField . \' DESC\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($this->sorting == \'default\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$sortParam = $repository->getDefaultSortingField() . \' ASC\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $sortParam;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Displays the data for editing.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function displayEditing()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $this->display();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the default data.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array Default data and parameters");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getDefaultData()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'objectType\' => \'");
    String _formatForCode_1 = this._formattingExtensions.formatForCode(this._modelExtensions.getLeadingEntity(it).getName());
    _builder.append(_formatForCode_1, "        ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\'sorting\' => \'default\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'amount\' => 1,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'template\' => \'itemlist_display.html.twig\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'customTemplate\' => \'\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'filter\' => \'\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Executes additional actions for the editing mode.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function startEditing()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ensure that the view does not look for templates in the Content module (#218)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->view->toplevelmodule = \'");
    String _appName_5 = this._utils.appName(it);
    _builder.append(_appName_5, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ensure our custom plugins are loaded");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("array_push($this->view->plugins_dir, \'");
    String _relativeAppRootPath = this._namingExtensions.relativeAppRootPath(it);
    _builder.append(_relativeAppRootPath, "    ");
    _builder.append("/");
    String _viewPath = this._namingExtensions.getViewPath(it);
    _builder.append(_viewPath, "    ");
    _builder.append("plugins\');");
    _builder.newLineIfNotEmpty();
    {
      boolean _hasCategorisableEntities_6 = this._modelBehaviourExtensions.hasCategorisableEntities(it);
      if (_hasCategorisableEntities_6) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$featureActivationHelper = $this->container->get(\'");
        String _appService_9 = this._utils.appService(it);
        _builder.append(_appService_9, "    ");
        _builder.append(".feature_activation_helper\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("if ($featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $this->objectType)) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("// assign category data");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->view->assign(\'registries\', $this->catRegistries)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("               ");
        _builder.append("->assign(\'properties\', $this->catProperties);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("// assign categories lists for simulating category selectors");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$translator = $this->container->get(\'translator.default\');");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$locale = $this->container->get(\'request_stack\')->getCurrentRequest()->getLocale();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$categories = [];");
        _builder.newLine();
        {
          Boolean _targets = this._utils.targets(it, "1.5");
          if ((_targets).booleanValue()) {
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("$categoryRepository = $this->container->get(\'zikula_categories_module.category_repository\');");
            _builder.newLine();
          } else {
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("$categoryApi = $this->container->get(\'zikula_categories_module.api.category\');");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("foreach ($this->catRegistries as $registryId => $registryCid) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$propName = \'\';");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("foreach ($this->catProperties as $propertyName => $propertyId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("if ($propertyId == $registryId) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("$propName = $propertyName;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        {
          Boolean _targets_1 = this._utils.targets(it, "1.5");
          if ((_targets_1).booleanValue()) {
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("$mainCategory = $categoryRepository->find($registryCid);");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("$queryBuilder = $categoryRepository->getChildrenQueryBuilder($registryCid);");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("$cats = $queryBuilder->getQuery()->execute();");
            _builder.newLine();
          } else {
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("//$mainCategory = $categoryApi->getCategoryById($registryCid);");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("$cats = $categoryApi->getSubCategories($registryCid, true, true, false, true, false, null, \'\', null, \'sort_value\');");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$catsForDropdown = [");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("[");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("\'value\' => \'\',");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("\'text\' => $translator->__(\'All\')");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("]");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("foreach ($cats as $category) {");
        _builder.newLine();
        {
          Boolean _targets_2 = this._utils.targets(it, "1.5");
          if ((_targets_2).booleanValue()) {
            _builder.append("    ");
            _builder.append("            ");
            _builder.append("$indent = str_repeat(\'--\', $category->getLvl() - $mainCategory()->getLvl() - 1);");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("            ");
            _builder.append("$categoryName = (!empty($indent) ? \'|\' : \'\') . $indent . $category->getName();");
            _builder.newLine();
          } else {
            _builder.append("    ");
            _builder.append("            ");
            _builder.append("$categoryName = isset($category[\'display_name\'][$locale]) ? $category[\'display_name\'][$locale] : $category[\'name\'];");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("$catsForDropdown[] = [");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("\'value\' => $category->getId(),");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("\'text\' => $categoryName");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$categories[$propName] = $catsForDropdown;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$this->view->assign(\'categories\', $categories)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("               ");
        _builder.append("->assign(\'categoryHelper\', $this->container->get(\'");
        String _appService_10 = this._utils.appService(it);
        _builder.append(_appService_10, "                   ");
        _builder.append(".category_helper\'));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$this->view->assign(\'featureActivationHelper\', $featureActivationHelper)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("           ");
        _builder.append("->assign(\'objectType\', $this->objectType);");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the edit template path.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getEditTemplate()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$absoluteTemplatePath = str_replace(\'ContentType/Base/AbstractItemList.php\', \'Resources/views/ContentType/itemlist_edit.tpl\', __FILE__);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return \'file:\' . $absoluteTemplatePath;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence contentTypeImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\ContentType;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\ContentType\\Base\\AbstractItemList;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generic item list content plugin implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ItemList extends AbstractItemList");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the content type here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
