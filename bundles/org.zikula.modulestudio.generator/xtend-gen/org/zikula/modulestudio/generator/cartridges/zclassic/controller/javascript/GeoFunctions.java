package org.zikula.modulestudio.generator.cartridges.zclassic.controller.javascript;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.zikula.modulestudio.generator.extensions.ControllerExtensions;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class GeoFunctions {
  @Extension
  private ControllerExtensions _controllerExtensions = new ControllerExtensions();
  
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  /**
   * Entry point for the JavaScript file with display functionality.
   */
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appName = this._utils.appName(it);
    String fileName = (_appName + ".Geo.js");
    String _appJsPath = this._namingExtensions.getAppJsPath(it);
    String _plus = (_appJsPath + fileName);
    boolean _shouldBeSkipped = this._namingExtensions.shouldBeSkipped(it, _plus);
    boolean _not = (!_shouldBeSkipped);
    if (_not) {
      InputOutput.<String>println("Generating JavaScript for geographical functions");
      String _appJsPath_1 = this._namingExtensions.getAppJsPath(it);
      String _plus_1 = (_appJsPath_1 + fileName);
      boolean _shouldBeMarked = this._namingExtensions.shouldBeMarked(it, _plus_1);
      if (_shouldBeMarked) {
        String _appName_1 = this._utils.appName(it);
        String _plus_2 = (_appName_1 + ".generated.js");
        fileName = _plus_2;
      }
      String _appJsPath_2 = this._namingExtensions.getAppJsPath(it);
      String _plus_3 = (_appJsPath_2 + fileName);
      fsa.generateFile(_plus_3, this.generate(it));
    }
  }
  
  private CharSequence generate(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    {
      if ((this._controllerExtensions.hasDisplayActions(it) || this._controllerExtensions.hasEditActions(it))) {
        CharSequence _initGeoDisplay = this.initGeoDisplay(it);
        _builder.append(_initGeoDisplay);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _hasEditActions = this._controllerExtensions.hasEditActions(it);
      if (_hasEditActions) {
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Callback method for geocoding and geolocation functionality.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("function ");
        String _vendorAndName = this._utils.vendorAndName(it);
        _builder.append(_vendorAndName);
        _builder.append("NewCoordinatesEventHandler() {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("var location = new mxn.LatLonPoint(jQuery(\"[id$=\'latitude\']\").val(), jQuery(\"[id$=\'longitude\']\").val());");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("marker.hide();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("mapstraction.removeMarker(marker);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("marker = new mxn.Marker(location);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("mapstraction.addMarker(marker, true);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("mapstraction.setCenterAndZoom(location, 18);");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        CharSequence _initGeoCoding = this.initGeoCoding(it);
        _builder.append(_initGeoCoding);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initGeoLocation = this.initGeoLocation(it);
        _builder.append(_initGeoLocation);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initGeoEditing = this.initGeoEditing(it);
        _builder.append(_initGeoEditing);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence initGeoDisplay(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var mapstraction;");
    _builder.newLine();
    _builder.append("var marker;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises geographical display features.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitGeographicalDisplay(latitude, longitude)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapstraction = new mxn.Mapstraction(\'mapContainer\', \'googlev3\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapstraction.addControls({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pan: true,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zoom: \'small\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("map_type: true");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var latlon = new mxn.LatLonPoint(latitude, longitude);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapstraction.setMapType(mxn.Mapstraction.SATELLITE);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapstraction.setCenterAndZoom(latlon, 18);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapstraction.mousePosition(\'position\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// add a marker");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("marker = new mxn.Marker(latlon);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapstraction.addMarker(marker, true);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#collapseMap\').on(\'hidden.bs.collapse\', function () {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// redraw the map after it\'s panel has been opened (see also #340)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mapstraction.resizeTo(jQuery(\'#mapContainer\').width(), jQuery(\'#mapContainer\').height());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initGeoCoding(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Example method for initialising geo coding functionality in JavaScript.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* In contrast to the map picker this one determines coordinates for a given address.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Uses a callback function for retrieving the address to be converted, so that it can be easily customised in each edit template.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* There is also a method on PHP level available in the \\");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getVendor());
    _builder.append(_formatForCodeCapital, " ");
    _builder.append("\\");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1, " ");
    _builder.append("Module\\Helper\\ControllerHelper class.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitGeoCoding(addressCallback)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#linkGetCoordinates\').click( function (evt) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("DoGeoCoding(addressCallback);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Performs the actual geo coding using Mapstraction.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2);
    _builder.append("DoGeoCoding(addressCallback)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var address = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("address : jQuery(\'#street\').val() + \' \' + jQuery(\'#houseNumber\').val() + \' \' + jQuery(\'#zipcode\').val() + \' \' + jQuery(\'#city\').val() + \' \' + jQuery(\'#country\').val()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Check whether the given callback is executable");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (typeof addressCallback === \'function\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("address = addressCallback();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var geocoder = new mxn.Geocoder(\'googlev3\', ");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "    ");
    _builder.append("GeoCodeReturn, ");
    String _vendorAndName_4 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_4, "    ");
    _builder.append("GeoCodeErrorCallback);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("geocoder.geocode(address);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("function ");
    String _vendorAndName_5 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_5, "    ");
    _builder.append("GeoCodeErrorCallback (status) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("if (status != \'ZERO_RESULTS\') {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_6 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_6, "            ");
    _builder.append("SimpleAlert(jQuery(\'#mapContainer\'), Translator.__(\'Error during geocoding\'), status, \'geoCodingAlert\', \'danger\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("function ");
    String _vendorAndName_7 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_7, "    ");
    _builder.append("GeoCodeReturn (location) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("jQuery(\"[id$=\'latitude\']\").val(location.point.lat.toFixed(7));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\"[id$=\'longitude\']\").val(location.point.lng.toFixed(7));");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_8 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_8, "        ");
    _builder.append("NewCoordinatesEventHandler();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initGeoLocation(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Callback method for geolocation functionality.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("SetDefaultCoordinates (position) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("jQuery(\"[id$=\'latitude\']\").val(position.coords.latitude.toFixed(7));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\"[id$=\'longitude\']\").val(position.coords.longitude.toFixed(7));");
    _builder.newLine();
    _builder.append("    ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "    ");
    _builder.append("NewCoordinatesEventHandler();");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2);
    _builder.append("HandlePositionError (event) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "    ");
    _builder.append("SimpleAlert(jQuery(\'#mapContainer\'), Translator.__(\'Error during geolocation\'), event.message, \'geoLocationAlert\', \'danger\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initGeoEditing(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises geographical editing features.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitGeographicalEditing(latitude, longitude, mode, useGeoLocation)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "    ");
    _builder.append("InitGeographicalDisplay(latitude, longitude);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// init event handler");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\"[id$=\'latitude\']\").change(");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "    ");
    _builder.append("NewCoordinatesEventHandler);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("jQuery(\"[id$=\'longitude\']\").change(");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "    ");
    _builder.append("NewCoordinatesEventHandler);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapstraction.click.addHandler(function(eventName, eventSource, eventArgs) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var coords = eventArgs.location;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\"[id$=\'latitude\']\").val(coords.lat.toFixed(7));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\"[id$=\'longitude\']\").val(coords.lng.toFixed(7));");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_4 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_4, "        ");
    _builder.append("NewCoordinatesEventHandler();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (mode == \'create\' && true === useGeoLocation) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// derive default coordinates from users position with html5 geolocation feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (navigator.geolocation) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("navigator.geolocation.getCurrentPosition(");
    String _vendorAndName_5 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_5, "            ");
    _builder.append("SetDefaultCoordinates, ");
    String _vendorAndName_6 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_6, "            ");
    _builder.append("HandlePositionError, {");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("enableHighAccuracy: true,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("maximumAge: 10000,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("timeout: 20000");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Initialise geocoding functionality.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("In contrast to the map picker this one determines coordinates for a given address.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("To use this please customise the following method for assembling the address.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Furthermore you will need a link or a button with id=\"linkGetCoordinates\" which will");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("be used by the script for adding a corresponding click event handler.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var determineAddressForGeoCoding = function () {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var address = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("address : $(\'#street\').val() + \' \' + $(\'#houseNumber\').val() + \' \' + $(\'#zipcode\').val() + \' \' + $(\'#city\').val() + \' \' + $(\'#country\').val()");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return address;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_7 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_7, "        ");
    _builder.append("InitGeoCoding(determineAddressForGeoCoding);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
