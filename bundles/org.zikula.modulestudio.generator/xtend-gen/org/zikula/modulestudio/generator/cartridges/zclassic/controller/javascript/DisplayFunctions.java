package org.zikula.modulestudio.generator.cartridges.zclassic.controller.javascript;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.zikula.modulestudio.generator.extensions.ControllerExtensions;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.ModelJoinExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class DisplayFunctions {
  @Extension
  private ControllerExtensions _controllerExtensions = new ControllerExtensions();
  
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private ModelJoinExtensions _modelJoinExtensions = new ModelJoinExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  /**
   * Entry point for the JavaScript file with display functionality.
   */
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appName = this._utils.appName(it);
    String fileName = (_appName + ".js");
    String _appJsPath = this._namingExtensions.getAppJsPath(it);
    String _plus = (_appJsPath + fileName);
    boolean _shouldBeSkipped = this._namingExtensions.shouldBeSkipped(it, _plus);
    boolean _not = (!_shouldBeSkipped);
    if (_not) {
      InputOutput.<String>println("Generating JavaScript for display functions");
      String _appJsPath_1 = this._namingExtensions.getAppJsPath(it);
      String _plus_1 = (_appJsPath_1 + fileName);
      boolean _shouldBeMarked = this._namingExtensions.shouldBeMarked(it, _plus_1);
      if (_shouldBeMarked) {
        String _appName_1 = this._utils.appName(it);
        String _plus_2 = (_appName_1 + ".generated.js");
        fileName = _plus_2;
      }
      String _appJsPath_2 = this._namingExtensions.getAppJsPath(it);
      String _plus_3 = (_appJsPath_2 + fileName);
      fsa.generateFile(_plus_3, this.generate(it));
    }
  }
  
  private CharSequence generate(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("CapitaliseFirstLetter(string)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return string.charAt(0).toUpperCase() + string.substring(1);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    {
      boolean _hasViewActions = this._controllerExtensions.hasViewActions(it);
      if (_hasViewActions) {
        _builder.newLine();
        CharSequence _initQuickNavigation = this.initQuickNavigation(it);
        _builder.append(_initQuickNavigation);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _hasBooleansWithAjaxToggle = this._modelExtensions.hasBooleansWithAjaxToggle(it);
      if (_hasBooleansWithAjaxToggle) {
        _builder.newLine();
        CharSequence _ggleFlag = this.toggleFlag(it);
        _builder.append(_ggleFlag);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initAjaxToggles = this.initAjaxToggles(it);
        _builder.append(_initAjaxToggles);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    CharSequence _simpleAlert = this.simpleAlert(it);
    _builder.append(_simpleAlert);
    _builder.newLineIfNotEmpty();
    {
      boolean _hasViewActions_1 = this._controllerExtensions.hasViewActions(it);
      if (_hasViewActions_1) {
        _builder.newLine();
        CharSequence _initMassToggle = this.initMassToggle(it);
        _builder.append(_initMassToggle);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initFixedColumns = this.initFixedColumns(it);
        _builder.append(_initFixedColumns);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((this._controllerExtensions.hasViewActions(it) || this._controllerExtensions.hasDisplayActions(it))) {
        _builder.newLine();
        CharSequence _initItemActions = this.initItemActions(it);
        _builder.append(_initItemActions);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((((!IterableExtensions.isEmpty(this._modelJoinExtensions.getJoinRelations(it))) || this._modelBehaviourExtensions.hasLoggable(it)) && this._controllerExtensions.hasDisplayActions(it))) {
        _builder.newLine();
        CharSequence _initInlineWindow = this.initInlineWindow(it);
        _builder.append(_initInlineWindow);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _initQuickViewModals = this.initQuickViewModals(it);
        _builder.append(_initQuickViewModals);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _hasImageFields = this._modelExtensions.hasImageFields(it);
      if (_hasImageFields) {
        _builder.newLine();
        CharSequence _initImageViewer = this.initImageViewer(it);
        _builder.append(_initImageViewer);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    CharSequence _onLoad = this.onLoad(it);
    _builder.append(_onLoad);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence initQuickNavigation(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialise the quick navigation form in list views.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitQuickNavigation()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var quickNavForm;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var objectType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'.");
    String _lowerCase = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase, "    ");
    _builder.append("-quicknav\').length < 1) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("quickNavForm = jQuery(\'.");
    String _lowerCase_1 = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase_1, "    ");
    _builder.append("-quicknav\').first();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("objectType = quickNavForm.attr(\'id\').replace(\'");
    String _firstLower = StringExtensions.toFirstLower(this._utils.appName(it));
    _builder.append(_firstLower, "    ");
    _builder.append("\', \'\').replace(\'QuickNavForm\', \'\');");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("quickNavForm.find(\'select\').change(function (event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("quickNavForm.submit();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var fieldPrefix = \'");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, "    ");
    _builder.append("_\' + objectType.toLowerCase() + \'quicknav_\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("// we can hide the submit button if we have no visible quick search field");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'#\' + fieldPrefix + \'q\').length < 1 || jQuery(\'#\' + fieldPrefix + \'q\').parent().parent().hasClass(\'hidden\')) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#\' + fieldPrefix + \'updateview\').addClass(\'hidden\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence toggleFlag(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Toggles a certain flag for a given item.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("ToggleFlag(objectType, fieldName, itemId)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery.ajax({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type: \'POST\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("url: Routing.generate(\'");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, "        ");
    _builder.append("_ajax_toggleflag\'),");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("data: {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ot: objectType,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field: fieldName,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("id: itemId");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}).done(function(res) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// get data returned by the ajax response");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var idSuffix;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var toggleLink;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var data;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("idSuffix = ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("CapitaliseFirstLetter(fieldName) + itemId;");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("toggleLink = jQuery(\'#toggle\' + idSuffix);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("data = res.data;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (data.message) {");
    _builder.newLine();
    _builder.append("            ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "            ");
    _builder.append("SimpleAlert(toggleLink, Translator.__(\'Success\'), data.message, \'toggle\' + idSuffix + \'DoneAlert\', \'success\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toggleLink.find(\'.fa-check\').toggleClass(\'hidden\', true !== data.state);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toggleLink.find(\'.fa-times\').toggleClass(\'hidden\', true === data.state);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.append(";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initAjaxToggles(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialise ajax-based toggle for all affected boolean fields on the current page.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitAjaxToggles()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'.");
    String _lowerCase = this._utils.vendorAndName(it).toLowerCase();
    _builder.append(_lowerCase, "    ");
    _builder.append("-ajax-toggle\').click(function (event) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("var objectType;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var fieldName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var itemId;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("objectType = jQuery(this).data(\'object-type\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fieldName = jQuery(this).data(\'field-name\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("itemId = jQuery(this).data(\'item-id\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("ToggleFlag(objectType, fieldName, itemId);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}).removeClass(\'hidden\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence simpleAlert(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Simulates a simple alert using bootstrap.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("SimpleAlert(beforeElem, title, content, alertId, cssClass)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var alertBox;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("alertBox = \' \\");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div id=\"\' + alertId + \'\" class=\"alert alert-\' + cssClass + \' fade\"> \\");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button> \\");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h4>\' + title + \'</h4> \\");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>\' + content + \'</p> \\");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// insert alert before the given element");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("beforeElem.before(alertBox);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'#\' + alertId).delay(200).addClass(\'in\').fadeOut(4000, function () {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(this).remove();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initMassToggle(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises the mass toggle functionality for admin view pages.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitMassToggle()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (jQuery(\'.");
    String _lowerCase = this._utils.vendorAndName(it).toLowerCase();
    _builder.append(_lowerCase, "    ");
    _builder.append("-mass-toggle\').length > 0) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("jQuery(\'.");
    String _lowerCase_1 = this._utils.vendorAndName(it).toLowerCase();
    _builder.append(_lowerCase_1, "        ");
    _builder.append("-mass-toggle\').click(function (event) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("jQuery(\'.");
    String _lowerCase_2 = this._utils.vendorAndName(it).toLowerCase();
    _builder.append(_lowerCase_2, "            ");
    _builder.append("-toggle-checkbox\').prop(\'checked\', jQuery(this).prop(\'checked\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initFixedColumns(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises fixed table columns.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitFixedColumns()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'.table.fixed-columns\').remove();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'.table\').each(function() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var originalTable, fixedColumnsTable, fixedTableWidth;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("originalTable = jQuery(this);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fixedTableWidth = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (originalTable.find(\'.fixed-column\').length > 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fixedColumnsTable = originalTable.clone().insertBefore(originalTable).addClass(\'fixed-columns\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("originalTable.find(\'.dropdown\').addClass(\'hidden\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fixedColumnsTable.find(\'.dropdown\').removeClass(\'hidden\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fixedColumnsTable.css(\'left\', originalTable.parent().position().left);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fixedColumnsTable.find(\'th, td\').not(\'.fixed-column\').remove();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fixedColumnsTable.find(\'th\').each(function (i, elem) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(this).css(\'width\', originalTable.find(\'th\').eq(i).css(\'width\'));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("fixedTableWidth += originalTable.find(\'th\').eq(i).width();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fixedColumnsTable.css(\'width\', fixedTableWidth + \'px\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fixedColumnsTable.find(\'tr\').each(function (i, elem) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("jQuery(this).height(originalTable.find(\'tr:eq(\' + i + \')\').height());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initItemActions(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Creates a dropdown menu for the item actions.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitItemActions(context)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var containerSelector;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var containers;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var listClasses;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containerSelector = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (context == \'view\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("containerSelector = \'.");
    String _lowerCase = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase, "        ");
    _builder.append("-view\';");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("listClasses = \'list-unstyled dropdown-menu\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else if (context == \'display\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("containerSelector = \'h2, h3\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listClasses = \'list-unstyled dropdown-menu\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (containerSelector == \'\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containers = jQuery(containerSelector);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (containers.length < 1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containers.find(\'.dropdown > ul\').removeClass(\'list-inline\').addClass(listClasses);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containers.find(\'.dropdown > ul a\').each(function (index) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(this).html(jQuery(this).html() + jQuery(this).find(\'i\').first().data(\'original-title\'));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containers.find(\'.dropdown > ul a i\').addClass(\'fa-fw\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containers.find(\'.dropdown-toggle\').removeClass(\'hidden\').dropdown();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initInlineWindow(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Helper function to create new Bootstrap modal window instances.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitInlineWindow(containerElem)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var newWindowId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var modalTitle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// show the container (hidden for users without JavaScript)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containerElem.removeClass(\'hidden\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// define name of window");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("newWindowId = containerElem.attr(\'id\') + \'Dialog\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("containerElem.unbind(\'click\').click(function(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("event.preventDefault();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// check if window exists already");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (jQuery(\'#\' + newWindowId).length < 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// create new window instance");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("jQuery(\'<div id=\"\' + newWindowId + \'\"></div>\')");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".append(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("jQuery(\'<iframe width=\"100%\" height=\"100%\" marginWidth=\"0\" marginHeight=\"0\" frameBorder=\"0\" scrolling=\"auto\" />\')");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append(".attr(\'src\', containerElem.attr(\'href\'))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".dialog({");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("autoOpen: false,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("show: {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("effect: \'blind\',");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("duration: 1000");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("hide: {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("effect: \'explode\',");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("duration: 1000");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("title: containerElem.data(\'modal-title\'),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("width: 600,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("height: 400,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("modal: false");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// open the window");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\'#\' + newWindowId).dialog(\'open\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// return the dialog selector id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return newWindowId;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initQuickViewModals(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises modals for inline display of related items.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitQuickViewModals()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'.");
    String _lowerCase = this._utils.vendorAndName(it).toLowerCase();
    _builder.append(_lowerCase, "    ");
    _builder.append("-inline-window\').each(function (index) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("InitInlineWindow(jQuery(this));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence initImageViewer(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises image viewing behaviour.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _vendorAndName = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName);
    _builder.append("InitImageViewer()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jQuery(\'a.image-link\').magnificPopup({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type: \'image\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("closeOnContentClick: true,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("image: {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("titleSrc: \'title\',");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("verticalFit: true");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gallery: {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("enabled: true,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("navigateByImgClick: true,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("arrowMarkup: \'<button title=\"%title%\" type=\"button\" class=\"mfp-arrow mfp-arrow-%dir%\"></button>\',");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tPrev: Translator.__(\'Previous (Left arrow key)\'),");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tNext: Translator.__(\'Next (Right arrow key)\'),");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tCounter: \'<span class=\"mfp-counter\">%curr% \' + Translator.__(\'of\') + \' %total%</span>\'");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zoom: {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("enabled: true,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("duration: 300,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("easing: \'ease-in-out\'");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence onLoad(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("jQuery(document).ready(function() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var isViewPage;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var isDisplayPage;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("isViewPage = jQuery(\'.");
    String _lowerCase = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase, "    ");
    _builder.append("-view\').length > 0;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("isDisplayPage = jQuery(\'.");
    String _lowerCase_1 = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase_1, "    ");
    _builder.append("-display\').length > 0;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _hasImageFields = this._modelExtensions.hasImageFields(it);
      if (_hasImageFields) {
        _builder.append("    ");
        String _vendorAndName = this._utils.vendorAndName(it);
        _builder.append(_vendorAndName, "    ");
        _builder.append("InitImageViewer();");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.append("    ");
    _builder.append("if (isViewPage) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_1 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_1, "        ");
    _builder.append("InitQuickNavigation();");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _vendorAndName_2 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_2, "        ");
    _builder.append("InitMassToggle();");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("jQuery(window).resize(");
    String _vendorAndName_3 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_3, "        ");
    _builder.append("InitFixedColumns);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _vendorAndName_4 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_4, "        ");
    _builder.append("InitFixedColumns();");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("window.setTimeout(");
    String _vendorAndName_5 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_5, "        ");
    _builder.append("InitFixedColumns, 1000);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _vendorAndName_6 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_6, "        ");
    _builder.append("InitItemActions(\'view\');");
    _builder.newLineIfNotEmpty();
    {
      boolean _hasBooleansWithAjaxToggleInView = this._modelExtensions.hasBooleansWithAjaxToggleInView(it);
      if (_hasBooleansWithAjaxToggleInView) {
        _builder.append("        ");
        String _vendorAndName_7 = this._utils.vendorAndName(it);
        _builder.append(_vendorAndName_7, "        ");
        _builder.append("InitAjaxToggles();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("} else if (isDisplayPage) {");
    _builder.newLine();
    _builder.append("        ");
    String _vendorAndName_8 = this._utils.vendorAndName(it);
    _builder.append(_vendorAndName_8, "        ");
    _builder.append("InitItemActions(\'display\');");
    _builder.newLineIfNotEmpty();
    {
      boolean _hasBooleansWithAjaxToggleInDisplay = this._modelExtensions.hasBooleansWithAjaxToggleInDisplay(it);
      if (_hasBooleansWithAjaxToggleInDisplay) {
        _builder.append("        ");
        String _vendorAndName_9 = this._utils.vendorAndName(it);
        _builder.append(_vendorAndName_9, "        ");
        _builder.append("InitAjaxToggles();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      if ((((!IterableExtensions.isEmpty(this._modelJoinExtensions.getJoinRelations(it))) || this._modelBehaviourExtensions.hasLoggable(it)) && this._controllerExtensions.hasDisplayActions(it))) {
        _builder.newLine();
        _builder.append("    ");
        String _vendorAndName_10 = this._utils.vendorAndName(it);
        _builder.append(_vendorAndName_10, "    ");
        _builder.append("InitQuickViewModals();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("});");
    _builder.newLine();
    return _builder;
  }
}
