package org.zikula.modulestudio.generator.cartridges.zclassic.controller.form;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class TranslationListener {
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Form/EventListener/TranslationListener.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.listenerBaseImpl(it)), this.fh.phpFileContent(it, this.listenerImpl(it)));
  }
  
  private CharSequence listenerBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\EventListener\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\FormEvent;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\FormEvents;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\FormInterface;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Translation listener base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Based on https://github.com/a2lix/TranslationFormBundle/blob/master/Form/EventListener/TranslationsListener.php");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractTranslationListener implements EventSubscriberInterface");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _listenerBaseImplBody = this.listenerBaseImplBody(it);
    _builder.append(_listenerBaseImplBody, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence listenerBaseImplBody(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @inheritDoc");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static function getSubscribedEvents()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("FormEvents::PRE_SET_DATA => \'preSetData\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Adds translation fields to the form.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param FormEvent $event");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function preSetData(FormEvent $event)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$form = $event->getForm();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$formOptions = $form->getConfig()->getOptions();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$entityForm = $this->getEntityForm($form->getParent());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($formOptions[\'fields\'] as $fieldName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$entityForm->has($fieldName)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$originalFieldConfig = $entityForm->get($fieldName)->getConfig();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldOptions = $originalFieldConfig->getOptions();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldOptions[\'required\'] = $fieldOptions[\'required\'] && in_array($fieldName, $formOptions[\'mandatory_fields\']);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldOptions[\'data\'] = isset($formOptions[\'values\'][$fieldName]) ? $formOptions[\'values\'][$fieldName] : null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$form->add($fieldName, $originalFieldConfig->getType()->getInnerType(), $fieldOptions);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns parent form editing the entity.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param FormInterface $form");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return FormInterface");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getEntityForm(FormInterface $form)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$parentForm = $form;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("do {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$parentForm = $form;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} while ($form->getConfig()->getInheritData() && ($form = $form->getParent()));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $parentForm;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence listenerImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\EventListener;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Form\\EventListener\\Base\\AbstractTranslationListener;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Translation listener implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class TranslationListener extends AbstractTranslationListener");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to add your customisation here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
