package org.zikula.modulestudio.generator.cartridges.zclassic.controller.helper;

import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class CategoryHelper {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    InputOutput.<String>println("Generating helper class for category functions");
    final FileHelper fh = new FileHelper();
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Helper/CategoryHelper.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      fh.phpFileContent(it, this.categoryHelperBaseClass(it)), fh.phpFileContent(it, this.categoryHelperImpl(it)));
  }
  
  private CharSequence categoryHelperBaseClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Helper\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Doctrine\\ORM\\QueryBuilder;");
    _builder.newLine();
    _builder.append("use InvalidArgumentException;");
    _builder.newLine();
    _builder.append("use Psr\\Log\\LoggerInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\RequestStack;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;");
    _builder.newLine();
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      boolean _not = (!(_targets).booleanValue());
      if (_not) {
        _builder.append("use Zikula\\CategoriesModule\\Api\\CategoryRegistryApi;");
        _builder.newLine();
      }
    }
    _builder.append("use Zikula\\CategoriesModule\\Api\\");
    {
      Boolean _targets_1 = this._utils.targets(it, "1.5");
      if ((_targets_1).booleanValue()) {
        _builder.append("ApiInterface\\CategoryPermissionApiInterface");
      } else {
        _builder.append("CategoryPermissionApi");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      Boolean _targets_2 = this._utils.targets(it, "1.5");
      if ((_targets_2).booleanValue()) {
        _builder.append("use Zikula\\CategoriesModule\\Entity\\RepositoryInterface\\CategoryRegistryRepositoryInterface;");
        _builder.newLine();
      }
    }
    _builder.append("use Zikula\\Common\\Translator\\TranslatorInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\UsersModule\\Api\\");
    {
      Boolean _targets_3 = this._utils.targets(it, "1.5");
      if ((_targets_3).booleanValue()) {
        _builder.append("ApiInterface\\CurrentUserApiInterface");
      } else {
        _builder.append("CurrentUserApi");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Category helper base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractCategoryHelper");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var TranslatorInterface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $translator;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var SessionInterface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $session;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var Request");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $request;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var LoggerInterface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var CurrentUserApi");
    {
      Boolean _targets_4 = this._utils.targets(it, "1.5");
      if ((_targets_4).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $currentUserApi;");
    _builder.newLine();
    _builder.newLine();
    {
      Boolean _targets_5 = this._utils.targets(it, "1.5");
      if ((_targets_5).booleanValue()) {
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("* @var CategoryRegistryRepositoryInterface");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("protected $categoryRegistryRepository;");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("* @var CategoryRegistryApi");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("protected $categoryRegistryApi;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var CategoryPermissionApi");
    {
      Boolean _targets_6 = this._utils.targets(it, "1.5");
      if ((_targets_6).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $categoryPermissionApi;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* CategoryHelper constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param TranslatorInterface   $translator            Translator service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param SessionInterface      $session               Session service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param RequestStack          $requestStack          RequestStack service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LoggerInterface       $logger                Logger service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param CurrentUserApi");
    {
      Boolean _targets_7 = this._utils.targets(it, "1.5");
      if ((_targets_7).booleanValue()) {
        _builder.append("Interface");
      } else {
        _builder.append("       ");
      }
    }
    _builder.append(" $currentUserApi        CurrentUserApi service instance");
    _builder.newLineIfNotEmpty();
    {
      Boolean _targets_8 = this._utils.targets(it, "1.5");
      if ((_targets_8).booleanValue()) {
        _builder.append("     ");
        _builder.append("* @param CategoryRegistryRepositoryInterface $categoryRegistryRepository CategoryRegistryRepository service instance");
        _builder.newLine();
      } else {
        _builder.append("     ");
        _builder.append("* @param CategoryRegistryApi   $categoryRegistryApi   CategoryRegistryApi service instance");
        _builder.newLine();
      }
    }
    _builder.append("     ");
    _builder.append("* @param CategoryPermissionApi");
    {
      Boolean _targets_9 = this._utils.targets(it, "1.5");
      if ((_targets_9).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.append(" $categoryPermissionApi CategoryPermissionApi service instance");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("TranslatorInterface $translator,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SessionInterface $session,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("RequestStack $requestStack,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LoggerInterface $logger,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CurrentUserApi");
    {
      Boolean _targets_10 = this._utils.targets(it, "1.5");
      if ((_targets_10).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.append(" $currentUserApi,");
    _builder.newLineIfNotEmpty();
    {
      Boolean _targets_11 = this._utils.targets(it, "1.5");
      if ((_targets_11).booleanValue()) {
        _builder.append("        ");
        _builder.append("CategoryRegistryRepositoryInterface $categoryRegistryRepository,");
        _builder.newLine();
      } else {
        _builder.append("        ");
        _builder.append("CategoryRegistryApi $categoryRegistryApi,");
        _builder.newLine();
      }
    }
    _builder.append("        ");
    _builder.append("CategoryPermissionApi");
    {
      Boolean _targets_12 = this._utils.targets(it, "1.5");
      if ((_targets_12).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.append(" $categoryPermissionApi");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append(") {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->translator = $translator;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->session = $session;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->request = $requestStack->getCurrentRequest();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->logger = $logger;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->currentUserApi = $currentUserApi;");
    _builder.newLine();
    {
      Boolean _targets_13 = this._utils.targets(it, "1.5");
      if ((_targets_13).booleanValue()) {
        _builder.append("        ");
        _builder.append("$this->categoryRegistryRepository = $categoryRegistryRepository;");
        _builder.newLine();
      } else {
        _builder.append("        ");
        _builder.append("$this->categoryRegistryApi = $categoryRegistryApi;");
        _builder.newLine();
      }
    }
    _builder.append("        ");
    _builder.append("$this->categoryPermissionApi = $categoryPermissionApi;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    CharSequence _categoryBaseImpl = this.categoryBaseImpl(it);
    _builder.append(_categoryBaseImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence categoryBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Retrieves the main/default category of ");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType The object type to retrieve");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $property   Name of category registry property to be used (optional)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @deprecated Use the methods getAllProperties, getAllPropertiesWithMainCat, getMainCatForProperty and getPrimaryProperty instead");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return mixed Category array on success, false on failure");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getMainCat($objectType = \'\', $property = \'\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($objectType)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new InvalidArgumentException($this->translator->__(\'Invalid object type received.\'));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($property)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// default to the primary registry");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$property = $this->getPrimaryProperty($objectType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$logArgs = [\'app\' => \'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "    ");
    _builder.append("\', \'user\' => $this->currentUserApi->get(\'uname\')];");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$this->logger->warning(\'{app}: User {user} called CategoryHelper#getMainCat which is deprecated.\', $logArgs);");
    _builder.newLine();
    _builder.newLine();
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      if ((_targets).booleanValue()) {
        _builder.append("    ");
        _builder.append("$moduleRegistries = $this->categoryRegistryRepository->findBy([");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("\'modname\' => \'");
        String _appName_2 = this._utils.appName(it);
        _builder.append(_appName_2, "        ");
        _builder.append("\',");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("\'entityname\' => ucfirst($objectType) . \'Entity\',");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("\'property\' => $property");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("]);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return count($moduleRegistries) > 0 ? $moduleRegistries[0][\'category\']->getId() : 32; // 32 == /__System/Modules/Global");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("return $this->categoryRegistryApi->getModuleCategoryId(\'");
        String _appName_3 = this._utils.appName(it);
        _builder.append(_appName_3, "    ");
        _builder.append("\', ucfirst($objectType) . \'Entity\', $property, 32); // 32 == /__System/Modules/Global");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Defines whether multiple selection is enabled for a given object type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* or not. Subclass can override this method to apply a custom behaviour");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* to certain category registries for example.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType The object type to retrieve");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $registry   Name of category registry to be used (optional)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return boolean true if multiple selection is allowed, else false");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function hasMultipleSelection($objectType = \'\', $registry = \'\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($objectType)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new InvalidArgumentException($this->translator->__(\'Invalid object type received.\'));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($args[\'registry\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// default to the primary registry");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$registry = $this->getPrimaryProperty($objectType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// we make no difference between different category registries here");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// if you need a custom behaviour you should override this method");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("switch ($objectType) {");
    _builder.newLine();
    {
      Iterable<Entity> _categorisableEntities = this._modelBehaviourExtensions.getCategorisableEntities(it);
      for(final Entity entity : _categorisableEntities) {
        _builder.append("        ");
        _builder.append("case \'");
        String _formatForCode = this._formattingExtensions.formatForCode(entity.getName());
        _builder.append(_formatForCode, "        ");
        _builder.append("\':");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$result = ");
        String _displayBool = this._formattingExtensions.displayBool(Boolean.valueOf(entity.isCategorisableMultiSelection()));
        _builder.append(_displayBool, "            ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Retrieves input data from POST for all registries.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType The object type to retrieve");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $source     Where to retrieve the data from (defaults to POST)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array The fetched data indexed by the registry id");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function retrieveCategoriesFromRequest($objectType = \'\', $source = \'POST\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($objectType)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new InvalidArgumentException($this->translator->__(\'Invalid object type received.\'));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$dataSource = $source == \'GET\' ? $this->request->query : $this->request->request;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$catIdsPerRegistry = [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$properties = $this->getAllProperties($objectType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$inputValues = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$inputName = \'");
    String _lowerCase = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase, "    ");
    _builder.append("_\' . strtolower($objectType) . \'quicknav\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("if (!$dataSource->has($inputName)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$inputName = \'");
    String _lowerCase_1 = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase_1, "        ");
    _builder.append("_\' . strtolower($objectType) . \'finder\';");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($dataSource->has($inputName)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$inputValues = $dataSource->get($inputName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (null === $inputValues) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $catIdsPerRegistry;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$inputCategories = isset($inputValues[\'categories\']) ? $inputValues[\'categories\'] : [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!count($inputCategories)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $catIdsPerRegistry;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($properties as $propertyName => $propertyId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$inputValue = isset($inputCategories[\'registry_\' . $propertyId]) ? $inputCategories[\'registry_\' . $propertyId] : [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!is_array($inputValue)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$inputValue = [$inputValue];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// prevent \"All\" option hiding all entries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($inputValue as $k => $v) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ($v == 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("unset($inputValue[$k]);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$catIdsPerRegistry[$propertyName] = $inputValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $catIdsPerRegistry;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Adds a list of where clauses for a certain list of categories to a given query builder.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param QueryBuilder $queryBuilder Query builder instance to be enhanced");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string       $objectType   The object type to be treated (optional)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array        $catIds       Category ids grouped by property name");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return QueryBuilder The enriched query builder instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function buildFilterClauses(QueryBuilder $queryBuilder, $objectType = \'\', $catIds = [])");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$qb = $queryBuilder;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$properties = $this->getAllProperties($objectType);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$filtersPerRegistry = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$filterParameters = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'values\' => [],");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'registries\' => []");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($properties as $propertyName => $propertyId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!isset($catIds[$propertyName]) || !is_array($catIds[$propertyName]) || !count($catIds[$propertyName])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$filtersPerRegistry[] = \'(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tblCategories.categoryRegistryId = :propId\' . $propertyName . \'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AND tblCategories.category IN (:categories\' . $propertyName . \')");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$filterParameters[\'registries\'][$propertyName] = $propertyId;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$filterParameters[\'values\'][$propertyName] = $catIds[$propertyName];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (count($filtersPerRegistry) > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (count($filtersPerRegistry) == 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$qb->andWhere($filtersPerRegistry[0]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$qb->andWhere(\'(\' . implode(\' OR \', $filtersPerRegistry) . \')\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($filterParameters[\'values\'] as $propertyName => $filterValue) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$qb->setParameter(\'propId\' . $propertyName, $filterParameters[\'registries\'][$propertyName])");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("->setParameter(\'categories\' . $propertyName, $filterValue);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $qb;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a list of all registries / properties for a given object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType The object type to retrieve");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array list of the registries (property name as key, id as value)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getAllProperties($objectType = \'\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($objectType)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new InvalidArgumentException($this->translator->__(\'Invalid object type received.\'));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      Boolean _targets_1 = this._utils.targets(it, "1.5");
      if ((_targets_1).booleanValue()) {
        _builder.append("    ");
        _builder.append("$moduleRegistries = $this->categoryRegistryRepository->findBy([");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("\'modname\' => \'");
        String _appName_4 = this._utils.appName(it);
        _builder.append(_appName_4, "        ");
        _builder.append("\',");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("\'entityname\' => ucfirst($objectType) . \'Entity\'");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("]);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$result = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("foreach ($moduleRegistries as $registry) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$result[$registry[\'property\']] = $registry[\'id\'];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return $result;");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("return $this->categoryRegistryApi->getModuleRegistriesIds(\'");
        String _appName_5 = this._utils.appName(it);
        _builder.append(_appName_5, "    ");
        _builder.append("\', ucfirst($objectType) . \'Entity\');");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a list of all registries with main category for a given object type.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType The object type to retrieve");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $arrayKey   Key for the result array (optional)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array list of the registries (registry id as key, main category id as value)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getAllPropertiesWithMainCat($objectType = \'\', $arrayKey = \'property\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($objectType)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new InvalidArgumentException($this->translator->__(\'Invalid object type received.\'));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      Boolean _targets_2 = this._utils.targets(it, "1.5");
      if ((_targets_2).booleanValue()) {
        _builder.append("    ");
        _builder.append("$moduleRegistries = $this->categoryRegistryRepository->findBy([");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("\'modname\' => \'");
        String _appName_6 = this._utils.appName(it);
        _builder.append(_appName_6, "        ");
        _builder.append("\',");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("\'entityname\' => ucfirst($objectType) . \'Entity\'");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("], [\'id\' => \'ASC\']);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$result = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("foreach ($moduleRegistries as $registry) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$registry = $registry->toArray();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$result[$registry[$arrayKey]] = $registry[\'category\']->getId();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return $result;");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("return $this->categoryRegistryApi->getModuleCategoryIds(\'");
        String _appName_7 = this._utils.appName(it);
        _builder.append(_appName_7, "    ");
        _builder.append("\', ucfirst($objectType) . \'Entity\', $arrayKey);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the main category id for a given object type and a certain property name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType The object type to retrieve");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $property   The property name (optional)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return integer The main category id of desired tree");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getMainCatForProperty($objectType = \'\', $property = \'\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (empty($objectType)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new InvalidArgumentException($this->translator->__(\'Invalid object type received.\'));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      Boolean _targets_3 = this._utils.targets(it, "1.5");
      if ((_targets_3).booleanValue()) {
        _builder.append("    ");
        _builder.append("$registries = $this->getAllPropertiesWithMainCat($objectType, \'property\');");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if ($registries && isset($registries[$property]) && $registries[$property]) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return $registries[$property];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return null;");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("return $this->categoryRegistryApi->getModuleCategoryId(\'");
        String _appName_8 = this._utils.appName(it);
        _builder.append(_appName_8, "    ");
        _builder.append("\', ucfirst($objectType) . \'Entity\', $property);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the name of the primary registry.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param string $objectType The object type to retrieve");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string name of the main registry");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function getPrimaryProperty($objectType = \'\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return \'Main\';");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Filters a given list of entities to these the current user has permissions for.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param array $entities The given list of entities");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array The filtered list of entities");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function filterEntitiesByPermission($entities)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$filteredEntities = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($entities as $entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($this->hasPermission($entity)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$filteredEntities[] = $entity;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $filteredEntities;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Checks whether permissions are granted to the given categories or not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param object $entity The entity to check permission for");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return boolean True if permissions are given, false otherwise");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function hasPermission($entity)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    {
      Boolean _targets_4 = this._utils.targets(it, "1.5");
      if ((_targets_4).booleanValue()) {
        _builder.append("    ");
        _builder.append("return $this->categoryPermissionApi->hasCategoryAccess($entity[\'categories\'], ACCESS_OVERVIEW);");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("$objectType = $entity->get_objectType();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$categories = $entity[\'categories\'];");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$registries = $this->getAllProperties($objectType);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$registries = array_flip($registries);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("$categoryInfo = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("foreach ($categories as $category) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$registryId = $category->getCategoryRegistryId();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (!isset($registries[$registryId])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("// seems this registry has been deleted");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("continue;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$registryName = $registries[$registryId];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("if (!isset($categoryInfo[$registryName])) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("$categoryInfo[$registryName] = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$categoryInfo[$registryName][] = $category->getCategory()->toArray();");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return $this->categoryPermissionApi->hasCategoryAccess($categoryInfo, ACCESS_OVERVIEW);");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence categoryHelperImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Helper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Helper\\Base\\AbstractCategoryHelper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Category helper implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class CategoryHelper extends AbstractCategoryHelper");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the category helper here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
