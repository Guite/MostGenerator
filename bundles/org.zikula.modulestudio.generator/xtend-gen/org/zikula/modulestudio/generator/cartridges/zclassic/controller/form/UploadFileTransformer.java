package org.zikula.modulestudio.generator.cartridges.zclassic.controller.form;

import de.guite.modulestudio.metamodel.Application;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class UploadFileTransformer {
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Form/DataTransformer/UploadFileTransformer.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.transformerBaseImpl(it)), this.fh.phpFileContent(it, this.transformerImpl(it)));
  }
  
  private CharSequence transformerBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\DataTransformer\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Form\\DataTransformerInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\File\\File;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\Request;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\RequestStack;");
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Form\\Type\\Field\\UploadType;");
    _builder.newLineIfNotEmpty();
    _builder.append("use ");
    String _appNamespace_2 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_2);
    _builder.append("\\Helper\\UploadHelper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Upload file transformer base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This data transformer treats uploaded files.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractUploadFileTransformer implements DataTransformerInterface");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var UploadType");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $formType = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var Request");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $request = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var UploadHelper");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $uploadHelper = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $fieldName = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* UploadFileTransformer constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param UploadType   $formType     The form type containing this transformer");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param RequestStack $requestStack RequestStack service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param UploadHelper $uploadHelper UploadHelper service instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param string       $fieldName    The form field name");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(UploadType $formType, RequestStack $requestStack, UploadHelper $uploadHelper, $fieldName = \'\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->formType = $formType;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->request = $requestStack->getCurrentRequest();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->uploadHelper = $uploadHelper;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->fieldName = $fieldName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Transforms a filename to the corresponding file object.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param string|File|null $filePath");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return File|null");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function transform($filePath)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (empty($filePath)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($filePath instanceof File) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return $filePath;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return [$this->fieldName => new File($filePath)];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Transforms an uploaded file back to the filename string.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param mixed $data Uploaded file or parent object (if file deletion checkbox has been provided)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return string");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function reverseTransform($data)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$deleteFile = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$uploadedFile = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($data instanceof UploadedFile) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// no file deletion checkbox has been provided");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$uploadedFile = $data;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$children = $this->formType->getFormBuilder()->all();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($children as $child) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$childForm = $child->getForm();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (false !== strpos($childForm->getName(), \'DeleteFile\')) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$deleteFile = $childForm->getData();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} elseif ($childForm->getData() instanceof UploadedFile) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$uploadedFile = $childForm->getData();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $this->formType->getEntity();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$objectType = $entity->get_objectType();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldName = $this->fieldName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null === $uploadedFile) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// check files array");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$filesKey = \'");
    String _lowerCase = this._utils.appName(it).toLowerCase();
    _builder.append(_lowerCase, "            ");
    _builder.append("_\' . $objectType;");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("if ($this->request->files->has($filesKey)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$files = $this->request->files->get($filesKey);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (isset($files[$fieldName]) && isset($files[$fieldName][$fieldName])) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$uploadedFile = $files[$fieldName][$fieldName];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$oldFile = $entity[$fieldName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (is_array($oldFile)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$oldFile = $oldFile[$fieldName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// check if an existing file must be deleted");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$hasOldFile = !empty($oldFile);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$hasBeenDeleted = !$hasOldFile;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($hasOldFile && true === $deleteFile) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// remove old upload file");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$entity = $this->uploadHelper->deleteUploadFile($entity, $fieldName);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$hasBeenDeleted = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null === $uploadedFile) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// no file has been uploaded");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return $oldFile;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// new file has been uploaded; check if there is an old one to be deleted");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($hasOldFile && true !== $hasBeenDeleted) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// remove old upload file (and image thumbnails)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$entity = $this->uploadHelper->deleteUploadFile($entity, $fieldName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// do the actual upload (includes validation, physical file processing and reading meta data)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$uploadResult = $this->uploadHelper->performFileUpload($objectType, $uploadedFile, $fieldName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$result = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$metaData = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($uploadResult[\'fileName\'] != \'\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result = $this->uploadHelper->getFileBaseFolder($this->formType->getEntity()->get_objectType(), $fieldName) . $uploadResult[\'fileName\'];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$metaData = $uploadResult[\'metaData\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// assign the upload file");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$setter = \'set\' . ucfirst($fieldName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity->$setter(null !== $result ? new File($result) : $result);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// assign the meta data");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity[$fieldName . \'Meta\'] = $metaData;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence transformerImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Form\\DataTransformer;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Form\\DataTransformer\\Base\\AbstractUploadFileTransformer;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Upload file transformer implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This data transformer treats uploaded files.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class UploadFileTransformer extends AbstractUploadFileTransformer");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to add your customisation here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
