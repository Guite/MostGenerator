package org.zikula.modulestudio.generator.cartridges.zclassic.models.event;

import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.DataObject;
import de.guite.modulestudio.metamodel.UploadField;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.zikula.modulestudio.generator.cartridges.zclassic.models.event.EventAction;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class LifecycleListener {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private Application app;
  
  private FileHelper fh = new FileHelper();
  
  private EventAction eventAction = new EventAction("$entity");
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    this.app = it;
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Listener/EntityLifecycleListener.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      this.fh.phpFileContent(it, this.lifecycleListenerBaseImpl(it)), this.fh.phpFileContent(it, this.lifecycleListenerImpl(it)));
  }
  
  private CharSequence lifecycleListenerBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Listener\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Doctrine\\Common\\EventSubscriber;");
    _builder.newLine();
    _builder.append("use Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs;");
    _builder.newLine();
    _builder.append("use Doctrine\\ORM\\Event\\PreUpdateEventArgs;");
    _builder.newLine();
    _builder.append("use Doctrine\\ORM\\Events;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\DependencyInjection\\ContainerInterface;");
    _builder.newLine();
    {
      boolean _hasUploads = this._modelExtensions.hasUploads(it);
      if (_hasUploads) {
        _builder.append("use Symfony\\Component\\HttpFoundation\\File\\File;");
        _builder.newLine();
      }
    }
    _builder.append("use Zikula\\Core\\Doctrine\\EntityAccess;");
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital);
    _builder.append("Events;");
    _builder.newLineIfNotEmpty();
    {
      EList<DataObject> _entities = it.getEntities();
      for(final DataObject entity : _entities) {
        _builder.append("use ");
        String _appNamespace_2 = this._utils.appNamespace(it);
        _builder.append(_appNamespace_2);
        _builder.append("\\Event\\Filter");
        String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(entity.getName());
        _builder.append(_formatForCodeCapital_1);
        _builder.append("Event;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Event subscriber base class for entity lifecycle events.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractEntityLifecycleListener implements EventSubscriber, ContainerAwareInterface");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("use ContainerAwareTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* EntityLifecycleListener constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(ContainerInterface $container)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null === $container) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$container = \\ServiceUtil::getManager();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->setContainer($container);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns list of events to subscribe.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return array list of events");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function getSubscribedEvents()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return [");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Events::preRemove,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Events::postRemove,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Events::prePersist,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Events::postPersist,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Events::preUpdate,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Events::postUpdate,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Events::postLoad");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The preRemove event occurs for a given entity before the respective EntityManager");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* remove operation for that entity is executed. It is not called for a DQL DELETE statement.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LifecycleEventArgs $args Event arguments");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function preRemove(LifecycleEventArgs $args)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $args->getObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isEntityManagedByThisBundle($entity) || !method_exists($entity, \'get_objectType\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    CharSequence _preRemove = this.eventAction.preRemove(this.app);
    _builder.append(_preRemove, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The postRemove event occurs for an entity after the entity has been deleted. It will be");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* invoked after the database delete operations. It is not called for a DQL DELETE statement.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Note that the postRemove event or any events triggered after an entity removal can receive");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* an uninitializable proxy in case you have configured an entity to cascade remove relations.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* In this case, you should load yourself the proxy in the associated pre event.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LifecycleEventArgs $args Event arguments");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function postRemove(LifecycleEventArgs $args)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $args->getObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isEntityManagedByThisBundle($entity) || !method_exists($entity, \'get_objectType\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    CharSequence _postRemove = this.eventAction.postRemove(this.app);
    _builder.append(_postRemove, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The prePersist event occurs for a given entity before the respective EntityManager");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* persist operation for that entity is executed. It should be noted that this event");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* is only triggered on initial persist of an entity (i.e. it does not trigger on future updates).");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Doctrine will not recognize changes made to relations in a prePersist event.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This includes modifications to collections such as additions, removals or replacement.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LifecycleEventArgs $args Event arguments");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function prePersist(LifecycleEventArgs $args)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $args->getObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isEntityManagedByThisBundle($entity) || !method_exists($entity, \'get_objectType\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    CharSequence _prePersist = this.eventAction.prePersist(this.app);
    _builder.append(_prePersist, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The postPersist event occurs for an entity after the entity has been made persistent.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* It will be invoked after the database insert operations. Generated primary key values");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* are available in the postPersist event.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LifecycleEventArgs $args Event arguments");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function postPersist(LifecycleEventArgs $args)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $args->getObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isEntityManagedByThisBundle($entity) || !method_exists($entity, \'get_objectType\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    CharSequence _postPersist = this.eventAction.postPersist(this.app);
    _builder.append(_postPersist, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The preUpdate event occurs before the database update operations to entity data.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* It is not called for a DQL UPDATE statement nor when the computed changeset is empty.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @see http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#preupdate");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param PreUpdateEventArgs $args Event arguments");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function preUpdate(PreUpdateEventArgs $args)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $args->getObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isEntityManagedByThisBundle($entity) || !method_exists($entity, \'get_objectType\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    CharSequence _preUpdate = this.eventAction.preUpdate(this.app);
    _builder.append(_preUpdate, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The postUpdate event occurs after the database update operations to entity data.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* It is not called for a DQL UPDATE statement.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LifecycleEventArgs $args Event arguments");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function postUpdate(LifecycleEventArgs $args)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $args->getObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isEntityManagedByThisBundle($entity) || !method_exists($entity, \'get_objectType\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    CharSequence _postUpdate = this.eventAction.postUpdate(this.app);
    _builder.append(_postUpdate, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The postLoad event occurs for an entity after the entity has been loaded into the current");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* EntityManager from the database or after the refresh operation has been applied to it.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Note that, when using Doctrine\\ORM\\AbstractQuery#iterate(), postLoad events will be executed");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* immediately after objects are being hydrated, and therefore associations are not guaranteed");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* to be initialized. It is not safe to combine usage of Doctrine\\ORM\\AbstractQuery#iterate()");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* and postLoad event handlers.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param LifecycleEventArgs $args Event arguments");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function postLoad(LifecycleEventArgs $args)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entity = $args->getObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!$this->isEntityManagedByThisBundle($entity) || !method_exists($entity, \'get_objectType\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    {
      boolean _hasUploads_1 = this._modelExtensions.hasUploads(it);
      if (_hasUploads_1) {
        _builder.newLine();
        _builder.append("        ");
        _builder.append("// prepare helper fields for uploaded files");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("$uploadFields = $this->getUploadFields($entity->get_objectType());");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("if (count($uploadFields) > 0) {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$request = $this->container->get(\'request_stack\')->getCurrentRequest();");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$baseUrl = $request->getSchemeAndHttpHost() . $request->getBasePath();");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("$uploadHelper = $this->container->get(\'");
        String _appService = this._utils.appService(it);
        _builder.append(_appService, "            ");
        _builder.append(".upload_helper\');");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("foreach ($uploadFields as $fieldName) {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("        ");
        _builder.append("$uploadHelper->initialiseUploadField($entity, $fieldName, $baseUrl);");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("        ");
    CharSequence _postLoad = this.eventAction.postLoad(this.app);
    _builder.append(_postLoad, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Checks whether this listener is responsible for the given entity or not.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param EntityAccess $entity The given entity");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return boolean True if entity is managed by this listener, false otherwise");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected function isEntityManagedByThisBundle($entity)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!($entity instanceof EntityAccess)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$entityClassParts = explode(\'\\\\\', get_class($entity));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ($entityClassParts[0] == \'");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getVendor());
    _builder.append(_formatForCodeCapital_2, "        ");
    _builder.append("\' && $entityClassParts[1] == \'");
    String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_3, "        ");
    _builder.append("Module\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      boolean _hasUploads_2 = this._modelExtensions.hasUploads(it);
      if (_hasUploads_2) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("* Returns list of upload fields for the given object type.");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("* @param string $objectType The object type");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("* @return array List of upload fields");
        _builder.newLine();
        _builder.append("    ");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("protected function getUploadFields($objectType)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("$uploadFields = [];");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("switch ($objectType) {");
        _builder.newLine();
        {
          final Function1<DataObject, Boolean> _function = (DataObject e) -> {
            return Boolean.valueOf(this._modelExtensions.hasUploadFieldsEntity(e));
          };
          Iterable<DataObject> _filter = IterableExtensions.<DataObject>filter(it.getEntities(), _function);
          for(final DataObject entity_1 : _filter) {
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("case \'");
            String _formatForCode = this._formattingExtensions.formatForCode(entity_1.getName());
            _builder.append(_formatForCode, "            ");
            _builder.append("\':");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("    ");
            _builder.append("$uploadFields = [\'");
            final Function1<UploadField, String> _function_1 = (UploadField it_1) -> {
              return this._formattingExtensions.formatForCode(it_1.getName());
            };
            String _join = IterableExtensions.join(IterableExtensions.<UploadField, String>map(this._modelExtensions.getUploadFieldsEntity(entity_1), _function_1), "\', \'");
            _builder.append(_join, "                ");
            _builder.append("\'];");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("        ");
            _builder.append("    ");
            _builder.append("break;");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return $uploadFields;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence lifecycleListenerImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Listener;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Listener\\Base\\AbstractEntityLifecycleListener;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Event subscriber implementation class for entity lifecycle events.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class EntityLifecycleListener extends AbstractEntityLifecycleListener");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to enhance this listener by custom actions");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
