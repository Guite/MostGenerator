package org.zikula.modulestudio.generator.cartridges.zclassic.controller.helper;

import com.google.common.base.Objects;
import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.Entity;
import de.guite.modulestudio.metamodel.EntityWorkflowType;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.ControllerExtensions;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelBehaviourExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

@SuppressWarnings("all")
public class NotificationHelper {
  @Extension
  private ControllerExtensions _controllerExtensions = new ControllerExtensions();
  
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelBehaviourExtensions _modelBehaviourExtensions = new ModelBehaviourExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  public void generate(final Application it, final IFileSystemAccess fsa) {
    InputOutput.<String>println("Generating helper class for workflow notifications");
    final FileHelper fh = new FileHelper();
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _plus = (_appSourceLibPath + "Helper/NotificationHelper.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus, 
      fh.phpFileContent(it, this.notificationHelperBaseClass(it)), fh.phpFileContent(it, this.notificationHelperImpl(it)));
  }
  
  private CharSequence notificationHelperBaseClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Helper\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Swift_Message;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\Request;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\RequestStack;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;");
    _builder.newLine();
    _builder.append("use Symfony\\Component\\Routing\\RouterInterface;");
    _builder.newLine();
    _builder.append("use Twig_Environment;");
    _builder.newLine();
    _builder.append("use Zikula\\Bundle\\CoreBundle\\HttpKernel\\ZikulaHttpKernelInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\Common\\Translator\\TranslatorInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\Common\\Translator\\TranslatorTrait;");
    _builder.newLine();
    _builder.append("use Zikula\\Core\\Doctrine\\EntityAccess;");
    _builder.newLine();
    _builder.append("use Zikula\\ExtensionsModule\\Api\\");
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      if ((_targets).booleanValue()) {
        _builder.append("ApiInterface\\VariableApiInterface");
      } else {
        _builder.append("VariableApi");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("use Zikula\\GroupsModule\\Entity\\RepositoryInterface\\GroupRepositoryInterface;");
    _builder.newLine();
    _builder.append("use Zikula\\MailerModule\\Api\\");
    {
      Boolean _targets_1 = this._utils.targets(it, "1.5");
      if ((_targets_1).booleanValue()) {
        _builder.append("ApiInterface\\MailerApiInterface");
      } else {
        _builder.append("MailerApi");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      Boolean _targets_2 = this._utils.targets(it, "1.5");
      if ((_targets_2).booleanValue()) {
        _builder.append("use Zikula\\UsersModule\\Constant as UsersConstant;");
        _builder.newLine();
      }
    }
    _builder.append("use Zikula\\UsersModule\\Entity\\UserEntity;");
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Helper\\WorkflowHelper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Notification helper base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class AbstractNotificationHelper");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _notificationApiBaseImpl = this.notificationApiBaseImpl(it);
    _builder.append(_notificationApiBaseImpl, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence notificationApiBaseImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("use TranslatorTrait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var SessionInterface");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $session;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var RouterInterface");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $router;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var ZikulaHttpKernelInterface");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $kernel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var Request");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $request;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var VariableApi");
    {
      Boolean _targets = this._utils.targets(it, "1.5");
      if ((_targets).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $variableApi;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var Twig_Environment");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $templating;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var MailerApi");
    {
      Boolean _targets_1 = this._utils.targets(it, "1.5");
      if ((_targets_1).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $mailer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var GroupRepositoryInterface");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $groupRepository;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var WorkflowHelper");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $workflowHelper;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* List of notification recipients.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var array $recipients");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $recipients = [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Which type of recipient is used (\"creator\", \"moderator\" or \"superModerator\").");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string recipientType");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $recipientType = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The entity which has been changed before.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var EntityAccess entity");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $entity = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of workflow action which is being performed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string action");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $action = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Name of the application.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $name;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* NotificationHelper constructor.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param ZikulaHttpKernelInterface $kernel          Kernel service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param TranslatorInterface       $translator      Translator service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param SessionInterface          $session         Session service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Routerinterface           $router          Router service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param RequestStack              $requestStack    RequestStack service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param VariableApi");
    {
      Boolean _targets_2 = this._utils.targets(it, "1.5");
      if ((_targets_2).booleanValue()) {
        _builder.append("Interface");
      } else {
        _builder.append("         ");
      }
    }
    _builder.append("      $variableApi     VariableApi service instance");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @param Twig_Environment          $twig            Twig service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param MailerApi");
    {
      Boolean _targets_3 = this._utils.targets(it, "1.5");
      if ((_targets_3).booleanValue()) {
        _builder.append("Interface");
      } else {
        _builder.append("         ");
      }
    }
    _builder.append("        $mailerApi       MailerApi service instance");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @param GroupRepositoryInterface  $groupRepository GroupRepository service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param WorkflowHelper            $workflowHelper  WorkflowHelper service instance");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function __construct(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ZikulaHttpKernelInterface $kernel,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("TranslatorInterface $translator,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("SessionInterface $session,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RouterInterface $router,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RequestStack $requestStack,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("VariableApi");
    {
      Boolean _targets_4 = this._utils.targets(it, "1.5");
      if ((_targets_4).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.append(" $variableApi,");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("Twig_Environment $twig,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("MailerApi");
    {
      Boolean _targets_5 = this._utils.targets(it, "1.5");
      if ((_targets_5).booleanValue()) {
        _builder.append("Interface");
      }
    }
    _builder.append(" $mailerApi,");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("GroupRepositoryInterface $groupRepository,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("WorkflowHelper $workflowHelper");
    _builder.newLine();
    _builder.append(") {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->kernel = $kernel;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->setTranslator($translator);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->session = $session;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->router = $router;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->request = $requestStack->getCurrentRequest();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->variableApi = $variableApi;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->templating = $twig;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->mailerApi = $mailerApi;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->groupRepository = $groupRepository;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->workflowHelper = $workflowHelper;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->name = \'");
    String _appName = this._utils.appName(it);
    _builder.append(_appName, "    ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    CharSequence _setTranslatorMethod = this._modelBehaviourExtensions.setTranslatorMethod(it);
    _builder.append(_setTranslatorMethod);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Sends a mail to either an item\'s creator or a group of moderators.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function process($args)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($args[\'recipientType\']) || !$args[\'recipientType\']) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($args[\'action\']) || !$args[\'action\']) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!isset($args[\'entity\']) || !$args[\'entity\']) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->recipientType = $args[\'recipientType\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->action = $args[\'action\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->entity = $args[\'entity\'];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->collectRecipients();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!count($this->recipients)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (null === $this->kernel->getModule(\'ZikulaMailerModule\')) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->session->getFlashBag()->add(\'error\', $this->__(\'Could not inform other persons about your amendments, because the Mailer module is not available - please contact an administrator about that!\'));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$result = $this->sendMails();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->session->del($this->name . \'AdditionalNotificationRemarks\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Collects the recipients.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function collectRecipients()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->recipients = [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->recipientType == \'moderator\' || $this->recipientType == \'superModerator\') {");
    _builder.newLine();
    _builder.append("        ");
    final Function1<Entity, Boolean> _function = (Entity it_1) -> {
      EntityWorkflowType _workflow = it_1.getWorkflow();
      return Boolean.valueOf((!Objects.equal(_workflow, EntityWorkflowType.NONE)));
    };
    final Iterable<Entity> entitiesWithWorkflow = IterableExtensions.<Entity>filter(this._modelExtensions.getAllEntities(it), _function);
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$modVarSuffixes = [");
    _builder.newLine();
    {
      for(final Entity entity : entitiesWithWorkflow) {
        _builder.append("            ");
        _builder.append("\'");
        String _formatForCode = this._formattingExtensions.formatForCode(entity.getName());
        _builder.append(_formatForCode, "            ");
        _builder.append("\' => \'");
        String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(entity.getNameMultiple());
        _builder.append(_formatForCodeCapital, "            ");
        _builder.append("\'");
        {
          Entity _last = IterableExtensions.<Entity>last(entitiesWithWorkflow);
          boolean _notEquals = (!Objects.equal(entity, _last));
          if (_notEquals) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$modVarSuffix = $modVarSuffixes[$this->entity[\'_objectType\']];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$moderatorGroupId = $this->variableApi->get(\'");
    String _appName_1 = this._utils.appName(it);
    _builder.append(_appName_1, "        ");
    _builder.append("\', \'moderationGroupFor\' . $modVarSuffix, 2);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("if ($this->recipientType == \'superModerator\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$moderatorGroupId = $this->variableApi->get(\'");
    String _appName_2 = this._utils.appName(it);
    _builder.append(_appName_2, "            ");
    _builder.append("\', \'superModerationGroupFor\' . $modVarSuffix, 2);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$moderatorGroup = $this->groupRepository->find($moderatorGroupId);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (null !== $moderatorGroup) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreach ($moderatorGroup[\'users\'] as $user) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$this->addRecipient($user);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($this->recipientType == \'creator\' && method_exists($this->entity, \'getCreatedBy\')) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addRecipient($this->entity->getCreatedBy());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($this->usesDesignatedEntityFields()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addRecipient();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($args[\'debug\']) && $args[\'debug\']) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// add the admin, too");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addRecipient(");
    {
      Boolean _targets_6 = this._utils.targets(it, "1.5");
      if ((_targets_6).booleanValue()) {
        _builder.append("UsersConstant::USER_ID_ADMIN");
      } else {
        _builder.append("2");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Collects data for building the recipients array.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param UserEntity $user Recipient user record");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function addRecipient(UserEntity $user = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->usesDesignatedEntityFields()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$recipientTypeParts = explode(\'-\', $this->recipientType);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (count($recipientTypeParts) != 2) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$fieldNames = explode(\'^\', $recipientTypeParts[1]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (count($fieldNames) != 2) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->recipients[] = [");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'name\' => $this->entity[$fieldNames[1]],");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'email\' => $this->entity[$fieldNames[0]]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (null === $user) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$userAttributes = $user->getAttributes();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$this->recipients[] = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'name\' => isset($userAttributes[\'name\']) && !empty($userAttributes[\'name\']) ? $userAttributes[\'name\'] : $user->getUname(),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'email\' => $user->getEmail()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Performs the actual mailing.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function sendMails()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectType = $this->entity[\'_objectType\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$siteName = $this->variableApi->getSystemVar(\'sitename\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$adminMail = $this->variableApi->getSystemVar(\'adminmail\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$templateType = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (strpos($this->recipientType,\'field-\') === 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$templateType = $this->recipientType;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$templateType = $this->recipientType == \'creator\' ? \'Creator\' : \'Moderator\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$template = \'Email/notify\' . ucfirst($objectType) . $templateType .  \'.html.twig\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$mailData = $this->prepareEmailData();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$subject = $this->getMailSubject();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// send one mail per recipient");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$totalResult = true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("foreach ($this->recipients as $recipient) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!isset($recipient[\'name\']) || !$recipient[\'name\']) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!isset($recipient[\'email\']) || !$recipient[\'email\']) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$templateParameters = [");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'recipient\' => $recipient,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'mailData\' => $mailData");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$body = $this->templating->render(\'@");
    String _appName_3 = this._utils.appName(it);
    _builder.append(_appName_3, "        ");
    _builder.append("/\' . $template, $templateParameters);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$altBody = \'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$html = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// create new message instance");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/** @var Swift_Message */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$message = Swift_Message::newInstance();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$message->setFrom([$adminMail => $siteName]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$message->setTo([$recipient[\'email\'] => $recipient[\'name\']]);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$totalResult &= $this->mailerApi->sendMessage($message, $subject, $body, $altBody, $html);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $totalResult;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the subject used for the emails to be sent.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getMailSubject()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$mailSubject = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ($this->recipientType == \'moderator\' || $this->recipientType == \'superModerator\' || $this->usesDesignatedEntityFields()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($this->action == \'submit\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$mailSubject = $this->__(\'New content has been submitted\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} elseif ($this->action == \'delete\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$mailSubject = $this->__(\'Content has been deleted\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$mailSubject = $this->__(\'Content has been updated\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} elseif ($this->recipientType == \'creator\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ($this->action == \'delete\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$mailSubject = $this->__(\'Your submission has been deleted\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$mailSubject = $this->__(\'Your submission has been updated\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $mailSubject;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Collects data used by the email templates.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function prepareEmailData()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$objectType = $this->entity->get_objectType();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$state = $this->entity->getWorkflowState();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$stateInfo = $this->workflowHelper->getStateInfo($state);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$remarks = $this->session->get($this->name . \'AdditionalNotificationRemarks\', \'\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$urlArgs = $this->entity->createUrlArgs();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$hasDisplayAction = in_array($objectType, [\'");
    final Function1<Entity, Boolean> _function_1 = (Entity it_1) -> {
      return Boolean.valueOf(this._controllerExtensions.hasDisplayAction(it_1));
    };
    final Function1<Entity, String> _function_2 = (Entity it_1) -> {
      return this._formattingExtensions.formatForCode(it_1.getName());
    };
    String _join = IterableExtensions.join(IterableExtensions.<Entity, String>map(IterableExtensions.<Entity>filter(this._modelExtensions.getAllEntities(it), _function_1), _function_2), "\', \'");
    _builder.append(_join, "    ");
    _builder.append("\']);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$hasEditAction = in_array($objectType, [\'");
    final Function1<Entity, Boolean> _function_3 = (Entity it_1) -> {
      return Boolean.valueOf(this._controllerExtensions.hasEditAction(it_1));
    };
    final Function1<Entity, String> _function_4 = (Entity it_1) -> {
      return this._formattingExtensions.formatForCode(it_1.getName());
    };
    String _join_1 = IterableExtensions.join(IterableExtensions.<Entity, String>map(IterableExtensions.<Entity>filter(this._modelExtensions.getAllEntities(it), _function_3), _function_4), "\', \'");
    _builder.append(_join_1, "    ");
    _builder.append("\']);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$routeArea = in_array($this->recipientType, [\'moderator\', \'superModerator\']) ? \'admin\' : \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$routePrefix = \'");
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(it));
    _builder.append(_formatForDB, "    ");
    _builder.append("_\' . strtolower($objectType) . \'_\' . $routeArea;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$displayUrl = $hasDisplayAction ? $this->router->generate($routePrefix . \'display\', $urlArgs, true) : \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$editUrl = $hasEditAction ? $this->router->generate($routePrefix . \'edit\', $urlArgs, true) : \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$emailData = [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'name\' => $this->entity->getTitleFromDisplayPattern(),");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'newState\' => $stateInfo[\'text\'],");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'remarks\' => $remarks,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'displayUrl\' => $displayUrl,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'editUrl\' => $editUrl");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $emailData;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Checks whether a special notification type is used or not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function usesDesignatedEntityFields()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return strpos($this->recipientType, \'field-\') === 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence notificationHelperImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Helper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Helper\\Base\\AbstractNotificationHelper;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Notification helper implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class NotificationHelper extends AbstractNotificationHelper");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the notification helper here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
