package org.zikula.modulestudio.generator.cartridges.zclassic.controller;

import de.guite.modulestudio.metamodel.Application;
import de.guite.modulestudio.metamodel.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Extension;
import org.zikula.modulestudio.generator.cartridges.zclassic.smallstuff.FileHelper;
import org.zikula.modulestudio.generator.extensions.FormattingExtensions;
import org.zikula.modulestudio.generator.extensions.ModelExtensions;
import org.zikula.modulestudio.generator.extensions.NamingExtensions;
import org.zikula.modulestudio.generator.extensions.Utils;

/**
 * Generates a class for defining custom events.
 */
@SuppressWarnings("all")
public class Events {
  @Extension
  private FormattingExtensions _formattingExtensions = new FormattingExtensions();
  
  @Extension
  private ModelExtensions _modelExtensions = new ModelExtensions();
  
  @Extension
  private NamingExtensions _namingExtensions = new NamingExtensions();
  
  @Extension
  private Utils _utils = new Utils();
  
  private FileHelper fh = new FileHelper();
  
  private Application app;
  
  /**
   * Entry point for event definition class.
   */
  public void generate(final Application it, final IFileSystemAccess fsa) {
    this.app = it;
    String _appSourceLibPath = this._namingExtensions.getAppSourceLibPath(it);
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    String _plus = (_appSourceLibPath + _formatForCodeCapital);
    String _plus_1 = (_plus + "Events.php");
    this._namingExtensions.generateClassPair(it, fsa, _plus_1, 
      this.fh.phpFileContent(it, this.eventDefinitionsBaseClass(it)), this.fh.phpFileContent(it, this.eventDefinitionsImpl(it)));
    Iterable<Entity> _allEntities = this._modelExtensions.getAllEntities(it);
    for (final Entity entity : _allEntities) {
      String _appSourceLibPath_1 = this._namingExtensions.getAppSourceLibPath(it);
      String _plus_2 = (_appSourceLibPath_1 + "Event/Filter");
      String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(entity.getName());
      String _plus_3 = (_plus_2 + _formatForCodeCapital_1);
      String _plus_4 = (_plus_3 + "Event.php");
      this._namingExtensions.generateClassPair(it, fsa, _plus_4, 
        this.fh.phpFileContent(it, this.filterEventBaseClass(entity)), this.fh.phpFileContent(it, this.filterEventImpl(entity)));
    }
  }
  
  private CharSequence eventDefinitionsBaseClass(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append("\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Events definition base class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("abstract class Abstract");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital);
    _builder.append("Events");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    {
      Iterable<Entity> _allEntities = this._modelExtensions.getAllEntities(it);
      for(final Entity entity : _allEntities) {
        _builder.append("    ");
        CharSequence _eventDefinitions = this.eventDefinitions(entity);
        _builder.append(_eventDefinitions, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence eventDefinitions(final Entity it) {
    StringConcatenation _builder = new StringConcatenation();
    final String constPrefix = this._formattingExtensions.formatForDB(it.getName()).toUpperCase();
    _builder.newLineIfNotEmpty();
    String _formatForDB = this._formattingExtensions.formatForDB(this._utils.appName(this.app));
    String _plus = (_formatForDB + ".");
    String _formatForDB_1 = this._formattingExtensions.formatForDB(it.getName());
    final String entityEventPrefix = (_plus + _formatForDB_1);
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    _builder.append(entityEventPrefix, " ");
    _builder.append("_post_load event is thrown when ");
    String _formatForDisplay = this._formattingExtensions.formatForDisplay(it.getNameMultiple());
    _builder.append(_formatForDisplay, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* are loaded from the database.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The event listener receives an");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appNamespace = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace, " ");
    _builder.append("\\Event\\Filter");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital, " ");
    _builder.append("Event instance.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see ");
    String _appNamespace_1 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_1, " ");
    _builder.append("\\Listener\\EntityLifecycleListener::postLoad()");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const ");
    _builder.append(constPrefix);
    _builder.append("_POST_LOAD = \'");
    _builder.append(entityEventPrefix);
    _builder.append("_post_load\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    _builder.append(entityEventPrefix, " ");
    _builder.append("_pre_persist event is thrown before a new ");
    String _formatForDisplay_1 = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay_1, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* is created in the system.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The event listener receives an");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appNamespace_2 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_2, " ");
    _builder.append("\\Event\\Filter");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1, " ");
    _builder.append("Event instance.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see ");
    String _appNamespace_3 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_3, " ");
    _builder.append("\\Listener\\EntityLifecycleListener::prePersist()");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const ");
    _builder.append(constPrefix);
    _builder.append("_PRE_PERSIST = \'");
    _builder.append(entityEventPrefix);
    _builder.append("_pre_persist\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    _builder.append(entityEventPrefix, " ");
    _builder.append("_post_persist event is thrown after a new ");
    String _formatForDisplay_2 = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay_2, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* has been created in the system.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The event listener receives an");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appNamespace_4 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_4, " ");
    _builder.append("\\Event\\Filter");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_2, " ");
    _builder.append("Event instance.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see ");
    String _appNamespace_5 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_5, " ");
    _builder.append("\\Listener\\EntityLifecycleListener::postPersist()");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const ");
    _builder.append(constPrefix);
    _builder.append("_POST_PERSIST = \'");
    _builder.append(entityEventPrefix);
    _builder.append("_post_persist\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    _builder.append(entityEventPrefix, " ");
    _builder.append("_pre_remove event is thrown before an existing ");
    String _formatForDisplay_3 = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay_3, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* is removed from the system.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The event listener receives an");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appNamespace_6 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_6, " ");
    _builder.append("\\Event\\Filter");
    String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_3, " ");
    _builder.append("Event instance.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see ");
    String _appNamespace_7 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_7, " ");
    _builder.append("\\Listener\\EntityLifecycleListener::preRemove()");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const ");
    _builder.append(constPrefix);
    _builder.append("_PRE_REMOVE = \'");
    _builder.append(entityEventPrefix);
    _builder.append("_pre_remove\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    _builder.append(entityEventPrefix, " ");
    _builder.append("_post_remove event is thrown after an existing ");
    String _formatForDisplay_4 = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay_4, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* has been removed from the system.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The event listener receives an");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appNamespace_8 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_8, " ");
    _builder.append("\\Event\\Filter");
    String _formatForCodeCapital_4 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_4, " ");
    _builder.append("Event instance.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see ");
    String _appNamespace_9 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_9, " ");
    _builder.append("\\Listener\\EntityLifecycleListener::postRemove()");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const ");
    _builder.append(constPrefix);
    _builder.append("_POST_REMOVE = \'");
    _builder.append(entityEventPrefix);
    _builder.append("_post_remove\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    _builder.append(entityEventPrefix, " ");
    _builder.append("_pre_update event is thrown before an existing ");
    String _formatForDisplay_5 = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay_5, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* is updated in the system.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The event listener receives an");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appNamespace_10 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_10, " ");
    _builder.append("\\Event\\Filter");
    String _formatForCodeCapital_5 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_5, " ");
    _builder.append("Event instance.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see ");
    String _appNamespace_11 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_11, " ");
    _builder.append("\\Listener\\EntityLifecycleListener::preUpdate()");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const ");
    _builder.append(constPrefix);
    _builder.append("_PRE_UPDATE = \'");
    _builder.append(entityEventPrefix);
    _builder.append("_pre_update\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    _builder.append(entityEventPrefix, " ");
    _builder.append("_post_update event is thrown after an existing new ");
    String _formatForDisplay_6 = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay_6, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* has been updated in the system.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The event listener receives an");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _appNamespace_12 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_12, " ");
    _builder.append("\\Event\\Filter");
    String _formatForCodeCapital_6 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_6, " ");
    _builder.append("Event instance.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see ");
    String _appNamespace_13 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_13, " ");
    _builder.append("\\Listener\\EntityLifecycleListener::postUpdate()");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @var string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const ");
    _builder.append(constPrefix);
    _builder.append("_POST_UPDATE = \'");
    _builder.append(entityEventPrefix);
    _builder.append("_post_update\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence eventDefinitionsImpl(final Application it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(it);
    _builder.append(_appNamespace);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(it);
    _builder.append(_appNamespace_1);
    _builder.append("\\Base\\Abstract");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital);
    _builder.append("Events;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Events definition implementation class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1);
    _builder.append("Events extends Abstract");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_2);
    _builder.append("Events");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the events definition here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence filterEventBaseClass(final Entity it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace);
    _builder.append("\\Event\\Base;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use Symfony\\Component\\EventDispatcher\\Event;");
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_1);
    _builder.append("\\Entity\\");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital);
    _builder.append("Entity;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Event base class for filtering ");
    String _formatForDisplay = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay, " ");
    _builder.append(" processing.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class AbstractFilter");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1);
    _builder.append("Event extends Event");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var ");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_2, "     ");
    _builder.append("Entity Reference to treated entity instance.");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $");
    String _formatForCode = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode, "    ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @var array Entity change set for preUpdate events.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected $entityChangeSet = [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Filter");
    String _formatForCodeCapital_3 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_3, "     ");
    _builder.append("Event constructor.");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param ");
    String _formatForCodeCapital_4 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_4, "     ");
    _builder.append("Entity $");
    String _formatForCode_1 = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode_1, "     ");
    _builder.append(" Processed entity");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("* @param array $entityChangeSet Change set for preUpdate events");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function __construct(");
    String _formatForCodeCapital_5 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_5, "    ");
    _builder.append("Entity $");
    String _formatForCode_2 = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode_2, "    ");
    _builder.append(", $entityChangeSet = [])");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->");
    String _formatForCode_3 = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode_3, "        ");
    _builder.append(" = $");
    String _formatForCode_4 = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode_4, "        ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$this->entityChangeSet = $entityChangeSet;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns the entity.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return ");
    String _formatForCodeCapital_6 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_6, "     ");
    _builder.append("Entity");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function get");
    String _formatForCodeCapital_7 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_7, "    ");
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $this->");
    String _formatForCode_5 = this._formattingExtensions.formatForCode(it.getName());
    _builder.append(_formatForCode_5, "        ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns the change set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return array");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function getEntityChangeSet()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $this->entityChangeSet;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence filterEventImpl(final Entity it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace ");
    String _appNamespace = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace);
    _builder.append("\\Event;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("use ");
    String _appNamespace_1 = this._utils.appNamespace(this.app);
    _builder.append(_appNamespace_1);
    _builder.append("\\Event\\Base\\AbstractFilter");
    String _formatForCodeCapital = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital);
    _builder.append("Event;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Event implementation class for filtering ");
    String _formatForDisplay = this._formattingExtensions.formatForDisplay(it.getName());
    _builder.append(_formatForDisplay, " ");
    _builder.append(" processing.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Filter");
    String _formatForCodeCapital_1 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_1);
    _builder.append("Event extends AbstractFilter");
    String _formatForCodeCapital_2 = this._formattingExtensions.formatForCodeCapital(it.getName());
    _builder.append(_formatForCodeCapital_2);
    _builder.append("Event");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// feel free to extend the event class here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
