package org.zikula.modulestudio.generator.cartridges.symfony.smallstuff

import de.guite.modulestudio.metamodel.Application
import org.zikula.modulestudio.generator.application.IMostFileSystemAccess
import org.zikula.modulestudio.generator.cartridges.symfony.smallstuff.documents.License_MIT
import org.zikula.modulestudio.generator.extensions.FormattingExtensions
import org.zikula.modulestudio.generator.extensions.ModelExtensions
import org.zikula.modulestudio.generator.extensions.NamingExtensions
import org.zikula.modulestudio.generator.extensions.Utils

class Docs {

    extension FormattingExtensions = new FormattingExtensions
    extension ModelExtensions = new ModelExtensions
    extension NamingExtensions = new NamingExtensions
    extension Utils = new Utils

    /**
     * Entry point for bundle documentation.
     */
    def generate(Application it, IMostFileSystemAccess fsa) {
        var fileName = 'CHANGELOG.md'
        fsa.generateFile(fileName, Changelog)

        fileName = 'README.md'
        fsa.generateFile(fileName, Readme)

        val docPath = getAppDocPath

        fileName = 'credits.md'
        fsa.generateFile(docPath + fileName, Credits)

        fileName = 'modulestudio.md'
        fsa.generateFile(docPath + fileName, MostText)

        fileName = 'install.md'
        fsa.generateFile(docPath + fileName, Install)

        fileName = 'translation.md'
        fsa.generateFile(docPath + fileName, Translation)

        fileName = 'version.md'
        fsa.generateFile(docPath + fileName, VersionInfo)

        fileName = 'LICENSE'
        fsa.generateFile(fileName, License)
    }

    def private Credits(Application it) '''
        # Credits

    '''

    def private Changelog(Application it) '''
        # Changelog

        Changes in «appName» «version»
    '''

    def private MostText(Application it) '''
        # ModuleStudio
        
        This Symfony bundle has been generated by ModuleStudio «msVersion», a model-driven solution
        for creating web applications for the Symfony and Zikula frameworks.

        If you are interested in how it works, visit <«msUrl»>.
    '''

    def private Install(Application it) '''
        # Installation and setup instructions

        ## Install the bundle

        Add an entry to your `composer.json` pointing to your repository like this:

        ```
          "repositories": [
            {
              "type": "git",
              "url": "https://github.com/«vendor.formatForCodeCapital»/«name.formatForCodeCapital»Bundle/"
            }
          ],
        ```

        Afterwards execute `composer require "«vendor.formatForCodeCapital»/«name.formatForCodeCapital»Bundle:dev-main"`.

        ## Setup

        ### When using the Flex recipe

        Just follow the instructions in your console.

        ### When not using Flex

        1. Add the bundle to `/config/bundles.php` adding `«vendor.formatForCodeCapital»\«name.formatForCodeCapital»Bundle\«appName»::class => ['all' => true]`.
        2. Copy `docs/recipe/config/routes/«vendor.formatForDB»_«name.formatForDB».yaml` to `/config/routes/«vendor.formatForDB»_«name.formatForDB».yaml`.
        3. Create database tables
           1. Create a database migration using `php bin/console make:migration`.
           2. Review the generated migration file and execute it using `php bin/console doctrine:migrations:migrate`.

           Alternatively the quick and dirty way during development: `php bin/console doctrine:schema:update --force`.
        4. JavaScript routes  
          If you use the `FOSJsRoutingBundle` dump JS routes using `php bin/console fos:js-routing:dump`.
        5. Execute `php bin/console zikula:init-bundle «appName»`.
        6. Move or copy the directory `public/` to `/public/bundles/«appName.formatForDB»/`.
        7. Optional: dump the default configuration using `php bin/console config:dump-reference «appName»` and put it into `/config/packages/«vendor.formatForDB»_«name.formatForDB».yaml`.
        «IF hasUploads»
            8. Move or copy the directory `docs/recipe/public/uploads/«appName»` to `/public/uploads/«appName»/` and make it writable including all sub folders.
        «ENDIF»

        For questions and other remarks visit our homepage <«url»>.

        «ReadmeFooter»
    '''

    def private Translation(Application it) '''
        # Translation instructions

        To create a new translation follow the steps below:

        1. First install the bundle like described in the `install.md` file.
        2. Open a console and navigate to the Symfony root directory.
        3. Execute this command replacing `en` by your desired locale code:

        `php -dmemory_limit=2G bin/console translation:extract --bundle «appName» extension en`

        4. Translate the resulting `.yaml` files in `«relativeAppRootPath»/translations/`.

        For questions and other remarks visit our homepage <«url»>.

        «ReadmeFooter»
    '''

    def private VersionInfo(Application it) '''
        # Version information

        This build has been generated by ModuleStudio «msVersion» at «timestamp».

        «ReadmeFooter»
    '''

    def private ReadmeFooter(Application it) '''
        «author»«IF email != ''» («email»)«ENDIF»
        «IF url != ''»<«url»>«/*«ELSE»«msUrl»*/»«ENDIF»
    '''

    def Readme(Application it) '''
        # «appName» «version»

        «appDescription»

        This bundle is intended for being used with Symfony «targetSymfonyVersion» and later.

        For questions and other remarks visit our homepage <«url»>.

        «ReadmeFooter»
    '''

    def private License(Application it) '''
        «IF license == 'MIT' || license == 'MIT License'»
            «new License_MIT().generate(it)»
        «ELSE»
            Please enter your license text here.
        «ENDIF»
    '''
}
