«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE FormRow FOR DerivedField-»
            {formlabel for='«name.formatForCode()»' __text='«EXPAND FormLabel»'«IF mandatory» mandatorysym='1'«ENDIF»«IF documentation != null && documentation != ""-» class='«entity.container.application.appName().formatForDB()»FormTooltips' title='«documentation.replaceAll('"', '\"')»'«ENDIF-»}«IF metaType == UploadField»<br />{* break required for Google Chrome *}«ENDIF»
«EXPAND FormField-»
«EXPAND Validation::MandatoryValidationMessage-»
«EXPAND Validation::AdditionalValidationMessages-»
«ENDDEFINE»


«DEFINE FormLabel FOR EntityField-»
«error("Error: undefined entity field type " + metaType.toString() + " (code 902346)") -> ""-»
«ENDDEFINE»
«DEFINE FormLabel FOR DerivedField-»
«name.formatForDisplayCapital()-»
«ENDDEFINE»
«DEFINE FormLabel FOR CalculatedField-»
«error("Error: undefined calculated field type " + metaType.toString() + " (code 902348)") -> ""-»
«ENDDEFINE»


«DEFINE FormLabel FOR IntegerField-»
«LET getPointingRelations() AS pointingRelations-»
«IF !pointingRelations.isEmpty-»
«LET pointingRelations.get(0) AS pointingRelation-»
«IF pointingRelation.sourceAlias != null && pointingRelation.sourceAlias != ""-»
«pointingRelation.sourceAlias.formatForDisplayCapital()-»
«ELSE-»
«pointingRelation.source.getEntityNameSingularPlural(pointingRelation.metaType != OneToOneRelationship)-»
«ENDIF-»
«ENDLET-»
«ELSE-»
«name.formatForDisplayCapital()-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»



«DEFINE FormField FOR EntityField-»
«error("Error: undefined entity field type " + metaType.toString() + " (code 902386)") -> ""-»
«ENDDEFINE»
«DEFINE FormField FOR DerivedField-»
«error("Error: undefined derived field type " + metaType.toString() + " (code 902387)") -> ""-»
«ENDDEFINE»
«DEFINE FormField FOR CalculatedField-»
«error("Error: undefined calculated field type " + metaType.toString() + " (code 902388)") -> ""-»
«ENDDEFINE»

«DEFINE FormField FOR BooleanField-»
            {formcheckbox group='«entity.name.formatForDB()»' id='«name.formatForCode()»' readOnly=«readonly» __title='«name.formatForDisplay()» ?'«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR IntegerField-»
            {formintinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' maxLength=«length»«IF minValue != 0-» minValue=«minValue»«ENDIF-»«IF maxValue != 0-» maxValue=«maxValue-»«ENDIF»«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR DecimalField-»
            {formfloatinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»'«IF minValue != 0-» minValue=«minValue»«ENDIF-»«IF maxValue != 0-» maxValue=«maxValue-»«ENDIF» maxLength=«(length+3+scale)»«IF scale != 2» precision=«scale»«ENDIF»«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR FloatField-»
            {formfloatinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»'«IF minValue != 0-» minValue=«minValue»«ENDIF-»«IF maxValue != 0-» maxValue=«maxValue-»«ENDIF»«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR StringField-»
«IF country-»
            {* TODO: support country fields in Zikula (see http://code.zikula.org/core/ticket/2446 for more information) *}
«ENDIF-»
«IF language-»
            {formlanguageselector group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Choose the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»'}
«ELSE-»
            {formtextinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» readOnly=«readonly» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode='«IF password-»password«ELSE-»singleline«ENDIF-»' maxLength=«length»«EXPAND Validation::FieldValidationCssClass»}
«ENDIF-»
«IF htmlcolour-»
            <script type="text/javascript" charset="utf-8">
            /* <![CDATA[ */
                var namePicky = new PickyColor({
                    field: '«name.formatForCode()»',
                    color: '{{$«entity.name.formatForCode()».«name.formatForCode()»}}',
                    colorWell: '«name.formatForCode()»',
                    closeText: '{{gt text='Close'}}'
                })
            /* ]]> */
            </script>
«ENDIF-»
«ENDDEFINE»

«DEFINE FormField FOR TextField-»«EXPAND FormFieldTextarea»«ENDDEFINE»

«DEFINE FormFieldTextarea FOR DerivedField-»
            {formtextinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode='multiline' rows='6«REM»8«ENDREM»' cols='50'«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR EmailField-»
            {formemailinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» readOnly=«readonly» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode='singleline' maxLength=«length»«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR UrlField-»
            {formurlinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» readOnly=«readonly» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode='singleline' maxLength=«length»«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»

«DEFINE FormField FOR UploadField-»
«IF mandatory-»
{if $mode eq 'create'}
            {formuploadinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» readOnly=«readonly»«EXPAND Validation::FieldValidationCssClass»}
{else}
            {formuploadinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=false readOnly=«readonly»«EXPAND Validation::FieldValidationCssClass»}
{/if}
«ELSE-»
            {formuploadinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» readOnly=«readonly»«EXPAND Validation::FieldValidationCssClass»}
«ENDIF-»

            <div class="z-formnote">{gt text='Allowed file extensions:'} «allowedExtensions»</div>
            {if $mode ne 'create'}
«LET entity.container.application.name.formatForDB() AS appNameSmall-»
«LET entity.name.formatForCode() AS objName-»
«LET objName.msconcat('.').msconcat(name.formatForCode()) AS realName-»
«IF !mandatory-»
                {if $«realName» ne ''}
«ENDIF-»
                  <div class="z-formnote">
                      {gt text='Current file'}:
                      <a href="{$«realName»FullPathURL}" title="{$«objName».«entity.getLeadingField().name.formatForCode()»|replace:"\"":""}"{if $«realName»Meta.isImage} rel="imageviewer[«entity.name.formatForDB()»]"{/if}>
                      {if $«realName»Meta.isImage}
                          <img src="{$«realName»|«appNameSmall»ImageThumb:$«realName»FullPath:80:80}" width="80" height="80" alt="{$«objName».«entity.getLeadingField().name.formatForCode()»|replace:"\"":""}" />
                      {else}
                          {gt text='Download'} ({$«realName»Meta.size|«appNameSmall»GetFileSize:$«realName»FullPath:false:false})
                      {/if}
                      </a>
                  </div>
«IF !mandatory-»
                  <div class="z-formnote">
                      {formcheckbox group='«entity.name.formatForDB()»' id='«name.formatForCode()»DeleteFile' readOnly=false __title='Delete «name.formatForDisplay()» ?'}
                      {formlabel for='«name.formatForCode()»DeleteFile' __text='Delete existing file'}
                  </div>
                {/if}
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
            {/if}
«ENDDEFINE»

«DEFINE FormField FOR UserField-»
            {* to be replaced by a plugin (see http://code.zikula.org/core/ticket/2444 for more information) *} 
«LET name.formatForCode() AS realName»
            <div id="«realName»LiveSearch" class="«entity.container.application.prefix()»LiveSearchUser z-hide">
                {formtextinput group='«entity.name.formatForDB()»' id='«realName»Selector' mandatory=«mandatory» readOnly=«readonly» __title='Input a part of the user name to search' maxLength=«length» cssClass='«IF mandatory»required «ENDIF»validate-alphanum«IF unique» validate-unique«ENDIF»'}
                {img src='indicator_circle.gif' modname='core' set='ajax' alt='' id='«realName»Indicator' style='display: none'}
                <div id="«realName»SelectorChoices" class="«entity.container.application.prefix()»AutoCompleteUser"></div>
            </div>
            <noscript><p>{gt text='This function requires JavaScript activated!'}</p></noscript>
            <input type="hidden" id="«realName»" name="«realName»" value="{$«entity.name.formatForDB()».«realName»}" />
            {if $mode ne 'create' && $«realName» && !$inlineUsage}<div class="z-formnote"><a href="{modurl modname='Users' type='admin' func='modify' userid=$«realName»}" title="{gt text='Switch to the user administration'}">{gt text='Manage user'}</a></div>{/if}
«ENDLET»
«ENDDEFINE»

«DEFINE FormField FOR DatetimeField-»
            {if $mode ne 'create'}
                {formdateinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' includeTime=true«EXPAND Validation::FieldValidationCssClass»}
            {else}
                {formdateinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' includeTime=true defaultValue='now'«EXPAND Validation::FieldValidationCssClass»}
            {/if}
«REM»TODO: visible=false«ENDREM»«""-»
«IF past-»
            <div class="z-formnote">{gt text='Note: this value must be in the past.'}</div>
«ELSEIF future-»
            <div class="z-formnote">{gt text='Note: this value must be in the future.'}</div>
«ENDIF-»
«ENDDEFINE»

«DEFINE FormField FOR DateField-»
            {if $mode ne 'create'}
                {formdateinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' useSelectionMode=true«EXPAND Validation::FieldValidationCssClass»}
            {else}
                {formdateinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' useSelectionMode=true defaultValue='today'«EXPAND Validation::FieldValidationCssClass»}
            {/if}
«ENDDEFINE»

«DEFINE FormField FOR TimeField-»
            {* TODO: support time fields in Zikula (see http://code.zikula.org/core/ticket/2445 for more information) *}
            {formtextinput group='«entity.name.formatForDB()»' id='«name.formatForCode()»' mandatory=«mandatory» readOnly=«readonly» __title='Input the «name.formatForDisplay()» of the «entity.name.formatForDisplay()»' textMode='singleline' maxLength=8«EXPAND Validation::FieldValidationCssClass»}
«ENDDEFINE»
