«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE Root(Application app) FOR Action-»

    /**
«EXPAND ActionDoc(app)-»
     */
    public function «name.formatForCode()»($args)
    {
«EXPAND ActionImpl(app)-»
    }
«ENDDEFINE»

«DEFINE ActionDoc(Application app) FOR Action-»
«IF metaType == MainAction-»
     * This method is the default function, and is called whenever the
     * module's «controller.name.formatForCode()» area is called without defining arguments.
«ELSEIF metaType == ViewAction-»
     * This method provides a generic item list overview.
«ELSEIF metaType == DisplayAction-»
     * This method provides a generic item detail view.
«ELSEIF metaType == EditAction-»
     * This method provides a generic handling of all edit requests.
«ELSEIF metaType == CustomAction-»
     * This is a custom method. Documentation for this will be improved in later versions.
«ENDIF-»
     *
     * @params       TODO
«IF metaType == ViewAction || metaType == DisplayAction || metaType == EditAction || metaType == DeleteAction-»
     * @param string  $ot           Treated object type.
«IF metaType == DeleteAction-»
     * @param int     $id           ID of the entry.
     * @param boolean $confirmation Confirm the deletion, else a confirmation page is displayed.
«ENDIF-»
«IF metaType == ViewAction-»
     * @param string  $sort         Sorting field.
     * @param string  $sdir         Sorting direction.
     * @param int     $pos          Current pager position.
     * @param int     $num          Amount of entries to display.
«ENDIF-»
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
«ENDIF-»
     * @return mixed Output.
«ENDDEFINE»

«DEFINE ActionImpl(Application app) FOR Action-»
«EXPAND PermissionCheck-»
«IF metaType != MainAction-»
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->getGet()->filter('ot', '«app.getLeadingEntity().name.formatForCode()»', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => '«controller.name()»', 'action' => '«name.formatForCode()»');
        if (!in_array($objectType, «app.appName()»_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = «app.appName()»_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
«ENDIF-»
«EXPAND ActionImplBody(app.appName())-»
«ENDDEFINE»

«DEFINE PermissionCheck FOR Action-»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»

«DEFINE ActionImplBody(String appName) FOR Action-»
«error("Error: undefined action type " + metaType.toString() + " (code 925727)") -> ""-»
«ENDDEFINE»

«DEFINE ActionImplBody(String appName) FOR MainAction-»
«IF controller.metaType == UserController-»
        // return main template
        return $this->view->fetch('«controller.name()»/main.tpl');
«ELSEIF controller.metaType == AdminController-»
«REM»
«IF controller.container.application.needsConfig()-»
        // call config method
        return $this->config();
«ELSE-»
«ENDREM»
        // return main template
        return $this->view->fetch('«controller.name()»/main.tpl');
«REM»«ENDIF-»«ENDREM»
«ELSEIF controller.metaType == AccountController-»
«ELSEIF controller.metaType == AjaxController-»
«ELSEIF controller.metaType == SearchController-»
«REM»
New Search API:
http://community.zikula.org/index.php?module=Wiki&tag=ModuleProgrammingPart4
«ENDREM»
«ELSEIF controller.metaType == CustomController-»
        // return main template
        return $this->view->fetch('«controller.name()»/main.tpl');
«ENDIF-»
«ENDDEFINE»

«DEFINE ActionImplBody(String appName) FOR ViewAction-»
«EXPAND ControllerHelper::instantiateBusinessObject(appName, true, 'controllerAction', controller.name(), name.formatForCode())-»

        $tpl = $this->request->getGet()->filter('tpl', '', FILTER_SANITIZE_STRING);
        if ($tpl == 'nestedSet') {
            $useMultipleRoots = method_exists($objectCollection, 'selectAllTrees');
            $this->view->assign('useMultipleRoots', $useMultipleRoots);
            if ($useMultipleRoots) {
                $this->view->assign('trees', $objectCollection->selectAllTrees());
            }
            else {
                $this->view->assign('items', $objectCollection->selectTree());
            }

            // fetch and return the appropriate template
            return «appName»_Util_View::processTemplate($this->view, '«controller.name()»', $objectType, 'view', $args);
        }

        // parameter for used sorting field
        $sort = $this->request->getGet()->filter('sort', '', FILTER_SANITIZE_STRING);
«EXPAND ControllerHelper::DefaultSorting-»

        // parameter for used sort order
        $sdir = $this->request->getGet()->filter('sdir', '', FILTER_SANITIZE_STRING);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }

«REM»TODO«ENDREM»
        // the current offset which is used to calculate the pagination
        $currentPage = (int) $this->request->getGet()->filter('pos', 1, FILTER_VALIDATE_INT);

        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) $this->request->getGet()->filter('num', 0, FILTER_VALIDATE_INT);
        if ($resultsPerPage == 0) {
            $csv = (int) $this->request->getGet()->filter('usecsvext', 0, FILTER_VALIDATE_INT);
            $resultsPerPage = ($csv == 1) ? 999999 : $this->getVar('pagesize', 10);
        }

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' ' . $sdir;

        // get objects from database
        list($objectData, $objectCount) = $objectCollection->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);

        // build ModUrl instance for display hooks
        $currentUrlObject = new Zikula_ModUrl('«appName»', '«controller.name()»', 'view', ZLanguage::getLanguageCode(), array('ot' => $objectType));

        // assign the object data, sorting information and details for creating the pager
        $this->view->assign('items', $objectData)
                   ->assign('sort', $sort)
                   ->assign('sdir', $sdir)
                   ->assign('currentPage', $currentPage)
                   ->assign('pager', array('numitems'     => $objectCount,
                                           'itemsperpage' => $resultsPerPage))
                   ->assign('currentUrlObject', $currentUrlObject);

        // fetch and return the appropriate template
        return «appName»_Util_View::processTemplate($this->view, '«controller.name()»', $objectType, 'view', $args);
«ENDDEFINE»


«DEFINE ActionImplBody(String appName) FOR DisplayAction-»
«EXPAND ControllerHelper::instantiateBusinessObject(appName, false, 'controllerAction', controller.name(), name.formatForCode())-»

        $idField = $object->get_intIdField();

        // retrieve the ID of the object we wish to view
        $id = (int) $this->request->getGet()->filter($idField, isset($args[$idField]) && is_numeric($args[$idField]) ? $args[$idField] : 0, FILTER_VALIDATE_INT);
        if (!$id) {
            $id = (int) $this->request->getGet()->filter('id', isset($args['id']) && is_numeric($args['id']) ? $args['id'] : 0, FILTER_VALIDATE_INT);
        }
«IF controller.metaType == UserController-»
«REM»At the moment short urls are only used in the user area, see http://code.zikula.org/core/ticket/2538«ENDREM»«""-»

        // check for unique permalinks (without id)
        $hasSlug = false;
        $slugTitle = '';
        if (!$id) {
            $hasSlug = $object->get_intHasUniqueSlug();
            if ($hasSlug) {
                $slugTitle = $this->request->getGet()->filter('title', isset($args['title']) && !empty($args['title']) ? $args['title'] : '', FILTER_SANITIZE_STRING);
                $hasSlug = (!empty($slugTitle));
            }
        }

        $this->throwNotFoundUnless(($id || $hasSlug), 'Invalid ' . $idField . ' [' . DataUtil::formatForDisplay($id) . '] received ...');

        // assign object data fetched from the database
        $objectData = null;
        if ($hasSlug) {
            $objectData = $object->selectBySlug($slugTitle);
        }
        else {
            $objectData = $object->selectById($id);
        }
«ELSE-»
        $this->throwNotFoundUnless($id, 'Invalid ' . $idField . ' [' . DataUtil::formatForDisplay($id) . '] received ...');

        // assign object data fetched from the database
        $objectData = null;
        $objectData = $object->selectById($id);
«ENDIF-»
        if (!is_array($objectData) || !isset($objectData[$idField]) || !is_numeric($objectData[$idField])) {
            $this->throwNotFound($this->__('No such item.'));
        }

        // assign the object we loaded above.
        $this->view->assign($objectType, $objectData);

        // fetch and return the appropriate template
        return «appName»_Util_View::processTemplate($this->view, '«controller.name()»', $objectType, 'display', $args);
«ENDDEFINE»

«DEFINE ActionImplBody(String appName) FOR EditAction-»
«REM»«EXPAND ActionHandler::FormCreate(appName, controller.name, 'edit')-»«ENDREM»
        // create new Form reference
        $view = FormUtil::newForm($this->name, $this);

        // build form handler class name
        $handlerClass = '«appName.toFirstUpper()»_Form_Handler_«controller.name().toFirstUpper()»_' . ucfirst($objectType) . '_Edit';

        // execute form using supplied template and page event handler
        return $view->execute('«controller.name()»/' . $objectType . '/edit.tpl', new $handlerClass());
«ENDDEFINE»

«DEFINE ActionImplBody(String appName) FOR DeleteAction-»
«EXPAND ControllerHelper::instantiateBusinessObject(appName, false, 'controllerAction', controller.name(), name.formatForCode())-»

        $idField = $object->get_intIdField();

        // retrieve the ID of the object we wish to view
        $id = (int) $this->request->getGet()->filter($idField, isset($args[$idField]) && is_numeric($args[$idField]) ? $args[$idField] : 0, FILTER_VALIDATE_INT);

        $this->throwNotFoundUnless($id, 'Invalid ' . $idField . ' [' . DataUtil::formatForDisplay($id) . '] received ...');

        $confirmation = (bool) $this->request->getPost()->filter('confirmation', isset($args['confirmation']) ? $args['confirmation'] : false, FILTER_VALIDATE_BOOLEAN);

        if ($confirmation) {
            $this->checkCsrfToken();

            $object->selectById($id, false);

            if (!$object->delete()) {
                $this->registerError($this->__('Error! Deletion attempt failed.'));
            } else {
                $this->registerStatus($this->__('Done! Item deleted.'));

                // clear view cache to reflect our changes
                $this->view->clear_cache();
            }
        } else {
    «EXPAND ControllerHelper::retrieveEntityFromModel("idField", "id", false)-»

            // assign the object we loaded above
            $this->view->assign($objectType, $objectData);

            // fetch and return the appropriate template
            return «appName»_Util_View::processTemplate($this->view, '«controller.name()»', $objectType, 'delete', $args);
        }

        // redirect to the list of the current object type
        $this->redirect(ModUtil::url('«appName»', '«controller.name()»', «IF controller.hasActions('view')-»'view',
                                                                                    array('ot' => $objectType)«ELSE-»'main'«ENDIF-»));

«ENDDEFINE»

«DEFINE ActionImplBody(String appName) FOR CustomAction-»
«IF controller.metaType == AdminController
    && (name == "config" || name == "modifyconfig" || name == "preferences")-»
«EXPAND ActionHandler::FormCreate(appName, controller, 'modify')-»
«ELSE-»
        /** TODO: custom logic */
«ENDIF-»
«ENDDEFINE»
