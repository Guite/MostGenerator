«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for application installer«ENDREM»
«DEFINE Root FOR Application»
«FILE getAppSourceLibPath(appName()).msconcat("Base/Installer.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Installer base class
 */
class «appName()»_Base_Installer extends Zikula_AbstractInstaller
{
«EXPAND NormalInstall-»
}
«ENDFILE»

«FILE getAppSourceLibPath(appName()).msconcat("Installer.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Installer implementation class
 */
class «appName()»_Installer extends «appName()»_Base_Installer
{
    // feel free to extend the installer here
}
«ENDFILE»

«IF interactiveInstallation == true»
«FILE getAppSourceLibPath(appName()).msconcat("Controller/Base/InteractiveInstaller.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Interactive installer base class
 */
class «appName()»_Controller_Base_Interactiveinstaller extends Zikula_Controller_AbstractInteractiveInstaller
{
«EXPAND InteractiveInstall»
}
«ENDFILE»
«FILE getAppSourceLibPath(appName()).msconcat("Controller/InteractiveInstaller.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Interactive installer implementation class
 */
class «appName()»_Controller_Interactiveinstaller extends «appName()»_Controller_Base_Interactiveinstaller
{
    // feel free to extend the installer here
}
«ENDFILE»
«EXPAND templates::zclassic::view::Installer::Root»
«ENDIF»
«ENDDEFINE»

«DEFINE NormalInstall FOR Application-»
«EXPAND FuncInit-»
«EXPAND FuncUpdate-»
«EXPAND FuncDelete-»
«EXPAND FuncDefaultData-»
«EXPAND ProcessEventHandlersImpl-»
«ENDDEFINE»

«DEFINE InteractiveInstall FOR Application-»
«EXPAND templates::zclassic::controller::ControllerHelper::ControllerPostInitialize(false)-»
«EXPAND FuncInteractiveInit-»
«IF needsConfig()»«EXPAND FuncInteractiveInitStep2»«ENDIF»
«EXPAND FuncInteractiveInitStep3-»
«EXPAND FuncInteractiveUpdate-»
«EXPAND FuncInteractiveDelete-»
«ENDDEFINE»

«DEFINE FuncInit FOR Application-»
    /**
     * Install the «appName()» application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        // create all tables from according model definitions
        try {
            DoctrineUtil::createTablesFromModels('«appName()»');
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %1$s module.', array($this->getName())));
        }

«IF !models.variables.isEmpty-»
        // set up all our vars with initial values
«FOREACH models.variables.vars AS modvar-»
«IF interactiveInstallation == true-»
        $sessionValue = SessionUtil::getVar('«formatForCode(name + '_' + modvar.name)»');
        $this->setVar('«modvar.name.formatForCode()»', (($sessionValue <> false) ? «EXPAND ModVarValFromSession FOR modvar» : «EXPAND ModVarValSession2Mod FOR modvar»));
        SessionUtil::delVar(«formatForCode(name + '_' + modvar.name)»);
«ELSE-»
        $this->setVar('«modvar.name.formatForCode()»', «EXPAND ModVarValDirect2Mod FOR modvar»);
«ENDIF-»
«ENDFOREACH-»
«ENDIF-»

        // register persistent event handlers
        $this->registerPersistentEventHandlers();

        // register hook subscriber bundles
        HookUtil::registerHookSubscriberBundles($this->version);
        //HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());
«REM»TODO see #115
        // Register hook provider bundles
        HookUtil::registerHookProviderBundles($this->version);
        //HookUtil::registerProviderBundles($this->version->getHookProviderBundles());
«ENDREM»

        // create the default data for «appName()»
        //$this->defaultdata();
        // TODO: deactivated for now because constraints prevent data creation in random order (see #64)

        // initialisation successful
        return true;
    }
«ENDDEFINE»


«DEFINE ModVarValFromSession FOR Variable»$sessionValue«ENDDEFINE»
«DEFINE ModVarValFromSession FOR ListVar»serialize($sessionValue)«ENDDEFINE»

«DEFINE ModVarValSession2Mod FOR Variable»'«value»'«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR BoolVar»«IF value == 'true'»true«ELSE»false«ENDIF»«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR ListVar»serialize(array(«EXPAND ModVarValSession2Mod FOREACH items.select(item|item.isDefault == true) SEPARATOR ', '»))«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR ListVarItem»«IF isDefault == true»'«name.formatForCode()»'«ENDIF»«ENDDEFINE»

«DEFINE ModVarValDirect2Mod FOR Variable»'«value»'«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR BoolVar»«IF value == 'true'»true«ELSE»false«ENDIF»«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR ListVar»serialize(array(«EXPAND ModVarValDirect2Mod FOREACH items.select(item|item.isDefault == true) SEPARATOR ', '»))«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR ListVarItem»'«name.formatForCode()»'«ENDDEFINE»


«DEFINE FuncUpdate FOR Application»
    /**
     * Upgrade the «appName()» application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldversion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldversion)
    {
    /*
        // Upgrade dependent on old version number
        switch ($oldversion) {
            case 1.0:
                // do something
                // DoctrineUtil::*() for adding/dropping columns/index and so on
                // last do DoctrineUtil::createTablesFromModels('«appName()»');
                // to create any new tables
        }
    */
«REM»http://www.doctrine-project.org/projects/orm/1.2/docs/manual/migrations/en«ENDREM»

        // update successful
        return true;
    }
«ENDDEFINE»

«DEFINE FuncDelete FOR Application»
    /**
     * Uninstall «appName()».
     *
     * @return boolean True on success, false otherwise.
     */
    public function uninstall()
    {
        // delete stored object workflows
        $result = WorkflowUtil::deleteWorkflowsForModule($this->getName());
        if ($result === false) {
            return LogUtil::registerError($this->__f('An error was encountered while removing stored object workflows for the %1$s module.', array($this->getName())));
        }

        try {
            $dbPrefix = System::getVar('prefix');
«EXPAND RemoveBehaviors FOREACH models.entities-»
«LET models.getJoinRelations() AS joinRelations-»
«IF !joinRelations.isEmpty-»
            // remove all foreign keys and indexes
«EXPAND RemoveForeignKey FOREACH joinRelations-»
«ENDIF-»

«ENDLET-»
            // remove tables
«EXPAND RemoveTable FOREACH models.entities-»
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %1$s module.', array($this->getName())));
        }

        // unregister persistent event handlers
        EventUtil::unregisterPersistentModuleHandlers('«appName()»');

«IF !models.variables.isEmpty-»
        // remove all module vars
        $this->delVars();

«ENDIF-»
        // Deletion successful
        return true;
    }
«ENDDEFINE»

«DEFINE RemoveBehaviors FOR Entity-»
«REM»TODO: replace these if clauses by an aspect template (somewhen)«ENDREM»«""-»
«IF i18n-»
        $res = DBUtil::dropTable('«fullEntityName()»_translation');
«ENDIF-»
«IF versionable && versionableHistory-»
        $res = DBUtil::dropTable('«fullEntityName()»_version');
«ENDIF-»
«IF searchable-»
        $res = DBUtil::dropTable('«fullEntityName()»_index');
«ENDIF-»

«IF categorisable || attributable || metaData || loggable-»
        $dbTables = DBUtil::getTables();
«ENDIF-»
«IF categorisable-»
        // remove categorisable behavior data
        $table  = $dbTables['categories_mapobj'];
        $column = $dbTables['categories_mapobj_column'];
        $sql = 'DELETE FROM ' . $table . ' WHERE ' . $column['modname'] . ' = \'«container.application.appName()»\' AND ' . $column['table'] . ' = \'«fullEntityName()»\'';
        $res = DBUtil::executeSQL($sql);
«ENDIF-»
«IF attributable-»
        // remove attributable behavior data
        $table  = $dbTables['objectdata_attributes'];
        $column = $dbTables['objectdata_attributes_column'];
        $sql = 'DELETE FROM ' . $table . ' WHERE ' . $column['object_type'] . ' = \'«fullEntityName()»\'';
        $res = DBUtil::executeSQL($sql);
«ENDIF-»
«IF metaData-»
        // remove metaData behavior data
        $table  = $dbTables['objectdata_meta'];
        $column = $dbTables['objectdata_meta_column'];
        $sql = 'DELETE FROM ' . $table . ' WHERE ' . $column['module'] . ' = \'«container.application.appName()»\' AND ' . $column['table'] . ' = \'«fullEntityName()»\'';
        $res = DBUtil::executeSQL($sql);
«ENDIF-»
«IF loggable-»
        // remove loggable behavior data
        $table  = $dbTables['objectdata_log'];
        $column = $dbTables['objectdata_log_column'];
        $sql = 'DELETE FROM ' . $table . ' WHERE ' . $column['object_type'] . ' = \'«fullEntityName()»\'';
        $res = DBUtil::executeSQL($sql);
«ENDIF-»
«ENDDEFINE»

«DEFINE RemoveForeignKey FOR JoinRelationship-»
«IF foreignKeyName != null && foreignKeyName != ""-»
            $foreignKeyName = '«foreignKeyName.formatForCode()»';
«ELSE-»
            $foreignKeyName = $dbPrefix . '_«target.fullEntityName()»_«getRelationLocalField(true)»_' . $dbPrefix . '_«source.fullEntityName()»_«getRelationLocalField(false)»';
«ENDIF-»
            DoctrineUtil::dropForeignKey('«target.fullEntityName()»', array('name' => $foreignKeyName));
            DoctrineUtil::dropIndex('«target.fullEntityName()»', '«IF targetField == "id" || targetField == (target.name.formatForDB() + "id")»«source.relationFieldName(sourceField)»«ELSE»«target.relationFieldName(targetField)»«ENDIF»');
«ENDDEFINE»
«DEFINE RemoveForeignKey FOR ManyToManyRelationship-»
«ENDDEFINE»
«DEFINE RemoveTable FOR Entity-»
«IF sluggable-»
            DoctrineUtil::dropIndex('«fullEntityName()»', $dbPrefix . '_«fullEntityName()»_sluggable');
«ENDIF-»
            DoctrineUtil::dropTable('«fullEntityName()»');
«ENDDEFINE»

«DEFINE ProcessEventHandlersImpl FOR Application»
    /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
«LET appName() AS appName-»
    private function registerPersistentEventHandlers()
    {
        // core
«LET appName.msconcat('_Listener_Core') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'api.method_not_found', array('«callableClass»', 'apiMethodNotFound'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.preinit', array('«callableClass»', 'preInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.postinit', array('«callableClass»', 'postInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'controller.method_not_found', array('«callableClass»', 'controllerMethodNotFound'));
«ENDLET-»

        // installer
«LET appName.msconcat('_Listener_Installer') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.installed', array('«callableClass»', 'moduleInstalled'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.upgraded', array('«callableClass»', 'moduleUpgraded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.uninstalled', array('«callableClass»', 'moduleUninstalled'));
«ENDLET-»

        // modules
«LET appName.msconcat('_Listener_ModuleDispatch') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.postloadgeneric', array('«callableClass»', 'postLoadGeneric'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.preexecute', array('«callableClass»', 'preExecute'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.postexecute', array('«callableClass»', 'postExecute'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.custom_classname', array('«callableClass»', 'customClassname'));
«ENDLET-»

        // mailer
«LET appName.msconcat('_Listener_Mailer') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.mailer.api.sendmessage', array('«callableClass»', 'sendMessage'));
«ENDLET-»

        // page
«LET appName.msconcat('_Listener_Page') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'pageutil.addvar_filter', array('«callableClass»', 'pageutilAddvarFilter'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'system.outputfilter', array('«callableClass»', 'systemOutputfilter'));
«ENDLET-»

        // errors
«LET appName.msconcat('_Listener_Errors') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'setup.errorreporting', array('«callableClass»', 'setupErrorReporting'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'systemerror', array('«callableClass»', 'systemError'));
«ENDLET-»

        // theme
«LET appName.msconcat('_Listener_Theme') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.load_config', array('«callableClass»', 'loadConfig'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.prefetch', array('«callableClass»', 'preFetch'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.postfetch', array('«callableClass»', 'postFetch'));
«ENDLET-»

        // view
«LET appName.msconcat('_Listener_View') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'view.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'view.postfetch', array('«callableClass»', 'postFetch'));
«ENDLET-»

        // user login
«LET appName.msconcat('_Listener_UserLogin') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.started', array('«callableClass»', 'started'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.veto', array('«callableClass»', 'veto'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.succeeded', array('«callableClass»', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.failed', array('«callableClass»', 'failed'));
«ENDLET-»

        // user logout
«LET appName.msconcat('_Listener_UserLogout') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.logout.succeeded', array('«callableClass»', 'succeeded'));
«ENDLET-»

        // user
«LET appName.msconcat('_Listener_User') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.gettheme', array('«callableClass»', 'getTheme'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.delete', array('«callableClass»', 'delete'));
«ENDLET-»

        // registration
«LET appName.msconcat('_Listener_UserRegistration') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.started', array('«callableClass»', 'started'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.succeeded', array('«callableClass»', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.failed', array('«callableClass»', 'failed'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.delete', array('«callableClass»', 'delete'));
«ENDLET-»

        // users module
«LET appName.msconcat('_Listener_Users') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.config.updated', array('«callableClass»', 'configUpdated'));
«ENDLET-»

        // group
«LET appName.msconcat('_Listener_Group') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.delete', array('«callableClass»', 'delete'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.adduser', array('«callableClass»', 'addUser'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.removeuser', array('«callableClass»', 'removeUser'));
«ENDLET-»

        // special purposes and 3rd party api support
«LET appName.msconcat('_Listener_ThirdParty') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'get.pending_content', array('«callableClass»', 'pendingContentListener'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.content.gettypes', array('«callableClass»', 'contentGetTypes'));
«ENDLET-»
«ENDLET-»
    }
«ENDDEFINE»

«DEFINE FuncDefaultData FOR Application»
    /**
     * Create the default data for «appName()».
     *
     * @return void
     */
    public function defaultdata()
    {
        // ensure that tables are cleared
«FOREACH models.entities AS entity-»
        Doctrine_Core::getTable('«entity.implClassModelRecord()»')
            ->truncateTable();
«ENDFOREACH-»
        unset($doctrine);

«IF getDefaultDataSource().numExampleRows > 0-»
        // TODO: test this, see http://code.zikula.org/generator/ticket/64
        //Doctrine_Parser::load('modules/«appName()»/docs/exampleData.yml', 'yml');
«ENDIF-»

        // Insertion successful
        return true;
    }
«ENDDEFINE»




«DEFINE FuncInteractiveInit FOR Application»
    /**
     * Interactive installation procedure.
     *
     * @return string|boolean Output.
     */
    public function install()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_interactive.tpl');
    }
«ENDDEFINE»

«DEFINE FuncInteractiveInitStep2 FOR Application»
    /**
     * Interactive installation procedure step 2.
     *
     * @return string|boolean Output.
     */
    public function interactiveinitstep2()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        $submit = $this->request->getPost()->get('submit', null);
        if (!$submit) {
            // assign auth key
            $this->view->assign('authid', SecurityUtil::generateAuthKey('«appName()»'));

            // fetch and return the appropriate template
            return $this->view->fetch('«appName()»_init_step2.tpl');
        }

        if(!SecurityUtil::confirmAuthKey()) {
	        $this->registerError(LogUtil::getErrorMsgAuthid())
	             ->redirect(ModUtil::url('Modules', 'admin', 'view'));
        }

    «FOREACH models.variables.vars AS modvar-»
        $formValue = $this->request->getPost()->get('«modvar.name.formatForCode()»', «EXPAND ModVarValForm2SessionDefault FOR modvar»);
        SessionUtil::setVar('«formatForCode(name + '_' + modvar.name)»', $formValue);

«ENDFOREACH-»

        $activate = (bool) $this->request->getPost()->filter('activate', false, FILTER_VALIDATE_BOOLEAN);
        $activate = (!empty($activate)) ? true : false;

        return System::redirect(ModUtil::url('«appName()»', 'init', 'interactiveinitstep3', array('activate' => $activate)));
    }
«ENDDEFINE»

«DEFINE ModVarValForm2SessionDefault FOR Variable»'«value.formatForCode()»'«ENDDEFINE»
«DEFINE ModVarValForm2SessionDefault FOR ListVar»serialize(array(«EXPAND ModVarValForm2SessionDefault FOREACH items.select(item|item.isDefault == true) SEPARATOR ', '»))«ENDDEFINE»
«DEFINE ModVarValForm2SessionDefault FOR ListVarItem»'«name.formatForCode()»'«ENDDEFINE»

«DEFINE FuncInteractiveInitStep3 FOR Application»
    /**
     * Interactive installation procedure step 3
     *
     * @return string|boolean Output.
     */
    public function interactiveinitstep3()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        $activate = (bool) $this->request->getPost()->filter('activate', false, FILTER_VALIDATE_BOOLEAN);

        // assign auth key and activation flag
        $this->view->assign('authid', SecurityUtil::generateAuthKey('Modules'))
                   ->assign('activate', $activate);

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_step3.tpl');
    }
«ENDDEFINE»

«DEFINE FuncInteractiveUpdate FOR Application»
    /**
     * Interactive update procedure
     *
     * @return string|boolean Output.
     */
    function upgrade()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // TODO

        return true;
    }
«ENDDEFINE»

«DEFINE FuncInteractiveDelete FOR Application»
    /**
     * Interactive delete.
     *
     * @return string Output.
     */
    public function uninstall()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // assign auth key
        $this->view->assign('authid', SecurityUtil::generateAuthKey('Modules'));

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_delete.tpl');
    }
«ENDDEFINE»
