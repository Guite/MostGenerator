«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for application installer«ENDREM»
«DEFINE Root FOR Application»
«FILE getAppSourceLibPath(appName()).msconcat("Base/Installer.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Installer base class
 */
class «appName()»_Base_Installer extends Zikula_AbstractInstaller
{
«EXPAND NormalInstall-»
}
«ENDFILE»

«FILE getAppSourceLibPath(appName()).msconcat("Installer.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Installer implementation class
 */
class «appName()»_Installer extends «appName()»_Base_Installer
{
    // feel free to extend the installer here
}
«ENDFILE»

«IF interactiveInstallation == true»
«FILE getAppSourceLibPath(appName()).msconcat("Controller/Base/InteractiveInstaller.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Interactive installer base class
 */
class «appName()»_Controller_Base_Interactiveinstaller extends Zikula_Controller_AbstractInteractiveInstaller
{
«EXPAND InteractiveInstall»
}
«ENDFILE»
«FILE getAppSourceLibPath(appName()).msconcat("Controller/InteractiveInstaller.php")-»
«EXPAND FileHelper::phpFileHeader(this)-»
/**
 * Interactive installer implementation class
 */
class «appName()»_Controller_Interactiveinstaller extends «appName()»_Controller_Base_Interactiveinstaller
{
    // feel free to extend the installer here
}
«ENDFILE»
«EXPAND templates::zclassic::view::Installer::Root»
«ENDIF»
«ENDDEFINE»

«DEFINE NormalInstall FOR Application-»
«EXPAND FuncInit-»
«EXPAND FuncUpdate-»
«EXPAND FuncDelete-»
«EXPAND FuncListEntityClasses-»
«EXPAND FuncCreateDefaultData-»
«EXPAND ProcessEventHandlersImpl-»
«ENDDEFINE»

«DEFINE InteractiveInstall FOR Application-»
«EXPAND templates::zclassic::controller::ControllerHelper::ControllerPostInitialize(false)-»
«EXPAND FuncInteractiveInit-»
«IF needsConfig()»«EXPAND FuncInteractiveInitStep2»«ENDIF»
«EXPAND FuncInteractiveInitStep3-»
«EXPAND FuncInteractiveUpdate-»
«EXPAND FuncInteractiveDelete-»
«ENDDEFINE»

«DEFINE FuncInit FOR Application-»
    /**
     * Install the «appName()» application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        // create all tables from according entity definitions
        try {
            DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %1$s module.', array($this->getName())));
        }
«IF !models.variables.isEmpty-»

        // set up all our vars with initial values
«FOREACH models.variables.vars AS modvar-»
«IF interactiveInstallation == true-»
        $sessionValue = SessionUtil::getVar('«formatForCode(name + '_' + modvar.name)»');
        $this->setVar('«modvar.name.formatForCode()»', (($sessionValue <> false) ? «EXPAND ModVarValFromSession FOR modvar» : «EXPAND ModVarValSession2Mod FOR modvar»));
        SessionUtil::delVar(«formatForCode(name + '_' + modvar.name)»);
«ELSE-»
        $this->setVar('«modvar.name.formatForCode()»', «EXPAND ModVarValDirect2Mod FOR modvar»);
«ENDIF-»
«ENDFOREACH-»
«ENDIF-»

        // create the default data for «appName()»
        $this->createDefaultData();
«IF hasCategorisableEntities()-»

        // add entries to category registry
        $rootcat = CategoryUtil::getCategoryByPath('/__SYSTEM__/Modules/Global');
«FOREACH getCategorisableEntities() AS entity-»
        CategoryRegistryUtil::insertEntry('«appName()»', '«entity.name.formatForCodeCapital()»', 'Main', $rootcat['id']);
«ENDFOREACH-»
«ENDIF-»

        // register persistent event handlers
        $this->registerPersistentEventHandlers();

        // register hook subscriber bundles
        HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());
«REM»TODO see #15
        // register hook provider bundles
        HookUtil::registerProviderBundles($this->version->getHookProviderBundles());
«ENDREM»

        // initialisation successful
        return true;
    }
«ENDDEFINE»


«DEFINE ModVarValFromSession FOR Variable»$sessionValue«ENDDEFINE»
«DEFINE ModVarValFromSession FOR ListVar»serialize($sessionValue)«ENDDEFINE»

«DEFINE ModVarValSession2Mod FOR Variable»'«value»'«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR BoolVar»«IF value == 'true'»true«ELSE»false«ENDIF»«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR IntVar»«value»«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR ListVar»array(«EXPAND ModVarValSession2Mod FOREACH items.select(item|item.^default == true) SEPARATOR ', '»)«ENDDEFINE»
«DEFINE ModVarValSession2Mod FOR ListVarItem»«IF ^default == true»'«name.formatForCode()»'«ENDIF»«ENDDEFINE»

«DEFINE ModVarValDirect2Mod FOR Variable»'«value»'«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR BoolVar»«IF value == 'true'»true«ELSE»false«ENDIF»«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR IntVar»«value»«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR ListVar»array(«EXPAND ModVarValDirect2Mod FOREACH items.select(item|item.^default == true) SEPARATOR ', '»)«ENDDEFINE»
«DEFINE ModVarValDirect2Mod FOR ListVarItem»'«name.formatForCode()»'«ENDDEFINE»


«DEFINE FuncUpdate FOR Application»
    /**
     * Upgrade the «appName()» application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldversion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldversion)
    {
    /*
        // Upgrade dependent on old version number
        switch ($oldversion) {
            case 1.0.0:
                // do something
                // ...
                // update the database schema
                try {
                    DoctrineHelper::updateSchema($this->entityManager, $this->listEntityClasses());
                } catch (Exception $e) {
                    if (System::isDevelopmentMode()) {
                        LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                    }
                    return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %1$s module.', array($this->getName())));
                }
        }
    */

        // update successful
        return true;
    }
«ENDDEFINE»

«DEFINE FuncDelete FOR Application»
    /**
     * Uninstall «appName()».
     *
     * @return boolean True on success, false otherwise.
     */
    public function uninstall()
    {
        // delete stored object workflows
        $result = WorkflowUtil::deleteWorkflowsForModule($this->getName());
        if ($result === false) {
            return LogUtil::registerError($this->__f('An error was encountered while removing stored object workflows for the %1$s module.', array($this->getName())));
        }

        try {
            DoctrineHelper::dropSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %1$s module.', array($this->getName())));
        }

        // unregister persistent event handlers
        EventUtil::unregisterPersistentModuleHandlers('«appName()»');

        // unregister hook subscriber bundles
        HookUtil::unregisterSubscriberBundles($this->version->getHookSubscriberBundles());
«REM»TODO see #15
        // unregister hook provider bundles
        HookUtil::unregisterProviderBundles($this->version->getHookProviderBundles());
«ENDREM»

«IF !models.variables.isEmpty-»
        // remove all module vars
        $this->delVars();

«ENDIF-»
        // deletion successful
        return true;
    }
«ENDDEFINE»

«DEFINE FuncListEntityClasses FOR Application»
    /**
     * Build array with all entity classes for «appName()».
     *
     * @return array list of class names.
     */
    protected function listEntityClasses()
    {
        $classNames = array();
«FOREACH models.entities AS entity-»
        $classNames[] = '«entity.implClassModelEntity()»';
«IF entity.loggable-»
        $classNames[] = '«entity.implClassModel('', 'logEntry')»';
«ENDIF-»
«IF entity.tree == EntityTreeType::CLOSURE-»
        $classNames[] = '«entity.implClassModel('', 'closure')»';
«ENDIF-»
«IF entity.hasTranslatableFields()-»
        $classNames[] = '«entity.implClassModel('', 'translation')»';
«ENDIF-»
«IF entity.metaData-»
        $classNames[] = '«entity.implClassModel('', 'metaData')»';
«ENDIF-»
«IF entity.attributable-»
        $classNames[] = '«entity.implClassModel('', 'attribute')»';
«ENDIF-»
«IF entity.categorisable-»
        $classNames[] = '«entity.implClassModel('', 'category')»';
«ENDIF-»
«ENDFOREACH-»

        return $classNames;
    }
«ENDDEFINE»

«DEFINE FuncCreateDefaultData FOR Application»
    /**
     * Create the default data for «appName()».
     *
     * @return void
     */
    protected function createDefaultData()
    {
        // ensure that tables are cleared
        $this->entityManager->transactional(function($entityManager) {
«FOREACH models.entities AS entity-»
            $entityManager->getRepository('«entity.implClassModelEntity()»')->truncateTable();
«ENDFOREACH-»
«IF getDefaultDataSource().numExampleRows > 0-»

«EXPAND CreateExampleRows(this) FOREACH getDefaultDataSource().entities-»
«ENDIF-»
        });

        // Insertion successful
        return true;
    }
«ENDDEFINE»


«DEFINE ProcessEventHandlersImpl FOR Application»
    /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
«LET appName() AS appName-»
    protected function registerPersistentEventHandlers()
    {
        // core
«LET appName.msconcat('_Listener_Core') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'api.method_not_found', array('«callableClass»', 'apiMethodNotFound'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.preinit', array('«callableClass»', 'preInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'core.postinit', array('«callableClass»', 'postInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'controller.method_not_found', array('«callableClass»', 'controllerMethodNotFound'));
«ENDLET-»

        // installer
«LET appName.msconcat('_Listener_Installer') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.installed', array('«callableClass»', 'moduleInstalled'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.upgraded', array('«callableClass»', 'moduleUpgraded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.module.uninstalled', array('«callableClass»', 'moduleUninstalled'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'installer.subscriberarea.uninstalled', array('«callableClass»', 'subscriberAreaUninstalled'));
«ENDLET-»

        // modules
«LET appName.msconcat('_Listener_ModuleDispatch') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.postloadgeneric', array('«callableClass»', 'postLoadGeneric'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.preexecute', array('«callableClass»', 'preExecute'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.postexecute', array('«callableClass»', 'postExecute'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module_dispatch.custom_classname', array('«callableClass»', 'customClassname'));
«ENDLET-»

        // mailer
«LET appName.msconcat('_Listener_Mailer') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.mailer.api.sendmessage', array('«callableClass»', 'sendMessage'));
«ENDLET-»

        // page
«LET appName.msconcat('_Listener_Page') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'pageutil.addvar_filter', array('«callableClass»', 'pageutilAddvarFilter'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'system.outputfilter', array('«callableClass»', 'systemOutputfilter'));
«ENDLET-»

        // errors
«LET appName.msconcat('_Listener_Errors') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'setup.errorreporting', array('«callableClass»', 'setupErrorReporting'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'systemerror', array('«callableClass»', 'systemError'));
«ENDLET-»

        // theme
«LET appName.msconcat('_Listener_Theme') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.preinit', array('«callableClass»', 'preInit'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.load_config', array('«callableClass»', 'loadConfig'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.prefetch', array('«callableClass»', 'preFetch'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'theme.postfetch', array('«callableClass»', 'postFetch'));
«ENDLET-»

        // view
«LET appName.msconcat('_Listener_View') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'view.init', array('«callableClass»', 'init'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'view.postfetch', array('«callableClass»', 'postFetch'));
«ENDLET-»

        // user login
«LET appName.msconcat('_Listener_UserLogin') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.started', array('«callableClass»', 'started'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.veto', array('«callableClass»', 'veto'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.succeeded', array('«callableClass»', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.login.failed', array('«callableClass»', 'failed'));
«ENDLET-»

        // user logout
«LET appName.msconcat('_Listener_UserLogout') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.logout.succeeded', array('«callableClass»', 'succeeded'));
«ENDLET-»

        // user
«LET appName.msconcat('_Listener_User') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.gettheme', array('«callableClass»', 'getTheme'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.account.delete', array('«callableClass»', 'delete'));
«ENDLET-»

        // registration
«LET appName.msconcat('_Listener_UserRegistration') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.started', array('«callableClass»', 'started'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.succeeded', array('«callableClass»', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.ui.registration.failed', array('«callableClass»', 'failed'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'user.registration.delete', array('«callableClass»', 'delete'));
«ENDLET-»

        // users module
«LET appName.msconcat('_Listener_Users') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.users.config.updated', array('«callableClass»', 'configUpdated'));
«ENDLET-»

        // group
«LET appName.msconcat('_Listener_Group') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.create', array('«callableClass»', 'create'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.update', array('«callableClass»', 'update'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.delete', array('«callableClass»', 'delete'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.adduser', array('«callableClass»', 'addUser'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'group.removeuser', array('«callableClass»', 'removeUser'));
«ENDLET-»

        // special purposes and 3rd party api support
«LET appName.msconcat('_Listener_ThirdParty') AS callableClass-»
        EventUtil::registerPersistentModuleHandler('«appName»', 'get.pending_content', array('«callableClass»', 'pendingContentListener'));
        EventUtil::registerPersistentModuleHandler('«appName»', 'module.content.gettypes', array('«callableClass»', 'contentGetTypes'));
«ENDLET-»
«ENDLET-»
    }
«ENDDEFINE»




«DEFINE FuncInteractiveInit FOR Application»
    /**
     * Interactive installation procedure.
     *
     * @return string|boolean Output.
     */
    public function install()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_interactive.tpl');
    }
«ENDDEFINE»

«DEFINE FuncInteractiveInitStep2 FOR Application»
    /**
     * Interactive installation procedure step 2.
     *
     * @return string|boolean Output.
     */
    public function interactiveinitstep2()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        $submit = $this->request->getPost()->get('submit', null);
        if (!$submit) {
            // assign auth key
            $this->view->assign('authid', SecurityUtil::generateAuthKey('«appName()»'));

            // fetch and return the appropriate template
            return $this->view->fetch('«appName()»_init_step2.tpl');
        }

        if(!SecurityUtil::confirmAuthKey()) {
	        $this->registerError(LogUtil::getErrorMsgAuthid())
	             ->redirect(ModUtil::url('Modules', 'admin', 'view'));
        }

«FOREACH models.variables.vars AS modvar-»
        $formValue = $this->request->getPost()->get('«modvar.name.formatForCode()»', «EXPAND ModVarValForm2SessionDefault FOR modvar»);
        SessionUtil::setVar('«formatForCode(name + '_' + modvar.name)»', $formValue);

«ENDFOREACH-»

        $activate = (bool) $this->request->getPost()->filter('activate', false, FILTER_VALIDATE_BOOLEAN);
        $activate = (!empty($activate)) ? true : false;

        return System::redirect(ModUtil::url('«appName()»', 'init', 'interactiveinitstep3', array('activate' => $activate)));
    }
«ENDDEFINE»

«DEFINE ModVarValForm2SessionDefault FOR Variable»'«value.formatForCode()»'«ENDDEFINE»
«DEFINE ModVarValForm2SessionDefault FOR ListVar»serialize(array(«EXPAND ModVarValForm2SessionDefault FOREACH items.select(item|item.^default == true) SEPARATOR ', '»))«ENDDEFINE»
«DEFINE ModVarValForm2SessionDefault FOR ListVarItem»'«name.formatForCode()»'«ENDDEFINE»

«DEFINE FuncInteractiveInitStep3 FOR Application»
    /**
     * Interactive installation procedure step 3
     *
     * @return string|boolean Output.
     */
    public function interactiveinitstep3()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        $activate = (bool) $this->request->getPost()->filter('activate', false, FILTER_VALIDATE_BOOLEAN);

        // assign auth key and activation flag
        $this->view->assign('authid', SecurityUtil::generateAuthKey('Modules'))
                   ->assign('activate', $activate);

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_step3.tpl');
    }
«ENDDEFINE»

«DEFINE FuncInteractiveUpdate FOR Application»
    /**
     * Interactive update procedure
     *
     * @return string|boolean Output.
     */
    function upgrade()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // TODO

        return true;
    }
«ENDDEFINE»

«DEFINE FuncInteractiveDelete FOR Application»
    /**
     * Interactive delete.
     *
     * @return string Output.
     */
    public function uninstall()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // assign auth key
        $this->view->assign('authid', SecurityUtil::generateAuthKey('Modules'));

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_delete.tpl');
    }
«ENDDEFINE»

«DEFINE CreateExampleRows(Application app) FOR Entity»
«LET name.formatForCode() AS entityName-»
«FOREACH 1.upTo(container.numExampleRows) AS number-»
            $«entityName»«number» = new «implClassModelEntity()»(«EXPAND ExampleRowsConstructorArguments(number)-»);
«ENDFOREACH-»

«FOREACH 1.upTo(container.numExampleRows) AS number-»
«IF isInheriting()-»
«EXPAND ExampleRowAssignment(this, entityName, number) FOREACH parentType().fields.typeSelect(DerivedField).reject(e|e.primaryKey)-»
«ENDIF-»
«EXPAND ExampleRowAssignment(this, entityName, number) FOREACH fields.typeSelect(DerivedField).reject(e|e.primaryKey)-»
«REM»«IF hasTranslatableFields()-»
            $«entityName»«number»->setLocale(ZLanguage::getLanguageCode());
«ENDIF-»«ENDREM»
«ENDFOREACH-»
«''-»
«FOREACH 1.upTo(container.numExampleRows) AS number-»
            $entityManager->persist($«entityName»«number»);
«ENDFOREACH-»
«ENDLET-»
«ENDDEFINE»

«DEFINE ExampleRowsConstructorArgumentsDefault(Boolean hasPreviousArgs, Integer number) FOR Entity-»
«IF hasCompositeKeys()-»
«IF hasPreviousArgs-», «ENDIF-»«FOREACH getPrimaryKeyFields() AS pkField SEPARATOR ', '-»$«pkField.name.formatForCode()»«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE»

«DEFINE ExampleRowsConstructorArguments(Integer number) FOR Entity-»
«IF isIndexByTarget()-»
«LET incoming.typeSelect(JoinRelationship).select(e|e.isIndexed()).get(0) AS indexRelation-»
«LET getRelationAliasName(indexRelation, false) AS sourceAlias-»
«LET indexRelation.getIndexByField() AS indexBy-»
«LET getDerivedFields().selectFirst(e|e.name == indexBy) AS indexByField-»
«IF indexByField.metaType == IntegerField-»«IF indexByField.defaultValue.length > 0-»«indexByField.defaultValue»«ELSE-»«number»«ENDIF-»«ELSE-»«IF indexByField.defaultValue.length > 0-»'«indexByField.defaultValue»'«ELSE-»'«indexByField.name.formatForDisplayCapital()» «number»'«ENDIF-»«ENDIF-», $«sourceAlias.formatForCode()»«number»«EXPAND ExampleRowsConstructorArgumentsDefault(true, number)-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ELSEIF isAggregated()-»
«EXPAND ExampleRowsConstructorArgumentsAggregate(number) FOREACH getAggregators().getAggregatingRelationships() SEPARATOR ', '»«EXPAND ExampleRowsConstructorArgumentsDefault(true, number)-»
«ELSE-»
«EXPAND ExampleRowsConstructorArgumentsDefault(false, number)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE ExampleRowsConstructorArgumentsAggregate(Integer number) FOR OneToManyRelationship-»
«LET source.getAggregateFields().get(0).getAggregateTargetField() AS targetField-»
$«getRelationAliasName(false)»«number», «IF targetField.defaultValue != '' && targetField.defaultValue != '0'-»«targetField.defaultValue»«ELSE-»«number»«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE ExampleRowAssignment(Entity dataEntity, String entityName, Integer number) FOR DerivedField-»
            $«entityName»«number»->set«name.formatForCodeCapital()»(«EXPAND ExampleRowValue(dataEntity, number)-»);
«ENDDEFINE»
«DEFINE ExampleRowAssignment(Entity dataEntity, String entityName, Integer number) FOR IntegerField-»
«IF aggregateFor.length == 0-»
            $«entityName»«number»->set«name.formatForCodeCapital()»(«EXPAND ExampleRowValue(dataEntity, number)-»);
«ENDIF-»
«ENDDEFINE»

«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR DerivedField-»
«error("Error: undefined example value definition for derived field type " + metaType.toString() + " (code 4837264)") -> ""-»
«ENDDEFINE»
«DEFINE ExampleRowValueNumber(Entity dataEntity, Integer number) FOR DerivedField-»«number»«ENDDEFINE»
«DEFINE ExampleRowValueText(Entity dataEntity, Integer number) FOR DerivedField-»
'«entity.name.formatForDisplayCapital()» «name.formatForDisplay()» «number»'«""-»
«ENDDEFINE»
«DEFINE ExampleRowValueTextLength(Entity dataEntity, Integer number, Integer maxLength) FOR DerivedField-»
«IF maxLength >= (entity.name.formatForDisplayCapital().length + 4 + name.formatForDisplay().length)-»
'«dataEntity.name.formatForDisplayCapital()» «name.formatForDisplay()» «number»'«""-»
«ELSEIF !unique && maxLength >= (4 + name.formatForDisplay().length)-»
'«name.formatForDisplay()» «number»'«""-»
«ELSEIF maxLength < 4-»
'«(number+dataEntity.name.length+dataEntity.fields.size)»'«""-»
«ELSE-»
substr('«dataEntity.name.formatForDisplayCapital()» «name.formatForDisplay()»', 0, «(maxLength-2)») . ' «number»'«''-»
«ENDIF-»
«ENDDEFINE»
«DEFINE ExampleRowValueText(Entity dataEntity, Integer number) FOR StringField-»
«EXPAND ExampleRowValueTextLength(dataEntity, number, length)-»
«ENDDEFINE»
«DEFINE ExampleRowValueText(Entity dataEntity, Integer number) FOR TextField-»
«EXPAND ExampleRowValueTextLength(dataEntity, number, length)-»
«ENDDEFINE»
«DEFINE ExampleRowValueText(Entity dataEntity, Integer number) FOR EmailField-»
«EXPAND ExampleRowValueTextLength(dataEntity, number, length)-»
«ENDDEFINE»
«DEFINE ExampleRowValueText(Entity dataEntity, Integer number) FOR UrlField-»
«EXPAND ExampleRowValueTextLength(dataEntity, number, length)-»
«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR BooleanField-»«IF defaultValue == true || defaultValue == "true"»true«ELSE»false«ENDIF-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR IntegerField-»«EXPAND ExampleRowValueNumber(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR DecimalField-»«EXPAND ExampleRowValueNumber(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR StringField-»«EXPAND ExampleRowValueText(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR TextField-»«EXPAND ExampleRowValueText(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR EmailField-»«EXPAND ExampleRowValueText(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR UrlField-»«EXPAND ExampleRowValueText(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR UploadField-»«EXPAND ExampleRowValueText(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR UserField-»«EXPAND ExampleRowValueNumber(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR ArrayField-»«EXPAND ExampleRowValueNumber(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR ObjectField-»«EXPAND ExampleRowValueText(dataEntity, number)-»«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR DatetimeField-»DateTime::createFromFormat('Y-m-d H:i:s', date('Y-m-d H:i:s'))«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR DateField-»DateTime::createFromFormat('Y-m-d', date('Y-m-d'))«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR TimeField-»DateTime::createFromFormat('H:i:s', date('H:i:s'))«ENDDEFINE»
«DEFINE ExampleRowValue(Entity dataEntity, Integer number) FOR FloatField-»«EXPAND ExampleRowValueNumber(dataEntity, number)-»«ENDDEFINE»
