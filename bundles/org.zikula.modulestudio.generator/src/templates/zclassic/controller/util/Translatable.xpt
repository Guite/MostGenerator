«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»start point for the Util class creation«ENDREM»
«DEFINE Root FOR Application»
    «FILE getAppSourceLibPath(appName()).msconcat("Util/Base/Translatable.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND TranslatableFunctionsBase-»«ENDFILE»
    «FILE getAppSourceLibPath(appName()).msconcat("Util/Translatable.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND TranslatableFunctionsImpl-»«ENDFILE»
«ENDDEFINE»

«DEFINE TranslatableFunctionsBase FOR Application-»
/**
 * Utility base class for translatable helper methods.
 */
class «appName()»_Util_Base_Translatable extends Zikula_AbstractBase
{
    /**
     * Return list of translatable fields per entity.
     * These are required to be determined to recognize
     * that they have to be selected from according translation tables.
     */
    public static function getTranslatableFields($objectType)
    {
        $fields = array();
        switch ($objectType) {
«EXPAND TranslatableFieldList FOREACH getTranslatableEntities()-»
        }
        return $fields;
    }

    /**
     * Post-processing method copying all translations to main fields.
     * This ensures easy compatibility to the Forms plugins where it
     * it is not possible yet to define sub arrays in the group attribute.
     */
    public static function prepareEntityForEdit($objectType, $entity)
    {
        if (!$entity) {
            return $entity;
        }

        $fields = self::getTranslatableFields($objectType);
        if (!count($fields)) {
            return $entity;
        }

        if (System::getVar('multilingual') != 1) {
            // Translatable extension did already fetch current translation
            return $entity;
        }

        // at this point we prepare form data to edit multiple translations at once
        $entityData = $entity->toArray();

        // reset values
        foreach ($fields as $field) {
            $entityData[$field['name']] = '';
        }

        $serviceManager = ServiceUtil::getManager();

        // get translations
        $entityClass = '«appName()»_Entity_' . ucwords($objectType) . 'Translation';
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository($entityClass);
        $translations = $repository->findTranslations($entity);

        $supportedLocales = ZLanguage::getInstalledLanguages();
        $lang = ZLanguage::getLanguageCode();
        foreach ($supportedLocales as $locale) {
            foreach ($fields as $field) {
                $entityData[$field['name'] . $locale] = isset($translations[$locale]) ? $translations[$locale][$field['name']] : '';
            }
        }

        return $entityData;
    }

    /**
     * Post-editing method copying all translated fields back to their subarrays.
     * This ensures easy compatibility to the Forms plugins where it
     * it is not possible yet to define sub arrays in the group attribute.
     */
    public static function processEntityAfterEdit($objectType, $entity, $formData)
    {
        $translations = array();
        if (!$formData) {
            return array($formData, $translations);
        }

        $fields = self::getTranslatableFields($objectType);
        if (!count($fields)) {
            return array($formData, $translations);
        }

        $supportedLocales = ZLanguage::getInstalledLanguages();
        $useOnlyCurrentLocale = true;
        if (System::getVar('multilingual') == 1) {
            $useOnlyCurrentLocale = false;
            $lang = ZLanguage::getLanguageCode();
            foreach ($supportedLocales as $locale) {
                $translations[$locale] = array('locale' => $locale, 'fields' => array());
                foreach ($fields as $field) {
                    $translations[$locale]['fields'][$field['name']] = isset($formData[$field['name'] . $locale]) ? $formData[$field['name'] . $locale] : '';
                    unset($formData[$field['name'] . $locale]);
                }
            }
        }
        if ($useOnlyCurrentLocale === true) {
            $locale = ZLanguage::getLanguageCode();
            $translations[$locale] = array('locale' => $locale, 'fields' => array());
            foreach ($fields as $field) {
                $translations[$locale]['fields'][$field['name']] = isset($formData[$field['name'] . $locale]) ? $formData[$field['name'] . $locale] : '';
                unset($formData[$field['name'] . $locale]);
            }
        }
        return array($formData, $translations);
    }
}
«ENDDEFINE»

«DEFINE TranslatableFieldList FOR Entity-»
            case '«name.formatForCode()»':
                $fields = array(
«EXPAND TranslatableFieldDefinition-»
                );
                break;
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR Entity-»
«EXPAND TranslatableFieldDefinition FOREACH getTranslatableFields() SEPARATOR ','»
«IF hasTranslatableSlug()-»,
                    array('name' => 'slug',
                          'default' => '')
«ENDIF-»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR EntityField-»
«REM»error("Error: undefined entity field type " + metaType.toString() + " (code 542324)") -> ""-»«ENDREM»
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR DerivedField-»
                    array('name' => '«name»',
                          'default' => '«IF defaultValue != ''-»«defaultValue»«ELSE-»«name.formatForDisplayCapital()»«ENDIF-»')
«ENDDEFINE»

«DEFINE TranslatableFieldDefinition FOR CalculatedField-»
                    array('name'    => '«name»',
                          'default' => '«name.formatForDisplayCapital()»')«''-»
«ENDDEFINE»

«DEFINE TranslatableFunctionsImpl FOR Application-»
/**
 * Utility implementation class for translatable helper methods.
 */
class «appName()»_Util_Translatable extends «appName()»_Util_Base_Translatable
{
    // feel free to add your own convenience methods here
}
«ENDDEFINE»
