«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»Entry point for upload handler«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND CreateUploadFolders-»
    «FILE getAppSourceLibPath(appName()).msconcat("Base/UploadHandler.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND UploadHandlerBase-»«ENDFILE»
    «FILE getAppSourceLibPath(appName()).msconcat("UploadHandler.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND UploadHandlerImpl-»«ENDFILE»
«ENDDEFINE»

«DEFINE CreateUploadFolders FOR Application-»
«REM»This index.html files will be removed later. At the moment we need them to create according directories.«ENDREM»
    «FILE getAppUploadPath(appName()).msconcat("index.html")»«msUrl()-»«ENDFILE»
«FOREACH getUploadEntities() AS entity-»
«LET entity.nameMultiple.formatForDB().msconcat("/") AS subFolderName-»
    «FILE getAppUploadPath(appName()).msconcat(subFolderName).msconcat("/index.html")»«msUrl()-»«ENDFILE»
«LET entity.getUploadFields() AS uploadFields-»
«IF uploadFields.size > 1-»
«FOREACH uploadFields AS uploadField-»
    «EXPAND UploadFolder(subFolderName.msconcat(uploadField.subFolderPathSegment())) FOR uploadField»
«ENDFOREACH-»
«ELSEIF uploadFields.size > 0-»
    «EXPAND UploadFolder(subFolderName.msconcat(uploadFields.get(0).subFolderPathSegment())) FOR uploadFields.get(0)»
«ENDIF-»
«ENDLET-»
«LET entity.getImageFields() AS uploadFields-»
«IF uploadFields.size > 1-»
«FOREACH uploadFields AS uploadField-»
    «FILE getAppUploadPath(appName()).msconcat(subFolderName).msconcat(uploadField.subFolderPathSegment()).msconcat("/tmb/index.html")»«msUrl()-»«ENDFILE»
«ENDFOREACH-»
«ELSEIF uploadFields.size > 0-»
    «FILE getAppUploadPath(appName()).msconcat(subFolderName).msconcat(uploadFields.get(0).subFolderPathSegment()).msconcat("/tmb/index.html")»«msUrl()-»«ENDFILE»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDFOREACH-»
        }

«ENDDEFINE»


«DEFINE UploadFolder(String folder) FOR UploadField-»
«FILE getAppUploadPath(entity.container.application.appName()).msconcat(folder).msconcat("/index.html")»«msUrl()-»«ENDFILE»
«FILE getAppUploadPath(entity.container.application.appName()).msconcat(folder).msconcat("/.htaccess")»
# generated at «timestamp()» by ModuleStudio «msVersion()» («msUrl()»)
# ----------------------------------------------------------------------
# Purpose of file: give access to upload files treated in this directory
# ----------------------------------------------------------------------
deny from all
<FilesMatch "\.(«allowedExtensions.replaceAll(", ", "|")»)$">
    order allow,deny
    allow from all
</filesmatch>
«ENDFILE»
«ENDDEFINE»


«DEFINE UploadHandlerBase FOR Application-»
/**
 * Upload handler base class.
 */
class «appName()»_Base_UploadHandler
{
    /**
     * @var array List of object types with upload fields.
     */
    private $allowedObjectTypes;

    /**
     * Constructor initialising the supported object types.
     */
    public function __construct()
    {
        $this->allowedObjectTypes = array(«FOREACH getUploadEntities() AS entity SEPARATOR ", "»'«entity.name.formatForCode()»'«ENDFOREACH»);
    }

    /**
     * Process a file upload.
     *
     * @param string $objectType Currently treated entity type.
     * @param string $fileData   Form data array.
     * @param string $fieldName  Name of upload field.
     *
     * @return array Resulting file name and collected meta data.
     */
    public function performFileUpload($objectType, $fileData, $fieldName)
    {
        $result = array('fileName' => '',
                        'metaData' => array());

        if (!in_array($objectType, $this->allowedObjectTypes)) {
            return $result;
        }

        $file = $fileData[$fieldName];
        if ((!is_array($file)) || (is_array($file) && ($file['error'] != '0'))) {
            if (is_array($file)) {
                return $this->handleError($file);
            }
            LogUtil::registerError('No file found (23846)');
            return $result;
        }

        $fileName = $file['name'];
        $extensionarr = explode('.', $fileName);
        $extension = $extensionarr[count($extensionarr) - 1];

        // start extension checks
        $allowedExtensions = array();
        switch ($objectType) {
«FOREACH getUploadEntities() AS entity-»
«LET entity.getUploadFields() AS uploadFields-»
            case '«entity.name.formatForCode()»':
«IF uploadFields.size > 1-»
                            switch ($fieldName) {
«FOREACH uploadFields AS uploadField-»
                                case '«uploadField.name.formatForCode()»':
                                    $allowedExtensions = array('«uploadField.allowedExtensions.replaceAll(", ", "', '")»');
                                    break;
«ENDFOREACH-»
                            }
«ELSE-»
                            $allowedExtensions = array('«uploadFields.get(0).allowedExtensions.replaceAll(", ", "', '")»');
«ENDIF-»
                            break;
«ENDLET-»
«ENDFOREACH-»
        }

        if (!empty($allowedExtensions)) {
            $extensionCheck = in_array($extension, $allowedExtensions);
            if ($extensionCheck === false) {
                // fail silently, this skips this upload field
                return $result;
            }
        }

        $imageTypes = array('gif', 'jpeg', 'jpg', 'png');
        $imgInfo = array();
        $isImage = in_array($extension, $imageTypes);
        if ($isImage) {
            $imgInfo = getimagesize($file['tmp_name']);
            if (!is_array($imgInfo) || !$imgInfo[0] || !$imgInfo[1]) {
                // fail silently, this skips this upload field
                return $result;
            }
        }

        // retrieve the final file name
        $basePath = «appName()»_Util_Controller::getFileBaseFolder($objectType, $fieldName);
        $fileName = $this->determineFileName($objectType, $fieldName, $basePath, $fileName, $extension);

        if (!move_uploaded_file($file['tmp_name'], $basePath . $fileName)) {
            return LogUtil::registerError('Error during moving your file (34352).');
        }

        // collect data to return
        $result['fileName'] = $fileName;
        $meta = array();
        $meta['extension'] = $extension;
        $meta['size'] = filesize($basePath . $fileName);
        $meta['isImage'] = (($isImage) ? true : false);

        if ($isImage && count($imgInfo)) {
            $meta['width'] = $imgInfo[0];
            $meta['height'] = $imgInfo[1];

            if ($imgInfo[1] < $imgInfo[0]) {
                $meta['format'] = 'landscape';
            }
            elseif ($imgInfo[1] > $imgInfo[0]) {
                $meta['format'] = 'portrait';
            }
            else {
                $meta['format'] = 'square';
            }
        }

        $result['metaData'] = $meta;

        return $result;
    }

    /**
     * Determines the final filename for a given input filename.
     *
     * It considers different strategies for computing the result.
     *
     * @param string $objectType Currently treated entity type.
     * @param string $fieldName  Name of upload field.
     * @param string $basePath   Base path for file storage.
     * @param string $fileName   Input file name.
     * @param string $extension  Input file extension.
     *
     * @return string the resulting file name
     */
    protected function determineFileName($objectType, $fieldName, $basePath, $fileName, $extension)
    {
        $backupFileName = $fileName;

        $namingScheme = 0;

        switch ($objectType) {
«FOREACH getUploadEntities() AS entity-»
«LET entity.getUploadFields() AS uploadFields-»
            case '«entity.name.formatForCode()»':
«IF uploadFields.size > 1-»
                            switch ($fieldName) {
«FOREACH uploadFields AS uploadField-»
                                case '«uploadField.name.formatForCode()»':
                                    $namingScheme = «uploadField.namingSchemeAsInt()»;
                                    break;
«ENDFOREACH-»
                            }
«ELSE-»
                            $namingScheme = «uploadFields.get(0).namingSchemeAsInt()»;
«ENDIF-»
                            break;
«ENDLET-»
«ENDFOREACH-»
        }


        $iterIndex = -1;
        do {
            if ($namingScheme == 0) {
                // original file name
                $fileNameCharCount = strlen($fileName);
                for ($y = 0; $y < $fileNameCharCount; $y++) {
                    if (preg_match('/[^0-9A-Za-z_\.]/', $fileName[$y])) {
                        $fileName[$y] = '_';
                    }
                }
                // append incremented number
                if ($iterIndex > 0) {
                    // strip off extension
                    $fileName = str_replace('.' . $extension, '', $backupFileName);
                    // add iterated number
                    $fileName .= (string) ++$iterIndex;
                    // readd extension
                    $fileName .= '.' . $extension;
                }
                else $iterIndex++;
            } else if ($namingScheme == 1) {
                // md5 name
                $fileName = md5(uniqid(mt_rand(), TRUE)) . '.' . $extension;
            } else if ($namingScheme == 2) {
                // prefix with random number
                $fileName = $fieldName . mt_rand(1, 999999) . '.' . $extension;
            }
        }
        while (file_exists($basePath . $fileName)); // repeat until we have a new name

        // return the new file name
        return $fileName;
    }

    /**
     * Error handling helper method.
     *
     * @param array $file File array from $_FILES.
     *
     * @return boolean false
     */
    private function handleError($file)
    {
        $errmsg = '';
        switch ($file['error']) {
            case UPLOAD_ERR_OK: //no error; possible file attack!
                $errmsg = 'Unknown error';
                break;
            case UPLOAD_ERR_INI_SIZE: //uploaded file exceeds the upload_max_filesize directive in php.ini
                $errmsg = 'File too big';
                break;
            case UPLOAD_ERR_FORM_SIZE: //uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the html form
                $errmsg = 'File too big';
                break;
            case UPLOAD_ERR_PARTIAL: //uploaded file was only partially uploaded
                $errmsg = 'File uploaded partially';
                break;
            case UPLOAD_ERR_NO_FILE: //no file was uploaded
                $errmsg = 'No file uploaded';
                break;
            case UPLOAD_ERR_NO_TMP_DIR: //missing a temporary folder
                $errmsg = 'No tmp folder';
                break;
            default: //a default (error, just in case!  :)
                $errmsg = 'Unknown error';
                break;
        }
        return LogUtil::registerError('Error with upload: ' . $errmsg);
    }

    /**
     * Deletes an existing upload file.
     * For images the thumbnails are removed, too.
     *
     * @param string $objectType Currently treated entity type.
     * @param string $objectData Object data array.
     * @param string $fieldName  Name of upload field.
     *
     * @return mixed Array with updated object data on success, else false.
     */
    public function deleteUploadFile($objectType, $objectData, $fieldName)
    {
        if (!in_array($objectType, $this->allowedObjectTypes)) {
            return false;
        }

        if (empty($objectData[$fieldName])) {
            return $objectData;
        }

        // determine file system information
        $basePath = «appName()»_Util_Controller::getFileBaseFolder($objectType, $fieldName);
        $fileName = $objectData[$fieldName];

        // remove original file
        if (!unlink($basePath . $fileName)) {
            false;
        }
        $objectData[$fieldName] = '';
        $objectData[$fieldName . 'Meta'] = array();


        $imageTypes = array('gif', 'jpeg', 'jpg', 'png');
        $fileExtension = FileUtil::getExtension($fileName, false);
        if (!in_array($fileExtension, $imageTypes)) {
            // we are done, so let's return
            return $objectData;
        }

        // get extension again, but including the dot
        $fileExtension = FileUtil::getExtension($fileName, true);
        $thumbFileNameBase = str_replace($fileExtension, '', $fileName) . '_tmb_';
        $thumbFileNameBaseLength = strlen($thumbFileNameBase);

        // remove image thumbnails
        $thumbPath = $basePath . 'tmb/';
        $thumbFiles = FileUtil::getFiles($thumbPath, false, true, null, 'f'); // non-recursive, relative pathes
        foreach ($thumbFiles as $thumbFile) {
            $thumbFileBase = substr($thumbFile, 0, $thumbFileNameBaseLength);
            if ($thumbFileBase != $thumbFileNameBase) {
                // let other thumbnails untouched
                continue;
            }
            unlink($thumbPath . $thumbFile);
        }

        return $objectData;
    }
}
«ENDDEFINE»

«DEFINE UploadHandlerImpl FOR Application-»
/**
 * Upload handler implementation class.
 */
class «appName()»_UploadHandler extends «appName()»_Base_UploadHandler
{
    // feel free to add your upload handler enhancements here
}
«ENDDEFINE»
