«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for interactive installer implementation«ENDREM»
«DEFINE Root FOR Application-»
«EXPAND templates::zclassic::controller::ControllerHelper::ControllerPostInitialize(false)-»
«EXPAND FuncInteractiveInit-»
«IF needsConfig()»«EXPAND FuncInteractiveInitStep2»«ENDIF»
«EXPAND FuncInteractiveInitStep3-»
«EXPAND FuncInteractiveUpdate-»
«EXPAND FuncInteractiveDelete-»
«ENDDEFINE»

«DEFINE FuncInteractiveInit FOR Application»
    /**
     * Interactive installation procedure.
     *
     * @return string|boolean Output.
     */
    public function install()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_interactive.tpl');
    }
«ENDDEFINE»

«DEFINE FuncInteractiveInitStep2 FOR Application»
    /**
     * Interactive installation procedure step 2.
     *
     * @return string|boolean Output.
     */
    public function interactiveinitstep2()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        $submit = $this->request->getPost()->get('submit', null);
        if (!$submit) {
            // fetch and return the appropriate template
            return $this->view->fetch('«appName()»_init_step2.tpl');
        }

        $this->checkCsrfToken();

«FOREACH models.variables.vars AS modvar-»
        $formValue = $this->request->getPost()->get('«modvar.name.formatForCode()»', «EXPAND ModVars::ValForm2SessionDefault FOR modvar»);
        SessionUtil::setVar('«formatForCode(name + '_' + modvar.name)»', $formValue);

«ENDFOREACH-»

        $activate = (bool) $this->request->getPost()->filter('activate', false, FILTER_VALIDATE_BOOLEAN);
        $activate = (!empty($activate)) ? true : false;

        return System::redirect(ModUtil::url('«appName()»', 'init', 'interactiveinitstep3', array('activate' => $activate)));
    }
«ENDDEFINE»

«DEFINE FuncInteractiveInitStep3 FOR Application»
    /**
     * Interactive installation procedure step 3
     *
     * @return string|boolean Output.
     */
    public function interactiveinitstep3()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        $activate = (bool) $this->request->getPost()->filter('activate', false, FILTER_VALIDATE_BOOLEAN);

        // assign activation flag
        $this->view->assign('activate', $activate);

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_step3.tpl');
    }
«ENDDEFINE»

«DEFINE FuncInteractiveUpdate FOR Application»
    /**
     * Interactive update procedure
     *
     * @return string|boolean Output.
     */
    function upgrade()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // TODO

        return true;
    }
«ENDDEFINE»

«DEFINE FuncInteractiveDelete FOR Application»
    /**
     * Interactive delete.
     *
     * @return string Output.
     */
    public function uninstall()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('::', '::', ACCESS_ADMIN));

        // fetch and return the appropriate template
        return $this->view->fetch('«appName()»_init_delete.tpl');
    }
«ENDDEFINE»
