«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«REMEXTENSION org::eclipse::xtend::util::stdlib::io»«ENDREM»

«DEFINE BusinessValidatorBaseImpl(Application app) FOR Entity»

    /**
     * @var «implClassBusinessEntity(false)» The entity class which is treated by this validator.
     */
    protected $entity = null;

    /**
     * Constructor.
     *
     * @param «implClassBusinessEntity(false)» $entity The entity to be validated.
     */
    function __construct(«implClassBusinessEntity(false)» $entity)
    {
        $this->entity = $entity;
    }

«EXPAND checkForUniqueValues(app) FOREACH getUniqueDerivedFields()-»
«IF sluggable && sluggableCanUpdate && sluggableUnique-»
«EXPAND checkForUniqueSlugValues(app)-»
«ENDIF-»

«EXPAND FileHelper::GetterAndSetterMethods('entity', implClassBusinessEntity(false))»
«ENDDEFINE»

«DEFINE checkForUniqueValues(Application app) FOR DerivedField-»

    /**
     * Check for unique values.
     *
     * This method determines if there already exist «entity.nameMultiple.formatForDisplay()» with the same «actualFieldName().formatForDisplay()».
     *
     * @param «fieldTypeAsString()»  $value The «actualFieldName().formatForDisplay()» to check.
     * @param int $excludeid      int    Id of «entity.nameMultiple.formatForDisplay()» to exclude (optional).
     *
     * @return boolean true if the given «actualFieldName().formatForDisplay()» does already exist
     */
    public function checkIf«actualFieldName().formatForCodeCapital()»Exists($value, $excludeid = 0)
    {
        if (empty($value)) {
            return false;
        }

        $objectType = '«entity.name.formatForCode()»';
«EXPAND templates::zclassic::controller::ControllerHelper::instantiateBusinessObject(app.appName(), true, 'validator', entity.name, 'checkIf'.msconcat(actualFieldName().formatForCodeCapital()).msconcat('Exists'))-»

        // TODO: move to «IF entity.isInheriting()»«entity.parentType().baseClassModelTable()»«ELSE»«entity.baseClassModelTable()»«ENDIF»
        $where = 'tbl.«actualFieldName().formatForCode()» = \'' . DataUtil::formatForStore($value) . '\'';
        if ($excludeid > 0) {
            $where .= ' AND tbl.«entity.idField()» != \'' . (int) DataUtil::formatForStore($excludeid) . '\'';
        }
        return $objectCollection->selectCount($where);
    }
«ENDDEFINE»

«DEFINE checkForUniqueSlugValues(Application app) FOR Entity-»
«LET sluggableFieldRealName() AS sluggableFieldRealName-»

    /**
     * Check for unique slug values.
     *
     * This method determines if there already exist «nameMultiple.formatForDisplay()» with the same «sluggableFieldRealName.formatForDisplay()».
     *
     * @param string  $value The «sluggableFieldRealName.formatForDisplay()» to check.
     * @param int $excludeid      int    Id of «nameMultiple.formatForDisplay()» to exclude (optional).
     *
     * @return boolean true if the given «sluggableFieldRealName.formatForDisplay()» does already exist
     */
    public function checkIf«sluggableFieldRealName.formatForCodeCapital()»Exists($value, $excludeid = 0)
    {
        if (empty($value)) {
            return false;
        }

        $objectType = '«name.formatForCode()»';
«EXPAND templates::zclassic::controller::ControllerHelper::instantiateBusinessObject(app.appName(), true, 'validator', name, 'checkIf'.msconcat(sluggableFieldRealName.formatForCodeCapital()).msconcat('Exists'))-»

        // TODO: move to «IF isInheriting()»«parentType().baseClassModelTable()»«ELSE»«baseClassModelTable()»«ENDIF»
        $where = 'tbl.«sluggableFieldRealName» = \'' . DataUtil::formatForStore($value) . '\'';
        if ($excludeid > 0) {
            $where .= ' AND tbl.«idField()» != \'' . (int) DataUtil::formatForStore($excludeid) . '\'';
        }
        return $objectCollection->selectCount($where);
    }
«ENDLET-»
«ENDDEFINE»

