«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine table classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities.reject(e|e.mappedSuperClass)-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
«ENDDEFINE»

«REM»creates a repository class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating repository classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('repository', '').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRepositoryBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('repository', '').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRepositoryImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelRepositoryBaseImpl(Application app) FOR Entity-»

«IF tree != EntityTreeType::NONE-»
use Gedmo\Tree\Entity\Repository\«tree.asConstant().toFirstUpper()»TreeRepository;
«ELSE-»
use Doctrine\ORM\EntityRepository;
«ENDIF-»
use Doctrine\ORM\Query;
«IF hasOptimisticLock() || hasPessimisticReadLock() || hasPessimisticWriteLock()-»
use Doctrine\DBAL\LockMode;
«ENDIF-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for «name.formatForDisplay()» entities.
 */
class «baseClassModel('repository', '')» extends «IF tree != EntityTreeType::NONE-»«tree.asConstant().toFirstUpper()»TreeRepository«ELSE»EntityRepository«ENDIF»
{
    /**
     * @var string The default sorting field/expression.
     */
    protected $defaultSortingField = '«IF hasSortableFields()-»«getSortableFields().get(0).name.formatForCode()»«ELSE-»«getLeadingField().name.formatForCode()»«ENDIF-»';

    /**
     * Retrieves an array with all fields which can be used for sorting instances.
     *
     * @TODO to be refactored
     * @return array
     */
    public function getAllowedSortingFields()
    {
        return array(«EXPAND singleSortingField FOREACH fields SEPARATOR ','»«EXPAND standardSortingFields-»
        );
    }

«EXPAND FileHelper::GetterAndSetterMethods('defaultSortingField', 'string', false, false, '')»

    /**
     * Helper method for truncating the table.
     * Used during installation when inserting default data.
     */
    public function truncateTable()
    {
        $query = $this->getEntityManager()
                 ->createQuery('DELETE «implClassModelEntity()»');
«IF hasPessimisticWriteLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»
        $query->execute();
    }

    /**
     * Select object from the database.
     *
     * @param mixed   $id       The id (or array of ids) to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|«implClassModelEntity()» retrieved data array or «implClassModelEntity()» instance
     */
    public function selectById($id = 0, $asArray = true, $useJoins = true)
    {
        // check id parameter
        if ($id == 0) {
            return LogUtil::registerArgsError();
        }

        $where = '';
        if (is_array($id)) {
            foreach ($id as $fieldName => $fieldValue) {
                if (!empty($where)) {
                    $where .= ' AND ';
                }
                $where .= 'tbl.' . DataUtil::formatForStore($fieldName) . ' = ' . DataUtil::formatForStore($fieldValue);
            }
        } else {
            $where .= 'tbl.id = ' . DataUtil::formatForStore($id);
        }

        $query = $this->_intBaseQuery($where, '', $useJoins);

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_OBJECT);
        $results = $query->execute(array(), $fetchType);
        return $results[0];
    }

«IF hasSluggableFields() && slugUnique-»

    /**
     * Select object by slug field
     *
     * @param string  $slugTitle The slug value
     * @param boolean $asArray   Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins  Whether to include joining related objects (optional) (default=true).
     * @param integer $excludeId Optional id to be excluded (used for unique validation).
     *
     * @return array|«implClassModelEntity()» retrieved data array or «implClassModelEntity()» instance
     */
    public function selectBySlug($slugTitle = '', $asArray = true, $useJoins = true, $excludeId = 0)
    {
        // check input parameter
        if ($slugTitle == '') {
            return LogUtil::registerArgsError();
        }

        $where = 'tbl.slug = ' . DataUtil::formatForStore($slugTitle);
        if ($excludeId > 0) {
            $where .= ' AND tbl.id != ' . DataUtil::formatForStore($excludeId);
        }
        $query = $this->_intBaseQuery($where, '', $useJoins);

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_OBJECT);
        $results = $query->execute(array(), $fetchType);
        return $results[0];
    }
«ENDIF-»

    /**
     * Select with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the object array (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or collection containing retrieved «implClassModelEntity()» instances
     */
    public function selectWhere($where = '', $orderBy = '', $asArray = true, $useJoins = true)
    {
        $query = $this->_intBaseQuery($where, $orderBy, $useJoins);

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_OBJECT);
        return $query->execute(array(), $fetchType);
    }

    /**
     * Select with a given where clause and pagination parameters.
     *
     * @param string $where           The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy         The order-by clause to use when retrieving the object array (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $asArray        Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins       Whether to include joining related objects (optional) (default=true).
     *
     * @return array Array with retrieved data and amount of total records affected by this query.
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $asArray = true, $useJoins = true)
    {
        $query = $this->_intBaseQuery($where, $orderBy, $useJoins);

«REM»IF !(outgoing.typeSelect(OneToManyRelationship).isEmpty
   && outgoing.typeSelect(ManyToManyRelationship).isEmpty
   && incoming.typeSelect(ManyToOneRelationship).isEmpty)-»
        $query = Paginate::getPaginateQuery($query, $currentPage, $resultsPerPage);
«ELSE-»«ENDREM»«''-»
        $query->setFirstResult($currentPage)
              ->setMaxResults($resultsPerPage);
«REM»«ENDIF-»«ENDREM»
        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_OBJECT);
        $result = $query->execute(array(), $fetchType);

        $count = $this->selectCount($where, $useJoins);

        return array($result, $count);
    }
«IF !getUniqueDerivedFields().isEmpty-»

    /**
     * Select count with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the object count (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return integer amount of affected records
     * @TODO fix usage of joins; please remove the first line and test.
     */
    public function selectCount($where = '', $useJoins = true)
    {
        $useJoins = false;

        $selection = 'COUNT(tbl.id) AS num«nameMultiple.formatForCodeCapital()»';
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
           ->from('«implClassModelEntity()»', 'tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }

        if (!empty($where)) {
            $qb->where($where);
        }

        $query = $qb->getQuery();

«IF hasPessimisticReadLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»
        return $query->getSingleScalarResult();
    }
«ENDIF-»

«EXPAND TreeMethods(app)-»

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string  $where    The where clause to use when retrieving the object array (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return Query query instance to be further processed
     */
    protected function _intBaseQuery($where = '', $orderBy = '', $useJoins = true)
    {
        $selection = 'tbl' . (($orderBy == 'RAND()') ? ', rand() AS rand' : '');
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
           ->from('«implClassModelEntity()»', 'tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }

        if (!empty($where)) {
            $qb->where($where);
        }

        // add order by clause
        if (!empty($orderBy)) {
            if ($orderBy == 'RAND()') {
                $qb->orderBy('rand', 'ASC');
            }
            else {
                $qb->add('orderBy', 'tbl.' . $orderBy);
            }
        }

        $query = $qb->getQuery();

// TODO - see http://code.zikula.org/core/ticket/3138
        // use FilterUtil to support generic filtering
        //$fu = new FilterUtil('«container.application.appName()»', $this);

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and add them to the query.
        //$fu->enrichQuery($query);

«IF hasTranslatableFields()-»
        // set the translation query hint
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

«ENDIF-»
«IF hasPessimisticReadLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»

        return $query;
    }
«EXPAND JoinMethods(app)-»
}
«ENDDEFINE»

«DEFINE singleSortingField FOR EntityField»«REM»DUMMY«ENDREM»«ENDDEFINE»
«DEFINE singleSortingField FOR DerivedField»
«LET entity.incoming.typeSelect(JoinRelationship).select(e|formatForDB(e.getSourceFields().get(0)) == name.formatForDB()) AS joins-»
«IF !joins.isEmpty-»
                     '«joins.get(0).source.name.formatForCode()»'«""-»
«ELSE-»
                     '«name.formatForCode()»'«""-»
«ENDIF-»
«ENDLET-»«ENDDEFINE»
«DEFINE singleSortingField FOR CalculatedField»
                     '«name.formatForCode()»'«""-»
«ENDDEFINE»

«DEFINE standardSortingFields FOR Entity»
«REM»will be filled by Advices (Aspect Orientation)«ENDREM»
«ENDDEFINE»

«DEFINE TreeMethods(Application app) FOR Entity-»
«IF tree != EntityTreeType::NONE-»

    /**
     * Select tree of «nameMultiple.formatForCode()».
     *
     * @param integer $rootId   Optional id of root node to use as a branch, defaults to 0 which corresponds to the whole tree.
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function selectTree($rootId = 0, $asArray = true, $useJoins = true)
    {
        if (rootId == 0) {
            // return all trees if no specific one has been asked for
            return $this->selectAllTrees($asArray, $useJoins);
        }

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_OBJECT);
        $result = null;

        // fetch root node
        $rootNode = $this->selectById($rootId, $asArray, $useJoins);

        // fetch children
        $result = $this->children($rootNode);

        // alternatively we could probably select all nodes with root = $rootId

        return array_merge(array($rootNode), $children);
    }

    /**
     * Select all trees at once.
     *
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function selectAllTrees($asArray = true, $useJoins = true)
    {
        $trees = array();

        // get all root nodes
        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_OBJECT);
        $rootNodes = $this->_intBaseQuery('tbl.lvl = 1')->execute(array(), $fetchType, $useJoins);

        foreach ($rootNodes as $rootNode) {
            // fetch children
            $children = $this->children($rootNode);
            $trees[$rootNode->getId()] = array_merge(array($rootNode), $children);
        }

        return $trees;
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE JoinMethods(Application app) FOR Entity-»

    /**
     * Helper method to add join selections.
     *
     * @return String Enhancement for select clause.
     */
    protected function addJoinsToSelection()
    {
        $selection = '«EXPAND AddJoin(false, 'select') FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)-»«EXPAND AddJoin(true, 'select') FOREACH outgoing.typeSelect(JoinRelationship)-»';
        return $selection;
    }

    /**
     * Helper method to add joins to from clause.
     *
     * @param Doctrine_QueryBuilder $qb query builder instance used to create the query.
     *
     * @return String Enhancement for from clause.
     */
    protected function addJoinsToFrom(Doctrine_QueryBuilder $qb)
    {
«EXPAND AddJoin(false, 'from') FOREACH incoming.typeSelect(JoinRelationship).select(e|e.bidirectional)-»
«EXPAND AddJoin(true, 'from') FOREACH outgoing.typeSelect(JoinRelationship)-»
        return $qb;
    }
«ENDDEFINE»

«DEFINE AddJoin(Boolean incoming, String target) FOR JoinRelationship-»
«LET getRelationAliasName(incoming).formatForCodeCapital().toFirstLower() AS relationAliasName-»
«IF target == 'select'-»
, «relationAliasName»«""-»
«ELSEIF target == 'from'-»
        $qb->leftJoin('tbl.«relationAliasName»', '«relationAliasName»');
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRepositoryImpl(Application app) FOR Entity-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for «name.formatForDisplay()» entities.
 */
class «implClassModel('repository', '')» extends «IF isInheriting()»«parentType().implClassModel('repository', '')»«ELSE»«baseClassModel('repository', '')»«ENDIF»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»


«REM»creates a reference table class file for every many-to-many relationship instance«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRefRepository().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefRepositoryBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRefRepository().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefRepositoryImpl(app)»«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ModelRefRepositoryBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefRepository()» extends EntityRepository
{
    public function truncateTable()
    {
        $query = $this->getEntityManager()
            ->createQuery('DELETE «implClassModelRefEntity()»');
«REM»«IF hasPessimisticWriteLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»«ENDREM»
        $query->execute();
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefRepositoryImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «implClassModelRefRepository()» extends «baseClassModelRefRepository()»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»
