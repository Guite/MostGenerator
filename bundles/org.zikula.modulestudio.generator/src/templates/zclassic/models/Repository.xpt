«IMPORT modulestudio»
«REM«IMPORT templates::zclassic::smallstuff»«ENDREM»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«REMEXTENSION org::eclipse::xtend::util::stdlib::io»«ENDREM»

«REM»Entry point for Doctrine table classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities.reject(e|e.mappedSuperClass)-»
«REM»    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»«ENDREM»
«ENDDEFINE»

«REM»creates a repository class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating repository classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('repository', '').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRepositoryBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('repository', '').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRepositoryImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelRepositoryBaseImpl(Application app) FOR Entity-»

«IF tree != EntityTreeType::NONE-»
use Gedmo\Tree\Entity\Repository\«tree.asConstant().toFirstUpper()»TreeRepository;
«ELSE-»
use Doctrine\ORM\EntityRepository;
«ENDIF-»
use Doctrine\ORM\Query;
«IF hasOptimisticLock() || hasPessimisticReadLock() || hasPessimisticWriteLock()-»
use Doctrine\DBAL\LockMode;
«ENDIF-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for «name.formatForDisplay()» entities.
 */
class «baseClassModel('repository', '')» extends «IF tree != EntityTreeType::NONE-»«tree.asConstant().toFirstUpper()»TreeRepository«ELSE-»EntityRepository«ENDIF-»
{
    /**
     * @var string The default sorting field/expression.
     */
    protected $defaultSortingField = '«getLeadingField().name.formatForCode()»';

    /**
     * Retrieves an array with all fields which can be used for sorting instances.
     *
     * @TODO to be refactored
     * @return array
     */
    public function getAllowedSortingFields()
    {
        return array(«EXPAND singleSortingField FOREACH fields SEPARATOR ','»«EXPAND standardSortingFields-»
        );
    }

«EXPAND FileHelper::GetterAndSetterMethods('defaultSortingField', 'string', false, false, '')»

    /**
     * Helper method for truncating the table.
     * Used during installation when inserting default data.
     */
    public function truncateTable()
    {
        $query = $this->getEntityManager()
                 ->createQuery('DELETE «implClassModelEntity()»');
«IF hasPessimisticReadLock() || hasPessimisticWriteLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»
        $query->execute();
    }

    /**
     * Select object from the database.
     *
     * @param integer $id       The id to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|«implClassModelEntity()» retrieved data array or «implClassModelEntity()» instance
     */
    public function selectById($id = 0, $asArray = true, $useJoins = true)
    {
        // check id parameter
        if ($id == 0) {
            return LogUtil::registerArgsError();
        }

        $query = $this->_intBaseQuery('', '', $useJoins)
                  ->where('tbl.«idField()» = ?', $id);

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_RECORD);
        return $query->fetchOne(array(), $fetchType);
    }

«IF sluggable && sluggableUnique-»

    /**
     * Select object by slug field
     *
     * @param string  $slugTitle The slug value
     * @param boolean $asArray   Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins  Whether to include joining related objects (optional) (default=true).
     *
     * @return array|«implClassModelEntity()» retrieved data array or «implClassModelEntity()» instance
     */
    public function selectBySlug($slugTitle = '', $asArray = true, $useJoins = true)
    {
        // check input parameter
        if ($slugTitle == '') {
            return LogUtil::registerArgsError();
        }

        $query = $this->_intBaseQuery('', '', $useJoins)
                  ->where('tbl.«((sluggableFieldAlias != null && sluggableFieldAlias != "") ? sluggableFieldAlias : sluggableFieldName).formatForCode()» = ?', $slugTitle);

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_RECORD);
        return $query->fetchOne(array(), $fetchType);
    }
«ENDIF-»

    /**
     * Select with a given where clause.
     *
     * @param string $where     The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy   The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or collection containing retrieved «implClassModelEntity()» instances
     */
    public function selectWhere($where = '', $orderBy = '', $asArray = true, $useJoins = true)
    {
        $query = $this->_intBaseQuery($where, $orderBy, $useJoins);

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_RECORD);
        return $query->execute(array(), $fetchType);
    }

    /**
     * Select with a given where clause and pagination parameters.
     *
     * @param string $where           The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy         The order-by clause to use when retrieving the object array (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $asArray        Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins       Whether to include joining related objects (optional) (default=true).
     *
     * @return array Array with retrieved data and amount of total records affected by this query.
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $asArray = true, $useJoins = true)
    {
        /*$q = $this->_intBaseQuery($where, $orderBy, $useJoins)
             ->setMaxResults($resultsPerPage);*/
        $pager = new Doctrine_Pager(
              $this->_intBaseQuery($where, $orderBy, $useJoins),
              $currentPage,
              $resultsPerPage
        );

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_RECORD);
        $results = $pager->execute(array(), $fetchType);
        $count = $pager->getNumResults();
        return array($results, $count);
    }
«IF !getUniqueDerivedFields().isEmpty-»

    /**
     * Select count with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the object count (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return integer amount of affected records
     * @TODO fix usage of joins; please remove the first line and test.
     */
    public function selectCount($where = '', $useJoins = true)
    {
        $useJoins = false;

        $selection = 'COUNT(tbl.«idField()») AS num«nameMultiple.formatForCodeCapital()»';
        if ($useJoins === true) {
            $selection = $this->addJoinsToSelection($selection);
        }

        $query = $this->getEntityManager()->createQuery()
            ->select($selection)
            ->from('«implClassModelRecord()» tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($query);
        }

        if (!empty($where)) {
            $query->where($where);
        }
«IF hasPessimisticReadLock() || hasPessimisticWriteLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»
        return $query->fetchOne(array(), Query::HYDRATE_SINGLE_SCALAR);
    }
«ENDIF-»

«REM»Example:
    public function getUsersBugs($userId, $number = 15)
    {
        $dql = "SELECT b, e, r FROM Bug b JOIN b.engineer e JOIN b.reporter r ".
               "WHERE b.status = 'OPEN' AND e.id = ?1 OR r.id = ?1 ORDER BY b.created DESC";

        return $this->getEntityManager()->createQuery($dql)
                             ->setParameter(1, $userId)
                             ->setMaxResults($number)
                             ->getResult();
    }
«ENDREM»

«EXPAND TreeMethods(app)-»

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string  $where    The where clause to use when retrieving the object array (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return Query query instance to be further processed
     */
    protected function _intBaseQuery($where = '', $orderBy = '', $useJoins = true)
    {
        $selection = 'tbl.*' . (($orderBy == 'RAND()') ? ', rand() AS rand' : '');
        if ($useJoins === true) {
            $selection = $this->addJoinsToSelection($selection);
        }

        // create base selection query
        $query = $this->getEntityManager()->createQuery()
            ->select($selection)
            ->from('«implClassModelRecord()» tbl');

        // add join information
        if ($useJoins === true) {
            $this->addJoinsToFrom($query);
        }

        if (!empty($where)) {
            $query->where('tbl.' . $where);
        }

        // use FilterUtil to support generic filtering
        $fu = new FilterUtil('«container.application.appName()»', $this);

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and add them to the query.
        $fu->enrichQuery($query);

        // add order by clause
        if (!empty($orderBy)) {
            if ($orderBy == 'RAND()') {
                $query->orderBy('rand');
            }
            else {
                $query->orderBy('tbl.' . $orderBy);
            }
        }

«IF hasTranslatableFields()-»
        // set the translation query hint
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

«ENDIF-»
«IF hasPessimisticReadLock() || hasPessimisticWriteLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»

        return $query;
    }
«EXPAND JoinMethods(app)-»
}
«ENDDEFINE»

«DEFINE singleSortingField FOR EntityField»«REM»DUMMY«ENDREM»«ENDDEFINE»
«DEFINE singleSortingField FOR DerivedField»
«LET entity.incoming.select(e|formatForDB(e.source.idField()) == name.formatForDB()) AS joins-»
«IF !joins.isEmpty-»
                     '«joins.get(0).source.name.formatForCode()»'«""-»
«ELSE-»
                     '«name.formatForCode()»'«""-»
«ENDIF-»
«ENDLET-»«ENDDEFINE»
«DEFINE singleSortingField FOR CalculatedField»
                     '«name.formatForCode()»'«""-»
«ENDDEFINE»

«DEFINE standardSortingFields FOR Entity»
«REM»will be filled by Advices (Aspect Orientation)«ENDREM»
«ENDDEFINE»

«DEFINE TreeMethods(Application app) FOR Entity-»
«IF tree != EntityTreeType::NONE-»

    /**
     * Select tree of «nameMultiple.formatForCode()».
     *
     * @param integer $rootId   Optional id of root node to use as a branch, defaults to 0 which corresponds to the whole tree.
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function selectTree($rootId = 0, $asArray = false, $useJoins = true)
    {
        // get reference to tree object
        $treeObject = $this->getTree();
        if ($useJoins === true) {
            $treeObject->setBaseQuery($this->_intBaseQuery());
            // note that this query modification can also be used for all node and tree methods (like getAncestors(), getDescendants(), getChildren(), getParent(), and so on)
        }

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_RECORD);
        $result = null;

        // return branch if we have given a certain root
        if ($rootId > 0) {
            $root = $treeObject->fetchRoot($rootId);
            if (!$root) {
                // abort if no root node has been created yet
                return false;
            }
            $result = $treeObject->fetchBranch($root->«idField()», array(), $fetchType);
        }
        else {
            // otherwise return the whole tree
            $result = $treeObject->fetchTree(array(), $fetchType);
        }

        if ($useJoins === true) {
            $treeObject->resetBaseQuery();
        }

        return $result;
    }

    /**
     * Select all trees at once.
     *
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|ArrayCollection retrieved data array or tree node objects.
     */
    public function selectAllTrees($asArray = false, $useJoins = true)
    {
        $trees = array();
        $treeObject = $this->getTree();
        if ($useJoins === true) {
            $treeObject->setBaseQuery($this->_intBaseQuery());
            // note that this query modification can also be used for all node and tree methods (like getAncestors(), getDescendants(), getChildren(), getParent(), and so on)
        }

        $fetchType = (($asArray) ? Query::HYDRATE_ARRAY : Query::HYDRATE_RECORD);

        foreach ($treeObject->fetchRoots() as $rootNode) {
            $options = array('root_id' => $rootNode->root);
            $trees[$rootNode->root] = $treeObject->fetchTree($options, $fetchType);
        }

        if ($useJoins === true) {
            $treeObject->resetBaseQuery();
        }

        return $trees;
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE JoinMethods(Application app) FOR Entity-»

    /**
     * Helper method to add join selections.
     *
     * @param String $selection Input select string to be enhanced.
     */
    protected function addJoinsToSelection($selection)
    {
«IF hasTranslatableFields()-»
        $selection .= ', Translation.*';
«ENDIF-»
        $selection .= '«EXPAND AddJoin(false, 'select') FOREACH incoming.typeSelect(JoinRelationship)-»«EXPAND AddJoin(true, 'select') FOREACH outgoing.typeSelect(JoinRelationship)-»';
        return $selection;
    }

    /**
     * Helper method to add joins to from clause.
     *
     * @param Query $query Reference to query to be enriched.
     */
    protected function addJoinsToFrom(Query $query)
    {
«IF hasTranslatableFields()-»
        $query->leftJoin('tbl.Translation Translation');
«ENDIF-»
«EXPAND AddJoin(false, 'from') FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND AddJoin(true, 'from') FOREACH outgoing.typeSelect(JoinRelationship)-»
    }
«ENDDEFINE»

«DEFINE AddJoin(Boolean incoming, String target) FOR JoinRelationship-»
«LET getRelationAliasName(incoming).formatForCodeCapital() AS relationAliasName-»
«IF target == 'select'-»
, «relationAliasName».*«""-»
«ELSEIF target == 'from'-»
        $query->«joinCommand(incoming)»('tbl.«relationAliasName» «relationAliasName»');
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE RepositoryTableImpl(Application app) FOR Entity-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for «name.formatForDisplay()» entities.
 */
class «implClassModel('repository', '')» extends «IF isInheriting()»«parentType().implClassModel('repository', '')»«ELSE»«baseClassModel('repository', '')»«ENDIF»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»


«REM»creates a reference table class file for every many-to-many relationship instance«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRefRepository().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefRepositoryBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRefRepository().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefRepositoryImpl(app)»«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ModelRefRepositoryBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefRepository()» extends EntityRepository
{
    public function truncateTable()
    {
        $query = $this->getEntityManager()
            ->createQuery('DELETE «implClassModelRefEntity()»');
«IF hasPessimisticReadLock() || hasPessimisticWriteLock()-»
        $query->setLockMode(LockMode::«lockType.asConstant()»);
«ENDIF-»
        $query->execute();
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefRepositoryImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «implClassModelRefRepository()» extends «baseClassModelRefRepository()»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»
