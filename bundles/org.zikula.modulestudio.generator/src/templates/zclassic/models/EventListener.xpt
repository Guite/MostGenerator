«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for entity lifecycle callback methods«ENDREM»
«DEFINE Root FOR Entity-»
«REM»Temporary hack«ENDREM»
«EXPAND stubMethodsForNow-»
«REM»«EXPAND EventListenerMethod FOREACH listeners-»«ENDREM»
«ENDDEFINE»

«DEFINE EventListenerMethod FOR EntityEventListener-»
«error("Error: undefined event listener type " + metaType.toString() + " (code 925724)") -> ""-»
«ENDDEFINE»
«DEFINE EventListenerMethod FOR PreProcess-»
«error("Error: undefined pre process type " + metaType.toString() + " (code 925725)") -> ""-»
«ENDDEFINE»
«DEFINE EventListenerMethod FOR PostProcess-»
«error("Error: undefined post process type " + metaType.toString() + " (code 925726)") -> ""-»
«ENDDEFINE»

«DEFINE stubMethodsForNow FOR Entity-»
«REM»«DEFINE EventListenerMethod FOR PostLoad-»«ENDREM»«""-»

    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @ORM\PostLoad
     * @return void.
     */
    public function postLoadCallback()
    {
        // echo 'loaded a record ...';
«EXPAND PostLoadImpl-»
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PrePersist-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @ORM\PrePersist
     * @return void.
     */
    public function prePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostPersist-»«ENDREM»«""-»
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @ORM\PostPersist
     * @return void.
     */
    public function postPersistCallback()
    {
        // echo 'inserted a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PreRemove-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @ORM\PreRemove
     * @return void.
     */
    public function preRemoveCallback()
    {
/*        // delete workflow for this entity
        $result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('«container.application.appName()»');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostRemove-»«ENDREM»«""-»
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @ORM\PostRemove
     * @return void
     */
    public function postRemoveCallback()
    {
        // echo 'deleted a record ...';
«LET getUploadFields() AS uploadFields-»
«IF !uploadFields.isEmpty-»
        // initialise the upload handler
        $uploadManager = new «container.application.appName()»_UploadHandler();

        $uploadFields = array(«FOREACH uploadFields AS uploadField SEPARATOR ", "»'«uploadField.name.formatForCode()»'«ENDFOREACH»);
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }

            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('«name.formatForCode()»', $this, $uploadField);
        }
«ENDIF-»
«ENDLET-»
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PreUpdate-»«ENDREM»«""-»
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @ORM\PreUpdate
     * @return void.
     */
    public function preUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

«REM»«DEFINE EventListenerMethod FOR PostUpdate-»«ENDREM»«""-»
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @ORM\PostUpdate
     * @return void.
     */
    public function postUpdateCallback()
    {
        // echo 'updated a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»

    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     * @return void.
     */
    public function preSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
    }

    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @ORM\PostPersist
     * @ORM\PostUpdate
     * @return void.
     */
    public function postSaveCallback()
    {
        // echo 'saved a record ...';
    }
«REM»«ENDDEFINE»«ENDREM»«""-»
«ENDDEFINE»


«DEFINE PostLoadImpl FOR Entity-»«REM»FOR PostLoad«ENDREM»
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
«IF !fields.typeSelect(UploadField).isEmpty-»
        $imageTypes = array('gif', 'jpeg', 'jpg', 'png');
«ENDIF-»

    «EXPAND sanitizeForOutput FOREACH fields»
«ENDDEFINE»


«DEFINE sanitizeForOutput FOR EntityField-»
        $this['«name.formatForCode()»'] = ((isset($this['«name.formatForCode()»']) && !empty($this['«name.formatForCode()»'])) ? DataUtil::formatForDisplay($this['«name.formatForCode()»']) : '');
«ENDDEFINE»

«DEFINE sanitizeForOutputHTML FOR EntityField-»
    if ($currentFunc != 'edit') {
        $this['«name.formatForCode()»'] = ((isset($this['«name.formatForCode()»']) && !empty($this['«name.formatForCode()»'])) ? DataUtil::formatForDisplayHTML($this['«name.formatForCode()»']) : '');
    }
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR BooleanField-»
        $this['«name.formatForCode()»'] = (bool) $this['«name.formatForCode()»'];
«ENDDEFINE»
«DEFINE sanitizeForOutput FOR AbstractIntegerField-»
        $this['«name.formatForCode()»'] = (int) ((isset($this['«name.formatForCode()»']) && !empty($this['«name.formatForCode()»'])) ? DataUtil::formatForDisplay($this['«name.formatForCode()»']) : 0);
«ENDDEFINE»
«DEFINE sanitizeForOutput FOR DecimalField-»
        $this['«name.formatForCode()»'] = (float) ((isset($this['«name.formatForCode()»']) && !empty($this['«name.formatForCode()»'])) ? DataUtil::formatForDisplay($this['«name.formatForCode()»']) : 0.00);
«ENDDEFINE»
«DEFINE sanitizeForOutput FOR StringField-»«EXPAND sanitizeForOutputHTML»«ENDDEFINE»
«DEFINE sanitizeForOutput FOR TextField-»«EXPAND sanitizeForOutputHTML»«ENDDEFINE»
«DEFINE sanitizeForOutput FOR EmailField-»
    if ($currentFunc != 'edit') {
«EXPAND sanitizeForOutputHTML-»
    }
«ENDDEFINE»
«DEFINE sanitizeForOutput FOR ArrayField-»
        $this['«name.formatForCode()»'] = ((isset($this['«name.formatForCode()»']) && is_array($this['«name.formatForCode()»'])) ? DataUtil::formatForDisplay($this['«name.formatForCode()»']) : array());
«ENDDEFINE»
«DEFINE sanitizeForOutput FOR UploadField-»
«LET name.formatForCode() AS realName-»
        if (!empty($this['«realName»'])) {
            $basePath = «entity.container.application.appName()»_Util_Controller::getFileBaseFolder('«entity.name.formatForCode()»', '«realName»');
            $fullPath = $basePath .  $this['«realName»'];
            $this['«realName»FullPath'] = $fullPath;
            $this['«realName»FullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff«REM»TODO: remove somewhen«ENDREM»
            if (!isset($this['«realName»Meta']) || !is_array($this['«realName»Meta']) || !count($this['«realName»Meta'])) {
                $extensionarr = explode('.', $this['«realName»']);
                $meta = array();
                $meta['extension'] = $extensionarr[count($extensionarr) - 1];
                $meta['size'] = filesize($fullPath);
                $meta['isImage'] = (in_array($meta['extension'], $imageTypes) ? true : false);

                if ($meta['isImage']) {
                    $imgInfo = getimagesize($fullPath);
                    if (is_array($imgInfo)) {
                        $meta['width'] = $imgInfo[0];
                        $meta['height'] = $imgInfo[1];

                        if ($imgInfo[1] < $imgInfo[0]) {
                            $meta['format'] = 'landscape';
                        }
                        elseif ($imgInfo[1] > $imgInfo[0]) {
                            $meta['format'] = 'portrait';
                        }
                        else {
                            $meta['format'] = 'square';
                        }
                    }
                }

                // assign new meta data
                $this['«realName»Meta'] = $meta;
            }
        }
«ENDLET-»
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR AbstractDateField-»
«ENDDEFINE»

«DEFINE sanitizeForOutput FOR FloatField-»
        $this['«name.formatForCode()»'] = (float) ((isset($this['«name.formatForCode()»']) && !empty($this['«name.formatForCode()»'])) ? DataUtil::formatForDisplay($this['«name.formatForCode()»']) : 0.00);
«ENDDEFINE»



