«IMPORT modulestudio»
«REM«IMPORT templates::zclassic::smallstuff»«ENDREM»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«REMEXTENSION org::eclipse::xtend::util::stdlib::io»«ENDREM»

«REM»Entry point for Doctrine entity classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
    «EXPAND business::Validator::ValidatorWrapper(this) FOREACH models.entities-»
«IF hasTrees()-»
«FOREACH getTreeEntities() AS treeEntity-»
«EXPAND entity::Extensions::ClosureClass FOR treeEntity-»
«ENDFOREACH-»
«ENDDEFINE»

«REM»creates a entity class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating entity classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelEntityBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelEntityImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelEntityBaseImpl(Application app) FOR Entity-»
«EXPAND Imports-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for «name.formatForDisplay()» entities.
 *
«EXPAND entity::Extensions::ClassExtensions-»
 * @ORM\Entity(repositoryClass="«implClassModel('repository', '')»"«IF readOnly-», readOnly=true«ENDIF-»)
«IF indexes.isEmpty-»
 * @ORM\Table(name="«fullEntityName()»")
«ELSE-»
 * @ORM\Table(name="«fullEntityName()»",
«IF hasNormalIndexes()-»
 *     indexes={
«EXPAND Index('Index') FOREACH getNormalIndexes() SEPARATOR ','-»
 *     }«IF hasUniqueIndexes()-»,«ENDIF-»
«ENDIF-»
«IF hasUniqueIndexes()-»
 *     uniqueConstraints={
«EXPAND Index('UniqueConstraint') FOREACH getUniqueIndexes() SEPARATOR ','-»
 *     }
«ENDIF-»
 * )
«ENDIF-»
«REM»TODO: change tracking policy is not per-class, but per-class-hierarchy«ENDREM»
«IF changeTrackingPolicy != EntityChangeTrackingPolicy::DEFERRED_IMPLICIT-»
 * @ORM\ChangeTrackingPolicy("«changeTrackingPolicy.asConstant()»")
«ENDIF-»

 */
class «baseClassModelEntity()» extends Zikula_EntityAccess«IF hasNotifyPolicy()-» implements NotifyPropertyChanged«ENDIF-»
{
«EXPAND EntityInfo-»
}
«ENDDEFINE»

«DEFINE Imports FOR Entity-»
use Doctrine\ORM\Mapping as ORM;
«IF hasCollections()-»
use Doctrine\Common\Collections\ArrayCollection;
«ENDIF-»
«EXPAND entity::Extensions::Imports-»
«IF hasNotifyPolicy()-»
use Doctrine\Common\NotifyPropertyChanged,
    Doctrine\Common\PropertyChangedListener;
«ENDIF-»
«ENDDEFINE»

«DEFINE Index(String indexType) FOR EntityIndex-»
@ORM\«indexType.toFirstUpper()»(name="«name.formatForDB()»", columns={«EXPAND IndexField FOREACH items SEPARATOR ','»})
«ENDDEFINE»
«DEFINE IndexField FOR EntityIndexItem-»"«name.formatForDB()»"«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelEntityImpl(Application app) FOR Entity-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for «name.formatForDisplay()» entities.
 */
class «implClassModelEntity()» extends «IF isInheriting()»«parentType().implClassModelEntity()»«ELSE»«baseClassModelEntity()»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»


«DEFINE EntityInfo FOR Entity-»
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = '«name.formatForCode()-»';

    /**
     * @var string The primary key field name
     */
«REM»TODO support composite keys«ENDREM»
    protected $_idField = '«name.formatForCode()-»';

    /**
     * @var «implClassModel('validator', '')» The validator for this entity
     */
    protected $_validator = null;

    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;
«IF hasNotifyPolicy()-»

    /**
     * @var array List of change notification listeners
     */
    protected $_propertyChangedListeners = array();
«ENDIF-»

«EXPAND entity::Property::PersistentProperty FOREACH fields.typeSelect(DerivedField)»
«EXPAND entity::Extensions::AdditionalProperties-»
«EXPAND entity::Association::Root(false) FOREACH incoming.typeSelect(JoinRelationship)»
«EXPAND entity::Association::Root(true) FOREACH outgoing.typeSelect(JoinRelationship)»

    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->_objectType = '«fullEntityName()»';
        $this->_validator = new «implClassModel('validator', '')»($this);
        $this->_hasUniqueSlug = «IF hasSluggableFields() && slugUnique»true«ELSE»false«ENDIF»;
«EXPAND entity::Association::InitCollections-»
    }

«EXPAND FileHelper::GetterAndSetterMethods('_objectType', 'string', false, '')»
«EXPAND FileHelper::GetterAndSetterMethods('_idField', 'string', false, '')»
«EXPAND FileHelper::GetterAndSetterMethods('_validator', implClassModel('validator', ''), true, 'null')»
«EXPAND FileHelper::GetterAndSetterMethods('_hasUniqueSlug', 'boolean', false, '')»
«IF hasNotifyPolicy()-»

    /**
     * Adds a property change listener.
     *
     * @param PropertyChangedListener $listener The listener to be added
     */
    public function addPropertyChangedListener(PropertyChangedListener $listener)
    {
        $this->_propertyChangedListeners[] = $listener;
    }

    /**
     * Notify all registered listeners about a changed property.
     *
     * @param String $propName Name of property which has been changed
     * @param mixed  $oldValue The old property value
     * @param mixed  $newValue The new property value
     */
    protected function _onPropertyChanged($propName, $oldValue, $newValue)
    {
        if ($this->_propertyChangedListeners) {
            foreach ($this->_propertyChangedListeners as $listener) {
                $listener->propertyChanged($this, $propName, $oldValue, $newValue);
            }
        }
    }
«ENDIF-»
«ENDREM»

«EXPAND entity::Property::FieldAccessor FOREACH fields.typeSelect(DerivedField)»
«EXPAND entity::Extensions::AdditionalAccessors-»
«EXPAND entity::Association::RelationAccessor(false) FOREACH incoming.typeSelect(JoinRelationship)»
«EXPAND entity::Association::RelationAccessor(true) FOREACH outgoing.typeSelect(JoinRelationship)»

«ENDDEFINE»




«REM»
«IF isInheriter()-»
«EXPAND SubClasses-»
«ENDIF-»
«EXPAND SetUpBehaviour»
«ENDREM»



«DEFINE SubClasses FOR Entity-»
«LET getChildRelationsWithAggregation() AS aggregatedChildren-»
«IF !aggregatedChildren.isEmpty-»
        $this->setSubclasses(array(
«EXPAND SubClass FOREACH aggregatedChildren-»
            )
        );
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE SubClass FOR InheritanceRelationship-»
                '«source.name.formatForCode()»' => array('«columnAggregationField.formatForCode()»' => '«source.name.formatForCode()»')
«ENDDEFINE»






«DEFINE OLDCollectionBaseImpl(Application app) FOR Entity»

    /**
     * @var string Optional where clause for selection.
     */
    protected $_where = '';

    /**
     * @var string Optional order clause for selection.
     */
    protected $_orderBy = '';

    /**
     * @var string The default sorting field/expression.
     */
    protected $_defaultSortingField = '«getLeadingField().name.formatForCode()»';


    /**
     * Retrieves an array with all fields which can be used for sorting instances.
     *
     * @return array
     */
    public function get_allowedSortingFields()
    {
        // TODO: to be refactored
        return array(«EXPAND singleSortingField FOREACH fields SEPARATOR ','»«EXPAND standardSortingFields FOR this-»
        );
    }

«EXPAND FileHelper::GetterAndSetterMethods('_where', 'string', false, '')»
«EXPAND FileHelper::GetterAndSetterMethods('_orderBy', 'string', false, '')»
«EXPAND FileHelper::GetterAndSetterMethods('_defaultSortingField', 'string', false, '')»

«ENDDEFINE»

«DEFINE singleSortingField FOR EntityField»«REM»DUMMY«ENDREM»«ENDDEFINE»
«DEFINE singleSortingField FOR DerivedField»
«LET entity.incoming.select(e|formatForDB(e.source.idField()) == name.formatForDB()) AS joins-»
«IF !joins.isEmpty-»
                     '«joins.get(0).source.name.formatForCode()»'«""-»
«ELSE-»
                     '«name.formatForCode()»'«""-»
«ENDIF-»
«ENDLET-»«ENDDEFINE»
«DEFINE singleSortingField FOR CalculatedField»
                     '«name.formatForCode()»'«""-»
«ENDDEFINE»

«DEFINE standardSortingFields FOR Entity»
«REM»will be filled by Advices (Aspect Orientation)«ENDREM»
«ENDDEFINE»



























«REM»creates a reference entity class file for every many-to-many relationship instance«ENDREM»
«REM»TODO: remove all the redundancies below... maybe with the PersistenceTransformer transformation...«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRefEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefEntityBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRefEntity().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefEntityImpl(app)»«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ModelRefEntityBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the reference entity class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefEntity()» extends Doctrine_Entity
{
    /**
     * Set table definition.
     * Define columns, indexes and other information about the table schema.
     *
     * @return void
     */
    public function setTableDefinition()
    {
        $this->setTableName('«app.prefix().msconcat("_").msconcat(source.name.formatForDB()).msconcat("_").msconcat(target.name.formatForDB())»');

        $this->hasColumn('«source.idField()»', 'integer', null, array(
                'type' => 'integer',
                'primary' => true
            )
        );

        $this->hasColumn('«target.idField()»', 'integer', null, array(
                'type' => 'integer',
                'primary' => true
            )
        );
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefEntityImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the reference entity class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «implClassModelRefEntity()» extends «baseClassModelRefEntity()»
{
    // feel free to add your own methods here
}
«ENDDEFINE»










«DEFINE SetUpBehaviour FOR Entity-»
«IF hasTranslatableFields()-»
        // Internationalisation (content in multiple language)
        // See http://code.zikula.org/core/ticket/2401 for possible future support in the Zikula core
        $i18n = new Doctrine_Template_I18n(array(
                'className' => '%CLASS%Translation',
                'fields'    => array('«i18nFields.replaceAll(", ", "', '")»'),
                'type'      => 'string',
                'length'    => 2
            )
        );

        $this->actAs($i18n);
«ENDIF-»

«IF geographical-»
        // Coordinate fields and distance calculation
        // See http://code.zikula.org/core/ticket/2401 for possible future support in the Zikula core
        // $this->actAs('Geographical');

        // Workaround for wrong scaling (Doctrine bug)
        // See http://www.tkstudios.com/2010/04/27/fixing-doctrines-geographical-template-precision/
        $geographical0 = new Doctrine_Template_Geographical(array(
           'latitude' => array(
              'options' => array(
                 'scale' => 7,
              ),
           ),
           'longitude' => array(
              'options' => array(
                 'scale' => 7,
              ),
           ),
        ));
        $this->actAs($geographical0);
«ENDIF-»

«EXPAND ObjectExtensions-»

        /**
         * Event listeners registrations
         */
        $this->addListener(new «implClassModel('listener', '')»());
«ENDDEFINE»

«DEFINE ObjectExtensions FOR Entity»
«REM»will be filled by Advices (Aspect Orientation)«ENDREM»
«ENDDEFINE»






