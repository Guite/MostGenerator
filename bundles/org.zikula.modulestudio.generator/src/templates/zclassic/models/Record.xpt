«IMPORT modulestudio»
«REM«IMPORT templates::zclassic::smallstuff»«ENDREM»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«REMEXTENSION org::eclipse::xtend::util::stdlib::io»«ENDREM»

«REM»Entry point for Doctrine record classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
«ENDDEFINE»

«REM»creates a record class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating record classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRecord().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRecordBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRecord().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRecordImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelRecordBaseImpl(Application app) FOR Entity-»

/**
 * Model class that defines the entity structure and behaviours.
 *
 * This is the base record class for «name.formatForDisplay()» entities.
 */
class «baseClassModelRecord()» extends Doctrine_Record
{
«EXPAND RecordInfo-»
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRecordImpl(Application app) FOR Entity-»

/**
 * Model class that defines the entity structure and behaviours.
 *
 * This is the concrete table class for «name.formatForDisplay()» entities.
 */
class «implClassModelRecord()» extends «IF isInheriting()»«parentType().implClassModelRecord()»«ELSE»«baseClassModelRecord()»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»

«DEFINE RecordInfo FOR Entity-»
    /**
     * Set table definition.
     * Define columns, indexes and other information about the table schema.
     *
     * @return void
     */
    public function setTableDefinition()
    {
«IF isInheriting() && getInheritanceRelation().strategy == InheritancyStrategyType::CONCRETE-»
        // the following method call is needed in
        // concrete inheritance
        parent::setTableDefinition();
«ENDIF-»
«EXPAND record::TableDef::SetTableDefinition-»
«IF isInheriter()-»
«EXPAND record::Relations::SubClasses-»
«ENDIF-»
    }

    /**
     * Record setup.
     * Define relationships and attach behaviours.
     *
     * @return void
     */
    public function setUp()
    {
«EXPAND SetUpImpl-»
    }
«ENDDEFINE»



«DEFINE SetUpImpl FOR Entity-»
«EXPAND record::Relations::SetUpRelations»
«EXPAND record::Behaviour::SetUpBehaviour»
«ENDDEFINE»




«REM»creates a reference record class file for every many-to-many relationship instance«ENDREM»
«REM»TODO: remove all the redundancies below... maybe with the PersistenceTransformer transformation...«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRefRecord().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefRecordBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRefRecord().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefRecordImpl(app)»«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ModelRefRecordBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Model class that defines the entity structure and behaviours.
 *
 * This is the reference record class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefRecord()» extends Doctrine_Record
{
    /**
     * Set table definition.
     * Define columns, indexes and other information about the table schema.
     *
     * @return void
     */
    public function setTableDefinition()
    {
        $this->setTableName('«app.prefix().msconcat("_").msconcat(source.name.formatForDB()).msconcat("_").msconcat(target.name.formatForDB())»');

        $this->hasColumn('«source.idField()»', 'integer', null, array(
                'type' => 'integer',
                'primary' => true
            )
        );

        $this->hasColumn('«target.idField()»', 'integer', null, array(
                'type' => 'integer',
                'primary' => true
            )
        );
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefRecordImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Model class that defines the entity structure and behaviours.
 *
 * This is the reference record class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «implClassModelRefRecord()» extends «baseClassModelRefRecord()»
{
    // feel free to add your own methods here
}
«ENDDEFINE»
