«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«DEFINE Imports FOR Entity-»
use Gedmo\Mapping\Annotation as Gedmo;
«ENDDEFINE»

«REM»Class annotations«ENDREM»
«DEFINE ClassExtensions FOR Entity»
«IF loggable-»
     * @Gedmo\Loggable(logEntryClass="«implClassModel('', 'logEntry')»")
«ENDIF-»
«IF hasTranslatableFields()-»
     * @Gedmo\TranslationEntity(class="«implClassModel('', 'translation')»")
«ENDIF-»
«IF tree != EntityTreeType::NONE-»
     * @Gedmo\Tree(type="«tree.asConstant()»")
«IF tree == EntityTreeType::CLOSURE-»
     * @Gedmo\TreeClosure(class="«implClassModel('', 'closure')»")
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«REM»Column annotations«ENDREM»
«DEFINE ColumnExtensionsDefault FOR DerivedField»
«IF translatable-»
     * @Gedmo\Translatable
«ENDIF-»
«IF sluggablePosition > 0-»
     * @Gedmo\Sluggable(slugField="slug", position=«sluggablePosition»)
«ENDIF-»
«IF sortableGroup-»
     * @Gedmo\SortableGroup
«ENDIF-»
«IF versioned-»
     * @Gedmo\Versioned
«ENDIF-»
«ENDDEFINE»

«DEFINE ColumnExtensions FOR DerivedField»
«EXPAND ColumnExtensionsDefault-»
«ENDDEFINE»
«DEFINE ColumnExtensions FOR AbstractIntegerField»
«EXPAND ColumnExtensionsDefault-»
«IF sortablePosition > 0-»
     * @Gedmo\SortablePosition
«ENDIF-»
«ENDDEFINE»
«DEFINE ColumnExtensions FOR AbstractDateField»
«EXPAND ColumnExtensionsDefault-»
«IF timestampable != EntityTimestampableType::NONE-»
     * @Gedmo\Timestampable(on="«timestampable.asConstant()»"«EXPAND TimestampableDetails-»)
«ENDIF-»
«ENDDEFINE»

«DEFINE TimestampableDetails FOR AbstractDateField»
«IF timestampable == EntityTimestampableType::CHANGE-»
field="«timestampableChangeTriggerField.formatForCode()»"«IF timestampableChangeTriggerValue != null && timestampableChangeTriggerValue != ''-», value="«timestampableChangeTriggerValue.formatForCode()»"«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«REM»Additional column definitions«ENDREM»
«DEFINE AdditionalProperties FOR Entity-»
«IF geographical-»

    /**
     * @ORM\Column(type="decimal", precision=15, scale=10)
     * @var decimal $latitude.
     */
    protected $latitude = 0.00;

    /**
     * @ORM\Column(type="decimal", precision=15, scale=10)
     * @var decimal $longitude.
     */
    protected $longitude = 0.00;
«ENDIF-»
«IF hasSluggableFields()-»

    /**
«IF !getSluggableFields().select(e|e.translatable).isEmpty-»
     * @Gedmo\Translatable
«ENDIF-»
     * @Gedmo\Slug(style="«slugStyle.asConstant()»", separator="«slugSeparator»"«IF !slugUnique-», unique=false«ENDIF-»«IF !slugUpdatable-», updatable=false«ENDIF-»)
     * @ORM\Column(type="string", length=«slugLength»«IF !slugUnique-», unique=false«ENDIF-»)
     * @var string $slug.
     */
    protected $slug;
«ENDIF-»
«IF hasTranslatableFields()-»

    /**
     * @Gedmo\Locale«REM»the same as @Gedmo\Language«ENDREM»
     * @var string $locale.
     */
    private $locale;
«ENDIF-»
«IF tree != EntityTreeType::NONE-»

    /**
     * @Gedmo\TreeLeft
     * @ORM\Column(type="integer")
     * @var integer $lft.
     */
    protected $lft;

    /**
     * @Gedmo\TreeLevel
     * @ORM\Column(type="integer")
     * @var integer $lvl.
     */
    protected $lvl;

    /**
     * @Gedmo\TreeRight
     * @ORM\Column(type="integer")
     * @var integer $rgt.
     */
    protected $rgt;

    /**
     * @Gedmo\TreeRoot
     * @ORM\Column(type="integer", nullable=true)
     * @var integer $root.
     */
    protected $root;

    /**
     * Bidirectional - Many children [«name.formatForDisplay()»] are linked by one parent [«name.formatForDisplay()»] (OWNING SIDE).
     *
     * @Gedmo\TreeParent
     * @ORM\ManyToOne(targetEntity="«implClassModelEntity()»", inversedBy="children")
     * @ORM\JoinColumn(name="parent_id", referencedColumnName="«getPrimaryKeyFields().get(0).name.formatForDisplay()»", onDelete="SET NULL")
     * @var «implClassModelEntity()» $parent.
     */
    protected $parent;

    /**
     * Bidirectional - One parent [«name.formatForDisplay()»] has many children [«name.formatForDisplay()»] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="«implClassModelEntity()»", mappedBy="parent")
     * @ORM\OrderBy({"lft" = "ASC"})
     * @var «implClassModelEntity()» $children.
     */
    protected $children;
«ENDIF-»
«ENDDEFINE»

«DEFINE AdditionalAccessors FOR Entity-»
«IF geographical-»
«EXPAND FileHelper::GetterAndSetterMethods('latitude', 'decimal', false, false, '')-»
«EXPAND FileHelper::GetterAndSetterMethods('longitude', 'decimal', false, false, '')-»
«ENDIF-»
«IF hasSluggableFields()-»
«EXPAND FileHelper::GetterMethod('slug', 'string', false)-»
«ENDIF-»
«IF tree != EntityTreeType::NONE-»
«EXPAND FileHelper::GetterAndSetterMethods('parent', implClassModelEntity(), false, true, 'null')-»
«ENDIF-»
«IF hasTranslatableFields()-»
«EXPAND FileHelper::GetterAndSetterMethods('locale', 'string', false, false, '')-»
«ENDIF-»
«ENDDEFINE»

«REM»Association annotations«ENDREM»
«DEFINE RelationExtensions(Boolean useTarget) FOR JoinRelationship»
«ENDDEFINE»
«DEFINE RelationExtensions(Boolean useTarget) FOR OneToOneRelationship»
«IF versioned-»
     * @Gedmo\Versioned
«ENDIF-»
«ENDDEFINE»
«DEFINE RelationExtensions(Boolean useTarget) FOR ManyToOneRelationship»
«IF useTarget && versioned-»
     * @Gedmo\Versioned
«ENDIF-»
«ENDDEFINE»

«REM»tree closure domain object«ENDREM»
«DEFINE TreeClosureClass(Application app) FOR Entity-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('', 'closure').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND TreeClosureObjectBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('', 'closure').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND TreeClosureObjectImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE TreeClosureObjectBaseImpl(Application app) FOR Entity-»

use Gedmo\Tree\Entity\AbstractClosure;

/**
 * Closure domain object class allowing personal closures.
 *
 * This is the base closure class for «name.formatForDisplay()» entities.
 */
class «baseClassModel('', 'closure')» extends AbstractClosure
{
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE TreeClosureObjectImpl(Application app) FOR Entity-»

/**
 * Closure domain object class allowing personal closures.
 *
 * This is the concrete closure class for «name.formatForDisplay()» entities.
 */
class «implClassModel('', 'closure')» extends «IF isInheriting()»«parentType().implClassModel('', 'closure')»«ELSE»«baseClassModel('', 'closure')»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»

«REM»translatable translation entity«ENDREM»
«DEFINE TranslationClass(Application app) FOR Entity-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('', 'translation').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND TranslationBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('repository', 'translation').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND TranslationRepositoryBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('', 'translation').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND TranslationImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('repository', 'translation').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND TranslationRepositoryImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE TranslationBaseImpl(Application app) FOR Entity-»

use Gedmo\Translatable\Entity\AbstractTranslation;

/**
 * Translation domain object class allowing personal translations.
 *
 * This is the base translation class for «name.formatForDisplay()» entities.
 *
 * @ORM\Entity(repositoryClass="«baseClassModel('repository', 'translation')»")
 * @ORM\Table(name="«fullEntityName()»_translations",
 *     indexes={
 *         @ORM\Index(name="translations_lookup_idx", columns={
 *             "locale", "object_class", "foreign_key"
 *         })
 *     },
 *     uniqueConstraints={
 *         @ORM\UniqueConstraint(name="lookup_unique_idx", columns={
 *             "locale", "object_class", "foreign_key", "field"
 *         })
 *     }
 * )
 */
class «baseClassModel('', 'translation')» extends AbstractTranslation
{
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE TranslationImpl(Application app) FOR Entity-»

/**
 * Translation domain object class allowing personal translations.
 *
 * This is the concrete translation class for «name.formatForDisplay()» entities.
 */
class «implClassModel('', 'translation')» extends «IF isInheriting()»«parentType().implClassModel('', 'translation')»«ELSE»«baseClassModel('', 'translation')»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE TranslationRepositoryBaseImpl(Application app) FOR Entity-»

use Gedmo\Translatable\Entity\Repository\TranslationRepository;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for «name.formatForDisplay()» translation entities.
 */
class «baseClassModel('repository', 'translation')» extends TranslationRepository
{
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE TranslationRepositoryImpl(Application app) FOR Entity-»

use Gedmo\Translatable\Entity\Repository\TranslationRepository;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for «name.formatForDisplay()» translation entities.
 */
class «implClassModel('repository', 'translation')» extends «IF isInheriting()»«parentType().implClassModel('repository', 'translation')»«ELSE»«baseClassModel('repository', 'translation')»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»

«REM»loggable log entry class«ENDREM»
«DEFINE LogEntryClass(Application app) FOR Entity-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModel('', 'closure').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND LogEntryBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModel('', 'closure').asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND LogEntryImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE LogEntryBaseImpl(Application app) FOR Entity-»

use Gedmo\Loggable\Entity\AbstractLogEntry;

/**
 * Log entry object class allowing personal log entries.
 *
 * This is the base log entry class for «name.formatForDisplay()» entities.
 *
 * @ORM\Entity(repositoryClass="«baseClassModel('repository', 'logEntry')»")
 * @ORM\Table(name="«fullEntityName()»_log_entries",
 *     indexes={
 *         @ORM\Index(name="log_class_lookup_idx", columns={"object_class"}),
 *         @ORM\Index(name="log_date_lookup_idx", columns={"logged_at"}),
 *         @ORM\Index(name="log_user_lookup_idx", columns={"username"})
 *     }
 * )
 */
class «baseClassModel('', 'logEntry')» extends AbstractLogEntry
{
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE LogEntryImpl(Application app) FOR Entity-»

/**
 * Log entry object class allowing personal log entries.
 *
 * This is the concrete log entry class for «name.formatForDisplay()» entities.
 */
class «implClassModel('', 'logEntry')» extends «IF isInheriting()»«parentType().implClassModel('', 'logEntry')»«ELSE»«baseClassModel('', 'logEntry')»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE LogEntryRepositoryBaseImpl(Application app) FOR Entity-»

use Gedmo\Loggable\Entity\Repository\LogEntryRepository;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for «name.formatForDisplay()» log entry entities.
 */
class «baseClassModel('repository', 'logEntry')» extends LogEntryRepository
{
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE LogEntryRepositoryImpl(Application app) FOR Entity-»

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for «name.formatForDisplay()» log entry entities.
 */
class «implClassModel('repository', 'logEntry')» extends «IF isInheriting()»«parentType().implClassModel('repository', 'logEntry')»«ELSE»«baseClassModel('repository', 'logEntry')»«ENDIF»
{
    // feel free to add your own methods here
}
«ENDDEFINE»
