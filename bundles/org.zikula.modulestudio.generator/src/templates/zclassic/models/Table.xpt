«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»Entry point for Doctrine table classes«ENDREM»
«DEFINE Root FOR Application-»
    «EXPAND Root(this) FOREACH models.entities-»
    «EXPAND Root(this) FOREACH models.relations.typeSelect(ManyToManyRelationship)-»
«ENDDEFINE»

«REM»creates a table class file for every Entity instance«ENDREM»
«DEFINE Root(Application app) FOR Entity-»
«info("Generating table classes for entity \"" + name.formatForDisplay() + "\"") -> ""-»
«IF !isInheriting()-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelTable().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelTableBaseImpl(app)»«ENDFILE»
«ENDIF-»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelTable().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelTableImpl(app)»«ENDFILE»
«ENDDEFINE»

«REM»base implementation«ENDREM»
«DEFINE ModelTableBaseImpl(Application app) FOR Entity-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the base table class for «name.formatForDisplay()» entities.
 */
class «baseClassModelTable()» extends Doctrine_Table
{
    /**
     * Hook into the constructor process.
     */
    public function construct()
    {
    }

    /**
     * Helper method for truncating the table.
     * Used during installation when inserting default data.
     */
    public function truncateTable()
    {
        $q = Doctrine_Query::create()
            ->delete('«implClassModelRecord()»');
        $q->execute();
    }

    /**
     * Select object from the database.
     *
     * @param integer $id       The id to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance
     */
    public function selectOneItemById($id = 0, $asArray = true, $useJoins = true)
    {
        $q = $this->_intBaseQuery('', '', $useJoins)
                  ->where('tbl.«idField()» = ?', $id);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $q->fetchOne(array(), $fetchType);
    }
«IF sluggable && sluggableUnique-»

    /**
     * Select object by slug field
     *
     * @param string  $slugTitle The slug value
     * @param boolean $asArray   Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins  Whether to include joining related objects (optional) (default=true).
     *
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance
     */
    public function selectOneItemBy«((sluggableFieldAlias != null && sluggableFieldAlias != "") ? sluggableFieldAlias : sluggableFieldName).formatForCodeCapital()»($slugTitle = '', $asArray = true, $useJoins = true)
    {
        $q = $this->_intBaseQuery('', '', $useJoins)
                  ->where('tbl.«((sluggableFieldAlias != null && sluggableFieldAlias != "") ? sluggableFieldAlias : sluggableFieldName).formatForCode()» = ?', $slugTitle);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $q->fetchOne(array(), $fetchType);
    }
«ENDIF-»

    /**
     * Select a collection.
     *
     * @param string $where     The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy   The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|Doctrine_Collection retrieved data array or collection containing retrieved Doctrine_Record instances
     */
    public function selectCollection($where = '', $orderBy = '', $asArray = true, $useJoins = true)
    {
        $q = $this->_intBaseQuery($where, $orderBy, $useJoins);
        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $q->execute(array(), $fetchType);
    }

    /**
     * Select with a given where clause.
     *
     * @param string $where           The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy         The order-by clause to use when retrieving the object array (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $asArray        Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins       Whether to include joining related objects (optional) (default=true).
     *
     * @return array Array with retrieved data and amount of total records affected by this query.
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $asArray = true, $useJoins = true)
    {
        $pager = new Doctrine_Pager(
              $this->_intBaseQuery($where, $orderBy, $useJoins),
              $currentPage,
              $resultsPerPage
        );
        /* TODO: see http://www.doctrine-project.org/projects/orm/1.2/docs/manual/utilities/en */
        //$pager->setCountQuery($query);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        $results = $pager->execute(array(), $fetchType);
        $count = $pager->getNumResults();
        return array($results, $count);
    }
«IF nestedSet-»

    /**
     * Select tree of «nameMultiple.formatForCode()».
     *
«IF nestedSetHasManyRoots-»
     * @param integer $rootId   Optional id of root node to use as a branch, defaults to 0 which corresponds to the whole tree.
«ENDIF-»
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array|Doctrine_Doctrine_Tree_NestedSet retrieved data array or tree objects containing retrieved Doctrine_Node_NestedSet instances.
     */
    public function selectTree(«IF nestedSetHasManyRoots-»$rootId = 0, «ENDIF»$asArray = false, $useJoins = true)
    {
        // get reference to tree object
        $treeObject = $this->getTree();
        if ($useJoins === true) {
            $treeObject->setBaseQuery($this->_intBaseQuery());
            // note that this query modification can also be used for all node and tree methods (like getAncestors(), getDescendants(), getChildren(), getParent(), and so on)
        }

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        $result = null;

«IF nestedSetHasManyRoots-»
        // return branch if we have given a certain root
        if ($rootId > 0) {
            $root = $treeObject->fetchRoot($rootId);
            if (!$root) {
                // abort if no root node has been created yet
                return false;
            }
            $result = $treeObject->fetchBranch($root->«idField()», array(), $fetchType);
        }
        else {
            // otherwise return the whole tree
            $result = $treeObject->fetchTree(array(), $fetchType);
        }
«ELSE-»
        // return the whole tree
        $result = $treeObject->fetchTree(array(), $fetchType);
«ENDIF-»

        if ($useJoins === true) {
            $treeObject->resetBaseQuery();
        }

        return $result;
    }

«IF nestedSetHasManyRoots-»

    /**
     * Select all trees at once.
     *
     * @param boolean $asArray  Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return array list of retrieved data arrays or tree objects containing retrieved Doctrine_Node_NestedSet instances.
     */
    public function selectAllTrees($asArray = false, $useJoins = true)
    {
        $trees = array();
        $treeObject = $this->getTree();
        if ($useJoins === true) {
            $treeObject->setBaseQuery($this->_intBaseQuery());
            // note that this query modification can also be used for all node and tree methods (like getAncestors(), getDescendants(), getChildren(), getParent(), and so on)
        }

        $rootColumnName = $treeObject->getAttribute('rootColumnName');
        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);

        foreach ($treeObject->fetchRoots() as $rootNode) {
            $options = array('root_id' => $rootNode->$rootColumnName);
            $trees[$rootNode->$rootColumnName] = $treeObject->fetchTree($options, $fetchType);
        }

        if ($useJoins === true) {
            $treeObject->resetBaseQuery();
        }

        return $trees;
    }
«ENDIF-»
«ENDIF-»

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string  $where    The where clause to use when retrieving the object array (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return Doctrine_Query query instance to be further processed
     */
    protected function _intBaseQuery($where = '', $orderBy = '', $useJoins = true)
    {
        $selection = 'tbl.*' . (($orderBy == 'RAND()') ? ', RANDOM() rand' : '');
        if ($useJoins === true) {
            $selection = $this->addJoinsToSelection($selection);
        }

        // create base selection query
        $q = Doctrine_Query::create()
            ->select($selection)
            ->from('«implClassModelRecord()» tbl');

        // add join information
        if ($useJoins === true) {
            $this->addJoinsToFrom($q);
        }

        if (!empty($where)) {
            $q->where('tbl.' . $where);
        }

        // use FilterUtil to support generic filtering
        $fu = new FilterUtil('«container.application.appName()»', $this);

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and add them to the query.
        $fu->enrichQuery($q);

        // add order by clause
        if (!empty($orderBy)) {
            if ($orderBy == 'RAND()') {
                $q->orderBy('rand');
            }
            else {
«IF i18n-»
                // HACK FOR I18n behavior
                $sortParts = explode(' ', $orderBy);
                $sortField = $sortParts[0];
                if (in_array($sortField, array('«i18nFields.replaceAll(", ", "', '")»'))) {
                    $q->leftJoin('tbl.Translation tblt')
                          ->orderBy('tblt.' . $orderBy);
                }
                else {
                    $q->orderBy('tbl.' . $orderBy);
                }
«ELSE-»
                $q->orderBy('tbl.' . $orderBy);
«ENDIF-»
            }
        }
        return $q;
    }

    /**
     * Helper method to add join selections.
     *
     * @param String $selection Input select string to be enhanced.
     */
    protected function addJoinsToSelection($selection)
    {
        $selection .= '«EXPAND AddJoin(false, 'select') FOREACH incoming.typeSelect(JoinRelationship)-»«EXPAND AddJoin(true, 'select') FOREACH outgoing.typeSelect(JoinRelationship)-»';
        return $selection;
    }

    /**
     * Helper method to add joins to from clause.
     *
     * @param Doctrine_Query $q Reference to query to be enriched.
     */
    protected function addJoinsToFrom(Doctrine_Query $q)
    {
«EXPAND AddJoin(false, 'from') FOREACH incoming.typeSelect(JoinRelationship)-»
«EXPAND AddJoin(true, 'from') FOREACH outgoing.typeSelect(JoinRelationship)-»
    }
}
«ENDDEFINE»

«DEFINE AddJoin(Boolean incoming, String target) FOR JoinRelationship-»
«LET getRelationAliasName(incoming).formatForCodeCapital() AS relationAliasName-»
«IF target == 'select'-»
, «relationAliasName».*«""-»
«ELSEIF target == 'from'-»
        $q->«joinCommand(incoming)»('tbl.«relationAliasName» «relationAliasName»');
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelTableImpl(Application app) FOR Entity-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 *
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the concrete table class for «name.formatForDisplay()» entities.
 */
class «implClassModelTable()» extends «IF isInheriting()»«parentType().implClassModelTable()»«ELSE»«baseClassModelTable()»«ENDIF»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»


«REM»creates a reference table class file for every many-to-many relationship instance«ENDREM»
«DEFINE Root(Application app) FOR ManyToManyRelationship-»
    «FILE getAppSourcePath(app.appName()).msconcat(baseClassModelRefTable().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefTableBaseImpl(app)»«ENDFILE»
    «FILE getAppSourcePath(app.appName()).msconcat(implClassModelRefTable().asFile())»«EXPAND FileHelper::phpFileHeader(app)»«EXPAND ModelRefTableImpl(app)»«ENDFILE»
«ENDDEFINE»


«REM»base implementation«ENDREM»
«DEFINE ModelRefTableBaseImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 *
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the base table class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «baseClassModelRefTable()» extends Doctrine_Table
{
    public function truncateTable()
    {
        $q = Doctrine_Query::create()
            ->delete('«implClassModelRefRecord()»');
        $q->execute();
    }
}
«ENDDEFINE»

«REM»concrete implementation stub«ENDREM»
«DEFINE ModelRefTableImpl(Application app) FOR ManyToManyRelationship-»

/**
 * Doctrine_Table class used to implement own special entity methods.
 *
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the concrete table class for the many to many relationship
 * between «source.name.formatForDisplay()» and «target.name.formatForDisplay()» entities.
 */
class «implClassModelRefTable()» extends «baseClassModelRefTable()»
{
    // feel free to add your own methods here, like for example reusable DQL queries
}
«ENDDEFINE»
