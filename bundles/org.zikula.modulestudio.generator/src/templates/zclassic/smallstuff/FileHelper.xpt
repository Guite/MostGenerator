«IMPORT modulestudio»
«EXTENSION extensions::Utils»
«EXTENSION extensions::ClassUtils»

«DEFINE phpFileNoHeader(Application app) FOR Object-»
<?php
«ENDDEFINE»

«DEFINE phpFileHeader(Application app) FOR Object-»
<?php
/**
 * «app.name».
 *
 * @copyright «app.author»
 * @link http://zikula.org
 * @license «app.license»
 * @package «app.name»
 * @author «app.author».
 * @url «IF app.url != ""»«app.url»«ELSE»«msUrl()»«ENDIF»
 * @version Generated by ModuleStudio «msVersion()» («msUrl()») at «timestamp()».
 */

«ENDDEFINE»

«DEFINE msWeblink FOR Application-»
<p style="text-align: center">
    Powered by <a href="«msUrl()-»" title="Get the MOST out of Zikula!">ModuleStudio «msVersion()-»</a>
</p>
«ENDDEFINE»


«DEFINE GetterAndSetterMethods(String name, String type, Boolean isMany, Boolean useHint, String init) FOR Object-»
«EXPAND GetterMethod(name, type, isMany)»
«EXPAND SetterMethod(name, type, isMany, useHint, init)»
«ENDDEFINE»

«DEFINE GetterMethod(String name, String type, Boolean isMany) FOR Object-»
    /**
     * Get «name.formatForDisplay()».
     *
     * @return «type»«IF type.toLowerCase() != 'array' && isMany-»[]«ENDIF-»
     */
    public function get«name.toFirstUpper()»()
    {
        return $this->«name»;
    }
«ENDDEFINE»

«DEFINE SetterMethod(String name, String type, Boolean isMany, Boolean useHint, String init) FOR Object-»
    /**
     * Set «name.formatForDisplay()».
     *
     * @param «type»«IF type.toLowerCase() != 'array' && isMany-»[]«ENDIF-» $«name».
     *
     * @return void
     */
    public function set«name.toFirstUpper()»(«IF useHint-»«type» «ENDIF-»$p«name.toFirstUpper()»«IF init != ''-» = «init»«ENDIF-»)
    {
«EXPAND SetterMethodImpl(name, type)-»
    }
«ENDDEFINE»

«DEFINE SetterMethodImpl(String name, String type) FOR Object-»
        $this->«name» = $p«name.toFirstUpper()»;
«ENDDEFINE»


«DEFINE SetterMethodImpl(String name, String type) FOR DerivedField-»
        if ($p«name.toFirstUpper()» != $this->«name.formatForCode()») {
«IF entity.hasNotifyPolicy()-»
            $this->_onPropertyChanged('«name.formatForCode()»', $this->«name.formatForCode()», $p«name.toFirstUpper()»);
«ENDIF-»
            $this->«name» = $p«name.toFirstUpper()»;
        }
«ENDDEFINE»
