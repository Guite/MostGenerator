«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»


«DEFINE Root FOR Application»
    «FILE getAppSourceLibPath(appName()).msconcat("Base/Version.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND AppInfoBase»«ENDFILE»
    «FILE getAppSourceLibPath(appName()).msconcat("Version.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND AppInfoImpl»«ENDFILE»
«ENDDEFINE»

«DEFINE AppInfoBase FOR Application-»
/**
 * Version information base class.
 */
class «appName()»_Base_Version extends Zikula_AbstractVersion
{
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version']              = '«version»';
        // the displayed name of the module
        $meta['displayname']          = $this->__('«appName()»');
        // the module description
        $meta['description']          = $this->__('«IF documentation != null && documentation != ""»«documentation.replaceAll("'", "\\'")»«ELSE»«appName()» module generated by ModuleStudio «msVersion()».«ENDIF»');
        //! url version of name, should be in lowercase without space
        $meta['url']                  = $this->__('«appName().formatForDB()»');
        // minimum core requirement
        $meta['core_min']       = '1.3.0'; // requires minimum 1.3.0 or later

        // define special capabilities of this module
        $meta['capabilities'] = array(
                          HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)
/*,
                          HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #115
                          'authentication' => array('version' => '1.0'),
                          'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
                          'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
*/
        );

        // permission schema
«EXPAND PermissionSchema-»

«IF hasUploads() || !referredApplications.isEmpty-»
        // module dependencies
        $meta['dependencies'] = array(
«IF hasUploads()-»
                    array('modname'    => 'Thumbnail',
                          'minversion' => '1.2.1',
                          'maxversion' => '',
                          'status'     => ModUtil::DEPENDENCY_RECOMMENDED)«IF !referredApplications.isEmpty-»,«ENDIF»
«ENDIF-»
«EXPAND AppDependency FOREACH referredApplications SEPARATOR ','-»
        );
«ENDIF-»

        return $meta;
    }

    /**
     * Define hook subscriber«REM» and provider (TODO see #115)«ENDREM» bundles.
     */
    protected function setupHookBundles()
    {
«REM»we register one hook subscriber bundle foreach entity type«ENDREM»«""-»
«LET name.formatForDB() AS appName-»
«FOREACH models.entities AS entity-»
«LET entity.nameMultiple.formatForDB() AS areaName»
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'modulehook_area.«appName».«areaName»', 'ui', __('«entity.nameMultiple.formatForDisplayCapital()»'));
«REM»   $bundle->addType('hook type', 'event name triggered by *this* module');«ENDREM»«""-»
        // Display hook for view/display templates.
        $bundle->addType('ui.view', '«appName».hook.«areaName».ui.view');
        // Display hook for create/edit forms.
        $bundle->addType('ui.edit', '«appName».hook.«areaName».ui.edit');
        // Display hook for delete dialogues (generally not used).
        $bundle->addType('ui.delete', '«appName».hook.«areaName».ui.delete');
        // Validate input from an ui create/edit form.
        $bundle->addType('validate.edit', '«appName».hook.«areaName».validate.edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addType('validate.delete', '«appName».hook.«areaName».validate.delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addType('process.edit', '«appName».hook.«areaName».process.edit');
        // Perform the final delete actions for a ui form.
        $bundle->addType('process.delete', '«appName».hook.«areaName».process.delete');
        // A filter applied to the given area.
        $bundle->addType('ui.filter', '«appName».filterhook.«areaName»');
«ENDLET-»
        $this->registerHookSubscriberBundle($bundle);
«ENDFOREACH-»
«ENDLET-»

«REM»TODO see #115
Example for name of provider area: modulehook_area.comments.general

        $bundle = new Zikula_Version_HookProviderBundle($this->name, 'modulehook_area.ratings.rating', 'ui', $this->__('Ratings Hook Poviders'));
        $bundle->addHook('hookhandler.ratings.ui.view', 'ui.view', 'Ratings_Hooks', 'uiview', 'ratings.service');
        // add other hooks as needed
        $this->registerHookProviderBundle($bundle);

        //... repeat as many times as necessary
«ENDREM»
    }
}

«ENDDEFINE»

«DEFINE AppInfoImpl FOR Application-»
/**
 * Version information implementation class.
 */
class «appName()»_Version extends «appName()»_Base_Version
{
    // custom enhancements can go here
}
«ENDDEFINE»

«DEFINE PermissionSchema FOR Application»
«REM»will be filled by Advices«ENDREM»
«ENDDEFINE»


«DEFINE AppDependency FOR Application-»
                    array('modname'    => '«appName()»',
                          'minversion' => '«version»',
                          'maxversion' => '',
                          'status'     => ModUtil::DEPENDENCY_REQUIRED«REM»TODO: ModUtil::RECOMMENDED, ModUtil::CONFLICTS«ENDREM»)
«ENDDEFINE»
