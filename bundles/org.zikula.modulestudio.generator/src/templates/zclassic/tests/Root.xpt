«IMPORT modulestudio»
«IMPORT templates::zclassic::smallstuff»
«EXTENSION extensions::Utils»

«REM»Entry point for module unit test classes«ENDREM»
«DEFINE Root FOR Application-»
    «FILE getAppTestsPath(appName()).msconcat("lib/index.html")»«msUrl()-»«ENDFILE»
    «FILE getAppTestsPath(appName()).msconcat("bootstrap.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND Bootstrap»«ENDFILE»
    «FILE getAppTestsPath(appName()).msconcat("AllTests.php")»«EXPAND FileHelper::phpFileHeader(this)»«EXPAND TestSuite»«ENDFILE»
    «FILE getAppTestsPath(appName()).msconcat("ClassLoader.php")»«EXPAND FileHelper::phpFileNoHeader(this)»«EXPAND ClassLoader»«ENDFILE»
    «FILE getAppTestsPath(appName()).msconcat("ClassLoaderTests.php")»«EXPAND FileHelper::phpFileNoHeader(this)»«EXPAND ClassLoaderTests»«ENDFILE»
«ENDDEFINE»

«DEFINE Bootstrap FOR Application-»
error_reporting(E_ALL | E_STRICT);
require_once 'PHPUnit/TextUI/TestRunner.php';

// Manually load the autoloader
require_once __DIR__ . '/ClassLoader.php';

// Loader for all Zikula namespace
$classLoader = new ClassLoader('Zikula', __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'lib', '_');
$classLoader->register();

$classLoader = new ClassLoader('Tests', __DIR__ . DIRECTORY_SEPARATOR . 'lib', '_');
$classLoader->register();

«ENDDEFINE»

«DEFINE ClassLoader FOR Application-»
/**
 * Copyright 2010 Zikula Foundation
 *
 * This work is contributed to the Zikula Foundation under one or more
 * Contributor Agreements and licensed to You under the following license:
 *
 * @license GNU/LGPLv3 (or at your option, any later version).
 * @package Zikula_Common
 *
 * Please see the NOTICE file distributed with this source code for further
 * information regarding copyright and licensing.
 */

/**
 * ClassLoader for PHP 5.3 namespaces and PEAR style class name mapping.
 *
 * Example for PHP 5.3+ namespace Zikula\Core
 * $autoloader = new ClassLoader('Zikula\Core');
 * $autoloader->register();
 *
 * Example for based PEAR class to directory mappings like Form_Plugin => Form/Plugin.php
 * This creates a fake namespace Form
 * $autoloader = new ClassLoader('Form', '/path/to/Form);
 * $autoloader->setSeparator('_');
 * $autoloader->register();
 *
 * Namespaces can also be empty also for classes in the root namespace by defining ''.
 */
class ClassLoader
{
    /**
     * Namespace.
     *
     * @var string
     */
    protected $namespace;

    /**
     * Path.
     *
     * @var string
     */
    protected $path;

    /**
     * Namespace separator.
     *
     * @var string valid characters \ and _.
     */
    protected $separator;

    /**
     * Constructor.
     *
     * @param string $namespace Default ''.
     * @param string $path      Deafult ''.
     * @param string $separator Default \.
     */
    public function __construct($namespace = '', $path = '', $separator = '\\')
    {
        $this->namespace = $namespace;
        $this->path = $path;
        $this->separator = $separator;
    }

    // getters

    /**
     * Returns the registered include path.
     *
     * @return string $path
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Return the namespace separator.
     *
     * @return string $separator
     */
    public function getSeparator()
    {
        return $this->separator;
    }

    // setters

    /**
     * Set the include path for this namespace.
     *
     * @param string $path Search path for this namespace.
     *
     * @return void
     */
    public function setPath($path)
    {
        $this->path = $path;
    }

    /**
     * Set the namespace of this autoloader.
     *
     * @param string $separator The namespace separator, (e.g. \ or _).
     *
     * @return void
     */
    public function setSeparator($separator)
    {
        $this->separator = $separator;
    }

    /**
     * Register this autloader in the SPL autoload stack.
     *
     * @return void
     */
    public function register()
    {
        \spl_autoload_register(array($this, 'autoload'));
    }

    /**
     * Register this autloader in the SPL autoload stack.
     *
     * @return void
     */
    public function unregister()
    {
        \spl_autoload_unregister(array($this, 'autoload'));
    }

    /**
     * Get class include path.
     *
     * @param string $class The class name to autoload.
     *
     * @return string|boolean $file Path or boolean false if this loader does apply.
     */
    public function getClassIncludePath($class)
    {
        // execute only if namespace is empty or namespace+separator matches in the beginning of the requested class:
        // namespace 'Foo', class Another\BadFoo\Class should not match (namespace somewhere in path).
        // namespace 'Foo', class Foo\BadFoo\Class should match and become Foo/BadFoo/Class.php
        // namespace 'Bar', separator '_', class Bar should match and become Bar.php
        // namespace 'Bar', separator '_', class Bar_Exception should match and become Bar\Exception.php
        if (empty($this->namespace) || !empty($this->namespace) && \strpos($class, $this->namespace.$this->separator) === 0 || $class == $this->namespace) {
            // replace namespace separator with \DIRECTORY_SEPARATOR
            $file = \str_replace($this->separator, \DIRECTORY_SEPARATOR, $class);

            // Translate PEAR style classnames to paths
            $file = \str_replace('_', \DIRECTORY_SEPARATOR, $file) . '.php';

            // add include path if required
            if (!empty($this->path)) {
                $file = $this->path . \DIRECTORY_SEPARATOR . $file;
            }

            return $file;
        }

        return false;
    }

    /**
     * Autoloader.
     *
     * @param string $class Class to load.
     *
     * @return void
     */
    public function autoload($class)
    {
        $file = $this->getClassIncludePath($class);
        // Handle empty namespace autoloaders where we must test for file_exists().
        //if (!$file || (empty($this->namespace) && \file_exists($file) === false)) {
        if (!$file) {
            return;
        }

        // Must test in case get_class() will try to load the class to test if the class is available.
        // If it doesnt exist we'll get an E_NOTICE (drak).
        if (\file_exists($file)) {
            include $file;
        }
    }

}

«ENDDEFINE»

«DEFINE ClassLoaderTests FOR Application-»
require_once __DIR__ . '/bootstrap.php';

class ClassLoaderTest extends PHPUnit_Framework_TestCase
{
    private $classLoader;

    public function setUp()
    {
        parent::setUp();
        $this->classLoader = new ClassLoader('test');
    }

    public function tearDown()
    {
        $this->classLoader = null;
        parent::tearDown();
    }

    public function test__construct()
    {
        $this->assertAttributeEquals('test', 'namespace', $this->classLoader);
        $this->assertAttributeEquals('', 'path', $this->classLoader);
        $this->assertAttributeEquals('\\', 'separator', $this->classLoader);
    }
	// getters

    public function testGetPath()
    {
    	$autoloader = new ClassLoader('', 'testpath');
    	$this->assertEquals('testpath', $autoloader->getPath());
    }

    public function testGetSeparator()
    {
        $this->assertEquals('\\', $this->classLoader->getSeparator());
    }

    // setters

    public function testSetPath()
    {
    	$this->classLoader->setPath('nottestpath');
        $this->assertAttributeEquals('nottestpath', 'path', $this->classLoader);
    }

    public function testSetSeparator()
    {
        $this->classLoader->setSeparator('_');
        $this->assertAttributeEquals('_', 'separator', $this->classLoader);
    }

    // methods

    public function testUnregister()
    {
    	$this->classLoader->unregister();
    	$this->assertTrue(true);
    }


    public function testRegister()
    {
        $this->classLoader->register();
        $this->assertTrue(true);
    }

    /**
     * @dataProvider providerGetClassIncludePath
     */
    public function testGetClassIncludePath($namespace, $path, $separator, $class, $expected)
    {
        $autoloader = new ClassLoader($namespace, $path);
        $autoloader->setSeparator($separator);
        $this->assertEquals($expected, $autoloader->getClassIncludePath($class));
    }

    public function providerGetClassIncludePath()
    {
        // $namespace, $path, $separator, $class, $expectedResult
        // used to construct new ClassLoader($namespace, $path).
        // which then tries to load $class, and we should get back $expectedResult
        return array(
            array(
                // Normal namespace
                'Zikula\Core',
                '',
                '\\',
                'Zikula\Core\Test',
                'Zikula' . DIRECTORY_SEPARATOR . 'Core' . DIRECTORY_SEPARATOR . 'Test.php'),
            array(
                // Normal namespace, requesting class from different namespace
                'Zikula\Core',
                'lib',
                '\\',
                'NamespaceTotallyDoesntExist\Core\Test',
                false),
            array(
                // namespace doesnt exist
                'Zikula',
                'lib',
                '\\',
                'NamespaceTotallyDoesntExist\Zikula\Core',
                false),
            array(
                // namespace doesnt exist
                'Zikula',
                'lib',
                '\\',
                'NamespaceTotallyDoesntExist\Zikula',
                false),
            array(
                // test with paths
                'Zikula',
                'lib',
                '\\',
                'Zikula\Test',
                'lib' . DIRECTORY_SEPARATOR . 'Zikula' . DIRECTORY_SEPARATOR . 'Test.php'),
            array(
                // test with namespace in classname
                'Zikula',
                'lib',
                '\\',
                'Extensions\A00Zikula',
                false),
            array(
                'Extensions',
                '',
                '\\',
                'Extensions\A00Zikula\Init',
                'Extensions' . DIRECTORY_SEPARATOR . 'A00Zikula' . DIRECTORY_SEPARATOR . 'Init.php'),
            array(
                'Zikula',
                'lib',
                '\\',
                'Zikula\Zikula\Test',
                'lib' . DIRECTORY_SEPARATOR . 'Zikula' . DIRECTORY_SEPARATOR . 'Zikula' . DIRECTORY_SEPARATOR . 'Test.php'),
            array(
                'Zikula\Core',
                'lib',
                '\\',
                'TotallyDoesntExistsFakeFakeFake',
                false),
            array(
                // Test PEAR style libraries
                'Dwoo',
                'lib/vendor',
                '_',
                'Dwoo_Template',
                'lib' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'Dwoo' . DIRECTORY_SEPARATOR . 'Template.php'),
            array(
                // Test PEAR style libraries
                'Dwoo',
                'lib',
                '_',
                'Dwoo_Template_Compiler',
                'lib' . DIRECTORY_SEPARATOR . 'Dwoo' . DIRECTORY_SEPARATOR . 'Template' . DIRECTORY_SEPARATOR . 'Compiler.php'),
            array(
                // interesting case for PEAR style libs where top class lives outside the containing folder e.g.
                // Foo.php
                // Dwoo/Exception.php
                'Foo',
                'lib',
                '_',
                'Foo',
                'lib' . DIRECTORY_SEPARATOR . 'Foo.php'),
            array(
                // PEAR style libs
                'Foo',
                'lib',
                '_',
                'Foo_Exception',
                'lib' . DIRECTORY_SEPARATOR . 'Foo/Exception.php'),
            array(
                '',
                '',
                '\\',
                'Zikula',
                'Zikula.php'),
            array(
                '',
                '',
                '_',
                'Zikula_Test',
                'Zikula/Test.php'),
            array(
                '',
                '',
                '\\',
                'Zikula\Core\Test',
                'Zikula' . DIRECTORY_SEPARATOR . 'Core' . DIRECTORY_SEPARATOR . 'Test.php'));
    }

}

«ENDDEFINE»
«DEFINE TestSuite FOR Application-»
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'AllTests::main');
}

require_once dirname(__FILE__) . '/bootstrap.php';
//require_once dirname(__FILE__) . '/lib/i18n/AllTests.php';
//require_once dirname(__FILE__) . '/lib/FileSystem/AllTests.php';

class AllTests
{
    public static function main()
    {
        PHPUnit_TextUI_TestRunner::run(self::suite());
    }

    public static function suite()
    {
        $suite = new PHPUnit_Framework_TestSuite('«appName()» - All Tests');
//        $suite->addTest(I18nAllTests::suite());
//        $suite->addTest(I18nAllTests::suite());
        return $suite;
    }
}

if (PHPUnit_MAIN_METHOD == 'AllTests::main') {
    AllTests::main();
}
«ENDDEFINE»
