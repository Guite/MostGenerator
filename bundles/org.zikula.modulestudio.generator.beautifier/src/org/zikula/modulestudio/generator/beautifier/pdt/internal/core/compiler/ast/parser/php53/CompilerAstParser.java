// ----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jul 26 11:48:29 CEST 2010
// ----------------------------------------------------

package org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.parser.php53;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.dltk.ast.ASTNode;
import org.eclipse.dltk.ast.Modifiers;
import org.eclipse.dltk.ast.declarations.ModuleDeclaration;
import org.eclipse.dltk.ast.declarations.TypeDeclaration;
import org.eclipse.dltk.ast.expressions.Expression;
import org.eclipse.dltk.ast.expressions.ExpressionConstants;
import org.eclipse.dltk.ast.references.ConstantReference;
import org.eclipse.dltk.ast.references.SimpleReference;
import org.eclipse.dltk.ast.references.TypeReference;
import org.eclipse.dltk.ast.references.VariableReference;
import org.eclipse.dltk.ast.statements.Block;
import org.eclipse.dltk.ast.statements.Statement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.ast.scanner.php53.PhpAstLexer;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ASTError;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ASTNodeKinds;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ArrayCreation;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ArrayElement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ArrayVariableReference;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.Assignment;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.BackTickExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.BreakStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.CastExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.CatchClause;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ClassDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ClassInstanceCreation;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.CloneExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ConditionalExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ConstantDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ContinueStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.DeclareStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.DoStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.EchoStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.EmptyStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ExpressionStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.FieldAccess;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ForEachStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ForStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.FormalParameter;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.FormalParameterByReference;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.FullyQualifiedReference;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.GlobalStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.GotoLabel;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.GotoStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.IfStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.IgnoreError;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.Include;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.InfixExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.InstanceOfExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.InterfaceDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.LambdaFunctionDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ListVariable;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.NamespaceDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.NamespaceReference;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PHPCallArgumentsList;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PHPCallExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PHPDocBlock;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PHPFieldDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PHPMethodDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PHPModuleDeclaration;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PHPVariableKind;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PostfixExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.PrefixExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.Quote;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ReferenceExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ReflectionArrayVariableReference;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ReflectionCallExpression;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ReflectionStaticMethodInvocation;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ReflectionVariableReference;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ReturnStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.Scalar;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.StaticConstantAccess;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.StaticFieldAccess;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.StaticMethodInvocation;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.StaticStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.SwitchCase;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.SwitchStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.ThrowStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.TryStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.UnaryOperation;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.UsePart;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.UseStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.VarComment;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.nodes.WhileStatement;
import org.zikula.modulestudio.generator.beautifier.pdt.internal.core.compiler.ast.parser.AbstractASTParser;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Mon Jul 26 11:48:29 CEST 2010
 */
public class CompilerAstParser extends AbstractASTParser {

    /** Default constructor. */
    public CompilerAstParser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public CompilerAstParser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\u01ad\000\002\003\003\000\002\002\004\000\002\004"
            + "\003\000\002\005\003\000\002\005\005\000\002\010\004"
            + "\000\002\010\002\000\002\011\004\000\002\011\002\000"
            + "\002\012\003\000\002\012\003\000\002\012\003\000\002"
            + "\012\006\000\002\174\002\000\002\012\006\000\002\175"
            + "\002\000\002\012\005\000\002\012\005\000\002\012\004"
            + "\000\002\126\003\000\002\126\003\000\002\127\005\000"
            + "\002\127\003\000\002\007\005\000\002\007\003\000\002"
            + "\006\003\000\002\006\005\000\002\006\004\000\002\006"
            + "\006\000\002\014\004\000\002\014\002\000\002\015\003"
            + "\000\002\015\003\000\002\015\003\000\002\015\006\000"
            + "\002\013\003\000\002\013\004\000\002\013\003\000\002"
            + "\013\003\000\002\176\002\000\002\016\006\000\002\016"
            + "\011\000\002\016\014\000\002\016\007\000\002\016\011"
            + "\000\002\016\013\000\002\016\007\000\002\016\004\000"
            + "\002\016\005\000\002\016\004\000\002\016\005\000\002"
            + "\016\004\000\002\016\005\000\002\016\005\000\002\016"
            + "\005\000\002\016\005\000\002\016\005\000\002\016\003"
            + "\000\002\016\004\000\002\016\005\000\002\016\007\000"
            + "\002\016\012\000\002\016\012\000\002\016\007\000\002"
            + "\016\003\000\002\016\017\000\002\016\005\000\002\016"
            + "\005\000\002\137\003\000\002\137\002\000\002\140\003"
            + "\000\002\140\004\000\002\141\012\000\002\017\003\000"
            + "\002\017\005\000\002\020\003\000\002\021\003\000\002"
            + "\021\005\000\002\134\003\000\002\135\003\000\002\054"
            + "\002\000\002\054\003\000\002\177\002\000\002\200\002"
            + "\000\002\142\013\000\002\172\005\000\002\172\003\000"
            + "\002\201\002\000\002\202\002\000\002\143\014\000\002"
            + "\203\002\000\002\143\011\000\002\173\003\000\002\173"
            + "\002\000\002\171\003\000\002\171\003\000\002\144\003"
            + "\000\002\144\004\000\002\144\004\000\002\145\002\000"
            + "\002\145\004\000\002\145\004\000\002\115\003\000\002"
            + "\116\002\000\002\116\004\000\002\146\002\000\002\146"
            + "\004\000\002\147\003\000\002\147\005\000\002\147\005"
            + "\000\002\147\003\000\002\022\002\000\002\022\004\000"
            + "\002\023\003\000\002\023\004\000\002\024\003\000\002"
            + "\024\006\000\002\025\003\000\002\025\006\000\002\026"
            + "\003\000\002\026\006\000\002\027\005\000\002\027\007"
            + "\000\002\030\005\000\002\030\006\000\002\030\006\000"
            + "\002\030\007\000\002\031\002\000\002\031\007\000\002"
            + "\031\006\000\002\032\003\000\002\032\003\000\002\033"
            + "\003\000\002\033\006\000\002\034\002\000\002\034\010"
            + "\000\002\035\002\000\002\035\011\000\002\036\002\000"
            + "\002\036\004\000\002\037\002\000\002\037\005\000\002"
            + "\040\003\000\002\040\002\000\002\043\003\000\002\043"
            + "\005\000\002\043\004\000\002\044\004\000\002\044\005"
            + "\000\002\044\006\000\002\044\007\000\002\044\003\000"
            + "\002\150\002\000\002\150\003\000\002\150\003\000\002"
            + "\045\003\000\002\045\002\000\002\046\003\000\002\046"
            + "\003\000\002\046\004\000\002\046\005\000\002\046\005"
            + "\000\002\046\006\000\002\047\005\000\002\047\003\000"
            + "\002\050\003\000\002\050\004\000\002\050\006\000\002"
            + "\051\005\000\002\051\007\000\002\051\003\000\002\051"
            + "\005\000\002\052\004\000\002\052\002\000\002\053\005"
            + "\000\002\053\004\000\002\204\002\000\002\205\002\000"
            + "\002\053\014\000\002\053\003\000\002\053\003\000\002"
            + "\125\003\000\002\125\005\000\002\125\002\000\002\152"
            + "\003\000\002\152\003\000\002\124\002\000\002\124\003"
            + "\000\002\130\003\000\002\130\004\000\002\131\003\000"
            + "\002\131\003\000\002\131\003\000\002\131\003\000\002"
            + "\131\003\000\002\131\003\000\002\122\005\000\002\122"
            + "\007\000\002\122\003\000\002\122\005\000\002\123\007"
            + "\000\002\123\006\000\002\055\005\000\002\055\003\000"
            + "\002\056\002\000\002\056\003\000\002\057\005\000\002"
            + "\057\003\000\002\060\010\000\002\060\005\000\002\060"
            + "\006\000\002\060\010\000\002\060\005\000\002\060\004"
            + "\000\002\060\005\000\002\060\005\000\002\060\005\000"
            + "\002\060\005\000\002\060\005\000\002\060\005\000\002"
            + "\060\005\000\002\060\005\000\002\060\005\000\002\060"
            + "\005\000\002\060\005\000\002\060\004\000\002\060\004"
            + "\000\002\060\004\000\002\060\004\000\002\060\005\000"
            + "\002\060\005\000\002\060\005\000\002\060\005\000\002"
            + "\060\005\000\002\060\005\000\002\060\005\000\002\060"
            + "\005\000\002\060\005\000\002\060\005\000\002\060\005"
            + "\000\002\060\005\000\002\060\005\000\002\060\005\000"
            + "\002\060\005\000\002\060\005\000\002\060\004\000\002"
            + "\060\004\000\002\060\004\000\002\060\004\000\002\060"
            + "\005\000\002\060\005\000\002\060\005\000\002\060\005"
            + "\000\002\060\005\000\002\060\005\000\002\060\005\000"
            + "\002\060\005\000\002\060\005\000\002\060\005\000\002"
            + "\060\007\000\002\060\006\000\002\060\003\000\002\060"
            + "\004\000\002\060\004\000\002\060\004\000\002\060\004"
            + "\000\002\060\004\000\002\060\004\000\002\060\004\000"
            + "\002\060\004\000\002\060\004\000\002\060\003\000\002"
            + "\060\006\000\002\060\005\000\002\060\004\000\002\060"
            + "\013\000\002\041\002\000\002\041\006\000\002\042\005"
            + "\000\002\042\006\000\002\042\003\000\002\042\004\000"
            + "\002\061\006\000\002\061\010\000\002\061\007\000\002"
            + "\061\010\000\002\061\010\000\002\061\010\000\002\061"
            + "\010\000\002\061\006\000\002\120\003\000\002\120\003"
            + "\000\002\120\005\000\002\120\004\000\002\121\003\000"
            + "\002\121\005\000\002\121\004\000\002\161\003\000\002"
            + "\161\003\000\002\163\006\000\002\163\003\000\002\165"
            + "\004\000\002\165\002\000\002\166\004\000\002\062\002"
            + "\000\002\062\004\000\002\062\005\000\002\110\002\000"
            + "\002\110\003\000\002\110\003\000\002\063\002\000\002"
            + "\063\005\000\002\064\003\000\002\064\003\000\002\064"
            + "\003\000\002\064\003\000\002\064\003\000\002\064\003"
            + "\000\002\064\003\000\002\064\003\000\002\064\003\000"
            + "\002\064\003\000\002\064\005\000\002\064\004\000\002"
            + "\065\003\000\002\065\003\000\002\065\005\000\002\065"
            + "\004\000\002\065\004\000\002\065\004\000\002\065\006"
            + "\000\002\065\003\000\002\167\005\000\002\066\003\000"
            + "\002\066\003\000\002\066\003\000\002\066\005\000\002"
            + "\066\004\000\002\066\003\000\002\066\005\000\002\066"
            + "\005\000\002\067\002\000\002\067\004\000\002\070\002"
            + "\000\002\070\003\000\002\071\007\000\002\071\005\000"
            + "\002\071\005\000\002\071\003\000\002\072\003\000\002"
            + "\072\003\000\002\151\003\000\002\117\003\000\002\153"
            + "\003\000\002\136\007\000\002\136\003\000\002\133\004"
            + "\000\002\133\002\000\002\155\005\000\002\132\005\000"
            + "\002\132\002\000\002\154\003\000\002\154\004\000\002"
            + "\156\005\000\002\156\005\000\002\074\003\000\002\170"
            + "\003\000\002\170\003\000\002\164\003\000\002\164\004"
            + "\000\002\164\003\000\002\073\006\000\002\073\006\000"
            + "\002\073\003\000\002\075\003\000\002\075\006\000\002"
            + "\076\002\000\002\076\003\000\002\077\003\000\002\077"
            + "\003\000\002\100\006\000\002\100\006\000\002\100\003"
            + "\000\002\101\003\000\002\101\005\000\002\102\003\000"
            + "\002\102\004\000\002\103\005\000\002\103\003\000\002"
            + "\104\003\000\002\104\006\000\002\104\002\000\002\105"
            + "\002\000\002\105\004\000\002\106\007\000\002\106\005"
            + "\000\002\106\005\000\002\106\003\000\002\106\010\000"
            + "\002\106\006\000\002\106\006\000\002\106\004\000\002"
            + "\107\004\000\002\107\004\000\002\107\003\000\002\107"
            + "\004\000\002\111\003\000\002\111\006\000\002\111\005"
            + "\000\002\111\005\000\002\111\010\000\002\111\005\000"
            + "\002\112\003\000\002\112\003\000\002\112\003\000\002"
            + "\113\006\000\002\113\006\000\002\113\004\000\002\113"
            + "\004\000\002\113\006\000\002\113\004\000\002\113\004"
            + "\000\002\157\003\000\002\157\005\000\002\162\005\000"
            + "\002\162\005\000\002\160\003\000\002\114\003\000\002"
            + "\114\003" });

    /** Access to production table. */
    @Override
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\u0352\000\002\001\ufffb\000\004\002\u0354\001\002\000"
            + "\236\003\122\004\152\005\163\006\113\007\011\010\033"
            + "\011\053\012\062\014\077\016\133\017\126\020\123\021"
            + "\044\023\032\025\105\027\164\032\107\034\135\040\055"
            + "\041\125\042\074\043\112\044\142\045\143\046\040\050"
            + "\161\051\025\052\012\054\101\055\154\056\030\057\057"
            + "\060\031\061\150\066\157\067\013\070\020\071\045\072"
            + "\046\073\140\074\006\075\034\101\065\104\102\105\134"
            + "\106\041\107\067\110\023\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\141\010\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\042\212\063\213\016\217\156\222\104\223\116\224"
            + "\060\001\001\000\002\001\ufec5\000\004\217\u0351\001\002"
            + "\000\002\001\uffc1\000\002\001\ufec8\000\006\012\u0346\222"
            + "\u0347\001\002\000\004\217\u0331\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\002\001\ufef2"
            + "\000\004\060\u0240\001\002\000\070\031\u0106\120\376\121"
            + "\u010d\122\367\140\373\141\u032f\142\370\143\u0108\144\371"
            + "\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153"
            + "\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\001\002\000"
            + "\002\001\ufec3\000\002\001\ufe8f\000\036\124\351\125\354"
            + "\126\352\127\362\130\355\131\363\132\357\133\361\134"
            + "\353\135\350\136\356\137\360\171\ufea0\172\ufea0\001\ufea2"
            + "\000\002\001\uffdb\000\002\001\uffb2\000\014\010\170\016"
            + "\u0198\107\u0325\111\056\217\u0196\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\004\217\u031e"
            + "\001\002\000\002\001\uffa1\000\004\217\u030d\001\002\000"
            + "\004\221\u030c\001\ufe56\000\014\012\062\015\u030a\076\231"
            + "\077\u0253\100\u0252\001\002\000\146\004\152\006\113\007"
            + "\011\010\170\011\053\012\062\016\133\032\107\043\245"
            + "\055\154\056\030\066\157\067\013\070\020\071\045\072"
            + "\046\073\140\074\006\075\034\104\243\105\134\106\041"
            + "\107\067\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\202\217\156\222\104"
            + "\223\116\224\060\001\002\000\002\001\ufe93\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\004\101"
            + "\u02f0\001\002\000\002\001\ufec4\000\004\012\u02e7\001\ufedf"
            + "\000\002\001\ufe92\000\004\217\u02de\001\002\000\002\001"
            + "\ufec2\000\002\001\ufec1\000\004\010\u02cf\001\002\000\004"
            + "\217\u02cc\001\002\000\004\064\u02c1\001\ufe9e\000\020\010"
            + "\170\012\062\104\u016f\107\u016b\111\056\211\202\222\104"
            + "\001\002\000\002\001\ufeb4\000\012\101\u0128\103\ufe94\203"
            + "\u0129\217\ufe98\001\ufe91\000\150\004\152\006\113\007\011"
            + "\010\170\011\053\012\062\016\133\032\107\043\245\055"
            + "\154\056\030\066\157\067\013\070\020\071\045\072\046"
            + "\073\140\074\006\075\034\104\243\105\134\106\041\107"
            + "\067\111\056\112\027\113\072\114\050\115\130\116\111"
            + "\123\064\141\u02bd\161\110\162\070\166\153\167\014\171"
            + "\052\172\160\173\026\174\136\175\037\176\132\177\075"
            + "\200\141\201\071\202\035\205\100\211\202\217\156\222"
            + "\104\223\116\224\060\001\002\000\002\001\ufe55\000\004"
            + "\217\u02ba\001\002\000\012\012\062\015\u02b8\077\u0253\100"
            + "\u0252\001\ufece\000\004\103\u02b4\001\002\000\002\001\ufe57"
            + "\000\004\060\u0241\001\002\000\146\004\152\006\113\007"
            + "\011\010\170\011\053\012\062\016\133\032\107\043\245"
            + "\055\154\056\030\066\157\067\013\070\020\071\045\072"
            + "\046\073\140\074\006\075\034\104\243\105\134\106\041"
            + "\107\067\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\202\217\156\222\104"
            + "\223\116\224\060\001\002\000\002\001\uffda\000\002\001"
            + "\ufefc\000\006\010\170\111\056\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\006\012\062"
            + "\222\u0124\001\002\000\004\010\u02a9\001\002\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\002\001"
            + "\ufeb3\000\002\001\uffc8\000\020\010\170\012\062\104\u011f"
            + "\107\u0119\111\056\211\202\222\104\001\002\000\004\217"
            + "\u029e\001\002\000\010\010\170\107\333\111\056\001\ufff2"
            + "\000\006\171\u0290\172\u0291\001\002\000\004\101\u0125\001"
            + "\ufe80\000\004\217\u0279\001\002\000\002\001\ufff7\000\146"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\002\000\146"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\002\000\146"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\002\000\004"
            + "\146\250\001\uffb1\000\002\001\ufec9\000\002\001\ufeaf\000"
            + "\002\001\uffde\000\012\012\062\015\u0254\077\u0253\100\u0252"
            + "\001\002\000\002\001\ufe8b\000\004\010\u0215\001\002\000"
            + "\006\117\u0210\141\u0211\001\002\000\002\001\uffdc\000\222"
            + "\003\122\004\152\005\163\006\113\007\011\010\033\011"
            + "\053\012\062\014\077\016\133\017\126\020\123\021\044"
            + "\023\032\025\105\027\164\032\107\034\135\040\055\041"
            + "\125\042\074\043\245\045\143\046\040\050\161\051\241"
            + "\052\012\054\101\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\101\065"
            + "\104\243\105\134\106\041\107\067\110\023\111\056\112"
            + "\027\113\072\114\050\115\130\116\111\123\064\141\010"
            + "\161\110\162\070\166\153\167\014\171\052\172\160\173"
            + "\026\174\136\175\037\176\132\177\075\200\141\201\071"
            + "\202\035\205\100\211\042\217\156\222\104\223\116\224"
            + "\060\001\002\000\002\001\ufe8c\000\150\004\152\006\113"
            + "\007\011\010\170\011\053\012\062\016\133\032\107\043"
            + "\245\055\154\056\030\066\157\067\013\070\020\071\045"
            + "\072\046\073\140\074\006\075\034\104\243\105\134\106"
            + "\041\107\067\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\141\u0207\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\002\001\ufff6"
            + "\000\146\004\152\006\113\007\011\010\170\011\053\012"
            + "\062\016\133\032\107\043\245\055\154\056\030\066\157"
            + "\067\013\070\020\071\045\072\046\073\140\074\006\075"
            + "\034\104\243\105\134\106\041\107\067\111\056\112\027"
            + "\113\072\114\050\115\130\116\111\123\064\161\110\162"
            + "\070\166\153\167\014\171\052\172\160\173\026\174\136"
            + "\175\037\176\132\177\075\200\141\201\071\202\035\205"
            + "\100\211\202\217\156\222\104\223\116\224\060\001\002"
            + "\000\002\001\ufffe\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\002\001\ufec7\000\002\001\ufec0\000"
            + "\004\217\u01e5\001\002\000\146\004\152\006\113\007\011"
            + "\010\170\011\053\012\062\016\133\032\107\043\245\055"
            + "\154\056\030\066\157\067\013\070\020\071\045\072\046"
            + "\073\140\074\006\075\034\104\243\105\134\106\041\107"
            + "\067\111\056\112\027\113\072\114\050\115\130\116\111"
            + "\123\064\161\110\162\070\166\153\167\014\171\052\172"
            + "\160\173\026\174\136\175\037\176\132\177\075\200\141"
            + "\201\071\202\035\205\100\211\202\217\156\222\104\223"
            + "\116\224\060\001\002\000\002\001\uffb3\000\002\001\ufec6"
            + "\000\146\004\152\006\113\007\011\010\170\011\053\012"
            + "\062\016\133\032\107\043\245\055\154\056\030\066\157"
            + "\067\013\070\020\071\045\072\046\073\140\074\006\075"
            + "\034\104\243\105\134\106\041\107\067\111\056\112\027"
            + "\113\072\114\050\115\130\116\111\123\064\161\110\162"
            + "\070\166\153\167\014\171\052\172\160\173\026\174\136"
            + "\175\037\176\132\177\075\200\141\201\071\202\035\205"
            + "\100\211\202\217\156\222\104\223\116\224\060\001\002"
            + "\000\004\010\u01e0\001\002\000\150\004\152\006\113\007"
            + "\011\010\170\011\053\012\062\016\133\032\107\043\245"
            + "\055\154\056\030\066\157\067\013\070\020\071\045\072"
            + "\046\073\140\074\006\075\034\104\243\105\134\106\041"
            + "\107\067\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\141\u01db\161\110\162\070\166\153\167\014"
            + "\171\052\172\160\173\026\174\136\175\037\176\132\177"
            + "\075\200\141\201\071\202\035\205\100\211\202\217\156"
            + "\222\104\223\116\224\060\001\002\000\002\001\ufea3\000"
            + "\004\103\u01d9\001\002\000\002\001\ufea4\000\004\107\u01d7"
            + "\001\uffff\000\002\001\uff9b\000\006\103\ufede\217\u0171\001"
            + "\ufeb2\000\004\217\u01d2\001\ufed1\000\146\004\152\006\113"
            + "\007\011\010\170\011\053\012\062\016\133\032\107\043"
            + "\245\055\154\056\030\066\157\067\013\070\020\071\045"
            + "\072\046\073\140\074\006\075\034\104\243\105\134\106"
            + "\041\107\067\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\161\110\162\070\166\153\167\014\171"
            + "\052\172\160\173\026\174\136\175\037\176\132\177\075"
            + "\200\141\201\071\202\035\205\100\211\202\217\156\222"
            + "\104\223\116\224\060\001\002\000\004\217\u01cb\001\002"
            + "\000\002\001\ufff8\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\004\217\u01bc\001\002\000\020\010"
            + "\170\012\062\104\u016f\107\u016b\111\056\211\202\222\104"
            + "\001\002\000\146\004\152\006\113\007\011\010\170\011"
            + "\053\012\062\016\133\032\107\043\245\055\154\056\030"
            + "\066\157\067\013\070\020\071\045\072\046\073\140\074"
            + "\006\075\034\104\243\105\134\106\041\107\067\111\056"
            + "\112\027\113\072\114\050\115\130\116\111\123\064\161"
            + "\110\162\070\166\153\167\014\171\052\172\160\173\026"
            + "\174\136\175\037\176\132\177\075\200\141\201\071\202"
            + "\035\205\100\211\202\217\156\222\104\223\116\224\060"
            + "\001\002\000\002\001\ufffc\000\004\217\u019c\001\002\000"
            + "\004\217\165\001\002\000\006\010\170\111\056\001\002"
            + "\000\006\117\235\220\234\001\002\000\004\124\171\001"
            + "\002\000\002\001\ufe56\000\050\006\113\007\011\010\170"
            + "\016\133\067\177\070\020\071\045\072\046\073\140\074"
            + "\006\075\172\104\204\105\134\106\041\107\176\111\056"
            + "\161\203\162\174\211\202\001\002\000\006\015\232\076"
            + "\231\001\002\000\002\001\ufebd\000\050\006\113\007\011"
            + "\010\170\016\133\067\177\070\020\071\045\072\046\073"
            + "\140\074\006\075\172\104\204\105\134\106\041\107\176"
            + "\111\056\161\203\162\174\211\202\001\002\000\002\001"
            + "\ufeb6\000\006\010\170\111\056\001\002\000\004\217\213"
            + "\001\002\000\004\103\211\001\002\000\002\001\uff88\000"
            + "\002\001\ufedf\000\050\006\113\007\011\010\170\016\133"
            + "\067\177\070\020\071\045\072\046\073\140\074\006\075"
            + "\172\104\204\105\134\106\041\107\176\111\056\161\203"
            + "\162\174\211\202\001\002\000\004\107\206\001\002\000"
            + "\004\103\ufede\001\ufebc\000\006\010\170\111\056\001\002"
            + "\000\004\103\ufedd\001\ufebb\000\002\001\ufeb9\000\004\010"
            + "\212\001\002\000\002\001\ufeb5\000\050\006\113\007\011"
            + "\010\170\016\133\067\177\070\020\071\045\072\046\073"
            + "\140\074\006\075\172\104\204\105\134\106\041\107\176"
            + "\111\056\161\203\162\174\211\202\001\ufeac\000\004\220"
            + "\226\001\002\000\004\117\221\001\ufeaa\000\004\065\217"
            + "\001\ufea5\000\050\006\113\007\011\010\170\016\133\067"
            + "\177\070\020\071\045\072\046\073\140\074\006\075\172"
            + "\104\204\105\134\106\041\107\176\111\056\161\203\162"
            + "\174\211\202\001\002\000\002\001\ufea6\000\050\006\113"
            + "\007\011\010\170\016\133\067\177\070\020\071\045\072"
            + "\046\073\140\074\006\075\172\104\204\105\134\106\041"
            + "\107\176\111\056\161\203\162\174\211\202\001\ufea9\000"
            + "\002\001\ufeab\000\004\065\224\001\ufea7\000\050\006\113"
            + "\007\011\010\170\016\133\067\177\070\020\071\045\072"
            + "\046\073\140\074\006\075\172\104\204\105\134\106\041"
            + "\107\176\111\056\161\203\162\174\211\202\001\002\000"
            + "\002\001\ufea8\000\002\001\ufeb7\000\004\103\ufedc\001\ufeba"
            + "\000\002\001\ufeb8\000\002\001\ufebe\000\004\076\233\001"
            + "\002\000\002\001\ufebf\000\224\003\122\004\152\005\163"
            + "\006\113\007\011\010\033\011\053\012\062\014\077\016"
            + "\133\017\126\020\123\021\044\023\032\025\105\027\164"
            + "\032\107\034\135\040\055\041\125\042\074\043\245\045"
            + "\143\046\040\050\161\051\241\052\012\054\101\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\101\065\104\243\105\134\106\041"
            + "\107\067\110\023\111\056\112\027\113\072\114\050\115"
            + "\130\116\111\123\064\141\010\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\042"
            + "\217\156\221\244\222\104\223\116\224\060\001\002\000"
            + "\006\010\170\111\056\001\002\000\004\124\237\001\002"
            + "\000\050\006\113\007\011\010\170\016\133\067\177\070"
            + "\020\071\045\072\046\073\140\074\006\075\172\104\204"
            + "\105\134\106\041\107\176\111\056\161\203\162\174\211"
            + "\202\001\002\000\002\001\uff87\000\006\016\u0198\217\u0196"
            + "\001\002\000\002\001\uffc2\000\004\107\333\001\002\000"
            + "\002\001\uffe3\000\004\146\250\001\uffb1\000\002\001\uff8a"
            + "\000\004\217\251\001\002\000\002\001\uffb0\000\020\003"
            + "\260\010\170\067\252\104\256\107\261\111\056\220\uff72"
            + "\001\uff69\000\002\001\uff67\000\002\001\ufedb\000\006\012"
            + "\322\146\321\001\002\000\004\117\317\001\uff73\000\004"
            + "\107\315\001\002\000\002\001\uff68\000\002\001\uff6a\000"
            + "\006\010\170\111\056\001\002\000\002\001\uff71\000\004"
            + "\220\264\001\002\000\004\051\265\001\ufeed\000\004\217"
            + "\302\001\002\000\004\101\267\001\002\000\002\001\uffe3"
            + "\000\236\003\122\004\152\005\163\006\113\007\011\010"
            + "\033\011\053\012\062\014\077\016\133\017\126\020\123"
            + "\021\044\023\032\025\105\027\164\032\107\034\135\040"
            + "\055\041\125\042\074\043\112\045\143\046\040\050\161"
            + "\051\241\052\012\054\101\055\154\056\030\057\272\060"
            + "\031\061\150\066\157\067\013\070\020\071\045\072\046"
            + "\073\140\074\006\075\034\101\065\102\274\104\243\105"
            + "\134\106\041\107\067\110\023\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\141\010\161\110\162"
            + "\070\166\153\167\014\171\052\172\160\173\026\174\136"
            + "\175\037\176\132\177\075\200\141\201\071\202\035\205"
            + "\100\211\042\212\063\213\016\217\156\222\104\223\116"
            + "\224\060\001\002\000\002\001\uffe4\000\004\217\277\001"
            + "\002\000\002\001\uffe1\000\002\001\ufeee\000\002\001\uffe0"
            + "\000\002\001\uffe2\000\004\220\300\001\002\000\004\141"
            + "\301\001\002\000\002\001\uffdf\000\006\012\305\146\303"
            + "\001\002\000\004\012\313\001\002\000\006\117\307\220"
            + "\306\001\002\000\002\001\ufee9\000\002\001\ufeec\000\006"
            + "\012\311\146\310\001\002\000\004\012\312\001\002\000"
            + "\002\001\ufeeb\000\002\001\ufeea\000\002\001\ufee8\000\002"
            + "\001\ufed9\000\006\010\170\111\056\001\002\000\002\001"
            + "\ufeda\000\022\003\260\010\170\067\252\104\256\107\261"
            + "\111\056\117\uff6f\220\uff6f\001\uff69\000\002\001\uff70\000"
            + "\004\012\325\001\002\000\004\124\323\001\uff6e\000\050"
            + "\006\113\007\011\010\170\016\133\067\177\070\020\071"
            + "\045\072\046\073\140\074\006\075\172\104\204\105\134"
            + "\106\041\107\176\111\056\161\203\162\174\211\202\001"
            + "\002\000\002\001\uff6c\000\004\124\326\001\uff6d\000\050"
            + "\006\113\007\011\010\170\016\133\067\177\070\020\071"
            + "\045\072\046\073\140\074\006\075\172\104\204\105\134"
            + "\106\041\107\176\111\056\161\203\162\174\211\202\001"
            + "\002\000\002\001\uff6b\000\236\003\122\004\152\005\163"
            + "\006\113\007\011\010\033\011\053\012\062\014\077\016"
            + "\133\017\126\020\123\021\044\023\032\025\105\027\164"
            + "\030\331\032\107\034\135\040\055\041\125\042\074\043"
            + "\112\045\143\046\040\050\161\051\241\052\012\054\101"
            + "\055\154\056\030\057\272\060\031\061\150\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\101\065\104\243\105\134\106\041\107\067\110\023\111"
            + "\056\112\027\113\072\114\050\115\130\116\111\123\064"
            + "\141\010\161\110\162\070\166\153\167\014\171\052\172"
            + "\160\173\026\174\136\175\037\176\132\177\075\200\141"
            + "\201\071\202\035\205\100\211\042\212\063\213\016\217"
            + "\156\222\104\223\116\224\060\001\002\000\004\141\332"
            + "\001\002\000\002\001\uff89\000\006\010\170\111\056\001"
            + "\002\000\006\103\ufedd\217\335\001\ufeb1\000\150\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\146\337\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\uff65\000\004"
            + "\220\u0195\001\002\000\020\010\170\012\062\104\u016f\107"
            + "\u016b\111\056\211\202\222\104\001\002\000\066\031\u0106"
            + "\120\376\121\u010d\122\367\140\373\142\370\143\u0108\144"
            + "\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377"
            + "\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161"
            + "\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001\002"
            + "\000\042\117\uff63\124\351\125\354\126\352\127\362\130"
            + "\355\131\363\132\357\133\361\134\353\135\350\136\356"
            + "\137\360\171\ufea0\172\ufea0\220\uff63\001\ufea2\000\004\117"
            + "\344\001\uff66\000\006\117\uff64\220\uff64\001\ufea3\000\150"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\146\345\161\110\162"
            + "\070\166\153\167\014\171\052\172\160\173\026\174\136"
            + "\175\037\176\132\177\075\200\141\201\071\202\035\205"
            + "\100\211\202\217\156\222\104\223\116\224\060\001\002"
            + "\000\020\010\170\012\062\104\u016f\107\u016b\111\056\211"
            + "\202\222\104\001\002\000\042\117\uff60\124\351\125\354"
            + "\126\352\127\362\130\355\131\363\132\357\133\361\134"
            + "\353\135\350\136\356\137\360\171\ufea0\172\ufea0\220\uff60"
            + "\001\ufea2\000\006\117\uff61\220\uff61\001\ufea3\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\150\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\146\u0168\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\060\031\u0106\140\373\142\370\143\u0108\144\371\145\u0100"
            + "\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154"
            + "\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375"
            + "\163\u0104\164\u0103\165\366\170\372\001\uff27\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\002\000\150\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\221\u0155\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\020\010\170\012\062\104\u011f\107\u0119\111\056\211\202"
            + "\222\104\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\012\031\u0106\163\u0104\164\u0103\165"
            + "\366\001\uff13\000\062\031\u0106\122\367\140\373\142\370"
            + "\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151"
            + "\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\001\uff18\000\034\031\u0106\153\u010b\154\u010a\155\374"
            + "\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164"
            + "\u0103\165\366\170\372\001\uff06\000\024\031\u0106\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\001\uff03\000\024\031\u0106\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\001\uff01\000"
            + "\024\031\u0106\157\u0105\160\u0102\161\u010e\162\375\163\u0104"
            + "\164\u0103\165\366\170\372\001\uff02\000\052\031\u0106\144"
            + "\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377"
            + "\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161"
            + "\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001\uff1b"
            + "\000\044\031\u0106\147\u010c\150\u0101\151\365\152\377\153"
            + "\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\001\uff16\000"
            + "\002\001\ufed7\000\004\103\u0148\001\002\000\006\010\170"
            + "\111\056\001\002\000\010\101\u0128\103\ufe94\203\u0129\001"
            + "\ufe91\000\004\103\u0145\001\ufed8\000\002\001\uff00\000\004"
            + "\064\u012f\001\ufed5\000\006\012\062\222\u0124\001\002\000"
            + "\004\107\u0121\001\002\000\002\001\ufede\000\006\010\170"
            + "\111\056\001\002\000\002\001\ufedd\000\006\101\u0128\203"
            + "\u0129\001\ufe90\000\004\101\u0125\001\ufe7f\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\070\031\u0106"
            + "\102\u0127\120\376\121\u010d\122\367\140\373\142\370\143"
            + "\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365"
            + "\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160"
            + "\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372"
            + "\001\002\000\002\001\ufe8a\000\146\004\152\006\113\007"
            + "\011\010\170\011\053\012\062\016\133\032\107\043\245"
            + "\055\154\056\030\066\157\067\013\070\020\071\045\072"
            + "\046\073\140\074\006\075\034\104\243\105\134\106\041"
            + "\107\067\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\202\217\156\222\104"
            + "\223\116\224\060\001\002\000\146\004\152\006\113\007"
            + "\011\010\170\011\053\012\062\016\133\032\107\043\245"
            + "\055\154\056\030\066\157\067\013\070\020\071\045\072"
            + "\046\073\140\074\006\075\034\104\243\105\134\106\041"
            + "\107\067\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\202\217\156\222\104"
            + "\223\116\224\060\001\ufe89\000\066\031\u0106\120\376\121"
            + "\u010d\122\367\140\373\142\370\143\u0108\144\371\145\u0100"
            + "\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154"
            + "\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375"
            + "\163\u0104\164\u0103\165\366\170\372\001\ufe88\000\004\204"
            + "\u012c\001\002\000\002\001\ufe8e\000\070\031\u0106\102\u012e"
            + "\120\376\121\u010d\122\367\140\373\142\370\143\u0108\144"
            + "\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377"
            + "\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161"
            + "\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001\002"
            + "\000\002\001\ufe8d\000\014\010\170\012\062\101\u0136\111"
            + "\056\222\104\001\002\000\002\001\ufe82\000\002\001\ufe83"
            + "\000\002\001\ufe86\000\002\001\ufed3\000\006\101\u013b\203"
            + "\u013c\001\ufe87\000\006\012\062\222\u0124\001\002\000\146"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\002\000\006"
            + "\101\u0128\203\u0129\001\ufe98\000\070\031\u0106\102\u0139\120"
            + "\376\121\u010d\122\367\140\373\142\370\143\u0108\144\371"
            + "\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153"
            + "\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\001\002\000"
            + "\002\001\ufe81\000\006\101\u0128\203\u0129\001\ufe97\000\146"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\002\000\146"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\ufe89\000\004"
            + "\204\u013e\001\002\000\002\001\ufe85\000\070\031\u0106\102"
            + "\u0140\120\376\121\u010d\122\367\140\373\142\370\143\u0108"
            + "\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152"
            + "\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001"
            + "\002\000\002\001\ufe84\000\004\064\u0143\001\ufed6\000\002"
            + "\001\ufed4\000\014\010\170\012\062\101\u0136\111\056\222"
            + "\104\001\002\000\002\001\ufed2\000\006\012\062\222\104"
            + "\001\002\000\002\001\ufe96\000\002\001\ufedc\000\006\012"
            + "\062\222\104\001\002\000\002\001\ufe95\000\020\031\u0106"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001"
            + "\uff0e\000\004\031\u0106\001\uff11\000\004\031\u0106\001\uff10"
            + "\000\020\031\u0106\161\u010e\162\375\163\u0104\164\u0103\165"
            + "\366\170\372\001\uff0d\000\034\031\u0106\153\u010b\154\u010a"
            + "\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163"
            + "\u0104\164\u0103\165\366\170\372\001\uff05\000\046\031\u0106"
            + "\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154"
            + "\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375"
            + "\163\u0104\164\u0103\165\366\170\372\001\uff15\000\034\031"
            + "\u0106\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001"
            + "\uff07\000\064\031\u0106\121\u010d\122\367\140\373\142\370"
            + "\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151"
            + "\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\001\uff1a\000\012\031\u0106\163\u0104\164\u0103\165\366"
            + "\001\uff12\000\024\031\u0106\157\u0105\160\u0102\161\u010e\162"
            + "\375\163\u0104\164\u0103\165\366\170\372\001\uff04\000\070"
            + "\031\u0106\120\376\121\u010d\122\367\140\373\142\370\143"
            + "\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365"
            + "\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160"
            + "\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372"
            + "\221\u0157\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\066\031\u0106\120\376\121\u010d\122"
            + "\367\140\373\142\370\143\u0108\144\371\145\u0100\146\u0107"
            + "\147\u010c\150\u0101\151\365\152\377\153\u010b\154\u010a\155"
            + "\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104"
            + "\164\u0103\165\366\170\372\001\ufefd\000\146\004\152\006"
            + "\113\007\011\010\170\011\053\012\062\016\133\032\107"
            + "\043\245\055\154\056\030\066\157\067\013\070\020\071"
            + "\045\072\046\073\140\074\006\075\034\104\243\105\134"
            + "\106\041\107\067\111\056\112\027\113\072\114\050\115"
            + "\130\116\111\123\064\161\110\162\070\166\153\167\014"
            + "\171\052\172\160\173\026\174\136\175\037\176\132\177"
            + "\075\200\141\201\071\202\035\205\100\211\202\217\156"
            + "\222\104\223\116\224\060\001\002\000\066\031\u0106\120"
            + "\376\121\u010d\122\367\140\373\142\370\143\u0108\144\371"
            + "\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153"
            + "\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\001\ufefe\000"
            + "\012\031\u0106\163\u0104\164\u0103\165\366\001\uff14\000\050"
            + "\031\u0106\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152"
            + "\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001"
            + "\uff17\000\054\031\u0106\143\u0108\144\371\145\u0100\146\u0107"
            + "\147\u010c\150\u0101\151\365\152\377\153\u010b\154\u010a\155"
            + "\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104"
            + "\164\u0103\165\366\170\372\001\uff1c\000\060\031\u0106\140"
            + "\373\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c"
            + "\150\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156"
            + "\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103"
            + "\165\366\170\372\001\uff19\000\004\031\u0106\001\uff0f\000"
            + "\034\031\u0106\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\001\uff08\000\060\031\u0106\140\373\142\370\143\u0108"
            + "\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152"
            + "\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001"
            + "\uff29\000\060\031\u0106\140\373\142\370\143\u0108\144\371"
            + "\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153"
            + "\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\001\uff25\000"
            + "\060\031\u0106\140\373\142\370\143\u0108\144\371\145\u0100"
            + "\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154"
            + "\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375"
            + "\163\u0104\164\u0103\165\366\170\372\001\uff21\000\060\031"
            + "\u0106\140\373\142\370\143\u0108\144\371\145\u0100\146\u0107"
            + "\147\u010c\150\u0101\151\365\152\377\153\u010b\154\u010a\155"
            + "\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104"
            + "\164\u0103\165\366\170\372\001\uff26\000\060\031\u0106\140"
            + "\373\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c"
            + "\150\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156"
            + "\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103"
            + "\165\366\170\372\001\uff22\000\060\031\u0106\140\373\142"
            + "\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101"
            + "\151\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157"
            + "\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366"
            + "\170\372\001\uff28\000\060\031\u0106\140\373\142\370\143"
            + "\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365"
            + "\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160"
            + "\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372"
            + "\001\uff2b\000\060\031\u0106\140\373\142\370\143\u0108\144"
            + "\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377"
            + "\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161"
            + "\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001\uff24"
            + "\000\060\031\u0106\140\373\142\370\143\u0108\144\371\145"
            + "\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b"
            + "\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162"
            + "\375\163\u0104\164\u0103\165\366\170\372\001\uff2a\000\022"
            + "\010\170\012\062\104\u016f\107\u016b\111\056\205\u016e\211"
            + "\202\222\104\001\002\000\060\031\u0106\140\373\142\370"
            + "\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151"
            + "\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\001\uff30\000\004\103\u0188\001\002\000\006\010\170"
            + "\111\056\001\002\000\004\103\u017b\001\002\000\002\001"
            + "\uff2f\000\020\010\170\012\062\104\u011f\107\u0119\111\056"
            + "\211\202\222\104\001\002\000\004\107\u0174\001\002\000"
            + "\004\217\u0171\001\ufede\000\150\004\152\006\113\007\011"
            + "\010\170\011\053\012\062\016\133\032\107\043\245\055"
            + "\154\056\030\066\157\067\013\070\020\071\045\072\046"
            + "\073\140\074\006\075\034\104\243\105\134\106\041\107"
            + "\067\111\056\112\027\113\072\114\050\115\130\116\111"
            + "\123\064\146\337\161\110\162\070\166\153\167\014\171"
            + "\052\172\160\173\026\174\136\175\037\176\132\177\075"
            + "\200\141\201\071\202\035\205\100\211\202\217\156\222"
            + "\104\223\116\224\060\001\uff65\000\004\220\u0173\001\002"
            + "\000\002\001\ufee7\000\006\010\170\111\056\001\002\000"
            + "\004\217\335\001\ufedd\000\004\217\u0178\001\ufecb\000\002"
            + "\001\uff2e\000\150\004\152\006\113\007\011\010\170\011"
            + "\053\012\062\016\133\032\107\043\245\055\154\056\030"
            + "\066\157\067\013\070\020\071\045\072\046\073\140\074"
            + "\006\075\034\104\243\105\134\106\041\107\067\111\056"
            + "\112\027\113\072\114\050\115\130\116\111\123\064\146"
            + "\337\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\uff65\000\004\220\u017a\001\002\000\002\001"
            + "\ufeca\000\010\010\u017d\012\062\222\104\001\002\000\004"
            + "\217\u0181\001\ufe96\000\004\217\u017e\001\002\000\150\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\146\337\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\uff65\000"
            + "\004\220\u0180\001\002\000\002\001\ufee4\000\150\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\146\337\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\uff65\000\004"
            + "\220\u0183\001\002\000\002\001\ufee3\000\004\217\u0185\001"
            + "\ufedc\000\150\004\152\006\113\007\011\010\170\011\053"
            + "\012\062\016\133\032\107\043\245\055\154\056\030\066"
            + "\157\067\013\070\020\071\045\072\046\073\140\074\006"
            + "\075\034\104\243\105\134\106\041\107\067\111\056\112"
            + "\027\113\072\114\050\115\130\116\111\123\064\146\337"
            + "\161\110\162\070\166\153\167\014\171\052\172\160\173"
            + "\026\174\136\175\037\176\132\177\075\200\141\201\071"
            + "\202\035\205\100\211\202\217\156\222\104\223\116\224"
            + "\060\001\uff65\000\004\220\u0187\001\002\000\002\001\ufee5"
            + "\000\010\010\u018a\012\062\222\104\001\002\000\004\217"
            + "\u018e\001\ufe95\000\004\217\u018b\001\002\000\150\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\146\337\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\uff65\000\004"
            + "\220\u018d\001\002\000\002\001\ufee2\000\150\004\152\006"
            + "\113\007\011\010\170\011\053\012\062\016\133\032\107"
            + "\043\245\055\154\056\030\066\157\067\013\070\020\071"
            + "\045\072\046\073\140\074\006\075\034\104\243\105\134"
            + "\106\041\107\067\111\056\112\027\113\072\114\050\115"
            + "\130\116\111\123\064\146\337\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\uff65\000\004\220"
            + "\u0190\001\002\000\002\001\ufee1\000\060\031\u0106\140\373"
            + "\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150"
            + "\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156\u0109"
            + "\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165"
            + "\366\170\372\001\uff23\000\002\001\uff5f\000\002\001\ufea1"
            + "\000\002\001\uff62\000\002\001\ufee6\000\004\016\u019a\001"
            + "\002\000\004\141\u0199\001\002\000\002\001\uffb5\000\002"
            + "\001\uffc6\000\004\220\u019b\001\002\000\002\001\uffb4\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\070\031\u0106\120\376\121\u010d\122\367\140\373\142\370"
            + "\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151"
            + "\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\220\u019e\001\002\000\224\003\122\004\152\005\163"
            + "\006\113\007\011\010\033\011\053\012\062\014\077\016"
            + "\133\017\126\020\123\021\044\023\032\025\105\027\164"
            + "\032\107\034\135\040\055\041\125\042\074\043\245\045"
            + "\143\046\040\050\161\051\241\052\012\054\101\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\101\065\104\243\105\134\106\041"
            + "\107\067\110\023\111\056\112\027\113\072\114\050\115"
            + "\130\116\111\123\064\141\010\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\042"
            + "\217\156\221\u019f\222\104\223\116\224\060\001\002\000"
            + "\002\001\uffe3\000\002\001\uff7b\000\006\207\u01a4\210\u01a3"
            + "\001\uff77\000\002\001\uffd8\000\222\003\122\004\152\005"
            + "\163\006\113\007\011\010\033\011\053\012\062\014\077"
            + "\016\133\017\126\020\123\021\044\023\032\025\105\027"
            + "\164\032\107\034\135\040\055\041\125\042\074\043\245"
            + "\045\143\046\040\050\161\051\241\052\012\054\101\055"
            + "\154\056\030\066\157\067\013\070\020\071\045\072\046"
            + "\073\140\074\006\075\034\101\065\104\243\105\134\106"
            + "\041\107\067\110\023\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\141\010\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\042\217\156\222\104\223\116\224\060\001\002\000\004"
            + "\217\u01a5\001\002\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\002\000\070\031\u0106\120\376\121\u010d\122"
            + "\367\140\373\142\370\143\u0108\144\371\145\u0100\146\u0107"
            + "\147\u010c\150\u0101\151\365\152\377\153\u010b\154\u010a\155"
            + "\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104"
            + "\164\u0103\165\366\170\372\220\u01a7\001\002\000\222\003"
            + "\122\004\152\005\163\006\113\007\011\010\033\011\053"
            + "\012\062\014\077\016\133\017\126\020\123\021\044\023"
            + "\032\025\105\027\164\032\107\034\135\040\055\041\125"
            + "\042\074\043\245\045\143\046\040\050\161\051\241\052"
            + "\012\054\101\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\101\065\104"
            + "\243\105\134\106\041\107\067\110\023\111\056\112\027"
            + "\113\072\114\050\115\130\116\111\123\064\141\010\161"
            + "\110\162\070\166\153\167\014\171\052\172\160\173\026"
            + "\174\136\175\037\176\132\177\075\200\141\201\071\202"
            + "\035\205\100\211\042\217\156\222\104\223\116\224\060"
            + "\001\002\000\002\001\uff7a\000\002\001\uff76\000\234\003"
            + "\122\004\152\005\163\006\113\007\011\010\033\011\053"
            + "\012\062\014\077\016\133\017\126\020\123\021\044\023"
            + "\032\025\105\027\164\032\107\034\135\040\055\041\125"
            + "\042\074\043\112\045\143\046\040\050\161\051\241\052"
            + "\012\054\101\055\154\056\030\057\272\060\031\061\150"
            + "\066\157\067\013\070\020\071\045\072\046\073\140\074"
            + "\006\075\034\101\065\104\243\105\134\106\041\107\067"
            + "\110\023\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\141\010\161\110\162\070\166\153\167\014"
            + "\171\052\172\160\173\026\174\136\175\037\176\132\177"
            + "\075\200\141\201\071\202\035\205\100\211\042\212\063"
            + "\213\016\217\156\222\104\223\116\224\060\001\uff79\000"
            + "\006\207\u01ae\210\u01ad\001\uff75\000\004\206\u01b6\001\002"
            + "\000\004\221\u01b4\001\002\000\004\217\u01af\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\070\031\u0106\120\376\121\u010d\122\367\140\373\142\370"
            + "\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151"
            + "\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\220\u01b1\001\002\000\004\221\u01b2\001\002\000\002"
            + "\001\uffe3\000\234\003\122\004\152\005\163\006\113\007"
            + "\011\010\033\011\053\012\062\014\077\016\133\017\126"
            + "\020\123\021\044\023\032\025\105\027\164\032\107\034"
            + "\135\040\055\041\125\042\074\043\112\045\143\046\040"
            + "\050\161\051\241\052\012\054\101\055\154\056\030\057"
            + "\272\060\031\061\150\066\157\067\013\070\020\071\045"
            + "\072\046\073\140\074\006\075\034\101\065\104\243\105"
            + "\134\106\041\107\067\110\023\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\141\010\161\110\162"
            + "\070\166\153\167\014\171\052\172\160\173\026\174\136"
            + "\175\037\176\132\177\075\200\141\201\071\202\035\205"
            + "\100\211\042\212\063\213\016\217\156\222\104\223\116"
            + "\224\060\001\uff78\000\002\001\uffe3\000\234\003\122\004"
            + "\152\005\163\006\113\007\011\010\033\011\053\012\062"
            + "\014\077\016\133\017\126\020\123\021\044\023\032\025"
            + "\105\027\164\032\107\034\135\040\055\041\125\042\074"
            + "\043\112\045\143\046\040\050\161\051\241\052\012\054"
            + "\101\055\154\056\030\057\272\060\031\061\150\066\157"
            + "\067\013\070\020\071\045\072\046\073\140\074\006\075"
            + "\034\101\065\104\243\105\134\106\041\107\067\110\023"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\141\010\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\042\212\063\213\016"
            + "\217\156\222\104\223\116\224\060\001\uff74\000\004\141"
            + "\u01b7\001\002\000\002\001\uffd7\000\070\031\u0106\120\376"
            + "\121\u010d\122\367\140\373\141\u01b9\142\370\143\u0108\144"
            + "\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377"
            + "\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161"
            + "\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001\002"
            + "\000\002\001\uffbf\000\002\001\uff1d\000\002\001\ufea0\000"
            + "\022\010\170\012\062\066\u01c0\104\u016f\107\u016b\111\056"
            + "\211\202\222\104\001\ufe7a\000\006\117\u01c4\220\u01c6\001"
            + "\002\000\002\001\ufe7d\000\002\001\ufe7c\000\004\217\u01c1"
            + "\001\002\000\022\010\170\012\062\066\u01c0\104\u016f\107"
            + "\u016b\111\056\211\202\222\104\001\ufe7a\000\006\117\u01c4"
            + "\220\u01c3\001\002\000\002\001\ufe7b\000\022\010\170\012"
            + "\062\066\u01c0\104\u016f\107\u016b\111\056\211\202\222\104"
            + "\001\ufe7a\000\002\001\ufe7e\000\004\124\u01c7\001\002\000"
            + "\146\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\002\000"
            + "\060\031\u0106\140\373\142\370\143\u0108\144\371\145\u0100"
            + "\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154"
            + "\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375"
            + "\163\u0104\164\u0103\165\366\170\372\001\uff31\000\070\031"
            + "\u0106\120\376\121\u010d\122\367\140\373\142\370\143\u0108"
            + "\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152"
            + "\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\220"
            + "\u01ca\001\002\000\002\001\ufeff\000\020\010\170\012\062"
            + "\104\u016f\107\u016b\111\056\211\202\222\104\001\002\000"
            + "\002\001\ufe5b\000\006\117\u01cf\220\u01ce\001\002\000\002"
            + "\001\ufe62\000\020\010\170\012\062\104\u016f\107\u016b\111"
            + "\056\211\202\222\104\001\002\000\002\001\ufe5a\000\004"
            + "\031\u0106\001\uff0a\000\150\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\220\u01d5\222\104"
            + "\223\116\224\060\001\002\000\002\001\ufef4\000\070\031"
            + "\u0106\120\376\121\u010d\122\367\140\373\142\370\143\u0108"
            + "\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152"
            + "\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\220"
            + "\u01d6\001\002\000\002\001\ufed0\000\002\001\ufecf\000\006"
            + "\010\170\111\056\001\002\000\002\001\ufffd\000\010\010"
            + "\u01da\012\062\222\104\001\002\000\004\217\u018b\001\ufe58"
            + "\000\002\001\uffce\000\040\124\351\125\354\126\352\127"
            + "\362\130\355\131\363\132\357\133\361\134\353\135\350"
            + "\136\356\137\360\141\u01df\171\ufea0\172\ufea0\001\ufea2\000"
            + "\004\141\u01de\001\ufea3\000\002\001\uffcd\000\002\001\uffcc"
            + "\000\004\124\u01e1\001\002\000\050\006\113\007\011\010"
            + "\170\016\133\067\177\070\020\071\045\072\046\073\140"
            + "\074\006\075\172\104\204\105\134\106\041\107\176\111"
            + "\056\161\203\162\174\211\202\001\002\000\002\001\uff38"
            + "\000\002\001\ufef6\000\002\001\ufefa\000\146\004\152\006"
            + "\113\007\011\010\170\011\053\012\062\016\133\032\107"
            + "\043\245\055\154\056\030\066\157\067\013\070\020\071"
            + "\045\072\046\073\140\074\006\075\034\104\243\105\134"
            + "\106\041\107\067\111\056\112\027\113\072\114\050\115"
            + "\130\116\111\123\064\161\110\162\070\166\153\167\014"
            + "\171\052\172\160\173\026\174\136\175\037\176\132\177"
            + "\075\200\141\201\071\202\035\205\100\211\202\217\156"
            + "\222\104\223\116\224\060\001\002\000\070\031\u0106\120"
            + "\376\121\u010d\122\367\140\373\142\370\143\u0108\144\371"
            + "\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153"
            + "\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\220\u01e7\001"
            + "\002\000\006\101\u01e9\221\u01ea\001\002\000\002\001\uffd3"
            + "\000\004\141\u01fc\001\uff82\000\004\141\u01ec\001\uff82\000"
            + "\010\035\u01f9\036\u01ef\037\u01f0\001\002\000\002\001\uff82"
            + "\000\010\035\u01ee\036\u01ef\037\u01f0\001\002\000\004\141"
            + "\u01f8\001\002\000\146\004\152\006\113\007\011\010\170"
            + "\011\053\012\062\016\133\032\107\043\245\055\154\056"
            + "\030\066\157\067\013\070\020\071\045\072\046\073\140"
            + "\074\006\075\034\104\243\105\134\106\041\107\067\111"
            + "\056\112\027\113\072\114\050\115\130\116\111\123\064"
            + "\161\110\162\070\166\153\167\014\171\052\172\160\173"
            + "\026\174\136\175\037\176\132\177\075\200\141\201\071"
            + "\202\035\205\100\211\202\217\156\222\104\223\116\224"
            + "\060\001\002\000\006\141\u01f3\221\u01f2\001\002\000\002"
            + "\001\uffe3\000\002\001\uff7f\000\002\001\uff7e\000\234\003"
            + "\122\004\152\005\163\006\113\007\011\010\033\011\053"
            + "\012\062\014\077\016\133\017\126\020\123\021\044\023"
            + "\032\025\105\027\164\032\107\034\135\040\055\041\125"
            + "\042\074\043\112\045\143\046\040\050\161\051\241\052"
            + "\012\054\101\055\154\056\030\057\272\060\031\061\150"
            + "\066\157\067\013\070\020\071\045\072\046\073\140\074"
            + "\006\075\034\101\065\104\243\105\134\106\041\107\067"
            + "\110\023\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\141\010\161\110\162\070\166\153\167\014"
            + "\171\052\172\160\173\026\174\136\175\037\176\132\177"
            + "\075\200\141\201\071\202\035\205\100\211\042\212\063"
            + "\213\016\217\156\222\104\223\116\224\060\001\uff80\000"
            + "\072\031\u0106\120\376\121\u010d\122\367\140\373\141\u01f3"
            + "\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150"
            + "\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156\u0109"
            + "\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165"
            + "\366\170\372\221\u01f2\001\002\000\002\001\uffe3\000\234"
            + "\003\122\004\152\005\163\006\113\007\011\010\033\011"
            + "\053\012\062\014\077\016\133\017\126\020\123\021\044"
            + "\023\032\025\105\027\164\032\107\034\135\040\055\041"
            + "\125\042\074\043\112\045\143\046\040\050\161\051\241"
            + "\052\012\054\101\055\154\056\030\057\272\060\031\061"
            + "\150\066\157\067\013\070\020\071\045\072\046\073\140"
            + "\074\006\075\034\101\065\104\243\105\134\106\041\107"
            + "\067\110\023\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\141\010\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\042\212"
            + "\063\213\016\217\156\222\104\223\116\224\060\001\uff81"
            + "\000\002\001\uff83\000\004\141\u01fa\001\002\000\002\001"
            + "\uff84\000\010\036\u01ef\037\u01f0\102\u01ff\001\002\000\002"
            + "\001\uff82\000\010\036\u01ef\037\u01f0\102\u01fe\001\002\000"
            + "\002\001\uff85\000\002\001\uff86\000\002\001\ufef8\000\066"
            + "\031\u0106\120\376\121\u010d\122\367\140\373\142\370\143"
            + "\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365"
            + "\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160"
            + "\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372"
            + "\001\ufe5d\000\066\031\u0106\120\376\121\u010d\122\367\140"
            + "\373\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c"
            + "\150\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156"
            + "\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103"
            + "\165\366\170\372\001\uff36\000\006\117\u0204\141\u0205\001"
            + "\002\000\146\004\152\006\113\007\011\010\170\011\053"
            + "\012\062\016\133\032\107\043\245\055\154\056\030\066"
            + "\157\067\013\070\020\071\045\072\046\073\140\074\006"
            + "\075\034\104\243\105\134\106\041\107\067\111\056\112"
            + "\027\113\072\114\050\115\130\116\111\123\064\161\110"
            + "\162\070\166\153\167\014\171\052\172\160\173\026\174"
            + "\136\175\037\176\132\177\075\200\141\201\071\202\035"
            + "\205\100\211\202\217\156\222\104\223\116\224\060\001"
            + "\002\000\002\001\uffc9\000\066\031\u0106\120\376\121\u010d"
            + "\122\367\140\373\142\370\143\u0108\144\371\145\u0100\146"
            + "\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154\u010a"
            + "\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163"
            + "\u0104\164\u0103\165\366\170\372\001\uff37\000\002\001\uffd0"
            + "\000\070\031\u0106\120\376\121\u010d\122\367\140\373\141"
            + "\u0209\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c"
            + "\150\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156"
            + "\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103"
            + "\165\366\170\372\001\002\000\002\001\uffcf\000\004\021"
            + "\u020b\001\002\000\004\217\u020c\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\070\031\u0106"
            + "\120\376\121\u010d\122\367\140\373\142\370\143\u0108\144"
            + "\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377"
            + "\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161"
            + "\u010e\162\375\163\u0104\164\u0103\165\366\170\372\220\u020e"
            + "\001\002\000\004\141\u020f\001\002\000\002\001\uffd5\000"
            + "\004\010\u0212\001\002\000\002\001\uffef\000\004\124\u0213"
            + "\001\002\000\050\006\113\007\011\010\170\016\133\067"
            + "\177\070\020\071\045\072\046\073\140\074\006\075\172"
            + "\104\204\105\134\106\041\107\176\111\056\161\203\162"
            + "\174\211\202\001\002\000\002\001\uff39\000\004\062\u0217"
            + "\001\uff9a\000\002\001\uffa7\000\014\003\u021a\010\170\104"
            + "\256\107\261\111\056\001\002\000\004\117\u021b\001\uff99"
            + "\000\002\001\uff96\000\002\001\uff93\000\014\003\u021c\010"
            + "\170\104\256\107\261\111\056\001\002\000\002\001\uff94"
            + "\000\002\001\uff95\000\004\101\u021f\001\002\000\002\001"
            + "\uff54\000\034\003\u022d\044\142\053\u0232\060\031\061\150"
            + "\102\u022c\110\u022b\211\u022f\212\u0224\213\u0225\214\u0229\215"
            + "\u0223\216\u022e\001\uff47\000\002\001\uffa2\000\004\043\u0242"
            + "\001\002\000\002\001\uff42\000\004\060\u0241\001\uff3f\000"
            + "\004\060\u0240\001\uff3e\000\002\001\uff55\000\020\043\uff46"
            + "\211\u022f\212\u023e\213\u023f\214\u0229\215\u0223\216\u022e\001"
            + "\uff49\000\002\001\uffa6\000\002\001\uff41\000\002\001\uff45"
            + "\000\002\001\uff4e\000\002\001\uffa3\000\002\001\uff4d\000"
            + "\002\001\uff43\000\002\001\uff40\000\004\012\u0234\001\002"
            + "\000\006\117\u0210\141\u0233\001\002\000\002\001\uff48\000"
            + "\002\001\uff52\000\004\124\u023b\001\uff3b\000\006\117\u0236"
            + "\141\u0237\001\002\000\004\012\u0238\001\002\000\002\001"
            + "\uff53\000\004\124\u0239\001\uff3d\000\050\006\113\007\011"
            + "\010\170\016\133\067\177\070\020\071\045\072\046\073"
            + "\140\074\006\075\172\104\204\105\134\106\041\107\176"
            + "\111\056\161\203\162\174\211\202\001\002\000\002\001"
            + "\uff3c\000\050\006\113\007\011\010\170\016\133\067\177"
            + "\070\020\071\045\072\046\073\140\074\006\075\172\104"
            + "\204\105\134\106\041\107\176\111\056\161\203\162\174"
            + "\211\202\001\002\000\002\001\uff3a\000\002\001\uff44\000"
            + "\002\001\uff3f\000\002\001\uff3e\000\002\001\uff9f\000\002"
            + "\001\uffa0\000\004\146\250\001\uffb1\000\006\010\170\111"
            + "\056\001\002\000\002\001\uff51\000\004\217\u0246\001\002"
            + "\000\020\003\260\010\170\067\252\104\256\107\261\111"
            + "\056\220\uff72\001\uff69\000\004\220\u0248\001\002\000\002"
            + "\001\uff50\000\006\101\u024b\141\u024c\001\uff4a\000\002\001"
            + "\uff4f\000\002\001\uffe3\000\002\001\uff4c\000\236\003\122"
            + "\004\152\005\163\006\113\007\011\010\033\011\053\012"
            + "\062\014\077\016\133\017\126\020\123\021\044\023\032"
            + "\025\105\027\164\032\107\034\135\040\055\041\125\042"
            + "\074\043\112\045\143\046\040\050\161\051\241\052\012"
            + "\054\101\055\154\056\030\057\272\060\031\061\150\066"
            + "\157\067\013\070\020\071\045\072\046\073\140\074\006"
            + "\075\034\101\065\102\u024e\104\243\105\134\106\041\107"
            + "\067\110\023\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\141\010\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\042\212"
            + "\063\213\016\217\156\222\104\223\116\224\060\001\002"
            + "\000\002\001\uff4b\000\006\064\u0263\203\u0262\001\ufe6b\000"
            + "\014\012\062\015\u0261\077\u0253\100\u0252\223\u0260\001\002"
            + "\000\002\001\ufe6d\000\020\010\170\012\062\104\u016f\107"
            + "\u016b\111\056\211\202\222\104\001\002\000\146\004\152"
            + "\006\113\007\011\010\170\011\u0257\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\010\012\062"
            + "\077\u0253\100\u0252\001\002\000\002\001\ufe6c\000\070\031"
            + "\u0106\102\u025c\120\376\121\u010d\122\367\140\373\142\370"
            + "\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151"
            + "\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\001\002\000\004\203\u0258\001\ufeb4\000\146\004\152"
            + "\006\113\007\011\010\170\011\053\012\062\016\133\032"
            + "\107\043\245\055\154\056\030\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\104\243\105"
            + "\134\106\041\107\067\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\070\031\u0106"
            + "\120\376\121\u010d\122\367\140\373\142\370\143\u0108\144"
            + "\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377"
            + "\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161"
            + "\u010e\162\375\163\u0104\164\u0103\165\366\170\372\204\u025a"
            + "\001\002\000\004\102\u025b\001\002\000\002\001\ufe67\000"
            + "\002\001\ufe68\000\004\102\u025e\001\002\000\002\001\ufe66"
            + "\000\002\001\ufe6f\000\002\001\ufeae\000\002\001\ufe6e\000"
            + "\012\010\170\012\062\013\u0268\111\056\001\002\000\006"
            + "\010\170\111\056\001\002\000\002\001\ufe69\000\002\001"
            + "\ufe63\000\004\204\u0269\001\002\000\002\001\ufe65\000\002"
            + "\001\ufe64\000\002\001\ufe6a\000\010\010\170\111\056\217"
            + "\251\001\002\000\002\001\uffaf\000\004\217\u026d\001\002"
            + "\000\020\003\260\010\170\067\252\104\256\107\261\111"
            + "\056\220\uff72\001\uff69\000\004\220\u026f\001\002\000\002"
            + "\001\uffae\000\006\003\u0271\101\u0272\001\002\000\002\001"
            + "\uffab\000\002\001\uffe3\000\002\001\uffad\000\236\003\122"
            + "\004\152\005\163\006\113\007\011\010\033\011\053\012"
            + "\062\014\077\016\133\017\126\020\123\021\044\023\032"
            + "\025\105\027\164\032\107\034\135\040\055\041\125\042"
            + "\074\043\112\045\143\046\040\050\161\051\241\052\012"
            + "\054\101\055\154\056\030\057\272\060\031\061\150\066"
            + "\157\067\013\070\020\071\045\072\046\073\140\074\006"
            + "\075\034\101\065\102\u0275\104\243\105\134\106\041\107"
            + "\067\110\023\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\141\010\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\042\212"
            + "\063\213\016\217\156\222\104\223\116\224\060\001\002"
            + "\000\002\001\uffac\000\066\031\u0106\120\376\121\u010d\122"
            + "\367\140\373\142\370\143\u0108\144\371\145\u0100\146\u0107"
            + "\147\u010c\150\u0101\151\365\152\377\153\u010b\154\u010a\155"
            + "\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104"
            + "\164\u0103\165\366\170\372\001\ufe5c\000\012\031\u0106\163"
            + "\u0104\164\u0103\165\366\001\uff0c\000\002\001\uff2c\000\146"
            + "\004\152\006\113\007\011\010\170\011\053\012\062\016"
            + "\133\032\107\043\245\055\154\056\030\066\157\067\013"
            + "\070\020\071\045\072\046\073\140\074\006\075\034\104"
            + "\243\105\134\106\041\107\067\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\202\217\156\222\104\223\116\224\060\001\002\000\040"
            + "\033\u028b\124\351\125\354\126\352\127\362\130\355\131"
            + "\363\132\357\133\361\134\353\135\350\136\356\137\360"
            + "\171\ufea0\172\ufea0\001\ufea2\000\004\033\u027c\001\ufea3\000"
            + "\020\010\170\012\062\104\u016f\107\u016b\111\056\211\202"
            + "\222\104\001\002\000\004\065\u027f\001\uff92\000\004\220"
            + "\u0284\001\002\000\022\010\170\012\062\104\u016f\107\u016b"
            + "\111\056\146\u0282\211\202\222\104\001\002\000\002\001"
            + "\uff91\000\002\001\uff90\000\020\010\170\012\062\104\u016f"
            + "\107\u016b\111\056\211\202\222\104\001\002\000\002\001"
            + "\uff8f\000\224\003\122\004\152\005\163\006\113\007\011"
            + "\010\033\011\053\012\062\014\077\016\133\017\126\020"
            + "\123\021\044\023\032\025\105\027\164\032\107\034\135"
            + "\040\055\041\125\042\074\043\245\045\143\046\040\050"
            + "\161\051\241\052\012\054\101\055\154\056\030\066\157"
            + "\067\013\070\020\071\045\072\046\073\140\074\006\075"
            + "\034\101\065\104\243\105\134\106\041\107\067\110\023"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\141\010\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\042\217\156\221\u0285"
            + "\222\104\223\116\224\060\001\002\000\002\001\uffe3\000"
            + "\002\001\uff8c\000\002\001\uffc3\000\236\003\122\004\152"
            + "\005\163\006\113\007\011\010\033\011\053\012\062\014"
            + "\077\016\133\017\126\020\123\021\044\023\032\025\105"
            + "\026\u0289\027\164\032\107\034\135\040\055\041\125\042"
            + "\074\043\112\045\143\046\040\050\161\051\241\052\012"
            + "\054\101\055\154\056\030\057\272\060\031\061\150\066"
            + "\157\067\013\070\020\071\045\072\046\073\140\074\006"
            + "\075\034\101\065\104\243\105\134\106\041\107\067\110"
            + "\023\111\056\112\027\113\072\114\050\115\130\116\111"
            + "\123\064\141\010\161\110\162\070\166\153\167\014\171"
            + "\052\172\160\173\026\174\136\175\037\176\132\177\075"
            + "\200\141\201\071\202\035\205\100\211\042\212\063\213"
            + "\016\217\156\222\104\223\116\224\060\001\002\000\004"
            + "\141\u028a\001\002\000\002\001\uff8b\000\022\010\170\012"
            + "\062\104\u016f\107\u016b\111\056\146\u0282\211\202\222\104"
            + "\001\002\000\004\065\u027f\001\uff92\000\004\220\u028e\001"
            + "\002\000\224\003\122\004\152\005\163\006\113\007\011"
            + "\010\033\011\053\012\062\014\077\016\133\017\126\020"
            + "\123\021\044\023\032\025\105\027\164\032\107\034\135"
            + "\040\055\041\125\042\074\043\245\045\143\046\040\050"
            + "\161\051\241\052\012\054\101\055\154\056\030\066\157"
            + "\067\013\070\020\071\045\072\046\073\140\074\006\075"
            + "\034\101\065\104\243\105\134\106\041\107\067\110\023"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\141\010\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\042\217\156\221\u0285"
            + "\222\104\223\116\224\060\001\002\000\002\001\uffc4\000"
            + "\002\001\uff20\000\002\001\uff1e\000\006\003\u0295\101\u0296"
            + "\001\002\000\002\001\ufff4\000\010\003\u0295\101\u0296\141"
            + "\u0299\001\002\000\002\001\uffeb\000\002\001\ufff9\000\002"
            + "\001\uffed\000\002\001\ufff3\000\002\001\uffee\000\240\003"
            + "\122\004\152\005\163\006\113\007\011\010\033\011\053"
            + "\012\062\014\077\016\133\017\126\020\123\021\044\023"
            + "\032\025\105\027\164\032\107\034\135\040\055\041\125"
            + "\042\074\043\112\044\142\045\143\046\040\050\161\051"
            + "\025\052\012\054\101\055\154\056\030\057\057\060\031"
            + "\061\150\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\101\065\102\u029b\104\102\105\134"
            + "\106\041\107\067\110\023\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\141\010\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\042\212\063\213\016\217\156\222\104\223\116\224"
            + "\060\001\002\000\002\001\uffec\000\002\001\ufffa\000\002"
            + "\001\ufff1\000\020\010\170\012\062\104\u016f\107\u016b\111"
            + "\056\211\202\222\104\001\002\000\002\001\uffb8\000\002"
            + "\001\uffb6\000\006\117\u02a3\220\u02a2\001\002\000\004\141"
            + "\u02a5\001\002\000\020\010\170\012\062\104\u016f\107\u016b"
            + "\111\056\211\202\222\104\001\002\000\002\001\uffb7\000"
            + "\002\001\uffc5\000\004\217\u0178\001\ufecb\000\002\001\uff2d"
            + "\000\002\001\ufef7\000\004\141\u02aa\001\002\000\002\001"
            + "\uffbe\000\010\101\u0128\203\u0129\217\ufe97\001\ufe90\000\066"
            + "\031\u0106\120\376\121\u010d\122\367\140\373\142\370\143"
            + "\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365"
            + "\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160"
            + "\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372"
            + "\001\ufe5f\000\002\001\ufef5\000\012\031\u0106\163\u0104\164"
            + "\u0103\165\366\001\uff0b\000\006\103\ufedc\217\u0185\001\ufeb0"
            + "\000\002\001\uffe3\000\236\003\122\004\152\005\163\006"
            + "\113\007\011\010\033\011\053\012\062\014\077\016\133"
            + "\017\126\020\123\021\044\023\032\025\105\027\164\032"
            + "\107\034\135\040\055\041\125\042\074\043\112\045\143"
            + "\046\040\050\161\051\241\052\012\054\101\055\154\056"
            + "\030\057\272\060\031\061\150\066\157\067\013\070\020"
            + "\071\045\072\046\073\140\074\006\075\034\101\065\102"
            + "\u02b2\104\243\105\134\106\041\107\067\110\023\111\056"
            + "\112\027\113\072\114\050\115\130\116\111\123\064\141"
            + "\010\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\042\212\063\213\016\217\156"
            + "\222\104\223\116\224\060\001\002\000\002\001\uffd9\000"
            + "\060\031\u0106\140\373\142\370\143\u0108\144\371\145\u0100"
            + "\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154"
            + "\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375"
            + "\163\u0104\164\u0103\165\366\170\372\001\ufeef\000\010\010"
            + "\u02b5\012\062\222\104\001\002\000\004\217\u017e\001\ufe59"
            + "\000\004\224\u02b9\001\002\000\012\012\062\015\u0261\077"
            + "\u0253\100\u0252\001\ufecc\000\010\012\062\077\u0253\100\u0252"
            + "\001\ufecd\000\002\001\ufef0\000\004\220\u02bb\001\002\000"
            + "\004\141\u02bc\001\002\000\002\001\ufff5\000\002\001\uffd2"
            + "\000\070\031\u0106\120\376\121\u010d\122\367\140\373\141"
            + "\u02bf\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c"
            + "\150\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156"
            + "\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103"
            + "\165\366\170\372\001\002\000\002\001\uffd1\000\002\001"
            + "\uff1f\000\014\010\170\012\062\101\u0136\111\056\222\104"
            + "\001\002\000\004\217\u02c4\001\ufe99\000\002\001\ufe9c\000"
            + "\150\004\152\006\113\007\011\010\170\011\053\012\062"
            + "\016\133\032\107\043\245\055\154\056\030\066\157\067"
            + "\013\070\020\071\045\072\046\073\140\074\006\075\034"
            + "\104\243\105\134\106\041\107\067\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\146\337\161\110"
            + "\162\070\166\153\167\014\171\052\172\160\173\026\174"
            + "\136\175\037\176\132\177\075\200\141\201\071\202\035"
            + "\205\100\211\202\217\156\222\104\223\116\224\060\001"
            + "\uff65\000\004\220\u02c6\001\002\000\002\001\ufe9a\000\004"
            + "\064\u02c9\001\ufe9f\000\002\001\ufe9d\000\014\010\170\012"
            + "\062\101\u0136\111\056\222\104\001\002\000\004\217\u02c4"
            + "\001\ufe99\000\002\001\ufe9b\000\146\004\152\006\113\007"
            + "\011\010\170\011\053\012\062\016\133\032\107\043\245"
            + "\055\154\056\030\066\157\067\013\070\020\071\045\072"
            + "\046\073\140\074\006\075\034\104\243\105\134\106\041"
            + "\107\067\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\161\110\162\070\166\153\167\014\171\052"
            + "\172\160\173\026\174\136\175\037\176\132\177\075\200"
            + "\141\201\071\202\035\205\100\211\202\217\156\222\104"
            + "\223\116\224\060\001\002\000\070\031\u0106\120\376\121"
            + "\u010d\122\367\140\373\142\370\143\u0108\144\371\145\u0100"
            + "\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b\154"
            + "\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162\375"
            + "\163\u0104\164\u0103\165\366\170\372\220\u02ce\001\002\000"
            + "\002\001\ufe5e\000\002\001\uffaa\000\004\062\u02d1\001\uff9e"
            + "\000\014\003\u02dd\010\170\104\256\107\261\111\056\001"
            + "\002\000\004\003\u02d4\001\uffa4\000\004\063\u02d6\001\uff98"
            + "\000\002\001\uffa5\000\002\001\uffa9\000\014\003\u021a\010"
            + "\170\104\256\107\261\111\056\001\002\000\004\117\u021b"
            + "\001\uff97\000\004\101\u02d9\001\002\000\002\001\uff54\000"
            + "\034\003\u022d\044\142\053\u0232\060\031\061\150\102\u022c"
            + "\110\u022b\211\u022f\212\u0224\213\u0225\214\u0229\215\u0223\216"
            + "\u022e\001\uff47\000\002\001\uffa8\000\002\001\uff9d\000\002"
            + "\001\uff9c\000\146\004\152\006\113\007\011\010\170\011"
            + "\053\012\062\016\133\032\107\043\245\055\154\056\030"
            + "\066\157\067\013\070\020\071\045\072\046\073\140\074"
            + "\006\075\034\104\243\105\134\106\041\107\067\111\056"
            + "\112\027\113\072\114\050\115\130\116\111\123\064\161"
            + "\110\162\070\166\153\167\014\171\052\172\160\173\026"
            + "\174\136\175\037\176\132\177\075\200\141\201\071\202"
            + "\035\205\100\211\202\217\156\222\104\223\116\224\060"
            + "\001\002\000\070\031\u0106\120\376\121\u010d\122\367\140"
            + "\373\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c"
            + "\150\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156"
            + "\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103"
            + "\165\366\170\372\220\u02e0\001\002\000\224\003\122\004"
            + "\152\005\163\006\113\007\011\010\033\011\053\012\062"
            + "\014\077\016\133\017\126\020\123\021\044\023\032\025"
            + "\105\027\164\032\107\034\135\040\055\041\125\042\074"
            + "\043\245\045\143\046\040\050\161\051\241\052\012\054"
            + "\101\055\154\056\030\066\157\067\013\070\020\071\045"
            + "\072\046\073\140\074\006\075\034\101\065\104\243\105"
            + "\134\106\041\107\067\110\023\111\056\112\027\113\072"
            + "\114\050\115\130\116\111\123\064\141\010\161\110\162"
            + "\070\166\153\167\014\171\052\172\160\173\026\174\136"
            + "\175\037\176\132\177\075\200\141\201\071\202\035\205"
            + "\100\211\042\217\156\221\u02e1\222\104\223\116\224\060"
            + "\001\002\000\002\001\uffe3\000\002\001\uffd6\000\002\001"
            + "\uff7d\000\236\003\122\004\152\005\163\006\113\007\011"
            + "\010\033\011\053\012\062\014\077\016\133\017\126\020"
            + "\123\021\044\022\u02e5\023\032\025\105\027\164\032\107"
            + "\034\135\040\055\041\125\042\074\043\112\045\143\046"
            + "\040\050\161\051\241\052\012\054\101\055\154\056\030"
            + "\057\272\060\031\061\150\066\157\067\013\070\020\071"
            + "\045\072\046\073\140\074\006\075\034\101\065\104\243"
            + "\105\134\106\041\107\067\110\023\111\056\112\027\113"
            + "\072\114\050\115\130\116\111\123\064\141\010\161\110"
            + "\162\070\166\153\167\014\171\052\172\160\173\026\174"
            + "\136\175\037\176\132\177\075\200\141\201\071\202\035"
            + "\205\100\211\042\212\063\213\016\217\156\222\104\223"
            + "\116\224\060\001\002\000\004\141\u02e6\001\002\000\002"
            + "\001\uff7c\000\004\124\u02ee\001\uff57\000\006\117\u02e9\141"
            + "\u02ea\001\002\000\004\012\u02eb\001\002\000\002\001\uffca"
            + "\000\004\124\u02ec\001\uff59\000\050\006\113\007\011\010"
            + "\170\016\133\067\177\070\020\071\045\072\046\073\140"
            + "\074\006\075\172\104\204\105\134\106\041\107\176\111"
            + "\056\161\203\162\174\211\202\001\002\000\002\001\uff58"
            + "\000\050\006\113\007\011\010\170\016\133\067\177\070"
            + "\020\071\045\072\046\073\140\074\006\075\172\104\204"
            + "\105\134\106\041\107\176\111\056\161\203\162\174\211"
            + "\202\001\002\000\002\001\uff56\000\002\001\uffe3\000\236"
            + "\003\122\004\152\005\163\006\113\007\011\010\033\011"
            + "\053\012\062\014\077\016\133\017\126\020\123\021\044"
            + "\023\032\025\105\027\164\032\107\034\135\040\055\041"
            + "\125\042\074\043\112\045\143\046\040\050\161\051\241"
            + "\052\012\054\101\055\154\056\030\057\272\060\031\061"
            + "\150\066\157\067\013\070\020\071\045\072\046\073\140"
            + "\074\006\075\034\101\065\102\u02f2\104\243\105\134\106"
            + "\041\107\067\110\023\111\056\112\027\113\072\114\050"
            + "\115\130\116\111\123\064\141\010\161\110\162\070\166"
            + "\153\167\014\171\052\172\160\173\026\174\136\175\037"
            + "\176\132\177\075\200\141\201\071\202\035\205\100\211"
            + "\042\212\063\213\016\217\156\222\104\223\116\224\060"
            + "\001\002\000\004\047\u02f3\001\002\000\004\217\u02f4\001"
            + "\002\000\012\010\170\104\256\107\261\111\056\001\002"
            + "\000\004\012\062\001\002\000\004\220\u02f7\001\002\000"
            + "\004\101\u02f8\001\002\000\002\001\uffe3\000\236\003\122"
            + "\004\152\005\163\006\113\007\011\010\033\011\053\012"
            + "\062\014\077\016\133\017\126\020\123\021\044\023\032"
            + "\025\105\027\164\032\107\034\135\040\055\041\125\042"
            + "\074\043\112\045\143\046\040\050\161\051\241\052\012"
            + "\054\101\055\154\056\030\057\272\060\031\061\150\066"
            + "\157\067\013\070\020\071\045\072\046\073\140\074\006"
            + "\075\034\101\065\102\u02fa\104\243\105\134\106\041\107"
            + "\067\110\023\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\141\010\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\042\212"
            + "\063\213\016\217\156\222\104\223\116\224\060\001\002"
            + "\000\004\047\u02fb\001\uffbc\000\004\217\u0300\001\002\000"
            + "\002\001\uffc0\000\002\001\uffbb\000\004\047\u02fb\001\uffbd"
            + "\000\002\001\uffba\000\012\010\170\104\256\107\261\111"
            + "\056\001\002\000\004\012\u0302\001\002\000\004\220\u0303"
            + "\001\002\000\004\101\u0304\001\002\000\002\001\uffe3\000"
            + "\236\003\122\004\152\005\163\006\113\007\011\010\033"
            + "\011\053\012\062\014\077\016\133\017\126\020\123\021"
            + "\044\023\032\025\105\027\164\032\107\034\135\040\055"
            + "\041\125\042\074\043\112\045\143\046\040\050\161\051"
            + "\241\052\012\054\101\055\154\056\030\057\272\060\031"
            + "\061\150\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\101\065\102\u0306\104\243\105\134"
            + "\106\041\107\067\110\023\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\141\010\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\042\212\063\213\016\217\156\222\104\223\116\224"
            + "\060\001\002\000\002\001\uffb9\000\002\001\ufef9\000\002"
            + "\001\ufef3\000\014\012\062\015\u0261\076\u030b\077\u0253\100"
            + "\u0252\001\002\000\012\012\062\076\233\077\u0253\100\u0252"
            + "\001\002\000\002\001\ufead\000\002\001\uffdd\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\uff35\000\066\031"
            + "\u0106\120\376\121\u010d\122\367\140\373\142\370\143\u0108"
            + "\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152"
            + "\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001"
            + "\uff32\000\004\141\u0313\001\002\000\004\117\u0311\001\uff34"
            + "\000\146\004\152\006\113\007\011\010\170\011\053\012"
            + "\062\016\133\032\107\043\245\055\154\056\030\066\157"
            + "\067\013\070\020\071\045\072\046\073\140\074\006\075"
            + "\034\104\243\105\134\106\041\107\067\111\056\112\027"
            + "\113\072\114\050\115\130\116\111\123\064\161\110\162"
            + "\070\166\153\167\014\171\052\172\160\173\026\174\136"
            + "\175\037\176\132\177\075\200\141\201\071\202\035\205"
            + "\100\211\202\217\156\222\104\223\116\224\060\001\002"
            + "\000\066\031\u0106\120\376\121\u010d\122\367\140\373\142"
            + "\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101"
            + "\151\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157"
            + "\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366"
            + "\170\372\001\uff33\000\146\004\152\006\113\007\011\010"
            + "\170\011\053\012\062\016\133\032\107\043\245\055\154"
            + "\056\030\066\157\067\013\070\020\071\045\072\046\073"
            + "\140\074\006\075\034\104\243\105\134\106\041\107\067"
            + "\111\056\112\027\113\072\114\050\115\130\116\111\123"
            + "\064\161\110\162\070\166\153\167\014\171\052\172\160"
            + "\173\026\174\136\175\037\176\132\177\075\200\141\201"
            + "\071\202\035\205\100\211\202\217\156\222\104\223\116"
            + "\224\060\001\uff35\000\004\141\u0315\001\002\000\146\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\161\110\162\070\166\153"
            + "\167\014\171\052\172\160\173\026\174\136\175\037\176"
            + "\132\177\075\200\141\201\071\202\035\205\100\211\202"
            + "\217\156\222\104\223\116\224\060\001\uff35\000\004\220"
            + "\u0317\001\002\000\224\003\122\004\152\005\163\006\113"
            + "\007\011\010\033\011\053\012\062\014\077\016\133\017"
            + "\126\020\123\021\044\023\032\025\105\027\164\032\107"
            + "\034\135\040\055\041\125\042\074\043\245\045\143\046"
            + "\040\050\161\051\241\052\012\054\101\055\154\056\030"
            + "\066\157\067\013\070\020\071\045\072\046\073\140\074"
            + "\006\075\034\101\065\104\243\105\134\106\041\107\067"
            + "\110\023\111\056\112\027\113\072\114\050\115\130\116"
            + "\111\123\064\141\010\161\110\162\070\166\153\167\014"
            + "\171\052\172\160\173\026\174\136\175\037\176\132\177"
            + "\075\200\141\201\071\202\035\205\100\211\042\217\156"
            + "\221\u0319\222\104\223\116\224\060\001\002\000\002\001"
            + "\uffd4\000\002\001\uffe3\000\002\001\uff8e\000\236\003\122"
            + "\004\152\005\163\006\113\007\011\010\033\011\053\012"
            + "\062\014\077\016\133\017\126\020\123\021\044\023\032"
            + "\024\u031c\025\105\027\164\032\107\034\135\040\055\041"
            + "\125\042\074\043\112\045\143\046\040\050\161\051\241"
            + "\052\012\054\101\055\154\056\030\057\272\060\031\061"
            + "\150\066\157\067\013\070\020\071\045\072\046\073\140"
            + "\074\006\075\034\101\065\104\243\105\134\106\041\107"
            + "\067\110\023\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\141\010\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\042\212"
            + "\063\213\016\217\156\222\104\223\116\224\060\001\002"
            + "\000\004\141\u031d\001\002\000\002\001\uff8d\000\020\010"
            + "\170\012\062\104\u016f\107\u016b\111\056\211\202\222\104"
            + "\001\002\000\004\220\u0320\001\002\000\002\001\ufe61\000"
            + "\066\031\u0106\120\376\121\u010d\122\367\140\373\142\370"
            + "\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151"
            + "\365\152\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105"
            + "\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165\366\170"
            + "\372\001\ufe60\000\002\001\ufefb\000\004\033\u032d\001\uffe8"
            + "\000\002\001\uffe9\000\006\010\170\111\056\001\002\000"
            + "\006\117\u0327\141\u0328\001\002\000\010\010\170\107\u0325"
            + "\111\056\001\002\000\002\001\ufff0\000\002\001\uffea\000"
            + "\004\033\u032b\001\uffe6\000\004\010\u032c\001\002\000\002"
            + "\001\uffe5\000\004\010\u032e\001\002\000\002\001\uffe7\000"
            + "\002\001\uffc7\000\002\001\uff09\000\150\004\152\006\113"
            + "\007\011\010\170\011\053\012\062\016\133\032\107\043"
            + "\245\055\154\056\030\066\157\067\013\070\020\071\045"
            + "\072\046\073\140\074\006\075\034\104\243\105\134\106"
            + "\041\107\067\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\146\u0332\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\ufe79\000\020\010\170"
            + "\012\062\104\u016f\107\u016b\111\056\211\202\222\104\001"
            + "\002\000\070\031\u0106\065\u0340\120\376\121\u010d\122\367"
            + "\140\373\142\370\143\u0108\144\371\145\u0100\146\u0107\147"
            + "\u010c\150\u0101\151\365\152\377\153\u010b\154\u010a\155\374"
            + "\156\u0109\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164"
            + "\u0103\165\366\170\372\001\ufe74\000\004\117\u0337\001\ufeaa"
            + "\000\004\220\u0336\001\002\000\002\001\ufef1\000\150\004"
            + "\152\006\113\007\011\010\170\011\053\012\062\016\133"
            + "\032\107\043\245\055\154\056\030\066\157\067\013\070"
            + "\020\071\045\072\046\073\140\074\006\075\034\104\243"
            + "\105\134\106\041\107\067\111\056\112\027\113\072\114"
            + "\050\115\130\116\111\123\064\146\u0339\161\110\162\070"
            + "\166\153\167\014\171\052\172\160\173\026\174\136\175"
            + "\037\176\132\177\075\200\141\201\071\202\035\205\100"
            + "\211\202\217\156\222\104\223\116\224\060\001\ufea9\000"
            + "\002\001\ufe78\000\020\010\170\012\062\104\u016f\107\u016b"
            + "\111\056\211\202\222\104\001\002\000\070\031\u0106\065"
            + "\u033b\120\376\121\u010d\122\367\140\373\142\370\143\u0108"
            + "\144\371\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152"
            + "\377\153\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102"
            + "\161\u010e\162\375\163\u0104\164\u0103\165\366\170\372\001"
            + "\ufe76\000\150\004\152\006\113\007\011\010\170\011\053"
            + "\012\062\016\133\032\107\043\245\055\154\056\030\066"
            + "\157\067\013\070\020\071\045\072\046\073\140\074\006"
            + "\075\034\104\243\105\134\106\041\107\067\111\056\112"
            + "\027\113\072\114\050\115\130\116\111\123\064\146\u033c"
            + "\161\110\162\070\166\153\167\014\171\052\172\160\173"
            + "\026\174\136\175\037\176\132\177\075\200\141\201\071"
            + "\202\035\205\100\211\202\217\156\222\104\223\116\224"
            + "\060\001\002\000\020\010\170\012\062\104\u016f\107\u016b"
            + "\111\056\211\202\222\104\001\002\000\066\031\u0106\120"
            + "\376\121\u010d\122\367\140\373\142\370\143\u0108\144\371"
            + "\145\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153"
            + "\u010b\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e"
            + "\162\375\163\u0104\164\u0103\165\366\170\372\001\ufe77\000"
            + "\002\001\ufe73\000\002\001\ufe72\000\150\004\152\006\113"
            + "\007\011\010\170\011\053\012\062\016\133\032\107\043"
            + "\245\055\154\056\030\066\157\067\013\070\020\071\045"
            + "\072\046\073\140\074\006\075\034\104\243\105\134\106"
            + "\041\107\067\111\056\112\027\113\072\114\050\115\130"
            + "\116\111\123\064\146\u0341\161\110\162\070\166\153\167"
            + "\014\171\052\172\160\173\026\174\136\175\037\176\132"
            + "\177\075\200\141\201\071\202\035\205\100\211\202\217"
            + "\156\222\104\223\116\224\060\001\002\000\020\010\170"
            + "\012\062\104\u016f\107\u016b\111\056\211\202\222\104\001"
            + "\002\000\066\031\u0106\120\376\121\u010d\122\367\140\373"
            + "\142\370\143\u0108\144\371\145\u0100\146\u0107\147\u010c\150"
            + "\u0101\151\365\152\377\153\u010b\154\u010a\155\374\156\u0109"
            + "\157\u0105\160\u0102\161\u010e\162\375\163\u0104\164\u0103\165"
            + "\366\170\372\001\ufe75\000\002\001\ufe71\000\002\001\ufe70"
            + "\000\006\117\u034e\141\u034f\001\002\000\002\001\uff5c\000"
            + "\022\010\170\012\062\101\u034b\104\u016f\107\u016b\111\056"
            + "\211\202\222\104\001\002\000\002\001\uff5d\000\002\001"
            + "\uff5b\000\002\001\ufea2\000\146\004\152\006\113\007\011"
            + "\010\170\011\053\012\062\016\133\032\107\043\245\055"
            + "\154\056\030\066\157\067\013\070\020\071\045\072\046"
            + "\073\140\074\006\075\034\104\243\105\134\106\041\107"
            + "\067\111\056\112\027\113\072\114\050\115\130\116\111"
            + "\123\064\161\110\162\070\166\153\167\014\171\052\172"
            + "\160\173\026\174\136\175\037\176\132\177\075\200\141"
            + "\201\071\202\035\205\100\211\202\217\156\222\104\223"
            + "\116\224\060\001\002\000\070\031\u0106\102\u034d\120\376"
            + "\121\u010d\122\367\140\373\142\370\143\u0108\144\371\145"
            + "\u0100\146\u0107\147\u010c\150\u0101\151\365\152\377\153\u010b"
            + "\154\u010a\155\374\156\u0109\157\u0105\160\u0102\161\u010e\162"
            + "\375\163\u0104\164\u0103\165\366\170\372\001\002\000\002"
            + "\001\uff5a\000\006\012\u0346\222\u0347\001\002\000\002\001"
            + "\uffcb\000\002\001\uff5e\000\150\004\152\006\113\007\011"
            + "\010\170\011\053\012\062\016\133\032\107\043\245\055"
            + "\154\056\030\066\157\067\013\070\020\071\045\072\046"
            + "\073\140\074\006\075\034\104\243\105\134\106\041\107"
            + "\067\111\056\112\027\113\072\114\050\115\130\116\111"
            + "\123\064\146\337\161\110\162\070\166\153\167\014\171"
            + "\052\172\160\173\026\174\136\175\037\176\132\177\075"
            + "\200\141\201\071\202\035\205\100\211\202\217\156\222"
            + "\104\223\116\224\060\001\uff65\000\004\220\u0353\001\002"
            + "\000\002\001\ufee0\000\002\001\000" });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\u0352\000\006\003\003\010\004\001\001\000\002\001"
            + "\001\000\104\004\150\005\146\012\161\013\154\016\114"
            + "\060\143\061\042\064\113\066\014\072\016\073\053\074"
            + "\144\075\123\102\072\113\065\114\130\115\117\120\060"
            + "\123\120\134\105\135\126\136\021\142\136\143\023\144"
            + "\046\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\006\047\u0344"
            + "\050\u0347\001\001\000\002\001\001\000\060\004\150\005"
            + "\146\060\143\061\042\064\113\066\014\072\u032f\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\021\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\016\004\u0322\005\146\006\u0323\007\u0325\021\u0196\114\130"
            + "\001\001\000\060\004\150\005\146\060\143\061\042\064"
            + "\113\066\014\072\u0321\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u0320\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\010\107\u0308\111\u0250\160\u024e\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u0307\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\002\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u0306\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\002"
            + "\001\001\000\002\001\001\000\004\051\u02e7\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\042\004\u016f\005\146\061\042\073\053\074\u0169"
            + "\075\123\102\072\114\130\120\u016b\136\u01ba\153\u02bf\154"
            + "\006\156\020\160\116\164\035\170\050\001\001\000\002"
            + "\001\001\000\002\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u02bd\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\002\001\001\000\002\001\001\000"
            + "\012\107\u02b6\110\u02b5\111\u0250\160\u024e\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\060\004"
            + "\150\005\146\060\143\061\042\064\113\066\014\072\u02b2"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\120"
            + "\060\136\021\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\004\176\u02af\001"
            + "\001\000\002\001\001\000\010\004\u02ae\005\146\114\130"
            + "\001\001\000\060\004\150\005\146\060\143\061\042\064"
            + "\113\066\014\072\u02ad\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u02ac\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u02ab\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\010\073\u02aa"
            + "\075\123\160\116\001\001\000\002\001\001\000\060\004"
            + "\150\005\146\060\143\061\042\064\113\066\014\072\u02a7"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\120"
            + "\060\136\021\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\002\001\001\000"
            + "\002\001\001\000\034\004\u011f\005\146\073\u0119\074\u0117"
            + "\075\123\102\u011d\114\130\120\u011a\156\020\160\116\161"
            + "\u02a5\163\u0116\164\u011c\001\001\000\002\001\001\000\012"
            + "\004\u0292\005\146\114\130\175\u0291\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u0277\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u0276\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u0275\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\004\054\u0269\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\010\107\u024f\111\u0250\160\u024e\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\064\004\150\005\146\013\u0209\016\114\060\143\061\042"
            + "\064\113\066\014\072\016\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\002\001\001\000\060\004\150\005\146\060\143"
            + "\061\042\064\113\066\014\072\u0207\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\021\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\062\004\150\005\146\055\u0202\060\143"
            + "\061\042\064\113\066\014\072\u0201\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\021\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\002\001\001\000\060\004\150\005\146"
            + "\060\143\061\042\064\113\066\014\072\u0200\073\053\074"
            + "\144\075\123\102\072\113\065\114\130\120\060\136\021"
            + "\151\145\153\102\154\006\156\020\160\116\162\075\164"
            + "\035\170\050\001\001\000\002\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u01ff\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u01e3\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\002\001\001\000\002\001\001\000"
            + "\060\004\150\005\146\060\143\061\042\064\113\066\014"
            + "\072\u01e2\073\053\074\144\075\123\102\072\113\065\114"
            + "\130\120\060\136\021\151\145\153\102\154\006\156\020"
            + "\160\116\162\075\164\035\170\050\001\001\000\002\001"
            + "\001\000\060\004\150\005\146\060\u01dc\061\042\064\113"
            + "\066\014\072\337\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\u01db\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\004\062"
            + "\u01d2\001\001\000\060\004\150\005\146\060\143\061\042"
            + "\064\113\066\014\072\u01d0\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\002\001\001\000\002\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u01c8\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\002\001\001\000\042"
            + "\004\u016f\005\146\061\042\073\053\074\u0169\075\123\102"
            + "\072\114\130\120\u016b\136\u01ba\153\u01b9\154\006\156\020"
            + "\160\116\164\035\170\050\001\001\000\060\004\150\005"
            + "\146\060\143\061\042\064\113\066\014\072\u01b7\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\021\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\006\027\165\114\166\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\020\004\204\005\146\064\172\065\200\114\130\120\177"
            + "\167\174\001\001\000\002\001\001\000\002\001\001\000"
            + "\020\004\204\005\146\064\172\065\227\114\130\120\177"
            + "\167\174\001\001\000\002\001\001\000\010\004\226\005"
            + "\146\114\130\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\020\004\204\005"
            + "\146\064\172\065\207\114\130\120\177\167\174\001\001"
            + "\000\002\001\001\000\002\001\001\000\010\004\206\005"
            + "\146\114\130\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\024\004\204\005"
            + "\146\064\172\065\215\067\213\071\214\114\130\120\177"
            + "\167\174\001\001\000\002\001\001\000\004\070\221\001"
            + "\001\000\002\001\001\000\020\004\204\005\146\064\172"
            + "\065\217\114\130\120\177\167\174\001\001\000\002\001"
            + "\001\000\020\004\204\005\146\064\172\065\222\114\130"
            + "\120\177\167\174\001\001\000\002\001\001\000\002\001"
            + "\001\000\020\004\204\005\146\064\172\065\224\114\130"
            + "\120\177\167\174\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\066\004\150\005"
            + "\146\013\245\016\114\026\241\060\143\061\042\064\113"
            + "\066\014\072\016\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\004\114\235\001\001\000\002\001\001\000\020\004\204"
            + "\005\146\064\172\065\237\114\130\120\177\167\174\001"
            + "\001\000\002\001\001\000\004\021\u0196\001\001\000\002"
            + "\001\001\000\002\001\001\000\004\014\327\001\001\000"
            + "\004\054\246\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\022\004\252\005\146\040\262\043"
            + "\254\044\261\114\130\121\256\150\253\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\010\004\313\005\146\114\130\001\001\000\002\001"
            + "\001\000\002\001\001\000\004\041\265\001\001\000\002"
            + "\001\001\000\002\001\001\000\004\014\267\001\001\000"
            + "\102\004\150\005\146\013\275\015\270\016\114\060\143"
            + "\061\042\064\113\066\014\072\016\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\115\117\120\060\134\272"
            + "\135\274\136\021\142\136\143\023\144\046\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\004\042\303\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\010\004\315\005\146\114"
            + "\130\001\001\000\002\001\001\000\016\004\252\005\146"
            + "\044\317\114\130\121\256\150\253\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\020\004\204"
            + "\005\146\064\172\065\323\114\130\120\177\167\174\001"
            + "\001\000\002\001\001\000\002\001\001\000\020\004\204"
            + "\005\146\064\172\065\326\114\130\120\177\167\174\001"
            + "\001\000\002\001\001\000\102\004\150\005\146\013\275"
            + "\015\270\016\114\060\143\061\042\064\113\066\014\072"
            + "\016\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\115\117\120\060\134\272\135\274\136\021\142\136\143"
            + "\023\144\046\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\002\001\001\000"
            + "\002\001\001\000\010\004\333\005\146\114\130\001\001"
            + "\000\002\001\001\000\064\004\150\005\146\045\335\046"
            + "\341\060\342\061\042\064\113\066\014\072\337\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\340\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\042\004"
            + "\u016f\005\146\061\042\073\053\074\u0169\075\123\102\072"
            + "\114\130\117\u0193\120\u016b\136\u0192\154\006\156\020\160"
            + "\116\164\035\170\050\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\060\004"
            + "\150\005\146\060\346\061\042\064\113\066\014\072\337"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\120"
            + "\060\136\345\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\042\004\u016f\005"
            + "\146\061\042\073\053\074\u0169\075\123\102\072\114\130"
            + "\117\u0191\120\u016b\136\u0192\154\006\156\020\160\116\164"
            + "\035\170\050\001\001\000\002\001\001\000\002\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u0190\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u0168\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u0166\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\060\004\150\005\146"
            + "\060\143\061\042\064\113\066\014\072\u0165\073\053\074"
            + "\144\075\123\102\072\113\065\114\130\120\060\136\021"
            + "\151\145\153\102\154\006\156\020\160\116\162\075\164"
            + "\035\170\050\001\001\000\060\004\150\005\146\060\143"
            + "\061\042\064\113\066\014\072\u0164\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\021\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\060\004\150\005\146\060\143\061\042"
            + "\064\113\066\014\072\u0163\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\060\004\150\005\146\060\143\061\042\064\113"
            + "\066\014\072\u0162\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\060\004\150\005\146\060\143\061\042\064\113\066\014"
            + "\072\u0161\073\053\074\144\075\123\102\072\113\065\114"
            + "\130\120\060\136\021\151\145\153\102\154\006\156\020"
            + "\160\116\162\075\164\035\170\050\001\001\000\060\004"
            + "\150\005\146\060\143\061\042\064\113\066\014\072\u0160"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\120"
            + "\060\136\021\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\060\004\150\005"
            + "\146\060\143\061\042\064\113\066\014\072\u015f\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\021\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u015e\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\060\004\150\005\146\060\143\061"
            + "\042\064\113\066\014\072\363\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\120\060\136\021\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\002\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u015d\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\060\004\150\005\146\060\143\061"
            + "\042\064\113\066\014\072\u015c\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\120\060\136\021\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\060\004\150\005\146\060\143\061\042\064"
            + "\113\066\014\072\u015b\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u015a\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u0159\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u0158\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\060\004\150\005\146"
            + "\060\143\061\042\064\113\066\014\072\u0153\073\053\074"
            + "\144\075\123\102\072\113\065\114\130\120\060\136\021"
            + "\151\145\153\102\154\006\156\020\160\116\162\075\164"
            + "\035\170\050\001\001\000\060\004\150\005\146\060\143"
            + "\061\042\064\113\066\014\072\u0152\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\021\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\060\004\150\005\146\060\143\061\042"
            + "\064\113\066\014\072\u0151\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\060\004\150\005\146\060\143\061\042\064\113"
            + "\066\014\072\u0150\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\060\004\150\005\146\060\143\061\042\064\113\066\014"
            + "\072\u014f\073\053\074\144\075\123\102\072\113\065\114"
            + "\130\120\060\136\021\151\145\153\102\154\006\156\020"
            + "\160\116\162\075\164\035\170\050\001\001\000\060\004"
            + "\150\005\146\060\143\061\042\064\113\066\014\072\u014e"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\120"
            + "\060\136\021\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\060\004\150\005"
            + "\146\060\143\061\042\064\113\066\014\072\u014d\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\021\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u014c\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\060\004\150\005\146\060\143\061"
            + "\042\064\113\066\014\072\u014b\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\120\060\136\021\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\060\004\150\005\146\060\143\061\042\064"
            + "\113\066\014\072\u014a\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u0149\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\034"
            + "\004\u011f\005\146\073\u0119\074\u0117\075\123\102\u011d\114"
            + "\130\120\u011a\156\020\160\116\161\u011b\163\u0116\164\u011c"
            + "\001\001\000\060\004\150\005\146\060\143\061\042\064"
            + "\113\066\014\072\u0115\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\060\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u0114\073\053\074\144\075\123\102\072\113\065"
            + "\114\130\120\060\136\021\151\145\153\102\154\006\156"
            + "\020\160\116\162\075\164\035\170\050\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u0113\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u0112\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\060\004\150\005\146"
            + "\060\143\061\042\064\113\066\014\072\u0111\073\053\074"
            + "\144\075\123\102\072\113\065\114\130\120\060\136\021"
            + "\151\145\153\102\154\006\156\020\160\116\162\075\164"
            + "\035\170\050\001\001\000\060\004\150\005\146\060\143"
            + "\061\042\064\113\066\014\072\u0110\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\021\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\060\004\150\005\146\060\143\061\042"
            + "\064\113\066\014\072\u010f\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\060\004\150\005\146\060\143\061\042\064\113"
            + "\066\014\072\u010e\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\010\004\u0146\005\146\114\130\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\010\073\u0122\075\123\160\116\001\001\000\002\001"
            + "\001\000\002\001\001\000\010\004\u0121\005\146\114\130"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\060\004\150\005\146\060\143\061\042\064\113"
            + "\066\014\072\u0125\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\060\004\150\005\146"
            + "\060\143\061\042\064\113\066\014\072\u012c\073\053\074"
            + "\144\075\123\102\072\113\065\114\130\120\060\136\021"
            + "\151\145\153\102\154\006\156\020\160\116\162\075\164"
            + "\035\170\050\001\001\000\062\004\150\005\146\060\143"
            + "\061\042\064\113\066\014\072\u0129\073\053\074\144\075"
            + "\123\076\u012a\102\072\113\065\114\130\120\060\136\021"
            + "\151\145\153\102\154\006\156\020\160\116\162\075\164"
            + "\035\170\050\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\024\073\u0136\075\123\077\u0132\100\u0133\101\u0130\102\u0134"
            + "\114\u012f\154\u0131\160\116\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\004\165\u0140\001\001"
            + "\000\002\001\001\000\010\073\u0139\075\123\160\116\001"
            + "\001\000\060\004\150\005\146\060\143\061\042\064\113"
            + "\066\014\072\u0137\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\060\004\150\005\146\060\143\061\042\064"
            + "\113\066\014\072\u013e\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\062\004\150\005\146\060\143\061\042\064\113\066"
            + "\014\072\u0129\073\053\074\144\075\123\076\u013c\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\004\166\u0141\001\001\000\002\001\001"
            + "\000\024\073\u0136\075\123\077\u0143\100\u0133\101\u0130\102"
            + "\u0134\114\u012f\154\u0131\160\116\001\001\000\002\001\001"
            + "\000\014\073\u0136\075\123\102\u0134\154\u0145\160\116\001"
            + "\001\000\002\001\001\000\002\001\001\000\014\073\u0136"
            + "\075\123\102\u0134\154\u0148\160\116\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u0155\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\002\001\001\000\060\004\150\005"
            + "\146\060\143\061\042\064\113\066\014\072\u0157\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\021\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\040\004\u016f\005\146\061\042"
            + "\073\053\074\u0169\075\123\102\072\114\130\120\u016b\136"
            + "\u016c\154\006\156\020\160\116\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\010\004\u0183\005"
            + "\146\114\130\001\001\000\002\001\001\000\002\001\001"
            + "\000\034\004\u011f\005\146\073\u0119\074\u0117\075\123\102"
            + "\u011d\114\130\120\u011a\156\020\160\116\161\u0175\163\u0116"
            + "\164\u011c\001\001\000\002\001\001\000\002\001\001\000"
            + "\064\004\150\005\146\045\u0171\046\341\060\342\061\042"
            + "\064\113\066\014\072\337\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\340\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\002\001\001\000\002\001\001\000\010\004\u0174"
            + "\005\146\114\130\001\001\000\002\001\001\000\004\063"
            + "\u0176\001\001\000\002\001\001\000\064\004\150\005\146"
            + "\045\u0178\046\341\060\342\061\042\064\113\066\014\072"
            + "\337\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\340\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\002\001\001"
            + "\000\002\001\001\000\014\073\u0136\075\123\102\u0134\154"
            + "\u017b\160\116\001\001\000\002\001\001\000\002\001\001"
            + "\000\064\004\150\005\146\045\u017e\046\341\060\342\061"
            + "\042\064\113\066\014\072\337\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\120\060\136\340\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\002\001\001\000\002\001\001\000\064\004"
            + "\150\005\146\045\u0181\046\341\060\342\061\042\064\113"
            + "\066\014\072\337\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\340\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\064"
            + "\004\150\005\146\045\u0185\046\341\060\342\061\042\064"
            + "\113\066\014\072\337\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\340\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\014\073\u0136\075"
            + "\123\102\u0134\154\u0188\160\116\001\001\000\002\001\001"
            + "\000\002\001\001\000\064\004\150\005\146\045\u018b\046"
            + "\341\060\342\061\042\064\113\066\014\072\337\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\340\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\064\004\150\005\146\045\u018e\046\341\060\342"
            + "\061\042\064\113\066\014\072\337\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\340\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\060\004\150\005\146\060\143\061\042"
            + "\064\113\066\014\072\u019c\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\002\001\001\000\064\004\150\005\146\013\u019f"
            + "\016\114\060\143\061\042\064\113\066\014\072\016\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\004\014\u01a9\001\001"
            + "\000\004\034\u01a0\001\001\000\004\036\u01a1\001\001\000"
            + "\002\001\001\000\064\004\150\005\146\013\u01a8\016\114"
            + "\060\143\061\042\064\113\066\014\072\016\073\053\074"
            + "\144\075\123\102\072\113\065\114\130\120\060\136\021"
            + "\151\145\153\102\154\006\156\020\160\116\162\075\164"
            + "\035\170\050\001\001\000\002\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u01a5\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\002\001\001\000\064"
            + "\004\150\005\146\013\u01a7\016\114\060\143\061\042\064"
            + "\113\066\014\072\016\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\104\004\150\005"
            + "\146\013\275\015\270\016\114\035\u01aa\060\143\061\042"
            + "\064\113\066\014\072\016\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\115\117\120\060\134\272\135\274"
            + "\136\021\142\136\143\023\144\046\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\004\037\u01ab\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\060\004\150\005\146\060\143"
            + "\061\042\064\113\066\014\072\u01af\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\021\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\002\001\001\000\002\001\001\000\004"
            + "\014\u01b2\001\001\000\102\004\150\005\146\013\275\015"
            + "\270\016\114\060\143\061\042\064\113\066\014\072\016"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\115"
            + "\117\120\060\134\272\135\274\136\021\142\136\143\023"
            + "\144\046\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\004\014\u01b4\001\001"
            + "\000\102\004\150\005\146\013\275\015\270\016\114\060"
            + "\143\061\042\064\113\066\014\072\016\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\115\117\120\060\134"
            + "\272\135\274\136\021\142\136\143\023\144\046\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\044\004\u016f\005\146\061\042\073\053\074\u0169"
            + "\075\123\102\072\103\u01bc\104\u01bd\114\130\120\u016b\136"
            + "\u01be\154\006\156\020\160\116\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\044\004\u016f\005\146\061\042\073\053"
            + "\074\u0169\075\123\102\072\103\u01c1\104\u01bd\114\130\120"
            + "\u016b\136\u01be\154\006\156\020\160\116\164\035\170\050"
            + "\001\001\000\002\001\001\000\002\001\001\000\042\004"
            + "\u016f\005\146\061\042\073\053\074\u0169\075\123\102\072"
            + "\104\u01c4\114\130\120\u016b\136\u01be\154\006\156\020\160"
            + "\116\164\035\170\050\001\001\000\002\001\001\000\002"
            + "\001\001\000\060\004\150\005\146\060\143\061\042\064"
            + "\113\066\014\072\u01c7\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\021\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\042\004\u016f\005\146\061\042\073\053\074\u0169\075\123"
            + "\102\072\114\130\120\u016b\136\u01cb\154\006\156\020\157"
            + "\u01cc\160\116\164\035\170\050\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\040\004\u016f\005"
            + "\146\061\042\073\053\074\u0169\075\123\102\072\114\130"
            + "\120\u016b\136\u01cf\154\006\156\020\160\116\164\035\170"
            + "\050\001\001\000\002\001\001\000\002\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u01d3\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\004\114\u01d7\001\001\000\002\001\001\000\014\073\u0136"
            + "\075\123\102\u0134\154\u0188\160\116\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\020\004\204\005\146\064\172\065\u01e1\114\130\120\177"
            + "\167\174\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\060\004\150\005\146\060\143\061\042"
            + "\064\113\066\014\072\u01e5\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\002\001\001\000\004\030\u01e7\001\001\000\002"
            + "\001\001\000\004\031\u01fa\001\001\000\004\031\u01ea\001"
            + "\001\000\002\001\001\000\004\031\u01ec\001\001\000\002"
            + "\001\001\000\002\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u01f4\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\004\032\u01f0\001\001\000\004\014"
            + "\u01f3\001\001\000\002\001\001\000\002\001\001\000\102"
            + "\004\150\005\146\013\275\015\270\016\114\060\143\061"
            + "\042\064\113\066\014\072\016\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\115\117\120\060\134\272\135"
            + "\274\136\021\142\136\143\023\144\046\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\004\032\u01f5\001\001\000\004\014\u01f6\001\001"
            + "\000\102\004\150\005\146\013\275\015\270\016\114\060"
            + "\143\061\042\064\113\066\014\072\016\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\115\117\120\060\134"
            + "\272\135\274\136\021\142\136\143\023\144\046\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\004\031\u01fc\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\060\004\150\005\146\060\143\061\042\064\113"
            + "\066\014\072\u0205\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\060\004\150\005\146\060\143\061\042\064\113"
            + "\066\014\072\u020c\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\020\004"
            + "\204\005\146\064\172\065\u0213\114\130\120\177\167\174"
            + "\001\001\000\002\001\001\000\004\116\u0215\001\001\000"
            + "\004\203\u021d\001\001\000\014\004\252\005\146\114\130"
            + "\121\u0218\147\u0217\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\012\004\252\005\146\114\130"
            + "\121\u021c\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\004\052\u021f\001\001\000\030\053\u0225"
            + "\115\117\123\u0230\124\u0221\130\u0226\131\u0229\135\u0220\143"
            + "\023\144\046\152\u022f\171\u0227\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\004\131\u023c\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\004\122\u0234\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\020\004\204\005\146\064\172"
            + "\065\u0239\114\130\120\177\167\174\001\001\000\002\001"
            + "\001\000\020\004\204\005\146\064\172\065\u023b\114\130"
            + "\120\177\167\174\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\054\u0242\001\001\000\004\114"
            + "\u0243\001\001\000\004\204\u0244\001\001\000\002\001\001"
            + "\000\022\004\252\005\146\040\u0246\043\254\044\261\114"
            + "\130\121\256\150\253\001\001\000\002\001\001\000\004"
            + "\205\u0248\001\001\000\004\125\u0249\001\001\000\002\001"
            + "\001\000\004\014\u024c\001\001\000\002\001\001\000\102"
            + "\004\150\005\146\013\275\015\270\016\114\060\143\061"
            + "\042\064\113\066\014\072\016\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\115\117\120\060\134\272\135"
            + "\274\136\021\142\136\143\023\144\046\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\002\001\001\000\002\001\001\000\006\111\u025e"
            + "\160\u024e\001\001\000\002\001\001\000\040\004\u016f\005"
            + "\146\061\042\073\053\074\u0169\075\123\102\072\114\130"
            + "\120\u016b\136\u025c\154\006\156\020\160\116\164\035\170"
            + "\050\001\001\000\060\004\150\005\146\060\143\061\042"
            + "\064\113\066\014\072\u0255\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\006\111\u0254\160\u024e\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\060\004\150\005"
            + "\146\060\143\061\042\064\113\066\014\072\u0258\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\021\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\010\112\u0265\114\u0266\160\u0264\001\001"
            + "\000\004\114\u0263\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\114\u026a\001\001\000\004\177"
            + "\u026b\001\001\000\002\001\001\000\022\004\252\005\146"
            + "\040\u026d\043\254\044\261\114\130\121\256\150\253\001"
            + "\001\000\002\001\001\000\004\200\u026f\001\001\000\004"
            + "\172\u0272\001\001\000\002\001\001\000\004\014\u0273\001"
            + "\001\000\002\001\001\000\102\004\150\005\146\013\275"
            + "\015\270\016\114\060\143\061\042\064\113\066\014\072"
            + "\016\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\115\117\120\060\134\272\135\274\136\021\142\136\143"
            + "\023\144\046\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\060"
            + "\004\150\005\146\060\u027a\061\042\064\113\066\014\072"
            + "\337\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\u0279\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\002\001\001"
            + "\000\002\001\001\000\040\004\u016f\005\146\061\042\073"
            + "\053\074\u0169\075\123\102\072\114\130\120\u016b\136\u027c"
            + "\154\006\156\020\160\116\164\035\170\050\001\001\000"
            + "\004\022\u027d\001\001\000\002\001\001\000\042\004\u016f"
            + "\005\146\023\u027f\061\042\073\053\074\u0169\075\123\102"
            + "\072\114\130\120\u016b\136\u0280\154\006\156\020\160\116"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\040\004\u016f\005\146\061\042\073\053\074\u0169"
            + "\075\123\102\072\114\130\120\u016b\136\u0282\154\006\156"
            + "\020\160\116\164\035\170\050\001\001\000\002\001\001"
            + "\000\066\004\150\005\146\013\u0285\016\114\025\u0286\060"
            + "\143\061\042\064\113\066\014\072\016\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\004\014\u0287\001\001\000\002\001"
            + "\001\000\002\001\001\000\102\004\150\005\146\013\275"
            + "\015\270\016\114\060\143\061\042\064\113\066\014\072"
            + "\016\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\115\117\120\060\134\272\135\274\136\021\142\136\143"
            + "\023\144\046\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\002\001\001\000"
            + "\002\001\001\000\042\004\u016f\005\146\023\u028b\061\042"
            + "\073\053\074\u0169\075\123\102\072\114\130\120\u016b\136"
            + "\u0280\154\006\156\020\160\116\164\035\170\050\001\001"
            + "\000\004\022\u028c\001\001\000\002\001\001\000\066\004"
            + "\150\005\146\013\u0285\016\114\025\u028e\060\143\061\042"
            + "\064\113\066\014\072\016\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\120\060\136\021\151\145\153\102"
            + "\154\006\156\020\160\116\162\075\164\035\170\050\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\004\127\u029c\001\001\000\004\174\u0293\001\001\000"
            + "\006\126\u0297\127\u0296\001\001\000\002\001\001\000\004"
            + "\011\u0299\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\104\004\150\005\146\012\u029b\013\154"
            + "\016\114\060\143\061\042\064\113\066\014\072\016\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\115\117"
            + "\120\060\123\120\134\105\135\126\136\021\142\136\143"
            + "\023\144\046\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\044\004\u016f\005\146"
            + "\017\u02a0\020\u029e\061\042\073\053\074\u0169\075\123\102"
            + "\072\114\130\120\u016b\136\u029f\154\006\156\020\160\116"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\042\004\u016f"
            + "\005\146\020\u02a3\061\042\073\053\074\u0169\075\123\102"
            + "\072\114\130\120\u016b\136\u029f\154\006\156\020\160\116"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\004\063\u02a6\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\014\u02b0\001\001\000\102\004"
            + "\150\005\146\013\275\015\270\016\114\060\143\061\042"
            + "\064\113\066\014\072\016\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\115\117\120\060\134\272\135\274"
            + "\136\021\142\136\143\023\144\046\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\014\073\u0136\075"
            + "\123\102\u0134\154\u017b\160\116\001\001\000\002\001\001"
            + "\000\002\001\001\000\006\111\u025e\160\u024e\001\001\000"
            + "\006\111\u0254\160\u024e\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\024\073\u0136\075\123\077\u02c1\100\u0133\101\u0130\102"
            + "\u0134\114\u012f\154\u0131\160\116\001\001\000\004\132\u02c2"
            + "\001\001\000\004\133\u02c6\001\001\000\064\004\150\005"
            + "\146\045\u02c4\046\341\060\342\061\042\064\113\066\014"
            + "\072\337\073\053\074\144\075\123\102\072\113\065\114"
            + "\130\120\060\136\340\151\145\153\102\154\006\156\020"
            + "\160\116\162\075\164\035\170\050\001\001\000\002\001"
            + "\001\000\002\001\001\000\004\155\u02c7\001\001\000\002"
            + "\001\001\000\024\073\u0136\075\123\077\u02c9\100\u0133\101"
            + "\u0130\102\u0134\114\u012f\154\u0131\160\116\001\001\000\004"
            + "\132\u02ca\001\001\000\002\001\001\000\060\004\150\005"
            + "\146\060\143\061\042\064\113\066\014\072\u02cc\073\053"
            + "\074\144\075\123\102\072\113\065\114\130\120\060\136"
            + "\021\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\004\201\u02cf\001\001\000\004\145\u02d1\001\001"
            + "\000\012\004\252\005\146\114\130\121\u02db\001\001\000"
            + "\004\173\u02d2\001\001\000\004\146\u02d4\001\001\000\002"
            + "\001\001\000\004\202\u02d7\001\001\000\014\004\252\005"
            + "\146\114\130\121\u0218\147\u02d6\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\052\u02d9\001\001\000\030\053"
            + "\u0225\115\117\123\u0230\124\u0221\130\u0226\131\u0229\135\u0220"
            + "\143\023\144\046\152\u022f\171\u02da\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u02de\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\002\001\001\000\066"
            + "\004\150\005\146\013\u02e2\016\114\033\u02e1\060\143\061"
            + "\042\064\113\066\014\072\016\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\120\060\136\021\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\004\014\u02e3\001\001\000\002\001\001\000"
            + "\002\001\001\000\102\004\150\005\146\013\275\015\270"
            + "\016\114\060\143\061\042\064\113\066\014\072\016\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\115\117"
            + "\120\060\134\272\135\274\136\021\142\136\143\023\144"
            + "\046\151\145\153\102\154\006\156\020\160\116\162\075"
            + "\164\035\170\050\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\020\004\204\005"
            + "\146\064\172\065\u02ec\114\130\120\177\167\174\001\001"
            + "\000\002\001\001\000\020\004\204\005\146\064\172\065"
            + "\u02ee\114\130\120\177\167\174\001\001\000\002\001\001"
            + "\000\004\014\u02f0\001\001\000\102\004\150\005\146\013"
            + "\275\015\270\016\114\060\143\061\042\064\113\066\014"
            + "\072\016\073\053\074\144\075\123\102\072\113\065\114"
            + "\130\115\117\120\060\134\272\135\274\136\021\142\136"
            + "\143\023\144\046\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\002\001\001"
            + "\000\002\001\001\000\012\004\252\005\146\114\130\121"
            + "\u02f4\001\001\000\004\160\u02f5\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\014\u02f8\001\001\000\102\004"
            + "\150\005\146\013\275\015\270\016\114\060\143\061\042"
            + "\064\113\066\014\072\016\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\115\117\120\060\134\272\135\274"
            + "\136\021\142\136\143\023\144\046\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\010\137\u02fb\140\u02fd\141\u02fc\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\004\141\u02fe"
            + "\001\001\000\002\001\001\000\012\004\252\005\146\114"
            + "\130\121\u0300\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\014\u0304\001\001\000\102\004"
            + "\150\005\146\013\275\015\270\016\114\060\143\061\042"
            + "\064\113\066\014\072\016\073\053\074\144\075\123\102"
            + "\072\113\065\114\130\115\117\120\060\134\272\135\274"
            + "\136\021\142\136\143\023\144\046\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\006\111\u025e\160\u024e\001\001\000\006\111\u0254\160\u024e"
            + "\001\001\000\002\001\001\000\002\001\001\000\064\004"
            + "\150\005\146\056\u030e\057\u030f\060\143\061\042\064\113"
            + "\066\014\072\u030d\073\053\074\144\075\123\102\072\113"
            + "\065\114\130\120\060\136\021\151\145\153\102\154\006"
            + "\156\020\160\116\162\075\164\035\170\050\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\060"
            + "\004\150\005\146\060\143\061\042\064\113\066\014\072"
            + "\u0311\073\053\074\144\075\123\102\072\113\065\114\130"
            + "\120\060\136\021\151\145\153\102\154\006\156\020\160"
            + "\116\162\075\164\035\170\050\001\001\000\002\001\001"
            + "\000\064\004\150\005\146\056\u0313\057\u030f\060\143\061"
            + "\042\064\113\066\014\072\u030d\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\120\060\136\021\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\002\001\001\000\064\004\150\005\146\056"
            + "\u0315\057\u030f\060\143\061\042\064\113\066\014\072\u030d"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\120"
            + "\060\136\021\151\145\153\102\154\006\156\020\160\116"
            + "\162\075\164\035\170\050\001\001\000\002\001\001\000"
            + "\066\004\150\005\146\013\u0319\016\114\024\u0317\060\143"
            + "\061\042\064\113\066\014\072\016\073\053\074\144\075"
            + "\123\102\072\113\065\114\130\120\060\136\021\151\145"
            + "\153\102\154\006\156\020\160\116\162\075\164\035\170"
            + "\050\001\001\000\002\001\001\000\004\014\u031a\001\001"
            + "\000\002\001\001\000\102\004\150\005\146\013\275\015"
            + "\270\016\114\060\143\061\042\064\113\066\014\072\016"
            + "\073\053\074\144\075\123\102\072\113\065\114\130\115"
            + "\117\120\060\134\272\135\274\136\021\142\136\143\023"
            + "\144\046\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\002\001\001\000\002"
            + "\001\001\000\040\004\u016f\005\146\061\042\073\053\074"
            + "\u0169\075\123\102\072\114\130\120\u016b\136\u031e\154\006"
            + "\156\020\160\116\164\035\170\050\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\010\004\u0329\005"
            + "\146\114\130\001\001\000\002\001\001\000\012\004\u0322"
            + "\005\146\006\u0328\114\130\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\064\004\150\005\146\060\143"
            + "\061\042\064\113\066\014\072\u0332\073\053\074\144\075"
            + "\123\102\072\105\u0334\106\u0333\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\042\004\u016f\005\146"
            + "\061\042\073\053\074\u0169\075\123\102\072\114\130\117"
            + "\u0343\120\u016b\136\u0192\154\006\156\020\160\116\164\035"
            + "\170\050\001\001\000\002\001\001\000\004\070\u0337\001"
            + "\001\000\002\001\001\000\002\001\001\000\060\004\150"
            + "\005\146\060\143\061\042\064\113\066\014\072\u0339\073"
            + "\053\074\144\075\123\102\072\113\065\114\130\120\060"
            + "\136\021\151\145\153\102\154\006\156\020\160\116\162"
            + "\075\164\035\170\050\001\001\000\002\001\001\000\042"
            + "\004\u016f\005\146\061\042\073\053\074\u0169\075\123\102"
            + "\072\114\130\117\u033e\120\u016b\136\u0192\154\006\156\020"
            + "\160\116\164\035\170\050\001\001\000\002\001\001\000"
            + "\060\004\150\005\146\060\143\061\042\064\113\066\014"
            + "\072\u033c\073\053\074\144\075\123\102\072\113\065\114"
            + "\130\120\060\136\021\151\145\153\102\154\006\156\020"
            + "\160\116\162\075\164\035\170\050\001\001\000\042\004"
            + "\u016f\005\146\061\042\073\053\074\u0169\075\123\102\072"
            + "\114\130\117\u033d\120\u016b\136\u0192\154\006\156\020\160"
            + "\116\164\035\170\050\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\060\004\150\005\146\060"
            + "\143\061\042\064\113\066\014\072\u0341\073\053\074\144"
            + "\075\123\102\072\113\065\114\130\120\060\136\021\151"
            + "\145\153\102\154\006\156\020\160\116\162\075\164\035"
            + "\170\050\001\001\000\042\004\u016f\005\146\061\042\073"
            + "\053\074\u0169\075\123\102\072\114\130\117\u0342\120\u016b"
            + "\136\u0192\154\006\156\020\160\116\164\035\170\050\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\042\004\u016f\005"
            + "\146\061\042\073\053\074\u0169\075\123\102\072\114\130"
            + "\120\u016b\136\u0349\151\u0348\154\006\156\020\160\116\164"
            + "\035\170\050\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\060\004\150\005\146\060\143\061"
            + "\042\064\113\066\014\072\u034b\073\053\074\144\075\123"
            + "\102\072\113\065\114\130\120\060\136\021\151\145\153"
            + "\102\154\006\156\020\160\116\162\075\164\035\170\050"
            + "\001\001\000\002\001\001\000\002\001\001\000\004\050"
            + "\u034f\001\001\000\002\001\001\000\002\001\001\000\064"
            + "\004\150\005\146\045\u0351\046\341\060\342\061\042\064"
            + "\113\066\014\072\337\073\053\074\144\075\123\102\072"
            + "\113\065\114\130\120\060\136\340\151\145\153\102\154"
            + "\006\156\020\160\116\162\075\164\035\170\050\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$CompilerAstParser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions() {
        action_obj = new CUP$CompilerAstParser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @Override
    public java_cup.runtime.Symbol do_action(int act_num,
            java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$CompilerAstParser$do_action(act_num, parser,
                stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    @Override
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {
        return 1;
    }

    class ModifierDocPair {
        public int modifier;
        public PHPDocBlock doc;

        public ModifierDocPair(int modifier, PHPDocBlock doc) {
            this.modifier = modifier;
            this.doc = doc;
        }
    }

    public Expression createDispatch(Expression dispatcher, Expression property) {

        if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
            ((ReflectionCallExpression) property).setReceiver(dispatcher);
            dispatcher = property;
        }
        else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
            final PHPCallExpression callExpression = (PHPCallExpression) property;
            dispatcher = new PHPCallExpression(dispatcher.sourceStart(),
                    callExpression.sourceEnd(), dispatcher,
                    callExpression.getCallName(), callExpression.getArgs());
        }
        else {
            dispatcher = new FieldAccess(dispatcher.sourceStart(),
                    property.sourceEnd(), dispatcher, property);
        }

        return dispatcher;
    }

    @Override
    protected String getTokenName(int token) {
        return PhpTokenNames.getName(token);
    }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$CompilerAstParser$actions {
    private final CompilerAstParser parser;

    /** Constructor */
    CUP$CompilerAstParser$actions(CompilerAstParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
            int CUP$CompilerAstParser$act_num,
            java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
            java.util.Stack CUP$CompilerAstParser$stack,
            int CUP$CompilerAstParser$top) throws java.lang.Exception {
        if (CUP$CompilerAstParser$act_num < 100) {
            return CUP$CompilerAstParser$do_action1(
                    CUP$CompilerAstParser$act_num,
                    CUP$CompilerAstParser$parser, CUP$CompilerAstParser$stack,
                    CUP$CompilerAstParser$top);
        }
        else if (CUP$CompilerAstParser$act_num < 200) {
            return CUP$CompilerAstParser$do_action2(
                    CUP$CompilerAstParser$act_num,
                    CUP$CompilerAstParser$parser, CUP$CompilerAstParser$stack,
                    CUP$CompilerAstParser$top);
        }
        else if (CUP$CompilerAstParser$act_num < 300) {
            return CUP$CompilerAstParser$do_action3(
                    CUP$CompilerAstParser$act_num,
                    CUP$CompilerAstParser$parser, CUP$CompilerAstParser$stack,
                    CUP$CompilerAstParser$top);
        }
        else if (CUP$CompilerAstParser$act_num < 400) {
            return CUP$CompilerAstParser$do_action4(
                    CUP$CompilerAstParser$act_num,
                    CUP$CompilerAstParser$parser, CUP$CompilerAstParser$stack,
                    CUP$CompilerAstParser$top);
        }
        else {
            return CUP$CompilerAstParser$do_action5(
                    CUP$CompilerAstParser$act_num,
                    CUP$CompilerAstParser$parser, CUP$CompilerAstParser$stack,
                    CUP$CompilerAstParser$top);
        }
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action1(
            int CUP$CompilerAstParser$act_num,
            java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
            java.util.Stack CUP$CompilerAstParser$stack,
            int CUP$CompilerAstParser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$CompilerAstParser$result;

        /* select the action based on the action number */
        switch (CUP$CompilerAstParser$act_num) {
            /* . . . . . . . . . . . . . . . . . . . . */
            case 0: // thestart ::= top_statement_list
            {
                ModuleDeclaration RESULT = null;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object statementList = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPModuleDeclaration program = parser
                        .getModuleDeclaration();

                final PhpAstLexer phpAstLexer = (PhpAstLexer) parser
                        .getScanner();
                final List commentList = phpAstLexer.getCommentList();
                final Iterator i = commentList.iterator();
                while (i.hasNext()) {
                    final Object c = i.next();
                    if (c instanceof VarComment) {
                        program.getVarComments().add((VarComment) c);
                    }
                    else if (c instanceof PHPDocBlock) {
                        program.getPhpDocBlocks().add((PHPDocBlock) c);
                    }
                }

                program.setStart(statementListleft);
                program.setEnd(statementListright + 1);
                RESULT = program;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        1/* thestart */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 1: // $START ::= thestart EOF
            {
                Object RESULT = null;
                final int start_valleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int start_valright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final ModuleDeclaration start_val = (ModuleDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                RESULT = start_val;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        0/* $START */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                /* ACCEPT */
                CUP$CompilerAstParser$parser.done_parsing();
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 2: // namespace_name ::= namespace_name_list
            {
                FullyQualifiedReference RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final StringBuilder namespaceNameBuf = new StringBuilder();
                FullyQualifiedReference fullyQualifiedName = null;
                final Iterator i = list.iterator();
                while (i.hasNext()) {
                    final String s = (String) i.next();
                    if (i.hasNext()) {
                        if (namespaceNameBuf.length() != 0) {
                            namespaceNameBuf.append('\\');
                        }
                        namespaceNameBuf.append(s);
                    }
                    else {
                        final NamespaceReference namespaceRef = (namespaceNameBuf
                                .length() != 0) ? new NamespaceReference(
                                listleft, listright - s.length() - 1,
                                namespaceNameBuf.toString()) : null;
                        fullyQualifiedName = new FullyQualifiedReference(
                                listleft, listright, s, namespaceRef);
                    }
                }
                RESULT = fullyQualifiedName;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        2/* namespace_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 3: // namespace_name_list ::= string_st
            {
                List RESULT = null;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String name = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(name);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        3/* namespace_name_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 4: // namespace_name_list ::= namespace_name_list
                    // T_NS_SEPARATOR string_st
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String name = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.add(name);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        3/* namespace_name_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 5: // top_statement_list ::= top_statement_list top_statement
            {
                final Object RESULT = null;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object statementList = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (statement != null) {
                    parser.addStatement(statement);
                    if (parser.pendingStatement != null) {
                        parser.addStatement(parser.pendingStatement);
                        parser.pendingStatement = null;
                    }
                }
                while (!parser.declarations.isEmpty()) {
                    parser.addStatement(parser.declarations.pop());
                }

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        6/* top_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 6: // top_statement_list ::=
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        6/* top_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 7: // namespace_statement_list ::= namespace_statement_list
                    // top_statement
            {
                List RESULT = null;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // Ignore null statements
                if (statement != null) {
                    statementList.add(statement);
                    if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
                        if (!parser.declarations.isEmpty()) {
                            final Statement node = parser.declarations.peek();
                            if (node.sourceStart() == statement.sourceStart()
                                    && node.sourceEnd() == statement
                                            .sourceEnd()) {
                                statementList.add(parser.declarations.pop());
                            }
                        }
                    }
                }
                if (!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
                    statementList.add(parser.declarations.pop());
                }
                RESULT = statementList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        7/* namespace_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 8: // namespace_statement_list ::=
            {
                List RESULT = null;

                RESULT = new LinkedList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        7/* namespace_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 9: // top_statement ::= statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 10: // top_statement ::= function_declaration_statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPMethodDeclaration statement = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 11: // top_statement ::= class_declaration_statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 12: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE
                     // T_CLOSE_PARENTHESE T_SEMICOLON
            {
                final Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object statement = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // Note: we never generate T_HALT_COMPILER
                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 13: // NT$0 ::=
            {
                final Object RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final NamespaceDeclaration namespace = new NamespaceDeclaration(
                        startleft, nameright, nameleft, nameright,
                        name.getFullyQualifiedName(), null, null);
                parser.addDeclarationStatement(namespace);
                parser.declarations.push(namespace);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        122/* NT$0 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 14: // top_statement ::= T_NAMESPACE namespace_name NT$0
                     // named_namespace_body
            {
                Statement RESULT = null;
                // propagate RESULT from NT$0
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value != null) {
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 1)).value;
                }
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int bodyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int bodyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement body = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = body;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 15: // NT$1 ::=
            {
                final Object RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final NamespaceDeclaration namespace = new NamespaceDeclaration(
                        startleft, startright, startright, startright,
                        NamespaceDeclaration.GLOBAL, null, null);
                parser.addDeclarationStatement(namespace);
                parser.declarations.push(namespace);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        123/* NT$1 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 16: // top_statement ::= T_NAMESPACE NT$1 namespace_body
            {
                Statement RESULT = null;
                // propagate RESULT from NT$1
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value != null) {
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 1)).value;
                }
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int bodyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int bodyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement body = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = body;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 17: // top_statement ::= T_USE use_declarations T_SEMICOLON
            {
                final Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int useDeclListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int useDeclListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List useDeclList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.declarations.push(new UseStatement(startleft, endright,
                        useDeclList));

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 18: // top_statement ::= constant_declaration T_SEMICOLON
            {
                final Statement RESULT = null;
                final int decListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int decListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List decList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                final Iterator i = decList.iterator();
                while (i.hasNext()) {
                    final ASTNode[] decl = (ASTNode[]) i.next();
                    final ConstantReference constant = (ConstantReference) decl[0];
                    final Expression initializer = (Expression) decl[1];

                    PHPDocBlock docBlock = null;
                    if (decl.length == 3) {
                        docBlock = (PHPDocBlock) decl[2];
                    }
                    final int start = constant.sourceStart();
                    final int end = (initializer == null ? constant.sourceEnd()
                            : initializer.sourceEnd());
                    parser.declarations.push(new ConstantDeclaration(constant,
                            initializer, decListleft, end, docBlock));
                }

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        8/* top_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 19: // named_namespace_body ::= T_SEMICOLON
            {
                Statement RESULT = null;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations
                        .pop();
                namespaceDeclaration.setEnd(endright);
                namespaceDeclaration.setBracketed(false);

                parser.currentNamespace = namespaceDeclaration;

                parser.metUnbracketedNSDecl = true;
                if (parser.metBracketedNSDecl) {
                    parser.reportError(
                            new ASTError(namespaceDeclaration.sourceStart(),
                                    endright),
                            "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
                }

                RESULT = namespaceDeclaration;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        84/* named_namespace_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 20: // named_namespace_body ::= namespace_body
            {
                Statement RESULT = null;
                final int bodyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int bodyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement body = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = body;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        84/* named_namespace_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 21: // namespace_body ::= T_CURLY_OPEN namespace_statement_list
                     // T_CURLY_CLOSE
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations
                        .pop();
                namespaceDeclaration.getBody().setStart(startleft);
                namespaceDeclaration.getBody().setEnd(endright);
                namespaceDeclaration.getBody().getStatements().clear();
                namespaceDeclaration.getBody().acceptStatements(statementList);
                namespaceDeclaration.setEnd(endright);

                parser.metBracketedNSDecl = true;
                if (parser.metUnbracketedNSDecl) {
                    parser.reportError(
                            new ASTError(namespaceDeclaration.sourceStart(),
                                    endright),
                            "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
                }

                RESULT = namespaceDeclaration;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        85/* namespace_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 22: // namespace_body ::= error
            {
                Statement RESULT = null;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = (NamespaceDeclaration) parser.declarations.pop();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        85/* namespace_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 23: // use_declarations ::= use_declarations T_COMMA
                     // use_declaration
            {
                List RESULT = null;
                final int useDeclListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int useDeclListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List useDeclList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int useDeclleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int useDeclright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final UsePart useDecl = (UsePart) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                useDeclList.add(useDecl);
                RESULT = useDeclList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        5/* use_declarations */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 24: // use_declarations ::= use_declaration
            {
                List RESULT = null;
                final int useDeclleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int useDeclright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final UsePart useDecl = (UsePart) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List useDeclList = new LinkedList();
                useDeclList.add(useDecl);
                RESULT = useDeclList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        5/* use_declarations */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 25: // use_declaration ::= namespace_name
            {
                UsePart RESULT = null;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final UsePart usePart = new UsePart(name, null);
                RESULT = usePart;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        4/* use_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 26: // use_declaration ::= namespace_name T_AS T_STRING
            {
                UsePart RESULT = null;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int aliasNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int aliasNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String aliasName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final UsePart usePart = new UsePart(name, new SimpleReference(
                        aliasNameleft, aliasNameright, aliasName));
                RESULT = usePart;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        4/* use_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 27: // use_declaration ::= T_NS_SEPARATOR namespace_name
            {
                UsePart RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                NamespaceReference namespace = name.getNamespace();
                if (namespace == null) {
                    namespace = new NamespaceReference(sleft, sright, "");
                    name.setNamespace(namespace);
                }
                namespace.setGlobal(true);
                namespace.setStart(namespace.sourceStart() - 1);

                final UsePart usePart = new UsePart(name, null);
                RESULT = usePart;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        4/* use_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 28: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS
                     // T_STRING
            {
                UsePart RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int aliasNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int aliasNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String aliasName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                NamespaceReference namespace = name.getNamespace();
                if (namespace == null) {
                    namespace = new NamespaceReference(sleft, sright, "");
                    name.setNamespace(namespace);
                }
                namespace.setGlobal(true);
                namespace.setStart(namespace.sourceStart() - 1);

                final UsePart usePart = new UsePart(name, new SimpleReference(
                        aliasNameleft, aliasNameright, aliasName));
                RESULT = usePart;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        4/* use_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 29: // inner_statement_list ::= inner_statement_list
                     // inner_statement
            {
                List RESULT = null;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // Ignore null statements
                if (statement != null) {
                    statementList.add(statement);
                    if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
                        if (!parser.declarations.isEmpty()) {
                            final Statement node = parser.declarations.peek();
                            if (node.sourceStart() == statement.sourceStart()
                                    && node.sourceEnd() == statement
                                            .sourceEnd()) {
                                statementList.add(parser.declarations.pop());
                            }
                        }
                    }
                }
                RESULT = statementList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        10/* inner_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 30: // inner_statement_list ::=
            {
                List RESULT = null;

                RESULT = new LinkedList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        10/* inner_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 31: // inner_statement ::= statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        11/* inner_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 32: // inner_statement ::= function_declaration_statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPMethodDeclaration statement = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        11/* inner_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 33: // inner_statement ::= class_declaration_statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        11/* inner_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 34: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE
                     // T_CLOSE_PARENTHESE T_SEMICOLON
            {
                final Statement RESULT = null;
                final int haltleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int haltright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object halt = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int closeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int closeright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object close = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                // Note: we never generate K_HALT_COMPILER
                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        11/* inner_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 35: // statement ::= unticked_statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        9/* statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 36: // statement ::= T_STRING T_NEKUDOTAIM
            {
                Statement RESULT = null;
                final int labelleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int labelright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String label = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new GotoLabel(labelleft, endright, label);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        9/* statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 37: // statement ::= error
            {
                Statement RESULT = null;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.reportError();
                final ASTError error = new ASTError(theErrorleft, theErrorright);
                RESULT = error;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        9/* statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 38: // statement ::= T_VAR_COMMENT
            {
                final Statement RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        9/* statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 39: // NT$2 ::=
            {
                final Object RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = new Block(tokenleft, tokenleft,
                        new LinkedList());
                parser.declarations.push(block);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        124/* NT$2 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 40: // unticked_statement ::= T_CURLY_OPEN NT$2
                     // inner_statement_list T_CURLY_CLOSE
            {
                Statement RESULT = null;
                // propagate RESULT from NT$2
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value != null) {
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 2)).value;
                }
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = (Block) parser.declarations.pop();
                block.setEnd(endright);
                block.getStatements().clear();
                block.acceptStatements(statementList);

                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 41: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr
                     // T_CLOSE_PARENTHESE statement elseif_list else_single
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int conditionleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int conditionright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Expression condition = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int iftrueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int iftrueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Statement iftrue = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int elseifleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int elseifright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List[] elseif = (List[]) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int iffalseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int iffalseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement iffalse = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                Expression innerCondition = null;
                Statement trueStatement = null;
                Statement falseStatement = iffalse;

                for (int i = 0; i < elseif[0].size(); i++) {
                    innerCondition = (Expression) elseif[0].get(i);
                    trueStatement = (Statement) elseif[1].get(i);
                    final int start = ((Integer) elseif[2].get(i)).intValue();
                    falseStatement = new IfStatement(start, iffalseright,
                            innerCondition, trueStatement, falseStatement);
                }
                final IfStatement ifStatement = new IfStatement(tokenleft,
                        iffalseright, condition, iftrue, falseStatement);

                RESULT = ifStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 6)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 42: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr
                     // T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list
                     // new_elseif_list new_else_single T_ENDIF T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).value;
                final int conditionleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int conditionright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final Expression condition = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int colonleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int colonright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Object colon = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int ifTrueStatementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int ifTrueStatementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List ifTrueStatementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int elseifleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int elseifright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final List[] elseif = (List[]) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int iffalseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int iffalseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Statement iffalse = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                Expression innerCondition = null;
                Statement trueStatement = null;
                Statement falseStatement = iffalse;

                for (int i = 0; i < elseif[0].size(); i++) {
                    innerCondition = (Expression) elseif[0].get(i);
                    trueStatement = (Statement) elseif[1].get(i);
                    final int start = ((Integer) elseif[2].get(i)).intValue();
                    falseStatement = new IfStatement(start, iffalseright,
                            innerCondition, trueStatement, falseStatement);
                }
                final Block block = new Block(colonleft,
                        ifTrueStatementListright, ifTrueStatementList);
                final IfStatement ifStatement = new IfStatement(tokenleft,
                        iffalseright, condition, block, falseStatement);

                RESULT = ifStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 9)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 43: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr
                     // T_CLOSE_PARENTHESE while_statement
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final WhileStatement whileStatement = new WhileStatement(
                        tokenleft, statementright, expr, statement);
                RESULT = whileStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 44: // unticked_statement ::= T_DO statement T_WHILE
                     // T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final DoStatement doStatement = new DoStatement(tokenleft,
                        endright, expr, statement);
                RESULT = doStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 6)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 45: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr
                     // T_SEMICOLON for_expr T_SEMICOLON for_expr
                     // T_CLOSE_PARENTHESE for_statement
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).value;
                final int initializationsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int initializationsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final List initializations = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int conditionsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int conditionsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List conditions = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int increasementsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int increasementsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List increasements = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ForStatement forStatement = new ForStatement(tokenleft,
                        statementright, initializations, conditions,
                        increasements, statement);
                RESULT = forStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 8)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 46: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr
                     // T_CLOSE_PARENTHESE switch_case_list
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int caseBlockleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int caseBlockright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Block caseBlock = (Block) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final SwitchStatement switchStatement = new SwitchStatement(
                        tokenleft, caseBlockright, expr, caseBlock);
                RESULT = switchStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 47: // unticked_statement ::= T_BREAK T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new BreakStatement(tokenleft, endright);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 48: // unticked_statement ::= T_BREAK expr T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new BreakStatement(tokenleft, endright, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 49: // unticked_statement ::= T_CONTINUE T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ContinueStatement(tokenleft, endright);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 50: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ContinueStatement(tokenleft, endright, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 51: // unticked_statement ::= T_RETURN T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ReturnStatement(tokenleft, endright);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 52: // unticked_statement ::= T_RETURN expr_without_variable
                     // T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ReturnStatement(tokenleft, endright, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 53: // unticked_statement ::= T_RETURN variable T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ReturnStatement(tokenleft, endright, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 54: // unticked_statement ::= T_GLOBAL global_var_list
                     // T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final GlobalStatement global = new GlobalStatement(startleft,
                        endright, list);
                RESULT = global;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 55: // unticked_statement ::= T_STATIC static_var_list
                     // T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final StaticStatement s = new StaticStatement(startleft,
                        endright, list);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 56: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List exprList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new EchoStatement(startleft, endright, exprList);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 57: // unticked_statement ::= T_INLINE_HTML
            {
                final Statement RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 58: // unticked_statement ::= expr T_SEMICOLON
            {
                Statement RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ExpressionStatement expressionStatement = new ExpressionStatement(
                        exprleft, endright, expr);
                RESULT = expressionStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 59: // unticked_statement ::= T_USE use_filename T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList list = new PHPCallArgumentsList(
                        expr.sourceStart(), expr.sourceEnd());
                list.addNode(expr);
                final SimpleReference functionName = new SimpleReference(
                        startleft, startright, "use");
                final PHPCallExpression functionInvocation = new PHPCallExpression(
                        startleft, exprright, null, functionName, list);
                final ExpressionStatement expressionStatement = new ExpressionStatement(
                        startleft, endright, functionInvocation);
                RESULT = expressionStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 60: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE
                     // unset_variables T_CLOSE_PARENTHESE T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final String start = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int openParleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int openParright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object openPar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPCallArgumentsList list = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int closeParleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int closeParright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object closePar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.setStart(openParright);
                list.setEnd(closeParleft);
                final SimpleReference functionName = new SimpleReference(
                        startleft, startright, "unset");
                final PHPCallExpression functionInvocation = new PHPCallExpression(
                        startleft, closeParright, null, functionName, list);
                final ExpressionStatement expressionStatement = new ExpressionStatement(
                        startleft, endright, functionInvocation);
                RESULT = expressionStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 61: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE
                     // variable T_AS foreach_variable foreach_optional_arg
                     // T_CLOSE_PARENTHESE foreach_statement
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int argleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int argright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression arg = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                ForEachStatement forEachStatement = null;
                if (arg == null) {
                    forEachStatement = new ForEachStatement(tokenleft,
                            statementright, expr, var, statement);
                }
                else {
                    forEachStatement = new ForEachStatement(tokenleft,
                            statementright, expr, var, arg, statement);
                }
                RESULT = forEachStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 7)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 62: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE
                     // expr_without_variable T_AS variable foreach_optional_arg
                     // T_CLOSE_PARENTHESE foreach_statement
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int argleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int argright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression arg = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                ForEachStatement forEachStatement = null;
                if (arg == null) {
                    forEachStatement = new ForEachStatement(tokenleft,
                            statementright, expr, var, statement);
                }
                else {
                    forEachStatement = new ForEachStatement(tokenleft,
                            statementright, expr, var, arg, statement);
                }
                RESULT = forEachStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 7)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 63: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE
                     // declare_list T_CLOSE_PARENTHESE declare_statement
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int listsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List[] lists = (List[]) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final DeclareStatement declare = new DeclareStatement(
                        startleft, statementright, lists[0], lists[1],
                        statement);
                RESULT = declare;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 64: // unticked_statement ::= T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new EmptyStatement(tokenleft, tokenright);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 65: // unticked_statement ::= T_TRY T_CURLY_OPEN
                     // inner_statement_list T_CURLY_CLOSE T_CATCH
                     // T_OPEN_PARENTHESE fully_qualified_class_name
                     // tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN
                     // inner_statement_list T_CURLY_CLOSE additional_catches
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 12)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 12)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 12)).value;
                final int tryBlockStartleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 11)).left;
                final int tryBlockStartright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 11)).right;
                final Object tryBlockStart = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 11)).value;
                final int tryListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 10)).left;
                final int tryListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 10)).right;
                final List tryList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 10)).value;
                final int tryBlockEndleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).left;
                final int tryBlockEndright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).right;
                final Object tryBlockEnd = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).value;
                final int catch_wordleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).left;
                final int catch_wordright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).right;
                final Object catch_word = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final TypeReference className = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final VariableReference var = (VariableReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int catchBlockStartleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int catchBlockStartright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object catchBlockStart = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int catchListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int catchListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List catchList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int catchBlockEndleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int catchBlockEndright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object catchBlockEnd = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int catchesListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int catchesListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List catchesList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block tryBlock = new Block(tryBlockStartleft,
                        tryBlockEndright, tryList);
                final Block catchBlock = new Block(catchBlockStartleft,
                        catchBlockEndright, catchList);
                final CatchClause catchClause = new CatchClause(catch_wordleft,
                        catchBlockEndright, className, var, catchBlock);
                ((LinkedList) catchesList).addFirst(catchClause);
                final TryStatement tryStatement = new TryStatement(startleft,
                        catchesListright, tryBlock, catchesList);
                RESULT = tryStatement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 12)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 66: // unticked_statement ::= T_THROW expr T_SEMICOLON
            {
                Statement RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ThrowStatement(tokenleft, endright, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 67: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int labelleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int labelright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String label = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new GotoStatement(startleft, endright, label);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        12/* unticked_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 68: // additional_catches ::= non_empty_additional_catches
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        93/* additional_catches */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 69: // additional_catches ::=
            {
                List RESULT = null;

                final List list = new LinkedList();
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        93/* additional_catches */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 70: // non_empty_additional_catches ::= additional_catch
            {
                List RESULT = null;
                final int catch_statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int catch_statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final CatchClause catch_statement = (CatchClause) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(catch_statement);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        94/* non_empty_additional_catches */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 71: // non_empty_additional_catches ::=
                     // non_empty_additional_catches additional_catch
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int catch_statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int catch_statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final CatchClause catch_statement = (CatchClause) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.add(catch_statement);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        94/* non_empty_additional_catches */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 72: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE
                     // fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE
                     // T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
                CatchClause RESULT = null;
                final int catch_wordleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int catch_wordright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final Object catch_word = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final TypeReference className = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int catchBlockStartleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int catchBlockStartright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object catchBlockStart = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int catchListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int catchListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List catchList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int catchBlockEndleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int catchBlockEndright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object catchBlockEnd = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block catchBlock = new Block(catchBlockStartleft,
                        catchBlockEndright, catchList);
                final VariableReference variable = new VariableReference(
                        varleft, varright, var, PHPVariableKind.LOCAL);
                final CatchClause catchClause = new CatchClause(catch_wordleft,
                        catchBlockEndright, className, variable, catchBlock);
                RESULT = catchClause;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        95/* additional_catch */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 7)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 73: // unset_variables ::= unset_variable
            {
                PHPCallArgumentsList RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList list = new PHPCallArgumentsList();
                list.addNode(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        13/* unset_variables */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 74: // unset_variables ::= unset_variables T_COMMA
                     // unset_variable
            {
                PHPCallArgumentsList RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPCallArgumentsList list = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.addNode(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        13/* unset_variables */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 75: // unset_variable ::= variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        14/* unset_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 76: // use_filename ::= T_CONSTANT_ENCAPSED_STRING
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String scalar = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright, scalar,
                        Scalar.TYPE_STRING);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        15/* use_filename */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 77: // use_filename ::= T_OPEN_PARENTHESE
                     // T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String scalar = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(startleft, endright, scalar,
                        Scalar.TYPE_STRING);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        15/* use_filename */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 78: // function_declaration_statement ::=
                     // unticked_function_declaration_statement
            {
                PHPMethodDeclaration RESULT = null;
                final int functionDeclarationleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int functionDeclarationright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = functionDeclaration;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        90/* function_declaration_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 79: // class_declaration_statement ::=
                     // unticked_class_declaration_statement
            {
                Statement RESULT = null;
                final int classDeclarationleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classDeclarationright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement classDeclaration = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = classDeclaration;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        91/* class_declaration_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 80: // is_reference ::=
            {
                Boolean RESULT = null;

                RESULT = Boolean.FALSE;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        42/* is_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 81: // is_reference ::= T_REFERENCE
            {
                Boolean RESULT = null;

                RESULT = Boolean.TRUE;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        42/* is_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 82: // NT$3 ::=
            {
                final Object RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int isReferenceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int isReferenceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Boolean isReference = (Boolean) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(
                        startleft, functionNameright, functionNameleft,
                        functionNameright, functionName, 0, null, new Block(
                                functionNameright, functionNameright, null),
                        isReference.booleanValue(), start);
                parser.addDeclarationStatement(functionDeclaration);
                parser.declarations.push(functionDeclaration);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        125/* NT$3 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 83: // NT$4 ::=
            {
                final Object RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int isReferenceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int isReferenceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Boolean isReference = (Boolean) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int paramListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int paramListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List paramList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int closeParentheseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int closeParentheseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object closeParenthese = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations
                        .peek();
                functionDeclaration.acceptArguments(paramList);
                functionDeclaration.setEnd(closeParentheseright);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        126/* NT$4 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 84: // unticked_function_declaration_statement ::= T_FUNCTION
                     // is_reference string_st NT$3 T_OPEN_PARENTHESE
                     // parameter_list T_CLOSE_PARENTHESE NT$4 function_body
            {
                PHPMethodDeclaration RESULT = null;
                // propagate RESULT from NT$3
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value != null) {
                    RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 5)).value;
                }
                // propagate RESULT from NT$4
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value != null) {
                    RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 1)).value;
                }
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).value;
                final int isReferenceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int isReferenceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final Boolean isReference = (Boolean) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int paramListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int paramListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final List paramList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int closeParentheseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int closeParentheseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object closeParenthese = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int bodyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int bodyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPMethodDeclaration body = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = body;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        96/* unticked_function_declaration_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 8)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 85: // function_body ::= T_CURLY_OPEN inner_statement_list
                     // T_CURLY_CLOSE
            {
                PHPMethodDeclaration RESULT = null;
                final int blockStartleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int blockStartright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object blockStart = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int blockEndleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int blockEndright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object blockEnd = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations
                        .pop();
                final Block block = functionDeclaration.getBody();
                block.setStart(blockStartleft);
                block.setEnd(blockEndright);
                block.getStatements().clear();
                block.acceptStatements(statementList);
                functionDeclaration.setEnd(blockEndright);
                RESULT = functionDeclaration;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        120/* function_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 86: // function_body ::= error
            {
                PHPMethodDeclaration RESULT = null;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = (PHPMethodDeclaration) parser.declarations.pop();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        120/* function_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 87: // NT$5 ::=
            {
                final Object RESULT = null;
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String className = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ClassDeclaration classDeclaration = new ClassDeclaration(
                        modifierleft, classNameright, classNameleft,
                        classNameright, modifier.modifier, className, null,
                        null, new Block(classNameright, classNameright, null),
                        modifier.doc);
                classDeclaration.setRecovered(true);
                parser.addDeclarationStatement(classDeclaration);
                parser.declarations.push(classDeclaration);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        127/* NT$5 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 88: // NT$6 ::=
            {
                final Object RESULT = null;
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final String className = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int superClassleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int superClassright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final TypeReference superClass = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int interfacesleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int interfacesright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List interfaces = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations
                        .peek();
                if (superClass != null) {
                    classDeclaration.setSuperClass(superClass);
                }
                if (interfaces != null) {
                    classDeclaration.setInterfaceList(interfaces);
                }
                classDeclaration.setEnd(interfacesright);
                classDeclaration.getBody().setStart(interfacesright);
                classDeclaration.getBody().setEnd(interfacesright);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        128/* NT$6 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 89: // unticked_class_declaration_statement ::=
                     // class_entry_type T_STRING NT$5 extends_from errorOrNot
                     // implements_list NT$6 T_CURLY_OPEN class_statement_list
                     // class_closure
            {
                Statement RESULT = null;
                // propagate RESULT from NT$5
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value != null) {
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 7)).value;
                }
                // propagate RESULT from NT$6
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value != null) {
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 3)).value;
                }
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).right;
                final String className = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).value;
                final int superClassleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int superClassright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final TypeReference superClass = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int interfacesleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int interfacesright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List interfaces = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int blockStartleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int blockStartright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object blockStart = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object statementList = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int blockEndleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int blockEndright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement blockEnd = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (blockEnd != null) {
                    parser.reportError(new ASTError(statementListright - 1,
                            statementListright),
                            "syntax error, unfinished class declaration");
                    parser.pendingStatement = blockEnd;
                }
                final ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations
                        .pop();
                classDeclaration.setRecovered(false);
                classDeclaration.setEnd(blockEndright);
                classDeclaration.getBody().setStart(blockStartleft);
                classDeclaration.getBody().setEnd(blockEndright);
                RESULT = classDeclaration;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        97/* unticked_class_declaration_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 9)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 90: // NT$7 ::=
            {
                final Object RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String className = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int interfacesleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int interfacesright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List interfaces = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(
                        startleft, interfacesright, classNameleft,
                        classNameright, className, interfaces, new Block(
                                interfacesright, interfacesright, null), start);
                interfaceDeclaration.setRecovered(true);
                parser.declarations.push(interfaceDeclaration);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        129/* NT$7 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 91: // unticked_class_declaration_statement ::= interface_entry
                     // T_STRING interface_extends_list NT$7 T_CURLY_OPEN
                     // class_statement_list class_closure
            {
                Statement RESULT = null;
                // propagate RESULT from NT$7
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value != null) {
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 3)).value;
                }
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final String className = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int interfacesleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int interfacesright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List interfaces = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int blockStartleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int blockStartright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object blockStart = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object statementList = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int blockEndleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int blockEndright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement blockEnd = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (blockEnd != null) {
                    parser.reportError(new ASTError(statementListright - 1,
                            statementListright),
                            "syntax error, unfinished class declaration");
                    parser.pendingStatement = blockEnd;
                }

                final InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration) parser.declarations
                        .pop();
                interfaceDeclaration.setRecovered(false);
                interfaceDeclaration.setEnd(blockEndright);
                interfaceDeclaration.getBody().setStart(blockStartleft);
                interfaceDeclaration.getBody().setEnd(blockEndright);
                RESULT = interfaceDeclaration;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        97/* unticked_class_declaration_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 6)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 92: // errorOrNot ::= error
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        121/* errorOrNot */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 93: // errorOrNot ::=
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        121/* errorOrNot */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 94: // class_closure ::= T_CURLY_CLOSE
            {
                final Statement RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        119/* class_closure */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 95: // class_closure ::= class_declaration_statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        119/* class_closure */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 96: // class_entry_type ::= T_CLASS
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        98/* class_entry_type */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 97: // class_entry_type ::= T_ABSTRACT T_CLASS
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract,
                        value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        98/* class_entry_type */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 98: // class_entry_type ::= T_FINAL T_CLASS
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        98/* class_entry_type */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 99: // extends_from ::=
            {
                final TypeReference RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        99/* extends_from */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . */
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action2(
            int CUP$CompilerAstParser$act_num,
            java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
            java.util.Stack CUP$CompilerAstParser$stack,
            int CUP$CompilerAstParser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$CompilerAstParser$result;

        /* select the action based on the action number */
        switch (CUP$CompilerAstParser$act_num) {
            /* . . . . . . . . . . . . . . . . . . . . */
            case 100: // extends_from ::= T_EXTENDS fully_qualified_class_name
            {
                TypeReference RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final TypeReference className = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = className;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        99/* extends_from */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 101: // extends_from ::= T_EXTENDS error
            {
                final TypeReference RESULT = null;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.reportError(new ASTError(theErrorleft, theErrorright));

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        99/* extends_from */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 102: // interface_entry ::= T_INTERFACE
            {
                PHPDocBlock RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = value;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        75/* interface_entry */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 103: // interface_extends_list ::=
            {
                List RESULT = null;

                final List list = new LinkedList();
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        76/* interface_extends_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 104: // interface_extends_list ::= T_EXTENDS interface_list
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        76/* interface_extends_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 105: // implements_list ::=
            {
                List RESULT = null;

                final List list = new LinkedList();
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        100/* implements_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 106: // implements_list ::= T_IMPLEMENTS interface_list
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        100/* implements_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 107: // interface_list ::= fully_qualified_class_name
            {
                List RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final TypeReference className = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                if (className != null) {
                    list.add(className);
                }
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        101/* interface_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 108: // interface_list ::= interface_list T_COMMA
                      // fully_qualified_class_name
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final TypeReference className = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.add(className);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        101/* interface_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 109: // interface_list ::= interface_list T_COMMA error
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int commaleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int commaright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object comma = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.reportError(new ASTError(theErrorleft, theErrorright));
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        101/* interface_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 110: // interface_list ::= error
            {
                List RESULT = null;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.reportError(new ASTError(theErrorleft, theErrorright));
                RESULT = new LinkedList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        101/* interface_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 111: // foreach_optional_arg ::=
            {
                final Expression RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        16/* foreach_optional_arg */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 112: // foreach_optional_arg ::= T_DOUBLE_ARROW
                      // foreach_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        16/* foreach_optional_arg */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 113: // foreach_variable ::= variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        17/* foreach_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 114: // foreach_variable ::= T_REFERENCE variable
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReferenceExpression reference = new ReferenceExpression(
                        startleft, varright, var);
                RESULT = reference;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        17/* foreach_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 115: // for_statement ::= statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        18/* for_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 116: // for_statement ::= T_NEKUDOTAIM inner_statement_list
                      // T_ENDFOR T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;

                final Block block = new Block(startleft, statementListright,
                        statementList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        18/* for_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 117: // foreach_statement ::= statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        19/* foreach_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 118: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list
                      // T_ENDFOREACH T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;

                final Block block = new Block(startleft, statementListright,
                        statementList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        19/* foreach_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 119: // declare_statement ::= statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        20/* declare_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 120: // declare_statement ::= T_NEKUDOTAIM inner_statement_list
                      // T_ENDDECLARE T_SEMICOLON
            {
                Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;

                final Block block = new Block(startleft, statementListright,
                        statementList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        20/* declare_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 121: // declare_list ::= string_st T_EQUAL static_scalar
            {
                List[] RESULT = null;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String key = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List listKeys = new LinkedList();
                final List listValues = new LinkedList();

                listKeys.add(key);
                listValues.add(value);

                final List[] returnList = new List[] { listKeys, listValues };
                RESULT = returnList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        21/* declare_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 122: // declare_list ::= declare_list T_COMMA string_st T_EQUAL
                      // static_scalar
            {
                List[] RESULT = null;
                final int listsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int listsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List[] lists = (List[]) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String key = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                lists[0].add(key);
                lists[1].add(value);
                RESULT = lists;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        21/* declare_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 123: // switch_case_list ::= T_CURLY_OPEN case_list
                      // T_CURLY_CLOSE
            {
                Block RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int caseListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int caseListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List caseList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = new Block(startleft, endright, caseList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        22/* switch_case_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 124: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list
                      // T_CURLY_CLOSE
            {
                Block RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int caseListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int caseListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List caseList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = new Block(startleft, endright, caseList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        22/* switch_case_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 125: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH
                      // T_SEMICOLON
            {
                Block RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int caseListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int caseListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List caseList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = new Block(startleft, endright, caseList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        22/* switch_case_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 126: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list
                      // T_ENDSWITCH T_SEMICOLON
            {
                Block RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int caseListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int caseListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List caseList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = new Block(startleft, endright, caseList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        22/* switch_case_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 127: // case_list ::=
            {
                List RESULT = null;

                RESULT = new LinkedList(); // of SwitchCase

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        23/* case_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 128: // case_list ::= case_list T_CASE expr case_separator
                      // inner_statement_list
            {
                List RESULT = null;
                final int caseListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int caseListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                List caseList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List statements = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final SwitchCase switchCase = new SwitchCase(tokenleft,
                        statementsright, expr, statements, false);
                if (caseList == null) {
                    caseList = new LinkedList(); // of switchCase
                }
                caseList.add(switchCase);
                RESULT = caseList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        23/* case_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 129: // case_list ::= case_list T_DEFAULT case_separator
                      // inner_statement_list
            {
                List RESULT = null;
                final int caseListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int caseListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                List caseList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List statements = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final SwitchCase switchCase = new SwitchCase(tokenleft,
                        statementsright, null, statements, true);
                if (caseList == null) {
                    caseList = new LinkedList(); // of SwitchCase
                }
                caseList.add(switchCase);
                RESULT = caseList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        23/* case_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 130: // case_separator ::= T_NEKUDOTAIM
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        24/* case_separator */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 131: // case_separator ::= T_SEMICOLON
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        24/* case_separator */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 132: // while_statement ::= statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        25/* while_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 133: // while_statement ::= T_NEKUDOTAIM inner_statement_list
                      // T_ENDWHILE T_SEMICOLON
            {
                Statement RESULT = null;
                final int colonleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int colonright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object colon = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;

                final Block block = new Block(colonleft, statementListright,
                        statementList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        25/* while_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 134: // elseif_list ::=
            {
                List[] RESULT = null;

                final List listConditions = new LinkedList();
                final List listStatements = new LinkedList();
                final List listTokens = new LinkedList();

                final List[] returnList = new List[] { listConditions,
                        listStatements, listTokens };

                RESULT = returnList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        26/* elseif_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 135: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE
                      // expr T_CLOSE_PARENTHESE statement
            {
                List[] RESULT = null;
                final int elseifListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int elseifListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final List[] elseifList = (List[]) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int conditionleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int conditionright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression condition = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int iftrueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int iftrueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement iftrue = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                ((LinkedList) elseifList[0]).addFirst(condition);
                ((LinkedList) elseifList[1]).addFirst(iftrue);
                ((LinkedList) elseifList[2]).addFirst(new Integer(tokenleft));

                RESULT = elseifList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        26/* elseif_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 136: // new_elseif_list ::=
            {
                List[] RESULT = null;

                final List listConditions = new LinkedList();
                final List listStatements = new LinkedList();
                final List listTokens = new LinkedList();

                final List[] returnList = new List[] { listConditions,
                        listStatements, listTokens };

                RESULT = returnList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        27/* new_elseif_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 137: // new_elseif_list ::= new_elseif_list T_ELSEIF
                      // T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM
                      // inner_statement_list
            {
                List[] RESULT = null;
                final int elseifListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int elseifListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final List[] elseifList = (List[]) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int conditionleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int conditionright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression condition = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int colonleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int colonright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object colon = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = new Block(colonleft, statementListright,
                        statementList);
                ((LinkedList) elseifList[0]).addFirst(condition);
                ((LinkedList) elseifList[1]).addFirst(block);
                ((LinkedList) elseifList[2]).addFirst(new Integer(tokenleft));

                RESULT = elseifList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        27/* new_elseif_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 6)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 138: // else_single ::=
            {
                final Statement RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        28/* else_single */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 139: // else_single ::= T_ELSE statement
            {
                Statement RESULT = null;
                final int statementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = statement;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        28/* else_single */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 140: // new_else_single ::=
            {
                final Statement RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        29/* new_else_single */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 141: // new_else_single ::= T_ELSE T_NEKUDOTAIM
                      // inner_statement_list
            {
                Statement RESULT = null;
                final int colonleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int colonright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object colon = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Block block = new Block(colonleft, statementListright,
                        statementList);
                RESULT = block;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        29/* new_else_single */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 142: // parameter_list ::= non_empty_parameter_list
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        30/* parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 143: // parameter_list ::=
            {
                List RESULT = null;

                final List list = new LinkedList();
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        30/* parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 144: // non_empty_parameter_list ::= parameter
            {
                List RESULT = null;
                final int parameterleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int parameterright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FormalParameter parameter = (FormalParameter) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                if (parameter != null) {
                    list.add(parameter);
                }
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        33/* non_empty_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 145: // non_empty_parameter_list ::= non_empty_parameter_list
                      // T_COMMA parameter
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parameterleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int parameterright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FormalParameter parameter = (FormalParameter) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (parameter != null) {
                    list.add(parameter);
                }
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        33/* non_empty_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 146: // non_empty_parameter_list ::= non_empty_parameter_list
                      // T_COMMA
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int commaleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int commaright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object comma = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.reportError(new ASTError(commaleft, commaright),
                        "syntax error, unexpected ','");
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        33/* non_empty_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 147: // parameter ::= optional_class_type T_VARIABLE
            {
                FormalParameter RESULT = null;
                final int classTypeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int classTyperight = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final TypeReference classType = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final int start = classType == null ? varleft : classTypeleft;
                final VariableReference v = new VariableReference(varleft,
                        varright, var, PHPVariableKind.LOCAL);
                final FormalParameter parameter = new FormalParameter(start,
                        varright, classType, v);
                RESULT = parameter;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        34/* parameter */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 148: // parameter ::= optional_class_type T_REFERENCE
                      // T_VARIABLE
            {
                FormalParameter RESULT = null;
                final int classTypeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int classTyperight = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final TypeReference classType = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int refleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int refright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object ref = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final int start = classType == null ? refleft : classTypeleft;
                final VariableReference v = new VariableReference(varleft,
                        varright, var, PHPVariableKind.LOCAL);
                final FormalParameter parameter = new FormalParameterByReference(
                        start, varright, classType, v);
                RESULT = parameter;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        34/* parameter */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 149: // parameter ::= optional_class_type T_VARIABLE T_EQUAL
                      // static_scalar
            {
                FormalParameter RESULT = null;
                final int classTypeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int classTyperight = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final TypeReference classType = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression scalar = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final int start = classType == null ? varleft : classTypeleft;
                final VariableReference v = new VariableReference(varleft,
                        varright, var, PHPVariableKind.LOCAL);
                final FormalParameter parameter = new FormalParameter(start,
                        scalarright, classType, v, scalar);
                RESULT = parameter;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        34/* parameter */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 150: // parameter ::= optional_class_type T_REFERENCE
                      // T_VARIABLE T_EQUAL static_scalar
            {
                FormalParameter RESULT = null;
                final int classTypeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int classTyperight = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final TypeReference classType = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int refleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int refright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object ref = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression scalar = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final int start = classType == null ? refleft : classTypeleft;
                final VariableReference v = new VariableReference(varleft,
                        varright, var, PHPVariableKind.LOCAL);
                final FormalParameter parameter = new FormalParameterByReference(
                        start, scalarright, classType, v, scalar);
                RESULT = parameter;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        34/* parameter */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 151: // parameter ::= error
            {
                final FormalParameter RESULT = null;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.reportError(new ASTError(theErrorleft, theErrorright));
                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        34/* parameter */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 152: // optional_class_type ::=
            {
                final TypeReference RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        102/* optional_class_type */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 153: // optional_class_type ::= fully_qualified_class_name
            {
                TypeReference RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final TypeReference className = (TypeReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = className;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        102/* optional_class_type */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 154: // optional_class_type ::= T_ARRAY
            {
                TypeReference RESULT = null;
                final int arrayleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int arrayright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object array = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final TypeReference reference = new TypeReference(arrayleft,
                        arrayright, "array");
                RESULT = reference;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        102/* optional_class_type */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 155: // function_call_parameter_list ::=
                      // non_empty_function_call_parameter_list
            {
                PHPCallArgumentsList RESULT = null;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        35/* function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 156: // function_call_parameter_list ::=
            {
                PHPCallArgumentsList RESULT = null;

                final PHPCallArgumentsList list = new PHPCallArgumentsList();
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        35/* function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 157: // non_empty_function_call_parameter_list ::=
                      // expr_without_variable
            {
                PHPCallArgumentsList RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
                paramsList.addNode(var);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        36/* non_empty_function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 158: // non_empty_function_call_parameter_list ::= variable
            {
                PHPCallArgumentsList RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
                paramsList.addNode(var);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        36/* non_empty_function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 159: // non_empty_function_call_parameter_list ::= T_REFERENCE
                      // w_variable
            {
                PHPCallArgumentsList RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
                final Expression var_ref = new ReferenceExpression(startleft,
                        varright, var);
                paramsList.addNode(var_ref);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        36/* non_empty_function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 160: // non_empty_function_call_parameter_list ::=
                      // non_empty_function_call_parameter_list T_COMMA
                      // expr_without_variable
            {
                PHPCallArgumentsList RESULT = null;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                paramsList.addNode(var);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        36/* non_empty_function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 161: // non_empty_function_call_parameter_list ::=
                      // non_empty_function_call_parameter_list T_COMMA variable
            {
                PHPCallArgumentsList RESULT = null;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                paramsList.addNode(var);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        36/* non_empty_function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 162: // non_empty_function_call_parameter_list ::=
                      // non_empty_function_call_parameter_list T_COMMA
                      // T_REFERENCE w_variable
            {
                PHPCallArgumentsList RESULT = null;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Expression var_ref = new ReferenceExpression(startleft,
                        varright, var);
                paramsList.addNode(var_ref);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        36/* non_empty_function_call_parameter_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 163: // global_var_list ::= global_var_list T_COMMA global_var
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.add(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        37/* global_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 164: // global_var_list ::= global_var
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        37/* global_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 165: // global_var ::= T_VARIABLE
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference variable = new VariableReference(
                        varleft, varright, var);
                RESULT = variable;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        38/* global_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 166: // global_var ::= T_DOLLAR r_variable
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReflectionVariableReference ref = new ReflectionVariableReference(
                        startleft, varright, var);
                RESULT = ref;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        38/* global_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 167: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression varName = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReflectionVariableReference var = new ReflectionVariableReference(
                        startleft, endright, varName);
                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        38/* global_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 168: // static_var_list ::= static_var_list T_COMMA T_VARIABLE
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference v = new VariableReference(varleft,
                        varright, var);
                list.add(v);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        39/* static_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 169: // static_var_list ::= static_var_list T_COMMA T_VARIABLE
                      // T_EQUAL static_scalar
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference v = new VariableReference(varleft,
                        varright, var);
                final Assignment assignment = new Assignment(varleft,
                        exprright, v, Assignment.OP_EQUAL, expr);
                list.add(assignment);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        39/* static_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 170: // static_var_list ::= T_VARIABLE
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference v = new VariableReference(varleft,
                        varright, var);
                final List list = new LinkedList();
                list.add(v);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        39/* static_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 171: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference v = new VariableReference(varleft,
                        varright, var);
                final Assignment assignment = new Assignment(varleft,
                        exprright, v, Assignment.OP_EQUAL, expr);
                final List list = new LinkedList();
                list.add(assignment);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        39/* static_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 172: // class_statement_list ::= class_statement_list
                      // class_statement
            {
                final Object RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object list = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int classStatementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classStatementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object classStatement = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (!(parser.declarations.peek() instanceof TypeDeclaration)) {
                    parser.declarations.pop();
                }

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        40/* class_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 173: // class_statement_list ::=
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        40/* class_statement_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 174: // class_statement ::= variable_modifiers
                      // class_variable_declaration T_SEMICOLON
            {
                final Object RESULT = null;
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int decListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int decListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List decList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                final Iterator i = decList.iterator();
                while (i.hasNext()) {
                    final ASTNode[] decl = (ASTNode[]) i.next();
                    final VariableReference variable = (VariableReference) decl[0];
                    final Expression initializer = (Expression) decl[1];
                    final int start = variable.sourceStart();
                    final int end = (initializer == null ? variable.sourceEnd()
                            : initializer.sourceEnd());
                    parser.addDeclarationStatement(new PHPFieldDeclaration(
                            variable, initializer, start, end,
                            modifier.modifier, modifierleft, modifier.doc));
                }

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        41/* class_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 175: // class_statement ::= constant_declaration T_SEMICOLON
            {
                final Object RESULT = null;
                final int decListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int decListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List decList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                final Iterator i = decList.iterator();
                while (i.hasNext()) {
                    final ASTNode[] decl = (ASTNode[]) i.next();
                    final ConstantReference constant = (ConstantReference) decl[0];
                    final Expression initializer = (Expression) decl[1];

                    PHPDocBlock docBlock = null;
                    if (decl.length == 3) {
                        docBlock = (PHPDocBlock) decl[2];
                    }
                    final int start = constant.sourceStart();
                    final int end = (initializer == null ? constant.sourceEnd()
                            : initializer.sourceEnd());
                    parser.addDeclarationStatement(new ConstantDeclaration(
                            constant, initializer, decListleft, end, docBlock));
                }

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        41/* class_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 176: // NT$8 ::=
            {
                final Object RESULT = null;
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int isReferenceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int isReferenceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Boolean isReference = (Boolean) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final int methodStart = modifier == null ? startleft
                        : modifierleft;
                final int modifierValue = modifier == null ? Modifiers.AccPublic
                        : modifier.modifier;
                PHPDocBlock docBlock = start;
                if (modifier != null && modifier.doc != null) {
                    docBlock = modifier.doc;
                }
                final PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(
                        methodStart, functionNameright, functionNameleft,
                        functionNameright, functionName, modifierValue, null,
                        new Block(functionNameright, functionNameright, null),
                        isReference.booleanValue(), docBlock);
                parser.addDeclarationStatement(methodDeclaration);
                parser.declarations.push(methodDeclaration);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        130/* NT$8 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 177: // NT$9 ::=
            {
                final Object RESULT = null;
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int isReferenceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int isReferenceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Boolean isReference = (Boolean) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int paramListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int paramListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List paramList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int closeParentheseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int closeParentheseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object closeParenthese = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations
                        .peek();
                functionDeclaration.acceptArguments(paramList);
                functionDeclaration.setEnd(closeParentheseright);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        131/* NT$9 */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 178: // class_statement ::= method_modifiers T_FUNCTION
                      // is_reference string_st NT$8 T_OPEN_PARENTHESE
                      // parameter_list T_CLOSE_PARENTHESE NT$9 method_body
            {
                Object RESULT = null;
                // propagate RESULT from NT$8
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value != null) {
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 5)).value;
                }
                // propagate RESULT from NT$9
                if (((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value != null) {
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                            .elementAt(CUP$CompilerAstParser$top - 1)).value;
                }
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 9)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).right;
                final PHPDocBlock start = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).value;
                final int isReferenceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int isReferenceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final Boolean isReference = (Boolean) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 6)).value;
                final int paramListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int paramListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final List paramList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int closeParentheseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int closeParentheseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object closeParenthese = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int bodyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int bodyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Statement body = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations
                        .pop();
                if (body instanceof ASTError) {
                    parser.reportError(
                            new ASTError(methodDeclaration.sourceEnd() - 1,
                                    methodDeclaration.sourceEnd()),
                            "syntax error, unfinished method declaration");
                }
                final TypeDeclaration type = (TypeDeclaration) parser.declarations
                        .peek();
                methodDeclaration.setDeclaringTypeName(type.getName());

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        41/* class_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 9)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 179: // class_statement ::= T_VAR_COMMENT
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        41/* class_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 180: // class_statement ::= error
            {
                final Object RESULT = null;
                final int theErrorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int theErrorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object theError = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parser.reportError();
                final ASTError error = new ASTError(theErrorleft, theErrorright);
                parser.addDeclarationStatement(error);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        41/* class_statement */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 181: // method_body ::= T_SEMICOLON
            {
                final Statement RESULT = null;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations
                        .peek();
                methodDeclaration.getBody().setStart(endleft);
                methodDeclaration.getBody().setEnd(endright);
                methodDeclaration.setEnd(endright);
                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        83/* method_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 182: // method_body ::= T_CURLY_OPEN inner_statement_list
                      // T_CURLY_CLOSE
            {
                final Statement RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int statementListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int statementListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List statementList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations
                        .peek();
                methodDeclaration.getBody().setStart(startleft);
                methodDeclaration.getBody().setEnd(endright);
                methodDeclaration.getBody().getStatements().clear();
                methodDeclaration.getBody().acceptStatements(statementList);
                methodDeclaration.setEnd(endright);
                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        83/* method_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 183: // method_body ::=
            {
                Statement RESULT = null;

                parser.reportError();
                RESULT = new ASTError(0, 0);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        83/* method_body */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 184: // variable_modifiers ::= non_empty_member_modifiers
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                int result = 0;
                PHPDocBlock docBlock = null;
                for (final Iterator it = list.iterator(); it.hasNext();) {
                    final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it
                            .next();
                    if (modifier.doc != null) {
                        docBlock = modifier.doc;
                    }
                    result |= modifier.modifier;
                }
                RESULT = parser.new ModifierDocPair(result, docBlock);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        104/* variable_modifiers */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 185: // variable_modifiers ::= T_VAR
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock var = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        104/* variable_modifiers */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 186: // method_modifiers ::=
            {
                final CompilerAstParser.ModifierDocPair RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        82/* method_modifiers */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 187: // method_modifiers ::= non_empty_member_modifiers
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                int result = 0;
                PHPDocBlock docBlock = null;
                for (final Iterator it = list.iterator(); it.hasNext();) {
                    final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it
                            .next();
                    if (modifier.doc != null) {
                        docBlock = modifier.doc;
                    }
                    result |= modifier.modifier;
                }
                RESULT = parser.new ModifierDocPair(result, docBlock);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        82/* method_modifiers */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 188: // non_empty_member_modifiers ::= member_modifier
            {
                List RESULT = null;
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(modifier);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        86/* non_empty_member_modifiers */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 189: // non_empty_member_modifiers ::=
                      // non_empty_member_modifiers member_modifier
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int modifierleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int modifierright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.add(modifier);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        86/* non_empty_member_modifiers */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 190: // member_modifier ::= T_PUBLIC
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        87/* member_modifier */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 191: // member_modifier ::= T_PROTECTED
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccProtected,
                        value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        87/* member_modifier */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 192: // member_modifier ::= T_PRIVATE
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        87/* member_modifier */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 193: // member_modifier ::= T_STATIC
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        87/* member_modifier */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 194: // member_modifier ::= T_ABSTRACT
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract,
                        value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        87/* member_modifier */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 195: // member_modifier ::= T_FINAL
            {
                CompilerAstParser.ModifierDocPair RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        87/* member_modifier */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 196: // class_variable_declaration ::=
                      // class_variable_declaration T_COMMA T_VARIABLE
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference varId = new VariableReference(varleft,
                        varright, var);
                list.add(new ASTNode[] { varId, null });
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        80/* class_variable_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 197: // class_variable_declaration ::=
                      // class_variable_declaration T_COMMA T_VARIABLE T_EQUAL
                      // static_scalar
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference varId = new VariableReference(varleft,
                        varright, var);
                list.add(new ASTNode[] { varId, expr });
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        80/* class_variable_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 198: // class_variable_declaration ::= T_VARIABLE
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final VariableReference varId = new VariableReference(varleft,
                        varright, var);
                list.add(new ASTNode[] { varId, null });
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        80/* class_variable_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 199: // class_variable_declaration ::= T_VARIABLE T_EQUAL
                      // static_scalar
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final VariableReference varId = new VariableReference(varleft,
                        varright, var);
                list.add(new ASTNode[] { varId, expr });
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        80/* class_variable_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . */
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action3(
            int CUP$CompilerAstParser$act_num,
            java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
            java.util.Stack CUP$CompilerAstParser$stack,
            int CUP$CompilerAstParser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$CompilerAstParser$result;

        /* select the action based on the action number */
        switch (CUP$CompilerAstParser$act_num) {
            /* . . . . . . . . . . . . . . . . . . . . */
            case 200: // constant_declaration ::= constant_declaration T_COMMA
                      // T_STRING T_EQUAL static_scalar
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int constNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int constNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String constName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ConstantReference constId = new ConstantReference(
                        constNameleft, constNameright, constName);
                list.add(new ASTNode[] { constId, expr });
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        81/* constant_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 201: // constant_declaration ::= T_CONST T_STRING T_EQUAL
                      // static_scalar
            {
                List RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final PHPDocBlock value = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int constNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int constNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String constName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final ConstantReference constId = new ConstantReference(
                        constNameleft, constNameright, constName);
                list.add(new ASTNode[] { constId, expr, value });
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        81/* constant_declaration */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 202: // echo_expr_list ::= echo_expr_list T_COMMA expr
            {
                List RESULT = null;
                final int exprListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int exprListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List exprList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                exprList.add(expr);
                RESULT = exprList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        43/* echo_expr_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 203: // echo_expr_list ::= expr
            {
                List RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List exprList = new LinkedList();
                exprList.add(expr);
                RESULT = exprList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        43/* echo_expr_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 204: // for_expr ::=
            {
                List RESULT = null;

                RESULT = new LinkedList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        44/* for_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 205: // for_expr ::= non_empty_for_expr
            {
                List RESULT = null;
                final int exprListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List exprList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = exprList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        44/* for_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 206: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr
            {
                List RESULT = null;
                final int exprListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int exprListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List exprList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                exprList.add(expr);
                RESULT = exprList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        45/* non_empty_for_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 207: // non_empty_for_expr ::= expr
            {
                List RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List exprList = new LinkedList();
                exprList.add(expr);
                RESULT = exprList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        45/* non_empty_for_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 208: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE
                      // assignment_list T_CLOSE_PARENTHESE T_EQUAL expr
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int varListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final List varList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int closeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int closeright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object close = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ListVariable vars = new ListVariable(startleft,
                        closeright, varList);
                final Assignment list = new Assignment(startleft, exprright,
                        vars, Assignment.OP_EQUAL, expr);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 209: // expr_without_variable ::= variable T_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 210: // expr_without_variable ::= variable T_EQUAL T_REFERENCE
                      // variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int reftokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int reftokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object reftoken = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int refvarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int refvarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression refvar = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, refvarright, var,
                        Assignment.OP_REF_EQUAL, refvar);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 211: // expr_without_variable ::= variable T_EQUAL T_REFERENCE
                      // T_NEW class_name_reference ctor_arguments
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int reftokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int reftokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object reftoken = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int ctorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int ctorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPCallArgumentsList ctor = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (ctor.sourceStart() == 0) {
                    ctor.setStart(classNameright);
                    ctor.setEnd(classNameright);
                }
                final ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(
                        startleft, ctorright, className, ctor);
                final Assignment assignment = new Assignment(varleft,
                        ctorright, var, Assignment.OP_REF_EQUAL,
                        classInstanceCreation);
                RESULT = assignment;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 212: // expr_without_variable ::= T_NEW class_name_reference
                      // ctor_arguments
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int ctorleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int ctorright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPCallArgumentsList ctor = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (ctor.sourceStart() == 0) {
                    ctor.setStart(classNameright);
                    ctor.setEnd(classNameright);
                }
                final ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(
                        startleft, ctorright, className, ctor);
                RESULT = classInstanceCreation;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 213: // expr_without_variable ::= T_CLONE expr
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final CloneExpression clone = new CloneExpression(startleft,
                        exprright, expr);
                RESULT = clone;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 214: // expr_without_variable ::= variable T_PLUS_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_PLUS_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 215: // expr_without_variable ::= variable T_MINUS_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_MINUS_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 216: // expr_without_variable ::= variable T_MUL_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_MUL_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 217: // expr_without_variable ::= variable T_DIV_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_DIV_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 218: // expr_without_variable ::= variable T_CONCAT_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_CONCAT_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 219: // expr_without_variable ::= variable T_MOD_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_MOD_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 220: // expr_without_variable ::= variable T_AND_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_AND_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 221: // expr_without_variable ::= variable T_OR_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_OR_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 222: // expr_without_variable ::= variable T_XOR_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_XOR_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 223: // expr_without_variable ::= variable T_SL_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_SL_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 224: // expr_without_variable ::= variable T_SR_EQUAL expr
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Assignment(varleft, exprright, var,
                        Assignment.OP_SR_EQUAL, expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 225: // expr_without_variable ::= rw_variable T_INC
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new PostfixExpression(varleft, tokenright, var,
                        PostfixExpression.OP_INC);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 226: // expr_without_variable ::= T_INC rw_variable
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new PrefixExpression(tokenleft, varright, var,
                        PrefixExpression.OP_INC);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 227: // expr_without_variable ::= rw_variable T_DEC
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new PostfixExpression(varleft, tokenright, var,
                        PostfixExpression.OP_DEC);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 228: // expr_without_variable ::= T_DEC rw_variable
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new PrefixExpression(tokenleft, varright, var,
                        PrefixExpression.OP_DEC);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 229: // expr_without_variable ::= expr T_BOOLEAN_OR expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_BOOL_OR, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 230: // expr_without_variable ::= expr T_BOOLEAN_AND expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_BOOL_AND, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 231: // expr_without_variable ::= expr T_LOGICAL_OR expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_STRING_OR, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 232: // expr_without_variable ::= expr T_LOGICAL_AND expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_STRING_AND, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 233: // expr_without_variable ::= expr T_LOGICAL_XOR expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_STRING_XOR, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 234: // expr_without_variable ::= expr T_OR expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_OR, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 235: // expr_without_variable ::= expr T_REFERENCE expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_AND, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 236: // expr_without_variable ::= expr T_KOVA expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_XOR, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 237: // expr_without_variable ::= expr T_NEKUDA expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_CONCAT, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 238: // expr_without_variable ::= expr T_PLUS expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_PLUS, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 239: // expr_without_variable ::= expr T_MINUS expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_MINUS, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 240: // expr_without_variable ::= expr T_TIMES expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_MUL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 241: // expr_without_variable ::= expr T_DIV expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_DIV, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 242: // expr_without_variable ::= expr T_PRECENT expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_MOD, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 243: // expr_without_variable ::= expr T_SL expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_SL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 244: // expr_without_variable ::= expr T_SR expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_SR, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 245: // expr_without_variable ::= T_PLUS expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new UnaryOperation(tokenleft, exprright, expr,
                        UnaryOperation.OP_PLUS);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 246: // expr_without_variable ::= T_MINUS expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new UnaryOperation(tokenleft, exprright, expr,
                        UnaryOperation.OP_MINUS);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 247: // expr_without_variable ::= T_NOT expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new UnaryOperation(tokenleft, exprright, expr,
                        UnaryOperation.OP_NOT);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 248: // expr_without_variable ::= T_TILDA expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new UnaryOperation(tokenleft, exprright, expr,
                        UnaryOperation.OP_TILDA);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 249: // expr_without_variable ::= expr T_IS_IDENTICAL expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_IS_IDENTICAL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 250: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 251: // expr_without_variable ::= expr T_IS_EQUAL expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_IS_EQUAL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 252: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_IS_NOT_EQUAL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 253: // expr_without_variable ::= expr T_RGREATER expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_RGREATER, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 254: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL
                      // expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 255: // expr_without_variable ::= expr T_LGREATER expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_LGREATER, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 256: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL
                      // expr
            {
                Expression RESULT = null;
                final int expr1left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int expr1right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr1 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int expr2left = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int expr2right = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InfixExpression(expr1left, expr2right, expr1,
                        InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 257: // expr_without_variable ::= expr T_INSTANCEOF
                      // class_name_reference
            {
                Expression RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new InstanceOfExpression(exprleft, classNameright,
                        expr, className);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 258: // expr_without_variable ::= T_OPEN_PARENTHESE expr
                      // T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = expr;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 259: // expr_without_variable ::= expr T_QUESTION_MARK expr
                      // T_NEKUDOTAIM expr
            {
                Expression RESULT = null;
                final int conditionleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int conditionright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Expression condition = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int ifTrueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int ifTrueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression ifTrue = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int ifFalseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int ifFalseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression ifFalse = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ConditionalExpression(conditionleft, ifFalseright,
                        condition, ifTrue, ifFalse);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 260: // expr_without_variable ::= expr T_QUESTION_MARK
                      // T_NEKUDOTAIM expr
            {
                Expression RESULT = null;
                final int conditionleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int conditionright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression condition = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int ifFalseleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int ifFalseright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression ifFalse = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ConditionalExpression(conditionleft, ifFalseright,
                        condition, null, ifFalse);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 261: // expr_without_variable ::= internal_functions_in_yacc
            {
                Expression RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = expr;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 262: // expr_without_variable ::= T_INT_CAST expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new CastExpression(tokenleft, exprright, expr,
                        CastExpression.TYPE_INT);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 263: // expr_without_variable ::= T_DOUBLE_CAST expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new CastExpression(tokenleft, exprright, expr,
                        CastExpression.TYPE_REAL);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 264: // expr_without_variable ::= T_STRING_CAST expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new CastExpression(tokenleft, exprright, expr,
                        CastExpression.TYPE_STRING);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 265: // expr_without_variable ::= T_ARRAY_CAST expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new CastExpression(tokenleft, exprright, expr,
                        CastExpression.TYPE_ARRAY);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 266: // expr_without_variable ::= T_OBJECT_CAST expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new CastExpression(tokenleft, exprright, expr,
                        CastExpression.TYPE_OBJECT);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 267: // expr_without_variable ::= T_BOOL_CAST expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new CastExpression(tokenleft, exprright, expr,
                        CastExpression.TYPE_BOOL);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 268: // expr_without_variable ::= T_UNSET_CAST expr
            {
                Expression RESULT = null;
                final int tokenleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int tokenright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object token = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new CastExpression(tokenleft, exprright, expr,
                        CastExpression.TYPE_UNSET);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 269: // expr_without_variable ::= T_EXIT exit_expr
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String start = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList list = new PHPCallArgumentsList();
                if (expr != null) {
                    list.addNode(expr);
                    list.setStart(expr.sourceStart());
                    list.setEnd(expr.sourceEnd());
                }
                else {
                    list.setStart(startright);
                    list.setEnd(startright);
                }
                final SimpleReference functionName = new SimpleReference(
                        startleft, startright, start);
                final PHPCallExpression result = new PHPCallExpression(
                        startleft, exprright, null, functionName, list);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 270: // expr_without_variable ::= T_AT expr
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final IgnoreError ignoreError = new IgnoreError(startleft,
                        exprright, expr);
                RESULT = ignoreError;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 271: // expr_without_variable ::= scalar
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression scalar = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = scalar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 272: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE
                      // array_pair_list T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Expression expr = new ArrayCreation(startleft, endright,
                        list);
                RESULT = expr;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 273: // expr_without_variable ::= T_BACKQUATE backticks_expr
                      // T_BACKQUATE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final BackTickExpression backTickExpression = new BackTickExpression(
                        startleft, endright, list);
                RESULT = backTickExpression;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 274: // expr_without_variable ::= T_PRINT expr
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String start = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList list = new PHPCallArgumentsList();
                if (expr != null) {
                    list.addNode(expr);
                    list.setStart(expr.sourceStart());
                    list.setEnd(expr.sourceEnd());
                }
                else {
                    list.setStart(startright);
                    list.setEnd(startright);
                }
                final SimpleReference name = new SimpleReference(startleft,
                        startright, "print");
                final PHPCallExpression result = new PHPCallExpression(
                        startleft, exprright, null, name, list);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 275: // expr_without_variable ::= T_FUNCTION is_reference
                      // T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE
                      // lexical_vars T_CURLY_OPEN inner_statement_list
                      // T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).right;
                final PHPDocBlock s = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 8)).value;
                final int isReferenceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).left;
                final int isReferenceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).right;
                final Boolean isReference = (Boolean) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 7)).value;
                final int paramListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int paramListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final List paramList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int varsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final List varsList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int blockStartleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int blockStartright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object blockStart = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int blockEndleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int blockEndright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object blockEnd = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new LambdaFunctionDeclaration(sleft, blockEndright,
                        paramList, varsList, new Block(blockStartleft,
                                blockEndright, list),
                        isReference.booleanValue());

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        46/* expr_without_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 8)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 276: // lexical_vars ::=
            {
                final List RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        31/* lexical_vars */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 277: // lexical_vars ::= T_USE T_OPEN_PARENTHESE
                      // lexical_var_list T_CLOSE_PARENTHESE
            {
                List RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int eleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int eright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object e = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        31/* lexical_vars */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 278: // lexical_var_list ::= lexical_var_list T_COMMA
                      // T_VARIABLE
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference v = new VariableReference(varleft,
                        varright, var);
                list.add(v);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        32/* lexical_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 279: // lexical_var_list ::= lexical_var_list T_COMMA
                      // T_REFERENCE T_VARIABLE
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int refleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int refright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object ref = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.add(new ReferenceExpression(refleft, varright,
                        new VariableReference(varleft, varright, var)));
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        32/* lexical_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 280: // lexical_var_list ::= T_VARIABLE
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(new VariableReference(varleft, varright, var));
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        32/* lexical_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 281: // lexical_var_list ::= T_REFERENCE T_VARIABLE
            {
                List RESULT = null;
                final int refleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int refright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object ref = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String var = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(new ReferenceExpression(refleft, varright,
                        new VariableReference(varleft, varright, var)));
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        32/* lexical_var_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 282: // function_call ::= namespace_name T_OPEN_PARENTHESE
                      // function_call_parameter_list T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final FullyQualifiedReference functionName = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                RESULT = new PHPCallExpression(functionNameleft, endright,
                        null, functionName, parameters);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 283: // function_call ::= T_NAMESPACE T_NS_SEPARATOR
                      // namespace_name T_OPEN_PARENTHESE
                      // function_call_parameter_list T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int namespaceleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int namespaceright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Object namespace = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final FullyQualifiedReference functionName = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                if (functionName.getNamespace() != null) {
                    functionName.getNamespace().setLocal(true);
                }
                RESULT = new PHPCallExpression(namespaceleft, endright, null,
                        functionName, parameters);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 284: // function_call ::= T_NS_SEPARATOR namespace_name
                      // T_OPEN_PARENTHESE function_call_parameter_list
                      // T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final FullyQualifiedReference functionName = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                NamespaceReference namespace = functionName.getNamespace();
                if (namespace == null) {
                    namespace = new NamespaceReference(sleft, sright, "");
                    functionName.setNamespace(namespace);
                }
                namespace.setGlobal(true);
                namespace.setStart(namespace.sourceStart() - 1);
                RESULT = new PHPCallExpression(sleft, endright, null,
                        functionName, parameters);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 285: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM
                      // T_STRING T_OPEN_PARENTHESE function_call_parameter_list
                      // T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                final SimpleReference name = new SimpleReference(
                        functionNameleft, functionNameright, functionName);
                final StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(
                        classNameleft, endright, className, name, parameters);
                RESULT = staticMethodInvocation;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 286: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM
                      // variable_without_objects T_OPEN_PARENTHESE
                      // function_call_parameter_list T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int reflectionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int reflectionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression reflectionName = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                final ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(
                        classNameleft, endright, className, reflectionName,
                        parameters);
                RESULT = functionInvocation;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 287: // function_call ::= variable_class_name
                      // T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE
                      // function_call_parameter_list T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int functionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int functionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final String functionName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                final SimpleReference name = new SimpleReference(
                        functionNameleft, functionNameright, functionName);
                final StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(
                        classNameleft, endright, className, name, parameters);
                RESULT = staticMethodInvocation;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 288: // function_call ::= variable_class_name
                      // T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
                      // T_OPEN_PARENTHESE function_call_parameter_list
                      // T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int reflectionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int reflectionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression reflectionName = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                final ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(
                        classNameleft, endright, className, reflectionName,
                        parameters);
                RESULT = functionInvocation;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 289: // function_call ::= variable_without_objects
                      // T_OPEN_PARENTHESE function_call_parameter_list
                      // T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int reflectionNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int reflectionNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression reflectionName = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int parametersleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int parametersright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList parameters = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                parameters.setStart(startright);
                parameters.setEnd(endleft);
                RESULT = new ReflectionCallExpression(reflectionNameleft,
                        endright, null, reflectionName, parameters);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        47/* function_call */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 290: // class_name ::= T_STATIC
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPDocBlock s = (PHPDocBlock) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new FullyQualifiedReference(sleft, sright, "static",
                        null);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        78/* class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 291: // class_name ::= namespace_name
            {
                Expression RESULT = null;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        78/* class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 292: // class_name ::= T_NAMESPACE T_NS_SEPARATOR
                      // namespace_name
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (name.getNamespace() != null) {
                    name.getNamespace().setLocal(true);
                }
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        78/* class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 293: // class_name ::= T_NS_SEPARATOR namespace_name
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                NamespaceReference namespace = name.getNamespace();
                if (namespace == null) {
                    namespace = new NamespaceReference(sleft, sright, "");
                    name.setNamespace(namespace);
                }
                namespace.setGlobal(true);
                namespace.setStart(namespace.sourceStart() - 1);
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        78/* class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 294: // fully_qualified_class_name ::= namespace_name
            {
                TypeReference RESULT = null;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        79/* fully_qualified_class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 295: // fully_qualified_class_name ::= T_NAMESPACE
                      // T_NS_SEPARATOR namespace_name
            {
                TypeReference RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (name.getNamespace() != null) {
                    name.getNamespace().setLocal(true);
                }
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        79/* fully_qualified_class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 296: // fully_qualified_class_name ::= T_NS_SEPARATOR
                      // namespace_name
            {
                TypeReference RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                NamespaceReference namespace = name.getNamespace();
                if (namespace == null) {
                    namespace = new NamespaceReference(sleft, sright, "");
                    name.setNamespace(namespace);
                }
                namespace.setGlobal(true);
                namespace.setStart(namespace.sourceStart() - 1);
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        79/* fully_qualified_class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 297: // class_name_reference ::= class_name
            {
                Expression RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = className;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        111/* class_name_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 298: // class_name_reference ::= dynamic_class_name_reference
            {
                Expression RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = className;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        111/* class_name_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 299: // dynamic_class_name_reference ::= base_variable
                      // T_OBJECT_OPERATOR object_property
                      // dynamic_class_name_variable_properties
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int firstVarPropertyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int firstVarPropertyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression firstVarProperty = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int propertyListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int propertyListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List propertyList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // then get the aggregated list of properties (->...->...->...)
                final LinkedList list = (LinkedList) propertyList;
                list.addFirst(firstVarProperty);

                // now create the dispatch(es) nodes
                Expression dispatcher = var;

                final Iterator listIt = list.iterator();
                while (listIt.hasNext()) {
                    final Expression property = (Expression) listIt.next();
                    dispatcher = parser.createDispatch(dispatcher, property);
                }

                RESULT = dispatcher;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        113/* dynamic_class_name_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . */
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action4(
            int CUP$CompilerAstParser$act_num,
            java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
            java.util.Stack CUP$CompilerAstParser$stack,
            int CUP$CompilerAstParser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$CompilerAstParser$result;

        /* select the action based on the action number */
        switch (CUP$CompilerAstParser$act_num) {
            /* . . . . . . . . . . . . . . . . . . . . */
            case 300: // dynamic_class_name_reference ::= base_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        113/* dynamic_class_name_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 301: // dynamic_class_name_variable_properties ::=
                      // dynamic_class_name_variable_properties
                      // dynamic_class_name_variable_property
            {
                List RESULT = null;
                final int variablesleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int variablesright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List variables = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                variables.add(var);
                RESULT = variables;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        115/* dynamic_class_name_variable_properties */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 302: // dynamic_class_name_variable_properties ::=
            {
                List RESULT = null;

                RESULT = new LinkedList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        115/* dynamic_class_name_variable_properties */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 303: // dynamic_class_name_variable_property ::=
                      // T_OBJECT_OPERATOR object_property
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        116/* dynamic_class_name_variable_property */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 304: // exit_expr ::=
            {
                final Expression RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        48/* exit_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 305: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE
            {
                final Expression RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        48/* exit_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 306: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                RESULT = expr;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        48/* exit_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 307: // backticks_expr ::=
            {
                List RESULT = null;

                RESULT = new LinkedList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        70/* backticks_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 308: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE
            {
                List RESULT = null;
                final int stringleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int stringright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String string = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final Scalar scalar = new Scalar(stringleft, stringright,
                        string, string == null ? Scalar.TYPE_UNKNOWN
                                : Scalar.TYPE_STRING);
                list.add(scalar);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        70/* backticks_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 309: // backticks_expr ::= encaps_list
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        70/* backticks_expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 310: // ctor_arguments ::=
            {
                PHPCallArgumentsList RESULT = null;

                RESULT = new PHPCallArgumentsList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        49/* ctor_arguments */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 311: // ctor_arguments ::= T_OPEN_PARENTHESE
                      // function_call_parameter_list T_CLOSE_PARENTHESE
            {
                PHPCallArgumentsList RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                paramsList.setStart(startright);
                paramsList.setEnd(endleft);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        49/* ctor_arguments */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 312: // common_scalar ::= T_LNUMBER
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String scalar = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright, scalar,
                        Scalar.TYPE_INT);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 313: // common_scalar ::= T_DNUMBER
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String scalar = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright, scalar,
                        Scalar.TYPE_REAL);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 314: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String scalar = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright, scalar,
                        Scalar.TYPE_STRING);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 315: // common_scalar ::= T_LINE
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object scalar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright,
                        "__LINE__", Scalar.TYPE_SYSTEM);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 316: // common_scalar ::= T_FILE
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String scalar = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright,
                        "__FILE__", Scalar.TYPE_SYSTEM);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 317: // common_scalar ::= T_DIR
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object scalar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright, "__DIR__",
                        Scalar.TYPE_SYSTEM);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 318: // common_scalar ::= T_CLASS_C
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object scalar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright,
                        "__CLASS__", Scalar.TYPE_SYSTEM);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 319: // common_scalar ::= T_METHOD_C
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object scalar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright,
                        "__METHOD__", Scalar.TYPE_SYSTEM);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 320: // common_scalar ::= T_FUNC_C
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object scalar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar s = new Scalar(scalarleft, scalarright,
                        "__FUNCTION__", Scalar.TYPE_SYSTEM);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 321: // common_scalar ::= T_NS_C
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object scalar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__",
                        Scalar.TYPE_SYSTEM);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 322: // common_scalar ::= T_START_HEREDOC
                      // T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC
            {
                Expression RESULT = null;
                final int labelleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int labelright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String label = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int stringleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int stringright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String string = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int eleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int eright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object e = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(new Scalar(stringleft, stringright, string,
                        string == null ? Scalar.TYPE_UNKNOWN
                                : Scalar.TYPE_STRING));
                RESULT = new Quote(labelleft, eright, list,
                        label.charAt(0) == '\'' ? Quote.QT_NOWDOC
                                : Quote.QT_HEREDOC);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 323: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC
            {
                Expression RESULT = null;
                final int labelleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int labelright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String label = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int eleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int eright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object e = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new Quote(labelleft, eright, new LinkedList(),
                        label.charAt(0) == '\'' ? Quote.QT_NOWDOC
                                : Quote.QT_HEREDOC);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        50/* common_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 324: // static_scalar ::= common_scalar
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression scalar = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = scalar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 325: // static_scalar ::= namespace_name
            {
                Expression RESULT = null;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (name.getNamespace() == null) {
                    RESULT = new Scalar(nameleft, nameright, name.getName(),
                            Scalar.TYPE_STRING);
                }
                else {
                    RESULT = name;
                }

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 326: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR
                      // namespace_name
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (name.getNamespace() != null) {
                    name.getNamespace().setLocal(true);
                }
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 327: // static_scalar ::= T_NS_SEPARATOR namespace_name
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                NamespaceReference namespace = name.getNamespace();
                if (namespace == null) {
                    namespace = new NamespaceReference(sleft, sright, "");
                    name.setNamespace(namespace);
                }
                namespace.setGlobal(true);
                namespace.setStart(namespace.sourceStart() - 1);
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 328: // static_scalar ::= T_PLUS static_scalar
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final UnaryOperation op = new UnaryOperation(startleft,
                        exprright, expr, UnaryOperation.OP_PLUS);
                RESULT = op;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 329: // static_scalar ::= T_MINUS static_scalar
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final UnaryOperation op = new UnaryOperation(startleft,
                        exprright, expr, UnaryOperation.OP_MINUS);
                RESULT = op;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 330: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE
                      // static_array_pair_list T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ArrayCreation array = new ArrayCreation(startleft,
                        endright, list);
                RESULT = array;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 331: // static_scalar ::= static_class_constant
            {
                Expression RESULT = null;
                final int classConstantleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classConstantright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final StaticConstantAccess classConstant = (StaticConstantAccess) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = classConstant;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        51/* static_scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 332: // static_class_constant ::= class_name
                      // T_PAAMAYIM_NEKUDOTAYIM T_STRING
            {
                StaticConstantAccess RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String varName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ConstantReference vname = new ConstantReference(
                        varNameleft, varNameright, varName);
                final StaticConstantAccess constant = new StaticConstantAccess(
                        classNameleft, varNameright, className, vname);
                RESULT = constant;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        117/* static_class_constant */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 333: // scalar ::= T_STRING_VARNAME
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String scalar = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // TODO: check if this is a scalar
                final Scalar s = new Scalar(scalarleft, scalarright, scalar,
                        Scalar.TYPE_STRING);
                RESULT = s;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 334: // scalar ::= class_constant
            {
                Expression RESULT = null;
                final int classConstantleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int classConstantright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final StaticConstantAccess classConstant = (StaticConstantAccess) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = classConstant;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 335: // scalar ::= namespace_name
            {
                Expression RESULT = null;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (name.getNamespace() == null) {
                    RESULT = new Scalar(nameleft, nameright, name.getName(),
                            Scalar.TYPE_STRING);
                }
                else {
                    RESULT = name;
                }

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 336: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (name.getNamespace() != null) {
                    name.getNamespace().setLocal(true);
                }
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 337: // scalar ::= T_NS_SEPARATOR namespace_name
            {
                Expression RESULT = null;
                final int sleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int sright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object s = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int nameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int nameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final FullyQualifiedReference name = (FullyQualifiedReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                NamespaceReference namespace = name.getNamespace();
                if (namespace == null) {
                    namespace = new NamespaceReference(sleft, sright, "");
                    name.setNamespace(namespace);
                }
                namespace.setGlobal(true);
                namespace.setStart(namespace.sourceStart() - 1);
                RESULT = name;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 338: // scalar ::= common_scalar
            {
                Expression RESULT = null;
                final int scalarleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int scalarright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression scalar = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = scalar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 339: // scalar ::= T_QUATE encaps_list T_QUATE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Quote quote = new Quote(startleft, endright, list,
                        Quote.QT_QUOTE);
                RESULT = quote;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 340: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final String start = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Quote hereDoc = new Quote(startleft, endright, list,
                        Quote.QT_HEREDOC);
                RESULT = hereDoc;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        52/* scalar */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 341: // static_array_pair_list ::=
            {
                List RESULT = null;

                final List list = new LinkedList();
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        53/* static_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 342: // static_array_pair_list ::=
                      // non_empty_static_array_pair_list possible_comma
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        53/* static_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 343: // possible_comma ::=
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        54/* possible_comma */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 344: // possible_comma ::= T_COMMA
            {
                final Object RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        54/* possible_comma */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 345: // non_empty_static_array_pair_list ::=
                      // non_empty_static_array_pair_list T_COMMA static_scalar
                      // T_DOUBLE_ARROW static_scalar
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression key = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ArrayElement element = new ArrayElement(keyleft,
                        valueright, key, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        55/* non_empty_static_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 346: // non_empty_static_array_pair_list ::=
                      // non_empty_static_array_pair_list T_COMMA static_scalar
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ArrayElement element = new ArrayElement(valueleft,
                        valueright, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        55/* non_empty_static_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 347: // non_empty_static_array_pair_list ::= static_scalar
                      // T_DOUBLE_ARROW static_scalar
            {
                List RESULT = null;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression key = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final ArrayElement element = new ArrayElement(keyleft,
                        valueright, key, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        55/* non_empty_static_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 348: // non_empty_static_array_pair_list ::= static_scalar
            {
                List RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final ArrayElement element = new ArrayElement(valueleft,
                        valueright, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        55/* non_empty_static_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 349: // expr ::= r_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        56/* expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 350: // expr ::= expr_without_variable
            {
                Expression RESULT = null;
                final int ewvleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int ewvright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression ewv = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = ewv;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        56/* expr */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 351: // r_variable ::= variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        103/* r_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 352: // w_variable ::= variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        77/* w_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 353: // rw_variable ::= variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        105/* rw_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 354: // variable ::= base_variable_with_function_calls
                      // T_OBJECT_OPERATOR object_property method_or_not
                      // variable_properties
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int memberPropertyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int memberPropertyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression memberProperty = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int propertyListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int propertyListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final List propertyList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // get the last property
                Expression firstVarProperty = null;
                if (paramsList == null) {
                    firstVarProperty = memberProperty;
                }
                else {
                    if (memberProperty.getClass().equals(SimpleReference.class)) {
                        firstVarProperty = new PHPCallExpression(
                                memberPropertyleft, paramsListright, null,
                                (SimpleReference) memberProperty, paramsList);
                    }
                    else {
                        firstVarProperty = new ReflectionCallExpression(
                                memberPropertyleft, paramsListright, null,
                                memberProperty, paramsList);
                    }
                }

                // then get the aggregated list of properties (->...->...->...)
                final LinkedList list = (LinkedList) propertyList;
                list.addFirst(firstVarProperty);

                // now create the dispatch(es) nodes
                Expression dispatcher = var;

                final Iterator listIt = list.iterator();
                while (listIt.hasNext()) {
                    final Expression property = (Expression) listIt.next();
                    dispatcher = parser.createDispatch(dispatcher, property);
                }

                RESULT = dispatcher;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        92/* variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 355: // variable ::= base_variable_with_function_calls
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        92/* variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 356: // variable_properties ::= variable_properties
                      // variable_property
            {
                List RESULT = null;
                final int variablesleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int variablesright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List variables = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int variablePropertyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int variablePropertyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression variableProperty = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                variables.add(variableProperty);
                RESULT = variables;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        89/* variable_properties */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 357: // variable_properties ::=
            {
                List RESULT = null;

                RESULT = new LinkedList();

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        89/* variable_properties */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 358: // variable_property ::= T_OBJECT_OPERATOR object_property
                      // method_or_not
            {
                Expression RESULT = null;
                final int memberPropertyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int memberPropertyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression memberProperty = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                Expression result = null;
                if (paramsList == null) {
                    result = memberProperty;
                }
                else {
                    if (memberProperty.getClass().equals(SimpleReference.class)) {
                        result = new PHPCallExpression(memberPropertyleft,
                                paramsListright, null,
                                (SimpleReference) memberProperty, paramsList);
                    }
                    else {
                        result = new ReflectionCallExpression(
                                memberPropertyleft, paramsListright, null,
                                memberProperty, paramsList);
                    }
                }
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        107/* variable_property */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 359: // method_or_not ::= T_OPEN_PARENTHESE
                      // function_call_parameter_list T_CLOSE_PARENTHESE
            {
                PHPCallArgumentsList RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int paramsListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int paramsListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList paramsList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                paramsList.setStart(startright);
                paramsList.setEnd(endleft);
                RESULT = paramsList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        88/* method_or_not */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 360: // method_or_not ::=
            {
                final PHPCallArgumentsList RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        88/* method_or_not */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 361: // variable_without_objects ::= reference_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        106/* variable_without_objects */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 362: // variable_without_objects ::= simple_indirect_reference
                      // reference_variable
            {
                Expression RESULT = null;
                final int ref_countleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int ref_countright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Integer ref_count = (Integer) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // the ref_count counts the number of reflection (DOLLAR sign)
                // so now we should
                // accomulate the dolars into reflection variables
                Expression finalVar = var;
                for (int i = 0; i < ref_count.intValue(); i++) {
                    finalVar = new ReflectionVariableReference(ref_countright
                            - i - 1, varright, finalVar);
                }
                RESULT = finalVar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        106/* variable_without_objects */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 363: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM
                      // variable_without_objects
            {
                StaticFieldAccess RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final StaticFieldAccess staticFieldAccess = new StaticFieldAccess(
                        classNameleft, varright, className, var);
                RESULT = staticFieldAccess;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        108/* static_member */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 364: // static_member ::= variable_class_name
                      // T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
            {
                StaticFieldAccess RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final StaticFieldAccess staticFieldAccess = new StaticFieldAccess(
                        classNameleft, varright, className, var);
                RESULT = staticFieldAccess;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        108/* static_member */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 365: // variable_class_name ::= reference_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        58/* variable_class_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 366: // base_variable_with_function_calls ::= base_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        118/* base_variable_with_function_calls */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 367: // base_variable_with_function_calls ::= function_call
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        118/* base_variable_with_function_calls */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 368: // base_variable ::= reference_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        114/* base_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 369: // base_variable ::= simple_indirect_reference
                      // reference_variable
            {
                Expression RESULT = null;
                final int ref_countleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int ref_countright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Integer ref_count = (Integer) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                // the ref_count counts the number of reflection (DOLLAR sign)
                // so now we should
                // accomulate the dolars into reflection variables
                Expression finalVar = var;
                for (int i = 0; i < ref_count.intValue(); i++) {
                    finalVar = new ReflectionVariableReference(ref_countright
                            - i - 1, varright, finalVar);
                }
                RESULT = finalVar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        114/* base_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 370: // base_variable ::= static_member
            {
                Expression RESULT = null;
                final int staticFieldAccessleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int staticFieldAccessright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final StaticFieldAccess staticFieldAccess = (StaticFieldAccess) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = staticFieldAccess;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        114/* base_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 371: // reference_variable ::= reference_variable T_OPEN_RECT
                      // dim_offset T_CLOSE_RECT
            {
                Expression RESULT = null;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression varName = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int indexleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int indexright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression index = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                Expression var;
                if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference
                                                                             // -
                                                                             // $a
                    var = new ArrayVariableReference(varNameleft, endright,
                            ((SimpleReference) varName).getName(), index,
                            ArrayVariableReference.VARIABLE_ARRAY);
                }
                else {
                    var = new ReflectionArrayVariableReference(varNameleft,
                            endright, varName, index,
                            ReflectionArrayVariableReference.VARIABLE_ARRAY);
                }
                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        57/* reference_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 372: // reference_variable ::= reference_variable T_CURLY_OPEN
                      // expr T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression varName = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int indexleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int indexright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression index = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                Expression var;
                if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference
                                                                             // -
                                                                             // $a
                    var = new ArrayVariableReference(varNameleft, endright,
                            ((SimpleReference) varName).getName(), index,
                            ArrayVariableReference.VARIABLE_HASHTABLE);
                }
                else {
                    var = new ReflectionArrayVariableReference(varNameleft,
                            endright, varName, index,
                            ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
                }
                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        57/* reference_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 373: // reference_variable ::= compound_variable
            {
                Expression RESULT = null;
                final int comp_varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int comp_varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression comp_var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = comp_var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        57/* reference_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 374: // compound_variable ::= tracked_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final VariableReference var = (VariableReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        59/* compound_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 375: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr
                      // T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReflectionVariableReference var = new ReflectionVariableReference(
                        startleft, endright, expr);
                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        59/* compound_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 376: // dim_offset ::=
            {
                final Expression RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        60/* dim_offset */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 377: // dim_offset ::= expr
            {
                Expression RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = expr;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        60/* dim_offset */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 378: // object_property ::= object_dim_list
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        61/* object_property */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 379: // object_property ::= variable_without_objects
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        61/* object_property */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 380: // object_dim_list ::= object_dim_list T_OPEN_RECT
                      // dim_offset T_CLOSE_RECT
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int indexleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int indexright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression index = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                Expression varArray;
                if (var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference
                                                                         // - $a
                    varArray = new ArrayVariableReference(varleft, endright,
                            ((SimpleReference) var).getName(), index,
                            ArrayVariableReference.VARIABLE_ARRAY);
                }
                else {
                    varArray = new ReflectionArrayVariableReference(varleft,
                            endright, var, index,
                            ReflectionArrayVariableReference.VARIABLE_ARRAY);
                }
                RESULT = varArray;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        62/* object_dim_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 381: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr
                      // T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int indexleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int indexright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression index = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                Expression varArray;
                if (var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference
                                                                         // - $a
                    varArray = new ArrayVariableReference(varleft, endright,
                            ((SimpleReference) var).getName(), index,
                            ArrayVariableReference.VARIABLE_HASHTABLE);
                }
                else {
                    varArray = new ReflectionArrayVariableReference(varleft,
                            endright, var, index,
                            ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
                }
                RESULT = varArray;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        62/* object_dim_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 382: // object_dim_list ::= variable_name
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = var;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        62/* object_dim_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 383: // variable_name ::= string_st
            {
                Expression RESULT = null;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String varName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new SimpleReference(varNameleft, varNameright, varName);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        63/* variable_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 384: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new ReflectionVariableReference(startleft, endright,
                        expr);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        63/* variable_name */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 385: // simple_indirect_reference ::= T_DOLLAR
            {
                Integer RESULT = null;

                RESULT = new Integer(1);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        64/* simple_indirect_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 386: // simple_indirect_reference ::= simple_indirect_reference
                      // T_DOLLAR
            {
                Integer RESULT = null;
                final int refleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int refright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Integer ref = (Integer) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                RESULT = new Integer(1 + ref.intValue());

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        64/* simple_indirect_reference */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 387: // assignment_list ::= assignment_list T_COMMA
                      // assignment_list_element
            {
                List RESULT = null;
                final int listElementsleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listElementsright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List listElements = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int elementleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int elementright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression element = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                if (element != null) {
                    listElements.add(element);
                }
                RESULT = listElements;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        65/* assignment_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 388: // assignment_list ::= assignment_list_element
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List listElements = new LinkedList();
                if (var != null) {
                    listElements.add(var);
                }
                RESULT = listElements;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        65/* assignment_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 389: // assignment_list_element ::= variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        66/* assignment_list_element */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 390: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE
                      // assignment_list T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int varListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int varListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List varList = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ListVariable vars = new ListVariable(startleft, endright,
                        varList);
                RESULT = vars;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        66/* assignment_list_element */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 391: // assignment_list_element ::=
            {
                final Expression RESULT = null;

                // RESULT = null;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        66/* assignment_list_element */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 392: // array_pair_list ::=
            {
                List RESULT = null;

                final List list = new LinkedList();
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        67/* array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 393: // array_pair_list ::= non_empty_array_pair_list
                      // possible_comma
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;

                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        67/* array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 394: // non_empty_array_pair_list ::= non_empty_array_pair_list
                      // T_COMMA expr T_DOUBLE_ARROW expr
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression key = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ArrayElement element = new ArrayElement(keyleft,
                        valueright, key, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 4)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 395: // non_empty_array_pair_list ::= non_empty_array_pair_list
                      // T_COMMA expr
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ArrayElement element = new ArrayElement(exprleft,
                        exprright, expr);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 396: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr
            {
                List RESULT = null;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression key = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final ArrayElement element = new ArrayElement(keyleft,
                        valueright, key, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 397: // non_empty_array_pair_list ::= expr
            {
                List RESULT = null;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final ArrayElement element = new ArrayElement(exprleft,
                        exprright, expr);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 398: // non_empty_array_pair_list ::= non_empty_array_pair_list
                      // T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression key = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReferenceExpression value = new ReferenceExpression(
                        startleft, varright, var);
                final ArrayElement element = new ArrayElement(keyleft,
                        varright, key, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 399: // non_empty_array_pair_list ::= non_empty_array_pair_list
                      // T_COMMA T_REFERENCE w_variable
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReferenceExpression ref = new ReferenceExpression(
                        startleft, varright, var);
                final ArrayElement element = new ArrayElement(startleft,
                        varright, ref);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . */
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action5(
            int CUP$CompilerAstParser$act_num,
            java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
            java.util.Stack CUP$CompilerAstParser$stack,
            int CUP$CompilerAstParser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$CompilerAstParser$result;

        /* select the action based on the action number */
        switch (CUP$CompilerAstParser$act_num) {
            /* . . . . . . . . . . . . . . . . . . . . */
            case 400: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW
                      // T_REFERENCE w_variable
            {
                List RESULT = null;
                final int keyleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int keyright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final Expression key = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final ReferenceExpression value = new ReferenceExpression(
                        startleft, varright, var);
                final ArrayElement element = new ArrayElement(keyleft,
                        varright, key, value);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 401: // non_empty_array_pair_list ::= T_REFERENCE w_variable
            {
                List RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final ReferenceExpression ref = new ReferenceExpression(
                        startleft, varright, var);
                final ArrayElement element = new ArrayElement(startleft,
                        varright, ref);
                list.add(element);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        68/* non_empty_array_pair_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 402: // encaps_list ::= encaps_list encaps_var
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                list.add(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        69/* encaps_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 403: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE
            {
                List RESULT = null;
                final int listleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int listright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final List list = (List) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int stringleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int stringright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String string = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar scalar = new Scalar(stringleft, stringright,
                        string, string == null ? Scalar.TYPE_UNKNOWN
                                : Scalar.TYPE_STRING);
                list.add(scalar);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        69/* encaps_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 404: // encaps_list ::= encaps_var
            {
                List RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                list.add(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        69/* encaps_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 405: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var
            {
                List RESULT = null;
                final int stringleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int stringright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String string = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final List list = new LinkedList();
                final Scalar scalar = new Scalar(stringleft, stringright,
                        string, string == null ? Scalar.TYPE_UNKNOWN
                                : Scalar.TYPE_STRING);
                list.add(scalar);
                list.add(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        69/* encaps_list */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 406: // encaps_var ::= tracked_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final VariableReference var = (VariableReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        71/* encaps_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 407: // encaps_var ::= tracked_variable T_OPEN_RECT
                      // encaps_var_offset T_CLOSE_RECT
            {
                Expression RESULT = null;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final VariableReference varName = (VariableReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int indexleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int indexright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression index = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference var = new ArrayVariableReference(
                        varNameleft, endright, varName.getName(), index,
                        ArrayVariableReference.VARIABLE_ARRAY);
                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        71/* encaps_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 408: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR
                      // string_st
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final VariableReference var = (VariableReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int stringleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int stringright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String string = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference property = new VariableReference(
                        stringleft, stringright, string);
                final Expression dispatch = parser
                        .createDispatch(var, property);
                RESULT = dispatch;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        71/* encaps_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 409: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr
                      // T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReflectionVariableReference var = new ReflectionVariableReference(
                        startleft, endright, expr);
                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        71/* encaps_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 410: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES
                      // T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT
                      // T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 5)).value;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).right;
                final String varName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 4)).value;
                final int indexleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int indexright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression index = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final VariableReference indexedVar = new ArrayVariableReference(
                        startleft, endright, varName, index,
                        ArrayVariableReference.VARIABLE_ARRAY);
                RESULT = indexedVar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        71/* encaps_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 5)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 411: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable
                      // T_CURLY_CLOSE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object start = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ReflectionVariableReference ref = new ReflectionVariableReference(
                        startleft, endright, var);
                RESULT = ref;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        71/* encaps_var */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 412: // encaps_var_offset ::= string_st
            {
                Expression RESULT = null;
                final int stringleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int stringright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String string = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar scalar = new Scalar(stringleft, stringright,
                        string, Scalar.TYPE_STRING);
                RESULT = scalar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        72/* encaps_var_offset */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 413: // encaps_var_offset ::= T_NUM_STRING
            {
                Expression RESULT = null;
                final int numleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int numright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String num = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Scalar scalar = new Scalar(numleft, numright, num,
                        Scalar.TYPE_REAL);
                RESULT = scalar;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        72/* encaps_var_offset */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 414: // encaps_var_offset ::= tracked_variable
            {
                Expression RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final VariableReference var = (VariableReference) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = var;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        72/* encaps_var_offset */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 415: // internal_functions_in_yacc ::= T_ISSET
                      // T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final String start = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int openParleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int openParright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object openPar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int varListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final PHPCallArgumentsList varList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                varList.setStart(openParright);
                varList.setEnd(endleft);
                final SimpleReference name = new SimpleReference(startleft,
                        startright, "isset");
                final PHPCallExpression result = new PHPCallExpression(
                        startleft, endright, null, name, varList);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        73/* internal_functions_in_yacc */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 416: // internal_functions_in_yacc ::= T_EMPTY
                      // T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final String start = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int openParleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int openParright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object openPar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final SimpleReference name = new SimpleReference(startleft,
                        startright, "empty");
                final PHPCallArgumentsList varList = new PHPCallArgumentsList(
                        openParright, endleft);
                varList.addNode(var);
                final PHPCallExpression result = new PHPCallExpression(
                        startleft, endright, null, name, varList);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        73/* internal_functions_in_yacc */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 417: // internal_functions_in_yacc ::= T_INCLUDE expr
            {
                Expression RESULT = null;
                final int includeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int includeright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String include = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Include result = new Include(includeleft, exprright,
                        expr, Include.IT_INCLUDE);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        73/* internal_functions_in_yacc */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 418: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr
            {
                Expression RESULT = null;
                final int includeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int includeright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String include = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Include result = new Include(includeleft, exprright,
                        expr, Include.IT_INCLUDE_ONCE);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        73/* internal_functions_in_yacc */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 419: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE
                      // expr T_CLOSE_PARENTHESE
            {
                Expression RESULT = null;
                final int startleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).left;
                final int startright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).right;
                final String start = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 3)).value;
                final int openParleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int openParright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Object openPar = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int endleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int endright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Object end = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final SimpleReference name = new SimpleReference(startleft,
                        startright, "eval");
                final PHPCallArgumentsList exprList = new PHPCallArgumentsList(
                        openParright, endleft);
                exprList.addNode(expr);
                final PHPCallExpression result = new PHPCallExpression(
                        startleft, endright, null, name, exprList);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        73/* internal_functions_in_yacc */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 3)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 420: // internal_functions_in_yacc ::= T_REQUIRE expr
            {
                Expression RESULT = null;
                final int includeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int includeright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String include = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Include result = new Include(includeleft, exprright,
                        expr, Include.IT_REQUIRE);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        73/* internal_functions_in_yacc */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 421: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr
            {
                Expression RESULT = null;
                final int includeleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).left;
                final int includeright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).right;
                final String include = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 1)).value;
                final int exprleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int exprright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final Include result = new Include(includeleft, exprright,
                        expr, Include.IT_REQUIRE_ONCE);
                RESULT = result;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        73/* internal_functions_in_yacc */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 1)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 422: // isset_variables ::= variable
            {
                PHPCallArgumentsList RESULT = null;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final PHPCallArgumentsList list = new PHPCallArgumentsList();
                list.addNode(var);
                RESULT = list;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        109/* isset_variables */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 423: // isset_variables ::= isset_variables T_COMMA variable
            {
                PHPCallArgumentsList RESULT = null;
                final int varListleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int varListright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final PHPCallArgumentsList varList = (PHPCallArgumentsList) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                varList.addNode(var);
                RESULT = varList;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        109/* isset_variables */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 424: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM
                      // T_STRING
            {
                StaticConstantAccess RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String varName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ConstantReference name = new ConstantReference(
                        varNameleft, varNameright, varName);
                final StaticConstantAccess constant = new StaticConstantAccess(
                        classNameleft, varNameright, className, name);
                RESULT = constant;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        112/* class_constant */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 425: // class_constant ::= variable_class_name
                      // T_PAAMAYIM_NEKUDOTAYIM T_STRING
            {
                StaticConstantAccess RESULT = null;
                final int classNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).left;
                final int classNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).right;
                final Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 2)).value;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String varName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                final ConstantReference name = new ConstantReference(
                        varNameleft, varNameright, varName);
                final StaticConstantAccess constant = new StaticConstantAccess(
                        classNameleft, varNameright, className, name);
                RESULT = constant;

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        112/* class_constant */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 2)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 426: // tracked_variable ::= T_VARIABLE
            {
                VariableReference RESULT = null;
                final int varNameleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int varNameright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String varName = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;

                RESULT = new VariableReference(varNameleft, varNameright,
                        varName, PHPVariableKind.LOCAL);

                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        110/* tracked_variable */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 427: // string_st ::= T_STRING
            {
                String RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String value = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = value;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        74/* string_st */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
            case 428: // string_st ::= T_DEFINE
            {
                String RESULT = null;
                final int valueleft = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).left;
                final int valueright = ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).right;
                final String value = (String) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                        .elementAt(CUP$CompilerAstParser$top - 0)).value;
                RESULT = value;
                CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(
                        74/* string_st */,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).left,
                        ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack
                                .elementAt(CUP$CompilerAstParser$top - 0)).right,
                        RESULT);
            }
                return CUP$CompilerAstParser$result;

                /* . . . . . . */
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
